<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/packet/http/easy_http_handler.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;easy_connection.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_http_handler.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_message_begin</name><parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_headers_complete</name><parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_message_complete</name><parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_on_path</name><parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_on_proto</name><parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_on_query_string</name><parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_on_fragment</name><parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_on_body</name><parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_on_host</name><parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_on_header_field</name> <parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_on_header_value</name> <parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_http_string_end</name><parameter_list>(<parameter><decl><type><name>easy_buf_string_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_http_header_string_end</name><parameter_list>(<parameter><decl><type><name>easy_http_request_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_http_parse_args</name><parameter_list>(<parameter><decl><type><name>easy_http_request_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_http_add_args</name><parameter_list>(<parameter><decl><type><name>easy_http_request_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p3</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_encode_chunk</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>chunk_length</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_header_case_sensitive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_max_header_size</name> <init>= <expr><name>HTTP_MAX_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * easy http request settings
 */</comment>
<decl_stmt><decl><type><name>http_parser_settings</name></type> <name>easy_http_request_settings</name> <init>= <expr><block>{
    <expr><name>easy_http_request_message_begin</name></expr>,
    <expr><name>easy_http_request_on_path</name></expr>,
    <expr><name>easy_http_request_on_query_string</name></expr>,
    <expr><name>NULL</name></expr>,
    <expr><name>easy_http_request_on_proto</name></expr>,
    <expr><name>easy_http_request_on_host</name></expr>,
    <expr><name>easy_http_request_on_fragment</name></expr>,
    <expr><name>easy_http_request_on_header_field</name></expr>,
    <expr><name>easy_http_request_on_header_value</name></expr>,
    <expr><name>easy_http_request_headers_complete</name></expr>,
    <expr><name>easy_http_request_on_body</name></expr>,
    <expr><name>easy_http_request_message_complete</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>http_parser_settings</name></type> <name>easy_http_response_settings</name> <init>= <expr><block>{
    <expr><name>easy_http_request_message_begin</name></expr>,
    <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
    <expr><name>easy_http_request_on_header_field</name></expr>,
    <expr><name>easy_http_request_on_header_value</name></expr>,
    <expr><name>easy_http_request_headers_complete</name></expr>,
    <expr><name>easy_http_request_on_body</name></expr>,
    <expr><name>easy_http_request_message_complete</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_http_string_end</name><parameter_list>(<parameter><decl><type><name>easy_buf_string_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æheaderå¯¹å å¥å°tableä¸­
 */</comment>
<function><type><name>void</name></type> <name>easy_http_add_header</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_hash_string_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_string_pair_t</name>      <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator><name>easy_string_pair_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_string_pair_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_buf_string_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_buf_string_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_hash_string_add</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å é¤header
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>easy_http_del_header</name><parameter_list>(<parameter><decl><type><name>easy_hash_string_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_string_pair_t</name>      <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>easy_hash_string_del</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>easy_buf_string_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å¾å°ä¸headerçvalue
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>easy_http_get_header</name><parameter_list>(<parameter><decl><type><name>easy_hash_string_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_string_pair_t</name>      <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>easy_hash_string_get</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>easy_buf_string_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å¾å°argsçåæ°
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>easy_http_get_args</name><parameter_list>(<parameter><decl><type><name>easy_http_request_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>args_parsed</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_http_parse_args</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>args_table</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>easy_http_get_header</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>args_table</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// http parser callback</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_message_begin</name><parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_http_request_t</name>     <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>easy_http_request_t</name> <operator>*</operator><operator>)</operator> <name><name>parser</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>message_begin_called</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_headers_complete</name><parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_http_request_t</name>     <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>easy_http_request_t</name> <operator>*</operator><operator>)</operator> <name><name>parser</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>header_complete_called</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_http_header_string_end</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>flags</name></name> <operator>==</operator> <name>HTTP_HEAD</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_message_complete</name><parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_http_request_t</name>     <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>easy_http_request_t</name> <operator>*</operator><operator>)</operator> <name><name>parser</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>message_complete_called</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_HTTP_REQUEST_CB_DEFINE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>                                       \
    <cpp:value>static int easy_http_request_on_##name(http_parser *parser,                 \
                                           const char *value, size_t len)  {    \
        easy_http_request_t     *p;                                             \
        p = (easy_http_request_t*) parser-&gt;data;                                \
        easy_buf_string_append(&amp;p-&gt;str_##name, value, len);                     \
        return 0;                                                               \
    }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>EASY_HTTP_REQUEST_CB_DEFINE</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EASY_HTTP_REQUEST_CB_DEFINE</name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EASY_HTTP_REQUEST_CB_DEFINE</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EASY_HTTP_REQUEST_CB_DEFINE</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EASY_HTTP_REQUEST_CB_DEFINE</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_on_body</name><parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_http_request_t</name>     <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>packet_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>easy_http_request_t</name> <operator>*</operator><operator>)</operator> <name><name>parser</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>set_data</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>packet_id</name> <operator>=</operator> <call><name>easy_connection_get_packet_id</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>easy_session_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_hash_find</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><name>packet_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"%s, packet_id=%ld\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>packet_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// set_data</comment>
        <expr_stmt><expr><call><name>ev_timer_again</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>ipacket</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>content_length</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><call>(<modifier>*</modifier><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>set_data</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>easy_buf_string_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>str_body</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_on_header_field</name> <parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_http_request_t</name>         <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>easy_http_request_t</name> <operator>*</operator><operator>)</operator> <name><name>parser</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

    <comment type="line">// new name</comment>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>last_was_value</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>last_header</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>last_header</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>end_header</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>last_header</name></name> <operator>=</operator> <operator>(</operator><name>easy_string_pair_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_string_pair_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>end_header</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>last_header</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>last_header</name></name> <operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_buf_string_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>last_header</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>last_was_value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_request_on_header_value</name> <parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_http_request_t</name>         <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>easy_http_request_t</name> <operator>*</operator><operator>)</operator> <name><name>parser</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>headers_in</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <name>EASY_HTTP_HDR_MAX_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// new value</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>last_was_value</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>easy_header_case_sensitive</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>easy_string_capitalize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>last_header</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>last_header</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>easy_hash_string_add</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers_in</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>last_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_buf_string_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>last_header</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>last_was_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æ°åä¸ä¸ªeasy_http_request_t
 */</comment>
<function><type><name>int</name></type> <name>easy_http_request_create</name> <parameter_list>(<parameter><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>http_parser_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_http_request_t</name>     <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>easy_http_request_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_http_request_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>http_parser_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>last_was_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>headers_in</name></name> <operator>=</operator> <call><name>easy_header_create_table</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>headers_out</name></name> <operator>=</operator> <call><name>easy_header_create_table</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * easy io callback
 * ç¨äºserverç«¯
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>easy_http_server_on_decode</name><parameter_list>(<parameter><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_http_request_t</name>     <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>plast</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>n</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>hcc</name></decl>;</decl_stmt>

    <comment type="line">// create http request</comment>
    <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>user_data</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>easy_http_request_create</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>HTTP_REQUEST</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_http_request_create failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>easy_http_request_t</name> <operator>*</operator><operator>)</operator> <name><name>m</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>plast</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>parsed_byte</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name> <operator>-</operator> <name>plast</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>hcc</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>header_complete_called</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>http_parser_execute</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>easy_http_request_settings</name></expr></argument>, <argument><expr><name>plast</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>http_parser_has_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parsed_byte</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

    <comment type="line">// æ²¡è¯»å®</comment>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>header_complete_called</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>parsed_byte</name></name> <operator>&gt;</operator> <name>easy_http_max_header_size</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>message_complete_called</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>set_data</name></name> <operator>&amp;&amp;</operator> <name>hcc</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parsed_byte</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next_read_len</name></name> <operator>=</operator> <name>EASY_IO_BUFFER_SIZE</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>content_length</name></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>str_body</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>parsed_byte</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>http_should_keep_alive</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>wait_close</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>wait_close</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>keep_alive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ååºçæ¶åencode, ç¨äºserverç«¯
 */</comment>
<function><type><name>int</name></type> <name>easy_http_server_on_encode</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_http_request_t</name>     <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_string_pair_t</name>      <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>chunk_length</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>easy_http_request_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>chunk_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>is_raw_header</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// header length</comment>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>status_line</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>easy_buf_string_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>status_line</name></name></expr></argument>, <argument><expr><name>EASY_HTTP_STATUS_200</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>content_type</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>easy_buf_string_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>content_type</name></name></expr></argument>, <argument><expr><literal type="string">"text/html"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">128</literal> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>status_line</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>content_type</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
        <comment type="line">// headers</comment>
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>headers_out</name><operator>-&gt;</operator><name>count</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <macro><name>easy_list_for_each_entry</name><argument_list>(<argument>header</argument>, <argument>&amp;p-&gt;headers_out-&gt;list</argument>, <argument>list</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>header</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>header</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="line">// "Transfer-Encoding: chunked\r\n"</comment>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>send_chunk</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Transfer-Encoding: chunked\r\n"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>content_length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <call><name>easy_buf_list_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// concat headers</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>=</operator> <call><name>easy_buf_create</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// status line</comment>
        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">"HTTP/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>http_major</name></name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>http_minor</name></name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>status_line</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>status_line</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>EASY_HTTP_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// headers</comment>
        <macro><name>easy_list_for_each_entry</name><argument_list>(<argument>header</argument>, <argument>&amp;p-&gt;headers_out-&gt;list</argument>, <argument>list</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>EASY_HTTP_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>del_default_header</name></name></expr>)</condition> <block>{<block_content>
            <comment type="line">// Content-Type, Content-Length</comment>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Type: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>content_type</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>content_type</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>send_chunk</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>EASY_HTTP_CRLF</name> <literal type="string">"Transfer-Encoding: chunked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>content_length</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>EASY_HTTP_CRLF</name> <literal type="string">"Content-Length: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_num_to_str</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>content_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>EASY_HTTP_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// keep alive</comment>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>wait_close</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">"Connection: close"</literal><name>EASY_HTTP_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>keep_alive</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">"Connection: keep-alive"</literal><name>EASY_HTTP_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// header end</comment>
        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>EASY_HTTP_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>easy_request_addbuf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// chunk</comment>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>send_chunk</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>chunk_length</name> <operator>=</operator> <call><name>easy_buf_list_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>chunk_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_http_encode_chunk</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>chunk_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_request_addbuf_list</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_http_encode_chunk</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>retcode</name></name> <operator>==</operator> <name>EASY_OK</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">2</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>easy_request_addbuf_list</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * è¯·æ±çæ¶åencode, ç¨äºclientç«¯
 */</comment>
<function><type><name>int</name></type> <name>easy_http_client_on_encode</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_http_packet_t</name>      <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_string_pair_t</name>      <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>size</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>easy_http_packet_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>send_queue</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>method</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>is_raw_header</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>length</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>HTTP_POST</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>str_query_string</name><operator>.</operator><name>len</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">128</literal> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>str_path</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>str_query_string</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
        <comment type="line">// headers</comment>
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>headers_out</name><operator>-&gt;</operator><name>count</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <macro><name>easy_list_for_each_entry</name><argument_list>(<argument>header</argument>, <argument>&amp;p-&gt;headers_out-&gt;list</argument>, <argument>list</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>header</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>header</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="line">// concat headers</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>=</operator> <call><name>easy_buf_create</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// request line</comment>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>HTTP_POST</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">"POST "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>HTTP_HEAD</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">"GET "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>str_path</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>str_path</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>str_path</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// query string</comment>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>method</name></name> <operator>!=</operator> <name>HTTP_POST</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>str_query_string</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>str_query_string</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>str_query_string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">" HTTP/1.1"</literal><name>EASY_HTTP_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// headers</comment>
        <macro><name>easy_list_for_each_entry</name><argument_list>(<argument>header</argument>, <argument>&amp;p-&gt;headers_out-&gt;list</argument>, <argument>list</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>EASY_HTTP_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>del_default_header</name></name></expr>)</condition> <block>{<block_content>
            <comment type="line">// Content-Length</comment>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>HTTP_POST</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Type: "</literal>
                                            <literal type="string">"application/x-www-form-urlencoded"</literal>
                                            <name>EASY_HTTP_CRLF</name> <literal type="string">"Content-Length: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_num_to_str</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>EASY_HTTP_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>keep_alive</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">"Connection: keep-alive"</literal><name>EASY_HTTP_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// header end</comment>
        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_const_strcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>EASY_HTTP_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// post data</comment>
        <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>str_query_string</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>str_query_string</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>str_query_string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>easy_request_addbuf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_request_addbuf_list</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>easy_http_client_on_decode</name><parameter_list>(<parameter><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_http_request_t</name>     <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>plast</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>n</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>hcc</name></decl>;</decl_stmt>

    <comment type="line">// create http request</comment>
    <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>user_data</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>easy_http_request_create</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>HTTP_RESPONSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_http_request_create failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>easy_http_request_t</name> <operator>*</operator><operator>)</operator> <name><name>m</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>plast</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>parsed_byte</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name> <operator>-</operator> <name>plast</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>hcc</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>header_complete_called</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>http_parser_execute</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>easy_http_response_settings</name></expr></argument>, <argument><expr><name>plast</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>http_parser_has_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parsed_byte</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

    <comment type="line">// æ²¡è¯»å®</comment>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>header_complete_called</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>parsed_byte</name></name> <operator>&gt;</operator> <name>easy_http_max_header_size</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>message_complete_called</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>set_data</name></name> <operator>&amp;&amp;</operator> <name>hcc</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parsed_byte</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next_read_len</name></name> <operator>=</operator> <name>EASY_IO_BUFFER_SIZE</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>parsed_byte</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>http_should_keep_alive</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>wait_close</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>wait_close</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æ°åä¸ä¸ªeasy_http_request_t
 */</comment>
<function><type><name>easy_http_packet_t</name> <modifier>*</modifier></type><name>easy_http_packet_create</name> <parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_http_packet_t</name>      <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>easy_http_packet_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_http_packet_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>headers_out</name></name> <operator>=</operator> <call><name>easy_header_create_table</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * åå§åhandler
 */</comment>
<function><type><name>void</name></type> <name>easy_http_handler_init</name><parameter_list>(<parameter><decl><type><name>easy_io_handler_pt</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>, <parameter><decl><type><name>easy_io_process_pt</name> <modifier>*</modifier></type><name>process</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_io_handler_pt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>decode</name></name> <operator>=</operator> <name>easy_http_server_on_decode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>encode</name></name> <operator>=</operator> <name>easy_http_server_on_encode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name>process</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////////////////////////////</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>easy_htoi</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>digit</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>digit</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xdf</literal><operator>)</operator> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr> </then><else>: <expr><operator>(</operator><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>digit</name>                   <operator>*=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>digit</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xdf</literal><operator>)</operator> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr> </then><else>: <expr><operator>(</operator><name><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>digit</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_url_decode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>data</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>easy_htoi</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <operator>*</operator><name>data</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>dest</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><name>dest</name> <operator>-</operator> <name>str</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æä¸¤ä¸ªpath mergeèµ·æ¥
 */</comment>
<function><type><name>int</name></type> <name>easy_http_merge_path</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newpath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rootpath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addpath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>u</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>state</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>u</name> <operator>=</operator> <name>newpath</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ue</name> <operator>=</operator> <name>u</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rootpath</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>, <argument><expr><name>rootpath</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>newpath</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>u</name> <operator>=</operator> <name>newpath</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ue</name> <operator>=</operator> <name>u</name> <operator>+</operator> <operator>(</operator><name>len</name> <operator>-</operator> <name>size</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ue</name> <operator>&gt;</operator> <name>u</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>u</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>addpath</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>u</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// addpath</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>addpath</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <while>while<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>ue</name> <operator>||</operator> <name>u</name> <operator>&lt;</operator> <name>newpath</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>u</name> <operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>u</name> <operator>-=</operator> <name>state</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
                <while>while<condition>(<expr><name>u</name> <operator>&gt;=</operator> <name>newpath</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if<condition>(<expr><operator>*</operator><name>u</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>u</name><operator>++</operator></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><name>u</name> <operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>state</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>state</name> <operator>==</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>state</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><operator>*</operator><name>u</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_http_request_printf</name><parameter_list>(<parameter><decl><type><name>easy_http_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>buffer</name><index>[<expr><name>EASY_POOL_PAGE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>va_list</name></type>                 <name>args</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>easy_vsnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>EASY_POOL_PAGE_SIZE</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>easy_buf_check_write_space</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * add args to args_table
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_http_add_args</name><parameter_list>(<parameter><decl><type><name>easy_http_request_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_string_pair_t</name>      <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>p2</name> <operator>&lt;=</operator> <name>p1</name> <operator>&amp;&amp;</operator> <name>p3</name> <operator>&lt;=</operator> <name>p2</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator><name>easy_string_pair_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_string_pair_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>p2</name> <operator>-</operator> <name>p1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>++</operator> <name>p2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>p3</name> <operator>-</operator> <name>p2</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_hash_string_add</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>args_table</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * parse query string
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_http_parse_args</name><parameter_list>(<parameter><decl><type><name>easy_http_request_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>args_parsed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>str_query_string</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// dup</comment>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>str_query_string</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>str_query_string</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>str_query_string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ptr</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>str_query_string</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>args_table</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>args_table</name></name> <operator>=</operator> <call><name>easy_header_create_table</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// parser</comment>
    <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p1</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

    <while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>args_table</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name>EASY_HTTP_HDR_MAX_SIZE</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_http_add_args</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p1</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ptr</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>easy_http_add_args</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æheaderä¸çstringç¨0ç»å°¾
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_http_header_string_end</name><parameter_list>(<parameter><decl><type><name>easy_http_request_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_string_pair_t</name>      <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

    <comment type="line">// æstringç»å°¾å 0</comment>
    <expr_stmt><expr><call><name>easy_http_string_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>str_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_http_string_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>str_query_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_http_string_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>str_fragment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>easy_list_for_each_entry</name><argument_list>(<argument>t</argument>, <argument>&amp;p-&gt;headers_in-&gt;list</argument>, <argument>list</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_http_string_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_http_string_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_http_encode_chunk</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>chunk_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>=</operator> <call><name>easy_buf_create</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>chunk_length</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <call><name>lnprintf</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">"%lx"</literal><name>EASY_HTTP_CRLF</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>chunk_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chunk_length</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <macro><name>lnprintf</name><argument_list>(<argument>b-&gt;last</argument>, <argument>b-&gt;end - b-&gt;last</argument>, <argument>EASY_HTTP_CRLF<literal type="string">"0"</literal>EASY_HTTP_CRLF EASY_HTTP_CRLF</argument>)</argument_list></macro></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <call><name>lnprintf</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>EASY_HTTP_CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>easy_request_addbuf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_header_set_case_sensitive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>easy_header_case_sensitive</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>easy_hash_string_t</name> <modifier>*</modifier></type><name>easy_header_create_table</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>easy_hash_string_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>EASY_HTTP_HDR_MAX_SIZE</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>easy_header_case_sensitive</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_header_set_max_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>easy_http_max_header_size</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
