<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/io/easy_ssl.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_connection.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type>                     <name>easy_ssl_connection_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>easy_spin_t</name>             <modifier>*</modifier></type><name>easy_ssl_lock_cs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>__thread</name> <name>easy_baseth_t</name> <modifier>*</modifier></type><name>easy_baseth_self</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>easy_connection_str</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_ssl_info_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSL</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_handshake</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_ssl_connection_handshake_handler</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_ssl_handshake_handler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_io</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_ssl_clear_error</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_ssl_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_read</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pending</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_write</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_ssl_connection_error</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sslerr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_server_create</name><parameter_list>(<parameter><decl><type><name>easy_ssl_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_parse_set_value</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_ctx_create</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_certificate</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_generate_rsa512_key</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_dhparam</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_session_cache</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>session_cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_client_certificate</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_crl</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>crl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_handle_recv</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_ssl_client_handshake_handler</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_ctx_server_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_pass_phrase_cb</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rwflag</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal></expr></cpp:if> 
<comment type="block" format="doxygen">/**
 * åå§åssl
 */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>id_function</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>locking_function</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>CRYPTO_LOCK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>easy_ssl_lock_cs</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>easy_ssl_lock_cs</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>easy_ssl_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>easy_ssl_connection_index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SSL_library_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SSL_load_error_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ENGINE_load_builtin_engines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>OpenSSL_add_all_algorithms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>easy_ssl_connection_index</name> <operator>=</operator> <call><name>SSL_get_ex_new_index</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>easy_ssl_connection_index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"SSL_get_ex_new_index() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type>                     <name>num</name> <init>= <expr><call><name>CRYPTO_num_locks</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>easy_ssl_lock_cs</name> <operator>=</operator> <operator>(</operator><name>easy_spin_t</name> <operator>*</operator><operator>)</operator><call><name>easy_malloc</name><argument_list>(<argument><expr><name>num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_spin_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>easy_ssl_lock_cs</name></expr></argument>, <argument><expr><name>EASY_SPIN_INITER</name></expr></argument>, <argument><expr><name>num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_spin_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal></expr></cpp:if> 
        <expr_stmt><expr><call><name>CRYPTO_set_id_callback</name><argument_list>(<argument><expr><name>id_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CRYPTO_set_locking_callback</name><argument_list>(<argument><expr><name>locking_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * cleanup
 */</comment>
<function><type><name>int</name></type> <name>easy_ssl_cleanup</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ENGINE_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EVP_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CRYPTO_cleanup_all_ex_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal></expr></cpp:if> 
    <expr_stmt><expr><call><name>ERR_remove_state</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ERR_free_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//SSL_COMP_free();</comment>
    <comment type="line">//sk_SSL_COMP_free (SSL_COMP_get_compression_methods());</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal></expr></cpp:if> 
    <expr_stmt><expr><call><name>CRYPTO_mem_leaks_fp</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>easy_free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>easy_ssl_lock_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å»ºç«ssl connection
 */</comment>
<function><type><name>int</name></type> <name>easy_ssl_connection_create</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_ssl_connection_t</name>   <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>sc</name> <operator>=</operator> <call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_ssl_connection_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>sc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>connection</name></name> <operator>=</operator> <call><name>SSL_new</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>connection</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"SSL_new() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SSL_set_fd</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"SSL_set_fd() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_CLIENT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SSL_set_connect_state</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>SSL_set_accept_state</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SSL_set_ex_data</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>easy_ssl_connection_index</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"SSL_set_ex_data() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>session_reuse</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>session_reuse</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name></name> <operator>=</operator> <name>sc</name></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_ssl_connection_destroy</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sc</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>                     <name>n</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>SSL_RECEIVED_SHUTDOWN</name> <operator>|</operator> <name>SSL_SENT_SHUTDOWN</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SSL_set_shutdown</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_ssl_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>SSL_shutdown</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>ERR_peek_error</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æ¡æ
 */</comment>
<function><type><name>void</name></type> <name>easy_ssl_connection_handshake</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_io</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>n</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>easy_connection_t</name> <operator>*</operator><operator>)</operator><name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name><name>w</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"easy_ssl_connection_handshake: %s"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MSG_PEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"%s n: %d, error: %s(%d)\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>conn_has_error</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x16</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error_exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"ssl handshake: 0x%02Xd"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>easy_ssl_handshake</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <name>EASY_AGAIN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>easy_ssl_connection_handshake_handler</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>easy_ssl_connection_handshake_handler</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return;</return>
<label><name>error_exit</name>:</label>
    <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * clientæ¡æ
 */</comment>
<function><type><name>int</name></type> <name>easy_ssl_client_do_handshake</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_ssl_ctx_t</name>          <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>servername</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_ssl_ctx_server_t</name>   <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_ssl_t</name>              <modifier>*</modifier></type><name>ssl</name> <init>= <expr><name><name>easy_baseth_self</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>ssl</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>servername</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>server_name</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>client_ctx</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>servername</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>easy_hash_code</name><argument_list>(<argument><expr><name>servername</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>servername</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>(</operator><name>easy_ssl_ctx_server_t</name> <operator>*</operator><operator>)</operator><call><name>easy_hash_find_ex</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>client_map</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>easy_ssl_ctx_server_cmp</name></expr></argument>, <argument><expr><name>servername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>cs</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>ss</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_connection_create</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_ssl_connection_create\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// reuse</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>session_reuse</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>ssl_session</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>SSL_set_session</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>ssl_session</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"SSL_set_session() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// handshake</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>easy_ssl_handshake</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <name>EASY_AGAIN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>easy_ssl_client_handshake_handler</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>easy_ssl_client_handshake_handler</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>easy_ssl_client_handshake</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_io</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>easy_connection_t</name> <operator>*</operator><operator>)</operator><name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_client_do_handshake</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_ssl_client_handshake failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="block" format="doxygen">/**
 * ssl info callback
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_ssl_info_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSL</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>where</name> <operator>&amp;</operator> <name>SSL_CB_HANDSHAKE_START</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>easy_ssl_get_connection</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>handshaked</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>renegotiation</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
 * easy_ssl_handshake
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_handshake</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>n</name></decl>, <decl><type ref="prev"/><name>sslerr</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>easy_ssl_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>SSL_do_handshake</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"SSL_do_handshake: %d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>handshaked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <name>easy_ssl_read</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>easy_ssl_write</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal></expr></cpp:if> 
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>s3</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>s3</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <return>return <expr><name>EASY_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>sslerr</name> <operator>=</operator> <call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"SSL_get_error: %d"</literal></expr></argument>, <argument><expr><name>sslerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_WANT_READ</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ev_set_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>, <argument><expr><name>easy_ssl_handshake_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_set_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>, <argument><expr><name>easy_ssl_handshake_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_io_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>EASY_AGAIN</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_WANT_WRITE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ev_set_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>, <argument><expr><name>easy_ssl_handshake_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_set_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>, <argument><expr><name>easy_ssl_handshake_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_io_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>EASY_AGAIN</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_SYSCALL</name><operator>)</operator></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_ZERO_RETURN</name> <operator>||</operator> <call><name>ERR_peek_error</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"peer closed connection in SSL handshake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_ssl_connection_error</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sslerr</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"SSL_do_handshake() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * clear error
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_ssl_clear_error</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <while>while <condition>(<expr><call><name>ERR_peek_error</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_ssl_error</name><argument_list>(<argument><expr><name>EASY_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"ignoring stale global SSL error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * print ssl error
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_MAX_CONF_ERRSTR</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_ssl_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type>                 <name>args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>errstr</name><index>[<expr><name>EASY_MAX_CONF_ERRSTR</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>errstr</name> <operator>+</operator> <call><name>easy_vsnprintf</name><argument_list>(<argument><expr><name>errstr</name></expr></argument>, <argument><expr><name>EASY_MAX_CONF_ERRSTR</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>last</name> <operator>=</operator> <name>errstr</name> <operator>+</operator> <name>EASY_MAX_CONF_ERRSTR</name></expr>;</expr_stmt>

    <for>for <control>( <init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>last</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ERR_error_string_n</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>last</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>easy_log_format</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * easy_ssl_connection_error
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_ssl_connection_error</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sslerr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>level</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>level</name> <operator>=</operator> <name>EASY_LOG_ERROR</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_SYSCALL</name></expr>)</condition> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ECONNRESET</name>
                <operator>||</operator> <name>err</name> <operator>==</operator> <name>EPIPE</name>
                <operator>||</operator> <name>err</name> <operator>==</operator> <name>ENOTCONN</name>
                <operator>||</operator> <name>err</name> <operator>==</operator> <name>ETIMEDOUT</name>
                <operator>||</operator> <name>err</name> <operator>==</operator> <name>ECONNREFUSED</name>
                <operator>||</operator> <name>err</name> <operator>==</operator> <name>ENETDOWN</name>
                <operator>||</operator> <name>err</name> <operator>==</operator> <name>ENETUNREACH</name>
                <operator>||</operator> <name>err</name> <operator>==</operator> <name>EHOSTDOWN</name>
                <operator>||</operator> <name>err</name> <operator>==</operator> <name>EHOSTUNREACH</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>level</name> <operator>=</operator> <name>EASY_LOG_INFO</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_SSL</name></expr>)</condition> <block>{<block_content>

        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ERR_GET_REASON</name><argument_list>(<argument><expr><call><name>ERR_peek_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* handshake failures */</comment>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>SSL_R_BLOCK_CIPHER_PAD_IS_WRONG</name>                     <comment type="block">/*  129 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_DIGEST_CHECK_FAILED</name>                        <comment type="block">/*  149 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_LENGTH_MISMATCH</name>                            <comment type="block">/*  159 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10101000L</literal></expr></cpp:if> 
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_NO_CIPHERS_PASSED</name>                          <comment type="block">/*  182 */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_NO_CIPHERS_SPECIFIED</name>                       <comment type="block">/*  183 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_NO_SHARED_CIPHER</name>                           <comment type="block">/*  193 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_RECORD_LENGTH_MISMATCH</name>                     <comment type="block">/*  213 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_UNEXPECTED_MESSAGE</name>                         <comment type="block">/*  244 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_UNEXPECTED_RECORD</name>                          <comment type="block">/*  245 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_UNKNOWN_ALERT_TYPE</name>                         <comment type="block">/*  246 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_UNKNOWN_PROTOCOL</name>                           <comment type="block">/*  252 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_WRONG_VERSION_NUMBER</name>                       <comment type="block">/*  267 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC</name>        <comment type="block">/*  281 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">1000</literal> <comment type="block">/* SSL_R_SSLV3_ALERT_CLOSE_NOTIFY */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE</name>             <comment type="block">/* 1010 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_SSLV3_ALERT_BAD_RECORD_MAC</name>                 <comment type="block">/* 1020 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_TLSV1_ALERT_DECRYPTION_FAILED</name>              <comment type="block">/* 1021 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_TLSV1_ALERT_RECORD_OVERFLOW</name>                <comment type="block">/* 1022 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE</name>          <comment type="block">/* 1030 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE</name>              <comment type="block">/* 1040 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_SSLV3_ALERT_NO_CERTIFICATE</name>                 <comment type="block">/* 1041 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_SSLV3_ALERT_BAD_CERTIFICATE</name>                <comment type="block">/* 1042 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE</name>        <comment type="block">/* 1043 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED</name>            <comment type="block">/* 1044 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED</name>            <comment type="block">/* 1045 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN</name>            <comment type="block">/* 1046 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER</name>              <comment type="block">/* 1047 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_TLSV1_ALERT_UNKNOWN_CA</name>                     <comment type="block">/* 1048 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_TLSV1_ALERT_ACCESS_DENIED</name>                  <comment type="block">/* 1049 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_TLSV1_ALERT_DECODE_ERROR</name>                   <comment type="block">/* 1050 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_TLSV1_ALERT_DECRYPT_ERROR</name>                  <comment type="block">/* 1051 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION</name>             <comment type="block">/* 1060 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_TLSV1_ALERT_PROTOCOL_VERSION</name>               <comment type="block">/* 1070 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY</name>          <comment type="block">/* 1071 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_TLSV1_ALERT_INTERNAL_ERROR</name>                 <comment type="block">/* 1080 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_TLSV1_ALERT_USER_CANCELLED</name>                 <comment type="block">/* 1090 */</comment>
                <operator>||</operator> <name>n</name> <operator>==</operator> <name>SSL_R_TLSV1_ALERT_NO_RENEGOTIATION</name></expr>)</condition> <block>{<block_content>            <comment type="block">/* 1100 */</comment>
            <expr_stmt><expr><name>level</name> <operator>=</operator> <name>EASY_LOG_INFO</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_ssl_error</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_ssl_connection_handshake_handler</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>handshaked</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ev_set_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>, <argument><expr><name>easy_connection_on_readable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_set_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>, <argument><expr><name>easy_connection_on_writable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_ssl_handshake_handler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_io</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"easy_ssl_handshake_handler: %s"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>easy_ssl_handshake</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>EASY_AGAIN</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>handler</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_read</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pending</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>n</name></decl>, <decl><type ref="prev"/><name>bytes</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>EASY_ABORT</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_ssl_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <for>for <control>( <init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>SSL_read</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_ssl_handle_recv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>size</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>pending</name> <operator>=</operator> <call><name>SSL_pending</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>bytes</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>bytes</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>bytes</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>EASY_ABORT</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>EASY_ERROR</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>EASY_AGAIN</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>last</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_handle_recv</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>sslerr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>err</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>renegotiation</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"SSL renegotiation disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>EASY_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>sslerr</name> <operator>=</operator> <call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_SYSCALL</name><operator>)</operator></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"SSL_get_error: %d"</literal></expr></argument>, <argument><expr><name>sslerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_WANT_READ</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>EASY_AGAIN</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_WANT_WRITE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"peer started SSL renegotiation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ev_set_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>, <argument><expr><name>easy_ssl_handshake_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_set_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>, <argument><expr><name>easy_ssl_handshake_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_AGAIN</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_ZERO_RETURN</name> <operator>||</operator> <call><name>ERR_peek_error</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"peer shutdown SSL cleanly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ABORT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_ssl_connection_error</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sslerr</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"SSL_read() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EASY_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_write</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>bytes</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>sslerr</name></decl>;</decl_stmt>

    <comment type="line">// foreach</comment>
    <expr_stmt><expr><name>bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>b</argument>, <argument>b1</argument>, <argument>l</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSL_write</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>sslerr</name> <operator>=</operator> <call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_WANT_WRITE</name> <operator>||</operator> <name>sslerr</name> <operator>==</operator> <name>SSL_ERROR_WANT_READ</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>bytes</name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><name>EASY_ERROR</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>easy_buf_destroy</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>


<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// load ssl config file</comment>
<function><type><name>easy_ssl_t</name> <modifier>*</modifier></type><name>easy_ssl_config_load</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name>                    <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_ssl_ctx_t</name>          <modifier>*</modifier></type><name>ss</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_ssl_t</name>              <modifier>*</modifier></type><name>ssl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"%s not open."</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pool</name> <operator>=</operator> <call><name>easy_pool_create</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ssl</name> <operator>=</operator> <operator>(</operator><name>easy_ssl_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_ssl_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>server_map</name></name> <operator>=</operator> <call><name>easy_hash_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>easy_ssl_ctx_server_t</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>client_map</name></name> <operator>=</operator> <call><name>easy_hash_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>easy_ssl_ctx_server_t</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>server_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// è¯»å¥</comment>
    <while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>line</name> <operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

        <while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="line">// status</comment>
        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_ssl_ctx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>ss</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <goto>goto <name>error_exit</name>;</goto>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>session_timeout</name></name> <operator>=</operator> <literal type="number">300</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>verify_depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"client"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_server_create</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
                    <goto>goto <name>error_exit</name>;</goto>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"Line %d at %s Error"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>error_exit</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"Line %d at %s Error"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>error_exit</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><operator>*</operator><name>value</name> <operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

            <while>while<condition>(<expr><operator>*</operator><name>value</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>value</name> <operator>&lt;=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>value</name> <operator>++</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></while>

            <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_parse_set_value</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"key: %s Line %d at %s Error"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>error_exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"Line %d at %s Error"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// client default</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ssl</name><operator>-&gt;</operator><name>client_ctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_ssl_ctx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ss</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_server_create</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>client_ctx</name></name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ssl</name></expr>;</return>
<label><name>error_exit</name>:</label>

    <if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_ssl_config_destroy</name><parameter_list>(<parameter><decl><type><name>easy_ssl_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_ssl_ctx_t</name>          <modifier>*</modifier></type><name>ss</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>ssl</name></expr>)</condition> <block>{<block_content>
        <macro><name>easy_list_for_each_entry</name><argument_list>(<argument>ss</argument>, <argument>&amp;ssl-&gt;server_list</argument>, <argument>list_node</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"destroy ssl-&gt;ctx: %p"</literal></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_parse_set_value</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ssl_certificate"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>certificate</name></name> <operator>=</operator> <call><name>easy_pool_strdup</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ssl_certificate_key"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>certificate_key</name></name> <operator>=</operator> <call><name>easy_pool_strdup</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ssl_dhparam"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>dhparam</name></name> <operator>=</operator> <call><name>easy_pool_strdup</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ssl_client_certificate"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>client_certificate</name></name> <operator>=</operator> <call><name>easy_pool_strdup</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ssl_crl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>crl</name></name> <operator>=</operator> <call><name>easy_pool_strdup</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ssl_pass_phrase_dialog"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>pass_phrase_dialog</name></name> <operator>=</operator> <call><name>easy_pool_strdup</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ssl_ciphers"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>ciphers</name></name> <operator>=</operator> <call><name>easy_pool_strdup</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"server_name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>server_name</name></name> <operator>=</operator> <call><name>easy_pool_strdup</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ssl_prefer_server_ciphers"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>prefer_server_ciphers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>prefer_server_ciphers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ssl_verify"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>verify</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ssl_verify_depth"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>verify_depth</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ssl_session_timeout"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>session_timeout</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ssl_session_cache"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>session_cache</name></name> <operator>=</operator> <name>EASY_SSL_SCACHE_OFF</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"builtin"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>session_cache</name></name> <operator>=</operator> <name>EASY_SSL_SCACHE_BUILTIN</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ssl_protocols"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>protocols</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"SSLv2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>protocols</name></name> <operator>|=</operator> <name>SSL_OP_NO_SSLv2</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"SSLv3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>protocols</name></name> <operator>|=</operator> <name>SSL_OP_NO_SSLv3</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"TLSv1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>protocols</name></name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ssl_session_reuse"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>session_reuse</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å¯¹ctx_serverçæ¯è¾
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_ctx_server_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_ssl_ctx_server_t</name>   <modifier>*</modifier></type><name>cs</name> <init>= <expr><operator>(</operator><name>easy_ssl_ctx_server_t</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>server_name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_CTRL_SET_TLSEXT_HOSTNAME</name></cpp:ifdef>
<function><type><name>int</name></type> <name>easy_ssl_servername</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl_conn</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>               <modifier>*</modifier></type><name>servername</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>                    <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                     <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name><name>host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_ssl_ctx_server_t</name>    <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_ssl_t</name>               <modifier>*</modifier></type><name>ssl</name> <init>= <expr><name><name>easy_baseth_self</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>ssl</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>servername</name> <operator>=</operator> <call><name>SSL_get_servername</name><argument_list>(<argument><expr><name>ssl_conn</name></expr></argument>, <argument><expr><name>TLSEXT_NAMETYPE_host_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ssl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>servername</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SSL_TLSEXT_ERR_NOACK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>servername</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SSL_TLSEXT_ERR_NOACK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>servername</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>servername</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>easy_min</name><argument_list>(<argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SSL_TLSEXT_ERR_NOACK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>servername</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>host</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>key</name> <init>= <expr><call><name>easy_hash_code</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>(</operator><name>easy_ssl_ctx_server_t</name> <operator>*</operator><operator>)</operator><call><name>easy_hash_find_ex</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>server_map</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>easy_ssl_ctx_server_cmp</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>cs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SSL_TLSEXT_ERR_NOACK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SSL_set_SSL_CTX</name><argument_list>(<argument><expr><name>ssl_conn</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>ss</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>SSL_TLSEXT_ERR_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
 * åå§åserver ctx, å¹¶å å¥hash_mapä¸­
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_server_create</name><parameter_list>(<parameter><decl><type><name>easy_ssl_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// å»ºç«ctx</comment>
        <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_ctx_create</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>certificate</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>key</name> <init>= <expr><ternary><condition><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>certificate_key</name></name></expr> ?</condition><then> <expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>certificate_key</name></name></expr> </then><else>: <expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>certificate</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_certificate</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>certificate</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>EASY_ERROR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ssl</name><operator>-&gt;</operator><name>client_ctx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>client_ctx</name></name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>certificate</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"no \"ssl_certificate\" is defined in %s:%d"</literal></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>certificate_key</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"no \"ssl_certificate_key\" is defined in %s:%d"</literal></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>server_name</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"no \"server_name\" is defined in %s:%d"</literal></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// å»ºç«ctx</comment>
        <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_ctx_create</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_CTRL_SET_TLSEXT_HOSTNAME</name></cpp:ifdef>

        <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_set_tlsext_servername_callback</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>easy_ssl_servername</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"SNI is not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_certificate</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>certificate</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>certificate_key</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_set_cipher_list</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>ciphers</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"SSL_CTX_set_cipher_list(\"%V\") failed"</literal></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>ciphers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>verify</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>client_certificate</name></name></expr> )</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"no ssl_client_certificate for ssl_client_verify"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>EASY_ERROR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_client_certificate</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>client_certificate</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>verify_depth</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>EASY_ERROR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_crl</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>crl</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>EASY_ERROR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>prefer_server_ciphers</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_OP_CIPHER_SERVER_PREFERENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_generate_rsa512_key</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_dhparam</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>dhparam</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_session_cache</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>session_cache</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>session_timeout</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// add</comment>
        <if_stmt><if>if <condition>(<expr><name><name>ssl</name><operator>-&gt;</operator><name>server_ctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>server_ctx</name></name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>easy_ssl_ctx_server_t</name>   <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>key</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>server_name</name></name></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator> <name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>easy_hash_code</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>(</operator><name>easy_ssl_ctx_server_t</name> <operator>*</operator><operator>)</operator><call><name>easy_hash_find_ex</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>client_map</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>easy_ssl_ctx_server_cmp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>(</operator><name>easy_ssl_ctx_server_t</name> <operator>*</operator><operator>)</operator><call><name>easy_hash_find_ex</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>server_map</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>easy_ssl_ctx_server_cmp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>cs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>(</operator><name>easy_ssl_ctx_server_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_ssl_ctx_server_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>server_name</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>ss</name></name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_hash_add</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>client_map</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cs</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>easy_hash_add</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>server_map</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cs</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>server_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * create ssl ctx
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_ctx_create</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><call><name>SSLv23_method</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"create ssl-&gt;ctx: %p"</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"SSL_CTX_new() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* client side options */</comment>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_OP_MICROSOFT_SESS_ID_BUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_OP_NETSCAPE_CHALLENGE_BUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* server side options */</comment>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* this option allow a potential SSL 2.0 rollback (CAN-2005-2969) */</comment>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_OP_MSIE_SSLV2_RSA_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_OP_SSLEAY_080_CLIENT_DH_BUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_OP_TLS_D5_BUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_OP_TLS_BLOCK_PADDING_BUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_OP_SINGLE_DH_USE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>protocols</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>protocols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>SSL_CTX_set_read_ahead</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_CTX_set_info_callback</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>easy_ssl_info_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_certificate</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ssl</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_use_certificate_file</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>SSL_FILETYPE_PEM</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"SSL_CTX_use_certificate_file(\"%s\") failed"</literal></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_use_certificate_chain_file</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"SSL_CTX_use_certificate_chain_file(\"%s\") failed"</literal></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>easy_ssl_pass_phrase_dialog_t</name></type> <name>dialog</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dialog</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dialog</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>pass_phrase_dialog</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dialog</name><operator>.</operator><name>server_name</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>server_name</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_CTX_set_default_passwd_cb_userdata</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_CTX_set_default_passwd_cb</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>easy_ssl_pass_phrase_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_use_PrivateKey_file</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>SSL_FILETYPE_PEM</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"SSL_CTX_use_PrivateKey_file(\"%s\") failed"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_generate_rsa512_key</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal></expr></cpp:if> 
    <decl_stmt><decl><type><name>RSA</name>                     <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_need_tmp_RSA</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>EASY_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>RSA_generate_key</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>RSA_F4</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SSL_CTX_set_tmp_rsa</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>RSA_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>EASY_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_ssl_error</name><argument_list>(<argument><expr><name>EASY_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"RSA_generate_key(512) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_ERROR</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><name>EASY_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_dhparam</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DH</name>                      <modifier>*</modifier></type><name>dh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BIO</name>                     <modifier>*</modifier></type><name>bio</name></decl>;</decl_stmt>

    <comment type="block">/*
     * -----BEGIN DH PARAMETERS-----
     * MIGHAoGBALu8LcrYRnSQfEP89YDpz9vZWKP1aLQtSwju1OsPs1BMbAMCducQgAxc
     * y7qokiYUxb7spWWl/fHSh6K8BJvmd4Bg6RqSp1fjBI9osHb302zI8pul34HcLKcl
     * 7OZicMyaUDXYzs7vnqAnSmOrHlj6/UmI0PZdFGdX2gcd8EXP4WubAgEC
     * -----END DH PARAMETERS-----
     */</comment>

    <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type>    <name><name>dh1024_p</name><index>[]</index></name> <init>= <expr><block>{
        <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xF5</literal></expr>,
        <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x4B</literal></expr>,
        <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
        <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xC5</literal></expr>,
        <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
        <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
        <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xDF</literal></expr>,
        <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x50</literal></expr>,
        <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x1E</literal></expr>,
        <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xDA</literal></expr>,
        <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x9B</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type>    <name><name>dh1024_g</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x02</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>

        <expr_stmt><expr><name>dh</name> <operator>=</operator> <call><name>DH_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>dh</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_ssl_error</name><argument_list>(<argument><expr><name>EASY_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"DH_new() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal></expr></cpp:if> 
        <expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>BN_bin2bn</name><argument_list>(<argument><expr><name>dh1024_p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dh1024_p</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <call><name>BN_bin2bn</name><argument_list>(<argument><expr><name>dh1024_g</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dh1024_g</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dh</name><operator>-&gt;</operator><name>g</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><call><name>DH_set0_pqg</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><call><name>BN_bin2bn</name><argument_list>(<argument><expr><name>dh1024_p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dh1024_p</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, 
					<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>BN_bin2bn</name><argument_list>(<argument><expr><name>dh1024_g</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dh1024_g</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>easy_ssl_error</name><argument_list>(<argument><expr><name>EASY_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"BN_bin2bn() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>DH_free</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>SSL_CTX_set_tmp_dh</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>DH_free</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>EASY_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>bio</name> <operator>=</operator> <call><name>BIO_new_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>bio</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_ssl_error</name><argument_list>(<argument><expr><name>EASY_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"BIO_new_file(\"%s\") failed"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>dh</name> <operator>=</operator> <call><name>PEM_read_bio_DHparams</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>dh</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_ssl_error</name><argument_list>(<argument><expr><name>EASY_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"PEM_read_bio_DHparams(\"%s\") failed"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SSL_CTX_set_tmp_dh</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>DH_free</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_session_cache</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>session_cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>session_cache</name> <operator>==</operator> <name>EASY_SSL_SCACHE_OFF</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SSL_CTX_set_session_cache_mode</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_SESS_CACHE_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">//SSL_CTX_set_session_id_context(ssl-&gt;ctx, sess_ctx-&gt;data, sess_ctx-&gt;len);</comment>
        <expr_stmt><expr><call><name>SSL_CTX_set_session_cache_mode</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_SESS_CACHE_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SSL_CTX_set_timeout</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_verify_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ok</name></decl></parameter>, <parameter><decl><type><name>X509_STORE_CTX</name> <modifier>*</modifier></type><name>x509_store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_client_certificate</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_NAME</name></expr></argument>)</argument_list></call>  <operator>*</operator><name>list</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SSL_CTX_set_verify</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_VERIFY_PEER</name></expr></argument>, <argument><expr><name>easy_ssl_verify_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SSL_CTX_set_verify_depth</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cert</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>EASY_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_load_verify_locations</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_ssl_error</name><argument_list>(<argument><expr><name>EASY_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SSL_CTX_load_verify_locations(\"%s\") failed"</literal></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>list</name> <operator>=</operator> <call><name>SSL_load_client_CA_file</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_ssl_error</name><argument_list>(<argument><expr><name>EASY_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SSL_load_client_CA_file(\"%s\") failed"</literal></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SSL_CTX_set_client_CA_list</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_crl</name><parameter_list>(<parameter><decl><type><name>easy_ssl_ctx_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>crl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>X509_STORE</name>              <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>X509_LOOKUP</name>             <modifier>*</modifier></type><name>lookup</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>crl</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>EASY_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>SSL_CTX_get_cert_store</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_ssl_error</name><argument_list>(<argument><expr><name>EASY_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SSL_CTX_get_cert_store() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>lookup</name> <operator>=</operator> <call><name>X509_STORE_add_lookup</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>X509_LOOKUP_file</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>lookup</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_ssl_error</name><argument_list>(<argument><expr><name>EASY_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"X509_STORE_add_lookup() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>X509_LOOKUP_load_file</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>, <argument><expr><name>crl</name></expr></argument>, <argument><expr><name>X509_FILETYPE_PEM</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_ssl_error</name><argument_list>(<argument><expr><name>EASY_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"X509_LOOKUP_load_file(\"%s\") failed"</literal></expr></argument>, <argument><expr><name>crl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>X509_STORE_set_flags</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>X509_V_FLAG_CRL_CHECK</name> <operator>|</operator> <name>X509_V_FLAG_CRL_CHECK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_ssl_client_handshake_handler</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SSL_SESSION</name>             <modifier>*</modifier></type><name>old_ssl_session</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ssl_session</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>handshaked</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ev_set_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>, <argument><expr><name>easy_connection_on_readable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_set_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>, <argument><expr><name>easy_connection_on_writable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>session_reuse</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ssl_session</name> <operator>=</operator> <call><name>SSL_get1_session</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sc</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>ssl_session</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>old_ssl_session</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>ssl_session</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>ssl_session</name></name> <operator>=</operator> <name>ssl_session</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>old_ssl_session</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>SSL_SESSION_free</name><argument_list>(<argument><expr><name>old_ssl_session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_ssl_pass_phrase_cb</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rwflag</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_ssl_pass_phrase_dialog_t</name>  <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                             <name>len</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>dialog</name> <operator>=</operator> <operator>(</operator><name>easy_ssl_pass_phrase_dialog_t</name> <operator>*</operator><operator>)</operator><name>conf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>dialog</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"builtin"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"Server %s"</literal></expr></argument>, <argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>server_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Enter pass phrase:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>EVP_read_pw_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"exec:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>FILE</name>                    <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name><name>cmd</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="string">"%s '%s'"</literal></expr></argument>, <argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>type</name></name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>server_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while>while<condition>(<expr><name>p</name> <operator>&gt;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>--</operator></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"text:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>lnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>type</name></name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_ssl_client_authenticate</name><parameter_list>(<parameter><decl><type><name>easy_ssl_t</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>key</name> <init>= <expr><call><name>easy_hash_code</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_ssl_ctx_server_t</name>   <modifier>*</modifier></type><name>cs</name> <init>= <expr><operator>(</operator><name>easy_ssl_ctx_server_t</name> <operator>*</operator><operator>)</operator><call><name>easy_hash_find_ex</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>server_map</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>easy_ssl_ctx_server_cmp</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>cs</name> <operator>&amp;&amp;</operator> <name><name>cs</name><operator>-&gt;</operator><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>verify</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type>                    <name>rc</name> <init>= <expr><call><name>SSL_get_verify_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>X509_V_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"client SSL certificate verify error: (%l:%s)"</literal></expr></argument>,
                           <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>X509_verify_cert_error_string</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>ss</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>verify</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>X509</name>                    <modifier>*</modifier></type><name>cert</name> <init>= <expr><call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>cert</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"client sent no required SSL certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function></block_content></block></function>
</unit>
