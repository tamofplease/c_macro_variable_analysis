<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/io/easy_request.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_file.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_request_on_wakeup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_async</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_request_doreq</name><parameter_list>(<parameter><decl><type><name>easy_request_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>request_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_request_dosess</name><parameter_list>(<parameter><decl><type><name>easy_request_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>session_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_request_cleanup</name> <parameter_list>(<parameter><decl><type><name>easy_buf_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * å¯¹requeståå¤ååº
 *
 * @param packetå¯¹è±¡
 */</comment>
<function><type><name>int</name></type> <name>easy_request_do_reply</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_message_t</name>          <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

    <comment type="line">// encode</comment>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>easy_message_t</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>ms</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>tid</name></name> <operator>!=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"not run at other thread: %lx &lt;&gt; %lx\n"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_CLIENT</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_OK</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>request_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>easy_connection_request_done</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>request_list_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EASY_MESG_READ_AGAIN</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>easy_message_destroy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * pushå°c-&gt;outputä¸
 */</comment>
<function><type><name>void</name></type> <name>easy_request_addbuf</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>easy_buf_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_message_session_t</name>  <modifier>*</modifier></type><name>ms</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>ms</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// å¨è¶æ¶çæ¶é´ç¨å°</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_SESSION</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>easy_session_t</name> <operator>*</operator><operator>)</operator><name>ms</name><operator>)</operator><operator>-&gt;</operator><name>nextb</name> <operator>=</operator> <operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å listå°c-&gt;outputä¸
 */</comment>
<function><type><name>void</name></type> <name>easy_request_addbuf_list</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_message_session_t</name>  <modifier>*</modifier></type><name>ms</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>ms</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// æ¯å¦ä¸ºç©º</comment>
    <if_stmt><if>if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// å¨è¶æ¶çæ¶é´ç¨å°</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_SESSION</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>easy_list_get_last</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>easy_buf_t</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>easy_session_t</name> <operator>*</operator><operator>)</operator><name>ms</name><operator>)</operator><operator>-&gt;</operator><name>nextb</name> <operator>=</operator> <operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_list_join</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ç¨äºåè°, åå®è°ç¨server_done
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_request_cleanup</name> <parameter_list>(<parameter><decl><type><name>easy_buf_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_request_t</name>          <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>easy_request_t</name> <operator>*</operator><operator>)</operator> <name>args</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EASY_REQUEST_DONE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>all_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>request_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_request_server_done</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>send_buf_done</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>send_buf_done</name></name><operator>)</operator><operator>(</operator><name>r</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_message_destroy</name><argument_list>(<argument><expr><operator>(</operator><name>easy_message_t</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>ms</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * è®¾ç½®requestçcleanupæ¹æ³
 */</comment>
<function><type><name>void</name></type> <name>easy_request_set_cleanup</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_message_session_t</name>  <modifier>*</modifier></type><name>ms</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>ms</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>easy_list_get_last</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>easy_buf_t</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_MESSAGE</name> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_atomic_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_buf_set_cleanup</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>easy_request_cleanup</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * destroyæeasy_request_tå¯¹è±¡
 */</comment>
<function><type><name>void</name></type> <name>easy_request_server_done</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>doing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_SERVER</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_DOING</name></cpp:ifdef>
        <expr_stmt><expr><call><name>EASY_PRINT_BT</name><argument_list>(<argument><expr><literal type="string">"doing_request_count_dec:%d,c:%s,r:%p,%ld."</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_MAGIC</name></cpp:ifdef>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magic</name></name> <operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>alone</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>doing</name> <operator>=</operator> <call><name>easy_atomic32_add_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>doing</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>con_summary</name><operator>-&gt;</operator><name>done_request_count</name></name> <operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>con_summary</name><operator>-&gt;</operator><name>rt_total</name></name> <operator>+=</operator> <operator>(</operator><call><name>ev_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>start_time</name></name><operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>cleanup</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>cleanup</name></name><operator>)</operator><operator>(</operator><name>r</name><operator>,</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_request_client_done</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_DOING</name></cpp:ifdef>
    <expr_stmt><expr><call><name>EASY_PRINT_BT</name><argument_list>(<argument><expr><literal type="string">"doing_request_count_dec:%d,c:%s,r:%p,%ld."</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_MAGIC</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magic</name></name> <operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>con_summary</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>con_summary</name><operator>-&gt;</operator><name>done_request_count</name></name> <operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_atomic32_dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// request thread pool</comment>
<function><type><name>easy_thread_pool_t</name> <modifier>*</modifier></type><name>easy_thread_pool_create</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>easy_request_process_pt</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>easy_thread_pool_create_ex</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>easy_baseth_on_start</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// èªå·±å®ä¹start</comment>
<function><type><name>easy_thread_pool_t</name> <modifier>*</modifier></type><name>easy_thread_pool_create_ex</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>,
        <parameter><decl><type><name>easy_baseth_on_start_pt</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>easy_request_process_pt</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_thread_pool_t</name>      <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_request_thread_t</name>   <modifier>*</modifier></type><name>rth</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>easy_baseth_pool_create</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_request_thread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// åå§åçº¿ç¨æ± </comment>
    <macro><name>easy_thread_pool_for_each</name><argument_list>(<argument>rth</argument>, <argument>tp</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_baseth_init</name><argument_list>(<argument><expr><name>rth</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>easy_request_on_wakeup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>rth</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rth</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rth</name><operator>-&gt;</operator><name>task_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rth</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// join</comment>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>eio</name><operator>-&gt;</operator><name>thread_pool</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>thread_pool</name></name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>

    <return>return <expr><name>tp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_thread_pool_push</name><parameter_list>(<parameter><decl><type><name>easy_thread_pool_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>hv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_request_thread_t</name>   <modifier>*</modifier></type><name>rth</name></decl>;</decl_stmt>

    <comment type="line">// dispatch</comment>
    <if_stmt><if>if <condition>(<expr><name>hv</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hv</name> <operator>=</operator> <call><name>easy_hash_key</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>rth</name> <operator>=</operator> <operator>(</operator><name>easy_request_thread_t</name> <operator>*</operator><operator>)</operator><call><name>easy_thread_pool_hash</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>request_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_request_sleeping</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>request_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rth</name><operator>-&gt;</operator><name>task_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rth</name><operator>-&gt;</operator><name>task_list_count</name></name> <operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_async_send</name><argument_list>(<argument><expr><name><name>rth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rth</name><operator>-&gt;</operator><name>thread_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_thread_pool_push_message</name><parameter_list>(<parameter><decl><type><name>easy_thread_pool_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>hv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_request_thread_t</name>   <modifier>*</modifier></type><name>rth</name></decl>;</decl_stmt>

    <comment type="line">// dispatch</comment>
    <if_stmt><if>if <condition>(<expr><name>hv</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hv</name> <operator>=</operator> <call><name>easy_hash_key</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>rth</name> <operator>=</operator> <operator>(</operator><name>easy_request_thread_t</name> <operator>*</operator><operator>)</operator><call><name>easy_thread_pool_hash</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// å¼ç¨æ¬¡æ°</comment>
    <expr_stmt><expr><call><name>easy_atomic_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>request_list_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_atomic_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>request_list_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_pool_set_lock</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_join</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>request_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rth</name><operator>-&gt;</operator><name>task_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rth</name><operator>-&gt;</operator><name>task_list_count</name></name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>request_list_count</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_async_send</name><argument_list>(<argument><expr><name><name>rth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rth</name><operator>-&gt;</operator><name>thread_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>request_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * push session
 */</comment>
<function><type><name>int</name></type> <name>easy_thread_pool_push_session</name><parameter_list>(<parameter><decl><type><name>easy_thread_pool_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>hv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_request_thread_t</name>   <modifier>*</modifier></type><name>rth</name></decl>;</decl_stmt>

    <comment type="line">// choice</comment>
    <if_stmt><if>if <condition>(<expr><name>hv</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hv</name> <operator>=</operator> <call><name>easy_hash_key</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>rth</name> <operator>=</operator> <operator>(</operator><name>easy_request_thread_t</name> <operator>*</operator><operator>)</operator><call><name>easy_thread_pool_hash</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rth</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_async_send</name><argument_list>(<argument><expr><name><name>rth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rth</name><operator>-&gt;</operator><name>thread_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * WORKçº¿ç¨çåè°ç¨åº
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_request_on_wakeup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_async</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_request_thread_t</name>       <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_list_t</name></type>                 <name>request_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_list_t</name></type>                 <name>session_list</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>th</name> <operator>=</operator> <operator>(</operator><name>easy_request_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

    <comment type="line">// åålist</comment>
    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>task_list_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_movelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>task_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_movelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>session_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_request_doreq</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_request_dosess</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>session_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_request_doreq</name><parameter_list>(<parameter><decl><type><name>easy_request_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>request_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_request_t</name>              <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                         <name>retcode</name></decl>;</decl_stmt>

    <comment type="line">// process</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>r</argument>, <argument>r2</argument>, <argument>request_list</argument>, <argument>request_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>request_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// å¤ç</comment>
        <expr_stmt><expr><name>retcode</name> <operator>=</operator> <operator>(</operator><name><name>th</name><operator>-&gt;</operator><name>process</name></name><operator>)</operator><operator>(</operator><name>r</name><operator>,</operator> <name><name>th</name><operator>-&gt;</operator><name>args</name></name><operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>retcode</name> <operator>==</operator> <name>EASY_ABORT</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>retcode</name></name> <operator>=</operator> <name>retcode</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_request_wakeup</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_request_dosess</name><parameter_list>(<parameter><decl><type><name>easy_request_thread_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>session_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_session_t</name>              <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>

    <comment type="line">// process</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>s</argument>, <argument>s2</argument>, <argument>session_list</argument>, <argument>session_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* update time */</comment>
        <expr_stmt><expr><call><name>ev_now_update</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>th</name><operator>-&gt;</operator><name>process</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>r</name></name><operator>,</operator> <name><name>th</name><operator>-&gt;</operator><name>args</name></name><operator>)</operator> <operator>!=</operator> <name>EASY_AGAIN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_session_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * éæ°wakeup
 */</comment>
<function><type><name>void</name></type> <name>easy_request_wakeup</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>ioth</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>request_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>request_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_async_send</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å¼ç¨è®¡æ°å¢å ,ä¸easy_request_wakeupæå¯¹
 */</comment>
<function><type><name>void</name></type> <name>easy_request_sleeping</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// å¼ç¨æ¬¡æ°</comment>
        <expr_stmt><expr><call><name>easy_atomic_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_atomic_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_pool_set_lock</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å¼ç¨è®¡æ°åæ
 */</comment>
<function><type><name>void</name></type> <name>easy_request_sleepless</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name> <operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_atomic_dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
