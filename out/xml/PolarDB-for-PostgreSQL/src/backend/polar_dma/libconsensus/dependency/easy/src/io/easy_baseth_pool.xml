<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/io/easy_baseth_pool.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_io_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_baseth_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>__thread</name> <name>easy_baseth_t</name>  <modifier>*</modifier></type><name>easy_baseth_self</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_baseth_pool_invoke</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * start
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>easy_baseth_on_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_baseth_t</name>           <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_t</name>               <modifier>*</modifier></type><name>eio</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>th</name> <operator>=</operator> <operator>(</operator><name>easy_baseth_t</name> <operator>*</operator><operator>)</operator> <name>args</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>easy_baseth_self</name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>eio</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>eio</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>block_thread_signal</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pthread_sigmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>block_thread_sigset</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>ev_run</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>easy_baseth_self</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"pthread exit: %lx.\n"</literal></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * wakeup
 */</comment>
<function><type><name>void</name></type> <name>easy_baseth_on_wakeup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_baseth_t</name>           <modifier>*</modifier></type><name>th</name> <init>= <expr><operator>(</operator><name>easy_baseth_t</name> <operator>*</operator><operator>)</operator><name>args</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_async_fsend</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>thread_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_baseth_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>easy_thread_pool_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>,
                      <parameter><decl><type><name>easy_baseth_on_start_pt</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>easy_baseth_on_wakeup_pt</name> <modifier>*</modifier></type><name>wakeup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_baseth_t</name>           <modifier>*</modifier></type><name>th</name> <init>= <expr><operator>(</operator><name>easy_baseth_t</name> <operator>*</operator><operator>)</operator><name>args</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>th</name><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>&amp;</operator><operator>(</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>member_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>on_start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <call><name>ev_loop_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>thread_lock</name></name> <operator>=</operator> <name>EASY_SPIN_INITER</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ev_async_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>thread_watcher</name></name></expr></argument>, <argument><expr><name>wakeup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>thread_watcher</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_async_start</name> <argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>thread_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ev_set_userdata</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_set_invoke_pending_cb</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>easy_baseth_pool_invoke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="block" format="doxygen">/**
 * åå»ºä¸ä¸ªthread pool
 */</comment>
<function><type><name>easy_thread_pool_t</name> <modifier>*</modifier></type><name>easy_baseth_pool_create</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>member_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_baseth_t</name>           <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_thread_pool_t</name>      <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>size</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_thread_pool_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>member_size</name> <operator>*</operator> <name>thread_count</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <operator>(</operator><name>easy_thread_pool_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name><name>eio</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <name>thread_count</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>member_size</name></name> <operator>=</operator> <name>member_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>member_size</name> <operator>*</operator> <name>thread_count</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>thread_pool_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>easy_thread_pool_for_each</name><argument_list>(<argument>th</argument>, <argument>tp</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>eio</name></name> <operator>=</operator> <name>eio</name></expr>;</expr_stmt>
    </block_content>}</block>

    <return>return <expr><name>tp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * wakeup pool
 */</comment>
<function><type><name>void</name></type> <name>easy_baseth_pool_on_wakeup</name><parameter_list>(<parameter><decl><type><name>easy_thread_pool_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_baseth_t</name>           <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
    <macro><name>easy_thread_pool_for_each</name><argument_list>(<argument>th</argument>, <argument>tp</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_baseth_on_wakeup</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * destroy pool
 */</comment>
<function><type><name>void</name></type> <name>easy_baseth_pool_destroy</name><parameter_list>(<parameter><decl><type><name>easy_thread_pool_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_baseth_t</name>           <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
    <macro><name>easy_thread_pool_for_each</name><argument_list>(<argument>th</argument>, <argument>tp</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>ev_loop_destroy</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_baseth_pool_wakeup_session</name><parameter_list>(<parameter><decl><type><name>easy_baseth_t</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>iot</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name> <init>= <expr><operator>(</operator><name>easy_io_thread_t</name> <operator>*</operator><operator>)</operator> <name>th</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// session at ioth</comment>
    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>s</argument>, <argument>s1</argument>, <argument>&amp;ioth-&gt;session_list</argument>, <argument>session_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EASY_CONNECT_SEND</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"session fail due to io thread exit %p"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_session_process</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <comment type="line">// connection at ioth</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>c</argument>, <argument>c1</argument>, <argument>&amp;ioth-&gt;conn_list</argument>, <argument>conn_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_connection_wakeup_session</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <comment type="line">// foreach connected_list</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>c</argument>, <argument>c1</argument>, <argument>&amp;ioth-&gt;connected_list</argument>, <argument>conn_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_connection_wakeup_session</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
 * å¤æ­æ¯å¦éåº
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_baseth_pool_invoke</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_baseth_t</name>           <modifier>*</modifier></type><name>th</name> <init>= <expr><operator>(</operator><name>easy_baseth_t</name> <operator>*</operator><operator>)</operator> <call><name>ev_userdata</name> <argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_listen_t</name>           <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>user_process</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name><name>th</name><operator>-&gt;</operator><name>user_process</name></name>)<argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>ev_invoke_pending</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>shutdown</name></name> <operator>&amp;&amp;</operator> <name><name>th</name><operator>-&gt;</operator><name>iot</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ioth</name> <operator>=</operator> <operator>(</operator><name>easy_io_thread_t</name> <operator>*</operator><operator>)</operator> <call><name>ev_userdata</name> <argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>listen</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>ts</name> <init>= <expr><operator>(</operator><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>listen_all</name></name> <operator>||</operator> <name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>io_thread_count</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>listen</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>reuseport</name></name> <operator>||</operator> <name>ts</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>ev_io_stop</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>read_watcher</name><index>[<expr><name><name>ioth</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>ev_timer_stop</name> <argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>listen_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// connection at ioth</comment>
        <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>c</argument>, <argument>c1</argument>, <argument>&amp;ioth-&gt;conn_list</argument>, <argument>conn_list_node</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SHUT_RD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <comment type="line">// foreach connected_list</comment>
        <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>c</argument>, <argument>c1</argument>, <argument>&amp;ioth-&gt;connected_list</argument>, <argument>conn_list_node</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SHUT_RD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>stoped</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_baseth_pool_wakeup_session</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_break</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>EVBREAK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"ev_break: eio=%p\n"</literal></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>eio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
