<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/util/easy_string.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;easy_string.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>easy_sprintf_num</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>last</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ui64</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>zero</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hexadecimal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>easy_fill_space</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fstart</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>char</name> <modifier>*</modifier></type><name>easy_strncpy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name> <operator>||</operator> <operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type>          <name>himagic</name> <init>= <expr><call><name>__UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x8080808080808080</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type>          <name>lomagic</name> <init>= <expr><call><name>__UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x0101010101010101</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name>          <modifier>*</modifier></type><name>nsrc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name>          <modifier>*</modifier></type><name>nend</name> <init>= <expr><name>nsrc</name> <operator>+</operator> <operator>(</operator><operator>--</operator><name>n</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name>                <modifier>*</modifier></type><name>ndst</name> <init>= <expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>nsrc</name> <operator>!=</operator> <name>nend</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type>                <name>k</name> <init>= <expr><operator>*</operator><name>nsrc</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>k</name> <operator>-</operator> <name>lomagic</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>k</name> <operator>&amp;</operator> <name>himagic</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>nsrc</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>ndst</name><operator>++</operator> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsrc</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name>nsrc2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>nsrc</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>ndst2</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ndst</name></expr></init></decl>;</decl_stmt>

    <switch>switch<condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">7</literal></expr>:</case>
        <expr_stmt><expr><operator>*</operator><name>ndst2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>nsrc2</name><operator>++</operator></expr>;</expr_stmt>

    <case>case <expr><literal type="number">6</literal></expr>:</case>
        <expr_stmt><expr><operator>*</operator><name>ndst2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>nsrc2</name><operator>++</operator></expr>;</expr_stmt>

    <case>case <expr><literal type="number">5</literal></expr>:</case>
        <expr_stmt><expr><operator>*</operator><name>ndst2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>nsrc2</name><operator>++</operator></expr>;</expr_stmt>

    <case>case <expr><literal type="number">4</literal></expr>:</case>
        <expr_stmt><expr><operator>*</operator><name>ndst2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>nsrc2</name><operator>++</operator></expr>;</expr_stmt>

    <case>case <expr><literal type="number">3</literal></expr>:</case>
        <expr_stmt><expr><operator>*</operator><name>ndst2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>nsrc2</name><operator>++</operator></expr>;</expr_stmt>

    <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><operator>*</operator><name>ndst2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>nsrc2</name><operator>++</operator></expr>;</expr_stmt>

    <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><operator>*</operator><name>ndst2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>nsrc2</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></switch><empty_stmt>;</empty_stmt>

    <expr_stmt><expr><operator>*</operator><name>ndst2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æcharè½¬æhex
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>easy_string_tohex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>             <name><name>hexconvtab</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789ABCDEF"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name>     <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>easy_min</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>hexconvtab</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>hexconvtab</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>result</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * è½¬æå¤§å
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>easy_string_toupper</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * è½¬æå°å
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>easy_string_tolower</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æé¦å­æ¯è½¬æå¤§å,å¶ä½è½¬æå°å
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>easy_string_capitalize</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>end</name> <init>= <expr><name>str</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * è½¬æbyteå¯è¯»çKMGTPE
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>easy_string_format_size</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type>       <name><name>units</name><index>[]</index></name> <init>= <expr><literal type="string">" KMGTPEZY"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type>                     <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>bytes</name> <operator>&gt;=</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>bytes</name> <operator>/=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>idx</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>lnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>lnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%.2f %cB"</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name><name>units</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æcopy string
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>easy_strcpy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>easy_memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ænumberè½¬æstring
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_NUM_LEN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<function><type><name>char</name> <modifier>*</modifier></type><name>easy_num_to_str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>t</name><index>[<expr><name>EASY_NUM_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>end</name> <operator>=</operator> <name>t</name> <operator>+</operator> <name>EASY_NUM_LEN</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0xffffffffU</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type>                <name>v</name> <init>= <expr><name>number</name></expr></init></decl>;</decl_stmt>

        <do>do <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>v</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>v</name> <operator>/=</operator> <literal type="number">10</literal></expr>)</condition>;</do>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <do>do <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>number</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>number</name> <operator>/=</operator> <literal type="number">10</literal></expr>)</condition>;</do>
    </block_content>}</block></else></if_stmt>

    <while>while<condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name> <operator>++</operator></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * lnprintf
 */</comment>
<function><type><name>int</name></type> <name>lnprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type>                 <name>args</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>easy_vsnprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * easy_vsnprintf
 */</comment>
<function><type><name>int</name></type> <name>easy_vsnprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>zero</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>                  <name>f</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>                 <name>i64</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>ui64</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>width</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>hex</name></decl>, <decl><type ref="prev"/><name>frac_width</name></decl>, <decl><type ref="prev"/><name>slen</name></decl>, <decl><type ref="prev"/><name>width_sign</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>last</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fstart</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name>length_modifier</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>last</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>*</operator><name>fmt</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

            <expr_stmt><expr><name>zero</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>++</operator><name>fmt</name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'0'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>width_sign</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>fmt</name><operator>++</operator><operator>,</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>hex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>frac_width</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>slen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>length_modifier</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>fstart</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

            <while>while <condition>(<expr><operator>*</operator><name>fmt</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>fmt</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>width</name> <operator>=</operator> <name>width</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>*</operator><name>fmt</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            </block_content>}</block></while>

            <expr_stmt><expr><name>width</name>                   <operator>*=</operator> <name>width_sign</name></expr>;</expr_stmt>

            <comment type="line">// width</comment>
            <switch>switch <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'.'</literal></expr>:</case>
                <expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>!=</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>frac_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

                    <while>while <condition>(<expr><operator>*</operator><name>fmt</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>fmt</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>frac_width</name> <operator>=</operator> <name>frac_width</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>*</operator><name>fmt</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
                    </block_content>}</block></while>

                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

            <case>case <expr><literal type="char">'*'</literal></expr>:</case>
                <expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'l'</literal></expr>:</case>
                <expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_LP64</name></cpp:ifdef>
                <expr_stmt><expr><name>length_modifier</name> <operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>length_modifier</name> <operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>fmt</name> <operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <break>break;</break>

            <default>default:</default>
                <break>break;</break>
            </block_content>}</block></switch>

            <comment type="line">// type</comment>
            <switch>switch <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'s'</literal></expr>:</case>
                <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>slen</name> <operator>=</operator> <name>last</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>easy_min</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>buf</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <while>while <condition>(<expr><name>slen</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>

                <if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>buf</name> <operator>-</operator> <name>fstart</name><operator>)</operator> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>easy_min</name><argument_list>(<argument><expr><name>fstart</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>buf</name> <operator>-=</operator> <operator>(</operator><name>fstart</name> <operator>+</operator> <name>width</name> <operator>-</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>

                    <while>while<condition>(<expr><name>buf</name> <operator>&gt;</operator> <name>fstart</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>buf</name></expr>;</expr_stmt>
                    </block_content>}</block></while>

                    <while>while<condition>(<expr><name>p</name> <operator>&gt;</operator> <name>fstart</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>

                    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>easy_min</name><argument_list>(<argument><expr><name>fstart</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>easy_fill_space</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fstart</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

                <continue>continue;</continue>

            <case>case <expr><literal type="char">'x'</literal></expr>:</case>
                <expr_stmt><expr><name>hex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <case>case <expr><literal type="char">'X'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hex</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hex</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <case>case <expr><literal type="char">'u'</literal></expr>:</case>
                <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>length_modifier</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>ui64</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>ui64</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <break>break;</break>

            <case>case <expr><literal type="char">'d'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>length_modifier</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>i64</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>i64</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <break>break;</break>

            <case>case <expr><literal type="char">'f'</literal></expr>:</case>
                <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><name>f</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <expr_stmt><expr><name>ui64</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>f</name></expr>;</expr_stmt>

                <expr_stmt><expr><name>slen</name> <operator>=</operator> <name>width</name> <operator>-</operator> <name>frac_width</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>frac_width</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>easy_sprintf_num</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>ui64</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>frac_width</name></expr>)</condition> <block>{<block_content>

                    <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>frac_width</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>frac_width</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

                    <for>for <control>(<init><expr><name>sign</name> <operator>=</operator> <name>frac_width</name></expr>;</init> <condition><expr><name>sign</name></expr>;</condition> <incr><expr><name>sign</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><name>scale</name>                   <operator>*=</operator> <literal type="number">10.0</literal></expr>;</expr_stmt>
                    </block_content>}</block></for>

                    <expr_stmt><expr><name>ui64</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>f</name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>ui64</name><operator>)</operator> <operator>*</operator> <name>scale</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

                    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>easy_sprintf_num</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>ui64</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>frac_width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>easy_fill_space</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fstart</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

                <continue>continue;</continue>

            <case>case <expr><literal type="char">'p'</literal></expr>:</case>
                <expr_stmt><expr><name>ui64</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>hex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>zero</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <break>break;</break>

            <case>case <expr><literal type="char">'c'</literal></expr>:</case>
                <expr_stmt><expr><name>i64</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>i64</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

                <continue>continue;</continue>

            <case>case <expr><literal type="char">'%'</literal></expr>:</case>
                <expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

                <continue>continue;</continue>

            <default>default:</default>
                <expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

                <continue>continue;</continue>
            </block_content>}</block></switch>

            <if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>i64</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ui64</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>-</operator> <name>i64</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ui64</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>i64</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>easy_sprintf_num</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>ui64</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>hex</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>easy_fill_space</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fstart</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>fmt</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>buf</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>easy_fill_space</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fstart</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>buf</name> <operator>-</operator> <name>fstart</name><operator>)</operator> <operator>&gt;=</operator> <operator>-</operator><name>width</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>buf</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>easy_min</name><argument_list>(<argument><expr><name>fstart</name> <operator>-</operator> <name>width</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>buf</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ænumberè½¬æå­ç¬¦ä¸²
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>easy_sprintf_num</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>last</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ui64</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>zero</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hexadecimal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>          <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name><name>temp</name><index>[<expr><name>EASY_NUM_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>ui32</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>             <name><name>hex</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>             <name><name>HEX</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789ABCDEF"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>temp</name> <operator>+</operator> <name>EASY_NUM_LEN</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>hexadecimal</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ui64</name> <operator>&lt;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ui32</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>ui64</name></expr>;</expr_stmt>

            <do>do <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>ui32</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><name>ui32</name> <operator>/=</operator> <literal type="number">10</literal></expr>)</condition>;</do>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <do>do <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>ui64</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><name>ui64</name> <operator>/=</operator> <literal type="number">10</literal></expr>)</condition>;</do>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hexadecimal</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

        <do>do <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <name><name>hex</name><index>[<expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name>ui64</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>ui64</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>)</condition>;</do>

    </block_content>}</block></if> <else>else <block>{<block_content> <comment type="block">/* hexadecimal == 2 */</comment>

        <do>do <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <name><name>HEX</name><index>[<expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name>ui64</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>ui64</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>)</condition>;</do>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>zero</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>buf</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>width</name> <operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* zero or space padding */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <name>EASY_NUM_LEN</name><operator>)</operator> <operator>-</operator> <name>p</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>len</name><operator>++</operator> <operator>&lt;</operator> <name>width</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <name>zero</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <name>EASY_NUM_LEN</name><operator>)</operator> <operator>-</operator> <name>p</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <name>last</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>easy_memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
