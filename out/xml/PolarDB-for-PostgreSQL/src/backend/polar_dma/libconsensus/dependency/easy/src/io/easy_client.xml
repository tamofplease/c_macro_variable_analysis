<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/io/easy_client.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_message.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_client_uthread_wakeup_conn</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_client_uthread_wakeup_session</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * æsessionåéå°addrä¸
 */</comment>
<function><type><name>int</name></type> <name>easy_client_dispatch</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>easy_addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>issend</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>eio</name><operator>-&gt;</operator><name>stoped</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_io_dispatch is failure: stoped: %d\n"</literal></expr></argument>, <argument><expr><name><name>eio</name><operator>-&gt;</operator><name>stoped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>addr</name><operator>.</operator><name>cidx</name></name> <operator>&lt;</operator> <literal type="number">256</literal></expr> ?</condition><then> <expr><name><name>addr</name><operator>.</operator><name>cidx</name></name></expr> </then><else>: <expr><call><name>easy_hash_code</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_addr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ioth</name> <operator>=</operator> <operator>(</operator><name>easy_io_thread_t</name> <operator>*</operator><operator>)</operator><call><name>easy_thread_pool_hash</name><argument_list>(<argument><expr><name><name>eio</name><operator>-&gt;</operator><name>io_thread_pool</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>issend</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EASY_CONNECT_SEND</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>checkdrc</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>&gt;=</operator> <name>EASY_IOTH_DOING_REQ_CNT</name> <operator>&amp;&amp;</operator> <name>issend</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>              <name>lastlog</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>lastlog</name> <operator>!=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>lastlog</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"ioth-&gt;doing_request_count: %d, EASY_IOTH_DOING_REQ_CNT: %d\n"</literal></expr></argument>,
                           <argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><name>EASY_IOTH_DOING_REQ_CNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>async</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>issend</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>easy_atomic32_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type>                    <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"send to %s, status=%d"</literal></expr></argument>, <argument><expr><call><name>easy_inet_addr_to_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//EASY_PRINT_BT("easy_client_dispatch");</comment>

    <comment type="line">// dispatch</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>EASY_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>eio</name><operator>-&gt;</operator><name>stoped</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>EASY_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ev_async_send</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * threadåépacketçæ¶åç¨, åæ­¥, ç­å¾è¿åç»æ
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>easy_client_send</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>easy_addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_client_wait_t</name></type>      <name>wobj</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>easy_client_wait_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_session_set_wobj</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name>easy_client_wait_process</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>easy_client_dispatch</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"easy_session_dispatch: %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_client_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wobj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wobj</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wobj</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>ipacket</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// init</comment>
<function><type><name>void</name></type> <name>easy_client_wait_init</name><parameter_list>(<parameter><decl><type><name>easy_client_wait_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>done_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_CONN_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_client_wait_cleanup</name><parameter_list>(<parameter><decl><type><name>easy_client_wait_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>s</argument>, <argument>s2</argument>, <argument>&amp;w-&gt;session_list</argument>, <argument>session_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_session_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>easy_client_wait_wakeup</name><parameter_list>(<parameter><decl><type><name>easy_client_wait_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>done_count</name></name> <operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>easy_client_wait_wakeup_request</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>client_wait</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_atomic_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_atomic_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_client_wait_wakeup</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>client_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>easy_client_wait</name><parameter_list>(<parameter><decl><type><name>easy_client_wait_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>done_count</name></name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// next</comment>
    <decl_stmt><decl><type><name>easy_list_t</name>             <modifier>*</modifier></type><name>list</name> <init>= <expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>next_list</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>s</argument>, <argument>sn</argument>, <argument>list</argument>, <argument>session_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>easy_client_wait_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>request_list_node</name><operator>.</operator><name>prev</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>++</operator> <name>cnt</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_list_movelist</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_client_wait_wakeup</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>easy_client_wait_wakeup</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_client_wait_process</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_client_wait_t</name>      <modifier>*</modifier></type><name>w</name> <init>= <expr><operator>(</operator><name>easy_client_wait_t</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>request_list_node</name><operator>.</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>easy_session_t</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>ms</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>done_count</name></name> <operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_client_wait_batch_process</name><parameter_list>(<parameter><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_list_t</name>             <modifier>*</modifier></type><name>list</name> <init>= <expr><operator>(</operator><name>easy_list_t</name> <operator>*</operator><operator>)</operator> <name>m</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_client_wait_t</name>      <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>easy_list_get_first</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>easy_session_t</name></expr></argument>, <argument><expr><name>session_list_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>easy_client_wait_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>request_list_node</name><operator>.</operator><name>prev</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_list_movelist</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_client_wait_wakeup</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
int easy_client_wait_on_connect(easy_connection_t *c)
{
    easy_client_wait_t      *w;

    if ((w = (easy_client_wait_t *)c-&gt;user_data))
        easy_client_wait_wakeup(w);

    return EASY_OK;
}
*/</comment>

<comment type="line">// add addr</comment>
<function><type><name>int</name></type> <name>easy_client_list_add</name><parameter_list>(<parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>easy_addr_t</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>easy_hash_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_list_t</name>        <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>easy_hash_code</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_addr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>&amp;=</operator> <name><name>table</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>

    <comment type="line">// init</comment>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>addr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>count</name></name> <operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>seqno</name></name> <operator>++</operator></expr>;</expr_stmt>

    <comment type="line">// add to list</comment>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>first</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>easy_hash_list_t</name> <operator>*</operator><operator>)</operator><name>list</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>easy_client_list_find</name><parameter_list>(<parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>easy_addr_t</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>lookup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_list_t</name>        <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_addr_t</name>             <modifier>*</modifier></type><name>baddr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>easy_hash_code</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_addr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>&amp;=</operator> <name><name>table</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="line">// foreach</comment>
    <while>while<condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>baddr</name> <operator>=</operator> <operator>(</operator><name>easy_addr_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>list</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>baddr</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_addr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lookup</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"lookup: %d"</literal></expr></argument>, <argument><expr><name>lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>list</name> <operator>-</operator> <name><name>table</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lookup</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>lookup</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"lookup: %d"</literal></expr></argument>, <argument><expr><name>lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// uthread wait;</comment>
<function><type><name>int</name></type> <name>easy_client_uthread_wait_conn</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EASY_CONN_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_OK</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>uthread</name></name> <operator>=</operator> <call><name>easy_uthread_current</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>easy_uthread_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>easy_uthread_get_errcode</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_client_uthread_wait_session</name><parameter_list>(<parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>thread_ptr</name></name> <operator>=</operator> <call><name>easy_uthread_current</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>easy_uthread_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>easy_uthread_get_errcode</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_client_uthread_set_handler</name><parameter_list>(<parameter><decl><type><name>easy_io_handler_pt</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>on_connect</name></name> <operator>=</operator> <name>easy_client_uthread_wakeup_conn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>on_disconnect</name></name> <operator>=</operator> <name>easy_client_uthread_wakeup_conn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name>easy_client_uthread_wakeup_session</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>is_uthread</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="line">// io_handler</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_client_uthread_wakeup_conn</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>uthread</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_uthread_ready</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>uthread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>easy_uthread_set_errcode</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>uthread</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>conn_has_error</name></name></expr> ?</condition><then> <expr><name>EASY_ERROR</name></expr> </then><else>: <expr><name>EASY_OK</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>uthread</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_client_uthread_wakeup_session</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_uthread_t</name>          <modifier>*</modifier></type><name>uth</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>easy_session_t</name> <operator>*</operator><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>ms</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EASY_TYPE_SESSION</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"session error, r-&gt;ms-&gt;type: %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>thread_ptr</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>uth</name> <operator>=</operator> <operator>(</operator><name>easy_uthread_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>thread_ptr</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_uthread_ready</name><argument_list>(<argument><expr><name>uth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_uthread_set_errcode</name><argument_list>(<argument><expr><name>uth</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>conn_has_error</name></name></expr> ?</condition><then> <expr><name>EASY_ERROR</name></expr> </then><else>: <expr><name>EASY_OK</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thread_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

</unit>
