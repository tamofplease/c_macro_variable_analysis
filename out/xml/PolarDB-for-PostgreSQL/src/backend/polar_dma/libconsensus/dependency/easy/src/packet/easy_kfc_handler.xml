<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/packet/easy_kfc_handler.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_kfc_handler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_http_handler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * ç±»ä¼¼KFCçæ¹å¼
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_KFC_PACKET_HEADER_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_KFC_DEFAULT_PORT</name></cpp:macro> <cpp:value>2903</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_KFC_ROLE_SERVER</name></cpp:macro>  <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_KFC_STATUS_UP</name></cpp:macro>    <cpp:value>'\x11'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_KFC_STATUS_DOWN</name></cpp:macro>  <cpp:value>'\x22'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_KFC_RANGE_MAX</name></cpp:macro>    <cpp:value>16</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>easy_kfc_range_t</name> <block>{
    <decl_stmt><decl><type><name>int</name></type>                     <name>cnt</name></decl>, <name>max</name>, <name>cur</name>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name><name>r</name><index>[<expr><name>EASY_KFC_RANGE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name><name>s</name><index>[<expr><name>EASY_KFC_RANGE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>easy_kfc_range_t</name>;</typedef>

<comment type="line">// å½æ°</comment>
<function_decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>easy_kfc_conv_group_id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_add_node</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>, <parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>,
                             <parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>group_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_kfc_local_group</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>, <parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>group_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>easy_kfc_group_t</name> <modifier>*</modifier></type><name>easy_kfc_get_group</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>group_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_heartbeat</name> <parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_kfc_do_connect</name><parameter_list>(<parameter><decl><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_connect</name> <parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_disconnect</name> <parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_choice_round_robin</name><parameter_list>(<parameter><decl><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_choice_response_time</name><parameter_list>(<parameter><decl><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_server_process</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_monitor_process</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_join_server_ex</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>group_name</name></decl></parameter>, <parameter><decl><type><name>easy_io_process_pt</name> <modifier>*</modifier></type><name>process</name></decl></parameter>,
                                   <parameter><decl><type><name>int</name></type> <name>request_cnt</name></decl></parameter>, <parameter><decl><type><name>easy_request_process_pt</name> <modifier>*</modifier></type><name>request_process</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_kfc_hist_watcher_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_timer</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_ping</name><parameter_list>(<parameter><decl><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>easy_kfc_packet_t</name> <modifier>*</modifier></type><name>easy_kfc_packet_new</name><parameter_list>(<parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_kfc_clear_node</name><parameter_list>(<parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>group_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_check_ip</name><parameter_list>(<parameter><decl><type><name>easy_kfc_server_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_range_extra</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_kfc_range_parse</name><parameter_list>(<parameter><decl><type><name>easy_kfc_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_range_get</name><parameter_list>(<parameter><decl><type><name>easy_kfc_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_kfc_range_free</name><parameter_list>(<parameter><decl><type><name>easy_kfc_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * decode
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>easy_kfc_decode</name><parameter_list>(<parameter><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_packet_t</name>       <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>len</name></decl>, <decl><type ref="prev"/><name>datalen</name></decl>;</decl_stmt>

    <comment type="line">// length</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator> <operator>&lt;</operator> <name>EASY_KFC_PACKET_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// data len</comment>
    <expr_stmt><expr><name>datalen</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>datalen</name> <operator>&gt;</operator> <literal type="number">0x4000000</literal></expr>)</condition> <block>{<block_content> <comment type="line">// 64M</comment>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"data_len is invalid: %d\n"</literal></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// é¿åº¦ä¸å¤</comment>
    <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>EASY_KFC_PACKET_HEADER_SIZE</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>datalen</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next_read_len</name></name> <operator>=</operator> <name>datalen</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// alloc packet</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_packet_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>,
                  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_packet_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>EASY_KFC_PACKET_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>EASY_KFC_PACKET_HEADER_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>datalen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>packet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * encode
 */</comment>
<function><type><name>int</name></type> <name>easy_kfc_encode</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_packet_t</name>       <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>len</name></decl>;</decl_stmt>

    <comment type="line">// set data</comment>
    <expr_stmt><expr><name>packet</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_packet_t</name> <operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>EASY_KFC_PACKET_HEADER_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_buf_set_data</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_request_addbuf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>easy_kfc_packet_id</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>easy_kfc_packet_t</name> <operator>*</operator><operator>)</operator> <name>packet</name><operator>)</operator><operator>-&gt;</operator><name>chid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>easy_kfc_packet_t</name> <modifier>*</modifier></type><name>easy_kfc_packet_rnew</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_packet_t</name>       <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_packet_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_buf_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>easy_buf_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>packet</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_packet_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_packet_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <return>return <expr><name>packet</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>easy_kfc_packet_t</name> <modifier>*</modifier></type><name>easy_kfc_packet_new</name><parameter_list>(<parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_packet_t</name>       <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_packet_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_buf_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>easy_session_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>easy_buf_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>packet</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_packet_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_packet_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>opacket</name></name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

    <return>return <expr><name>packet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * è®¾ç½®ipåè¡¨
 */</comment>
<function><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>easy_kfc_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iocnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_t</name>              <modifier>*</modifier></type><name>kfc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_t</name>               <modifier>*</modifier></type><name>eio</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_array_t</name>            <modifier>*</modifier></type><name>array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>eio</name> <operator>=</operator> <call><name>easy_eio_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>iocnt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>kfc</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name><name>eio</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// client</comment>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>chandler</name><operator>.</operator><name>decode</name></name> <operator>=</operator> <name>easy_kfc_decode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>chandler</name><operator>.</operator><name>encode</name></name> <operator>=</operator> <name>easy_kfc_encode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>chandler</name><operator>.</operator><name>get_packet_id</name></name> <operator>=</operator> <name>easy_kfc_packet_id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>chandler</name><operator>.</operator><name>process</name></name> <operator>=</operator> <name>easy_client_wait_process</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>chandler</name><operator>.</operator><name>batch_process</name></name> <operator>=</operator> <name>easy_client_wait_batch_process</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>chandler</name><operator>.</operator><name>on_idle</name></name> <operator>=</operator> <name>easy_kfc_heartbeat</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>chandler</name><operator>.</operator><name>on_connect</name></name> <operator>=</operator> <name>easy_kfc_connect</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>chandler</name><operator>.</operator><name>on_disconnect</name></name> <operator>=</operator> <name>easy_kfc_disconnect</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>chandler</name><operator>.</operator><name>user_data</name></name> <operator>=</operator> <name>kfc</name></expr>;</expr_stmt>
    <comment type="line">// node</comment>
    <expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>easy_array_create</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>easy_kfc_node_t</name></expr></argument>, <argument><expr><name>node_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>node_list</name></name> <operator>=</operator> <call><name>easy_hash_create</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>node_array</name></name> <operator>=</operator> <name>array</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name></name> <operator>=</operator> <name>eio</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>do_signal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>send_qlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// è®¾ç½®iplist</comment>
    <if_stmt><if>if <condition>(<expr><call><name>easy_kfc_set_iplist</name><argument_list>(<argument><expr><name>kfc</name></expr></argument>, <argument><expr><name>ip_list</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error_exit</name>;</goto></block_content></block></if></if_stmt>

    <return>return <expr><name>kfc</name></expr>;</return>
<label><name>error_exit</name>:</label>
    <expr_stmt><expr><call><name>easy_eio_destroy</name><argument_list>(<argument><expr><name>eio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>array</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>easy_array_destroy</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// mmdev1.corp.alimama.com role=server group=tests2 port=2200</comment>
<function><type><name>int</name></type> <name>easy_kfc_set_iplist</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iplist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>port</name></decl>, <decl><type ref="prev"/><name>role</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>group_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_t</name>             <modifier>*</modifier></type><name>group_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>ip_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ip_list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

    <comment type="line">// å¤å¶</comment>
    <if_stmt><if>if <condition>(<expr><name>iplist</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"iplist IS NULL."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>iplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>easy_malloc</name><argument_list>(<argument><expr><name>cnt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ip_end</name> <operator>=</operator> <name>ip_list</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ip_list</name></expr></argument>, <argument><expr><name>iplist</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ip_list</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <while>while<condition>(<expr><operator>*</operator><name>ip_end</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ip_end</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ip_end</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ip_end</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">// å¯¹configæä»¶è¿è¡parse</comment>
    <expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>easy_pool_create</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>easy_kfc_group_t</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>group_list</name> <operator>=</operator> <call><name>easy_hash_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// å¼å§</comment>
    <while>while<condition>(<expr><name>ip_list</name> <operator>&amp;&amp;</operator> <name>ip_list</name> <operator>&lt;</operator> <name>ip_end</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ip_list</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>ip_list</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ip_list</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="line">// group</comment>
        <expr_stmt><expr><name>group_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>role</name> <operator>=</operator> <name>EASY_KFC_ROLE_SERVER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>port</name> <operator>=</operator> <name>EASY_KFC_DEFAULT_PORT</name></expr>;</expr_stmt>

        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"group="</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>group_id</name> <operator>=</operator> <call><name>easy_kfc_conv_group_id</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"port="</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"role=server"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>role</name> <operator>=</operator> <name>EASY_KFC_ROLE_SERVER</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"role=client"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>group_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>group_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="line">// range</comment>
        <decl_stmt><decl><type><name>easy_kfc_range_t</name></type>        <name>range</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>easy_kfc_range_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>range</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while<condition>(<expr><call><name>easy_kfc_range_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>range</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>easy_kfc_add_node</name><argument_list>(<argument><expr><name>kfc</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>group_list</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>group_id</name></expr></argument>, <argument><expr><name>role</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_kfc_range_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>error_exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>easy_kfc_range_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">// åªçæ¬æº</comment>
    <expr_stmt><expr><call><name>easy_kfc_local_group</name><argument_list>(<argument><expr><name>kfc</name></expr></argument>, <argument><expr><name>group_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// åæ¢</comment>
    <if_stmt><if>if <condition>(<expr><operator>++</operator> <name><name>kfc</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>version</name></name> <operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>old_pool</name> <init>= <expr><name><name>kfc</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_t</name>             <modifier>*</modifier></type><name>old_group_list</name> <init>= <expr><name><name>kfc</name><operator>-&gt;</operator><name>group_list</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>group_list</name></name> <operator>=</operator> <name>group_list</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>old_group_list</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>easy_kfc_clear_node</name><argument_list>(<argument><expr><name>old_group_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>old_pool</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name>old_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
<label><name>error_exit</name>:</label>
    <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// join</comment>
<function><type><name>int</name></type> <name>easy_kfc_join_server</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>group_name</name></decl></parameter>, <parameter><decl><type><name>easy_io_process_pt</name> <modifier>*</modifier></type><name>process</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>easy_kfc_join_server_ex</name><argument_list>(<argument><expr><name>kfc</name></expr></argument>, <argument><expr><name>group_name</name></expr></argument>, <argument><expr><name>process</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// join server</comment>
<function><type><name>int</name></type> <name>easy_kfc_join_server_args</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>group_name</name></decl></parameter>, <parameter><decl><type><name>easy_request_process_pt</name> <modifier>*</modifier></type><name>process</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>easy_kfc_join_server_ex</name><argument_list>(<argument><expr><name>kfc</name></expr></argument>, <argument><expr><name>group_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>process</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_kfc_join_server_async</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>group_name</name></decl></parameter>,
                               <parameter><decl><type><name>int</name></type> <name>request_cnt</name></decl></parameter>, <parameter><decl><type><name>easy_request_process_pt</name> <modifier>*</modifier></type><name>request_process</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>easy_kfc_join_server_ex</name><argument_list>(<argument><expr><name>kfc</name></expr></argument>, <argument><expr><name>group_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>request_cnt</name></expr></argument>, <argument><expr><name>request_process</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>easy_kfc_join_client</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>group_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_group_t</name>        <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_agent_t</name>        <modifier>*</modifier></type><name>agent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>group_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>group</name> <operator>=</operator> <call><name>easy_kfc_get_group</name><argument_list>(<argument><expr><name>kfc</name></expr></argument>, <argument><expr><name>group_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>group_id</name> <operator>=</operator> <name><name>group</name><operator>-&gt;</operator><name>group_id</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>group_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"join client failure."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// new agent</comment>
    <expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>easy_pool_create</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_agent_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>agent</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_agent_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_agent_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>group_id</name></name> <operator>=</operator> <name>group_id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>kfc</name></name> <operator>=</operator> <name>kfc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>choice_server</name></name> <operator>=</operator> <name>easy_kfc_choice_round_robin</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_client_wait_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>wobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_kfc_do_connect</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// ping</comment>
    <if_stmt><if>if <condition>(<expr><name><name>kfc</name><operator>-&gt;</operator><name>noping</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>easy_kfc_ping</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_kfc_leave_client</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>agent</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>agent</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// éæ©serverçç®æ³ç±»å, rt, rr</comment>
<function><type><name>void</name></type> <name>easy_kfc_choice_scheduler</name><parameter_list>(<parameter><decl><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>EASY_KFC_CHOICE_RT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>choice_server</name></name> <operator>=</operator> <name>easy_kfc_choice_response_time</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>choice_server</name></name> <operator>=</operator> <name>easy_kfc_choice_round_robin</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// leave</comment>
<function><type><name>int</name></type> <name>easy_kfc_leave_client</name><parameter_list>(<parameter><decl><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_node_t</name>         <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>agent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_OK</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// disconnect</comment>
    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>slist</name><operator>.</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>slist</name><operator>.</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>connected</name></name> <operator>--</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>connected</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>easy_connection_disconnect</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>kfc</name><operator>-&gt;</operator><name>eio</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_hash_del_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_hash_del_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_array_free</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>kfc</name><operator>-&gt;</operator><name>node_array</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// destroy session</comment>
    <expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>wobj</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>wobj</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_kfc_clear_buffer</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// destroy</comment>
    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// åéæ¶æ¯</comment>
<function><type><name>int</name></type> <name>easy_kfc_send_message</name><parameter_list>(<parameter><decl><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_packet_t</name>       <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name></decl>;</decl_stmt>

    <comment type="line">// æ£æ¥</comment>
    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>slist</name><operator>.</operator><name>cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_kfc_send_message failure.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERR_NO_SERVER</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check version</comment>
    <expr_stmt><expr><call><name>easy_kfc_do_connect</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// choice server</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>agent</name><operator>-&gt;</operator><name>choice_server</name></name><operator>)</operator><operator>(</operator><name>agent</name><operator>)</operator> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>EASY_ERR_ALL_DOWN</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>easy_kfc_packet_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERR_NO_MEM</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// new</comment>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>wobj</name><operator>.</operator><name>done_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>wobj</name><operator>.</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>wobj</name><operator>.</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_session_set_timeout</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>group_id</name></name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>group_id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>chid</name></name> <operator>=</operator> <call><name>easy_atomic32_add_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>kfc</name><operator>-&gt;</operator><name>gen_chid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_session_set_wobj</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>wobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name>easy_client_wait_process</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>easy_client_dispatch</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>kfc</name><operator>-&gt;</operator><name>eio</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_session_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERR_SERVER_BUSY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// æ¸æä¹åç</comment>
    <expr_stmt><expr><call><name>easy_kfc_clear_buffer</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æ¥æ¶,ææ°æ®copyåºæ¥
 */</comment>
<function><type><name>int</name></type> <name>easy_kfc_recv_message</name><parameter_list>(<parameter><decl><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_packet_t</name>       <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name> <init>= <expr><name>EASY_ERR_TIMEOUT</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"call send_message.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERR_NO_SEND</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// wait response</comment>
    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_client_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>wobj</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>now</name></name> <operator>&amp;&amp;</operator> <name><name>agent</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type>                     <name>rt</name> <init>= <expr><operator>(</operator><name><name>agent</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>rt</name></name> <operator>+</operator> <call><name>easy_max</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>now</name></name> <operator>*</operator> <literal type="number">10000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>rt</name></name> <operator>=</operator> <call><name>easy_min</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><literal type="number">600000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// memcpy</comment>
    <expr_stmt><expr><name>resp</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_packet_t</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>ipacket</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>resp</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>easy_min</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>resp</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>resp</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>data</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>resp</name> <operator>||</operator> <name><name>resp</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_kfc_clear_buffer</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æ¥æ¶,ä¸è¿è¡memcpy,ç´æ¥ä½¿ç¨sessionä¸çåå­
 */</comment>
<function><type><name>int</name></type> <name>easy_kfc_recv_buffer</name><parameter_list>(<parameter><decl><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_packet_t</name>       <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name> <init>= <expr><name>EASY_ERROR</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"call send_message.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// wait response</comment>
    <expr_stmt><expr><call><name>easy_client_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>wobj</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// response</comment>
    <expr_stmt><expr><name>resp</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_packet_t</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>ipacket</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>resp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <name><name>resp</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>data</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>=</operator> <name><name>resp</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æ¸æsessionä¸­buffer
 */</comment>
<function><type><name>void</name></type> <name>easy_kfc_clear_buffer</name><parameter_list>(<parameter><decl><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>s</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_session_destroy</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * åéping
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_ping</name><parameter_list>(<parameter><decl><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_packet_t</name>       <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_addr_t</name></type>             <name>addr</name></decl>;</decl_stmt>

    <comment type="line">// æ£æ¥</comment>
    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>slist</name><operator>.</operator><name>cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check version</comment>
    <expr_stmt><expr><call><name>easy_kfc_do_connect</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// new</comment>
    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>wobj</name><operator>.</operator><name>done_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>wobj</name><operator>.</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>wobj</name><operator>.</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>slist</name><operator>.</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <call><name>easy_kfc_packet_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>group_id</name></name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>group_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>chid</name></name> <operator>=</operator> <call><name>easy_atomic32_add_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>kfc</name><operator>-&gt;</operator><name>gen_chid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_session_set_wobj</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>wobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name>easy_client_wait_process</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>slist</name><operator>.</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>addr</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>easy_client_dispatch</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>kfc</name><operator>-&gt;</operator><name>eio</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_session_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>cnt</name> <operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// åéäºå ä¸ªæå</comment>
    <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// wait response</comment>
        <expr_stmt><expr><call><name>easy_client_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>wobj</name></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// æ£æ¥ç»æ</comment>
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>s</argument>, <argument>s2</argument>, <argument>&amp;agent-&gt;wobj.session_list</argument>, <argument>session_list_node</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><name>packet</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_packet_t</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>ipacket</name></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>packet</name> <operator>&amp;&amp;</operator> <name><name>packet</name><operator>-&gt;</operator><name>group_id</name></name> <operator>==</operator> <name><name>agent</name><operator>-&gt;</operator><name>group_id</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cnt</name> <operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>easy_session_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>cnt</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// è¿è¡kfc</comment>
<function><type><name>int</name></type> <name>easy_kfc_start</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>easy_eio_start</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ç­kfcéåº</comment>
<function><type><name>int</name></type> <name>easy_kfc_wait</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>easy_eio_wait</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_kfc_destroy</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_array_t</name>            <modifier>*</modifier></type><name>arr</name> <init>= <expr><name><name>kfc</name><operator>-&gt;</operator><name>node_array</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// åstopæ</comment>
    <expr_stmt><expr><call><name>easy_eio_stop</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_eio_wait</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>kfc</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// destroy summary</comment>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>EASY_KFC_HIST_CNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_summary_destroy</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>easy_eio_destroy</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>arr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>easy_array_destroy</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// add client to server</comment>
<function><type><name>void</name></type> <name>easy_kfc_allow_client</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>group_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_group_t</name>        <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_addr_t</name></type>             <name>addr</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>group</name> <operator>=</operator> <call><name>easy_kfc_get_group</name><argument_list>(<argument><expr><name>kfc</name></expr></argument>, <argument><expr><name>group_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// group server</comment>
    <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>server</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>easy_kfc_client_t</name>       <modifier>*</modifier></type><name>cl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_server_t</name>       <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// addr</comment>
    <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>easy_inet_str_to_addr</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>.</operator><name>family</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>client</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>client_allow</name></name> <operator>=</operator> <name>allow</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>client_ip</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>client_ip</name></name> <operator>=</operator> <call><name>easy_hash_create</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>easy_kfc_client_t</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>cl</name> <operator>=</operator> <call><name>easy_hash_find</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>client_ip</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>u</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>cl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cl</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_client_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_client_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>ip</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>u</name><operator>.</operator><name>addr</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>allow</name></name> <operator>=</operator> <name>allow</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_hash_add</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>client_ip</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>u</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cl</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>allow</name></name> <operator>=</operator> <name>allow</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error_exit</name>:</label>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// æå­ç¬¦è½¬æ64ä½</comment>
<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>easy_kfc_conv_group_id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>size</name> <init>= <expr><call><name>easy_min</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// å¢å node</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_add_node</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>,
                             <parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
                             <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>group_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_addr_t</name></type>             <name>addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_group_t</name>        <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_node_t</name>         <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_t</name>             <modifier>*</modifier></type><name>node_table</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>offset</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"host=%s port=%d group=%.*s role=%s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                   <argument><expr><operator>&amp;</operator><name>group_id</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>role</name> <operator>==</operator> <name>EASY_KFC_ROLE_SERVER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"server"</literal></expr> </then><else>: <expr><literal type="string">"client"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>easy_inet_str_to_addr</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>.</operator><name>family</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"ERROR: host=%s port=%d group=%.*s role=%s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                       <argument><expr><operator>&amp;</operator><name>group_id</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>role</name> <operator>==</operator> <name>EASY_KFC_ROLE_SERVER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"server"</literal></expr> </then><else>: <expr><literal type="string">"client"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// å¢å ä¸group</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>group</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_group_t</name> <operator>*</operator><operator>)</operator><call><name>easy_hash_find</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>group_id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>group</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_group_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_group_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>group_id</name></name> <operator>=</operator> <name>group_id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>easy_kfc_node_t</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>server_list</name></name> <operator>=</operator> <call><name>easy_hash_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>client_list</name></name> <operator>=</operator> <call><name>easy_hash_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_hash_add</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>group_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// find node</comment>
    <if_stmt><if>if <condition>(<expr><name>role</name> <operator>==</operator> <name>EASY_KFC_ROLE_SERVER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>node_table</name> <operator>=</operator> <name><name>group</name><operator>-&gt;</operator><name>server_list</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>node_table</name> <operator>=</operator> <name><name>group</name><operator>-&gt;</operator><name>client_list</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_node_t</name> <operator>*</operator><operator>)</operator><call><name>easy_client_list_find</name><argument_list>(<argument><expr><name>node_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"DUPLICATE ERROR: host=%s port=%d group=%.*s role=%s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                       <argument><expr><operator>&amp;</operator><name>group_id</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>role</name> <operator>==</operator> <name>EASY_KFC_ROLE_SERVER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"server"</literal></expr> </then><else>: <expr><literal type="string">"client"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// add node</comment>
    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>cidx</name></name> <operator>=</operator> <call><name>easy_hash_code</name><argument_list>(<argument><expr><operator>&amp;</operator><name>group_id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_node_t</name> <operator>*</operator><operator>)</operator><call><name>easy_client_list_find</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>node_list</name></name></expr></argument>,  <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_node_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_array_alloc</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>node_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_client_list_add</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>node_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>easy_hash_del_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>cidx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_client_list_add</name><argument_list>(<argument><expr><name>node_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// TODO</comment>
<function><type><specifier>static</specifier> <name>easy_kfc_node_t</name> <modifier>*</modifier></type><name>easy_kfc_get_node</name><parameter_list>(<parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>server_list</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_list_t</name>        <modifier>*</modifier></type><name>hnode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_node_t</name>         <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
    <macro><name>easy_hash_for_each</name><argument_list>(<argument>n</argument>, <argument>hnode</argument>, <argument>server_list</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_node_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>hnode</name> <operator>-</operator> <name><name>server_list</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>u</name><operator>.</operator><name>addr</name></name> <operator>==</operator> <operator>(</operator><name>id</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>node</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ä¿çæ¬æºæçgroup</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_kfc_local_group</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>, <parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>group_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_group_t</name>        <modifier>*</modifier></type><name>hgroup</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ogroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_node_t</name>         <modifier>*</modifier></type><name>hnode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_list_t</name>        <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name><name>address</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>, <decl><type ref="prev"/><name>address_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>n</name></decl>;</decl_stmt>

    <comment type="line">// å¾å°æ¬æºipå°å</comment>
    <expr_stmt><expr><name>address_size</name> <operator>=</operator> <call><name>easy_inet_hostaddr</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>group_list</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>group_list</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

        <while>while<condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ogroup</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>hgroup</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_group_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>node</name> <operator>-</operator> <name><name>group_list</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>

            <comment type="line">// old group</comment>
            <if_stmt><if>if <condition>(<expr><name><name>kfc</name><operator>-&gt;</operator><name>group_list</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ogroup</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_group_t</name> <operator>*</operator><operator>)</operator><call><name>easy_hash_find</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>group_list</name></name></expr></argument>,
                                             <argument><expr><name><name>hgroup</name><operator>-&gt;</operator><name>group_id</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>hgroup</name><operator>-&gt;</operator><name>role</name></name> <operator>=</operator> <name><name>ogroup</name><operator>-&gt;</operator><name>role</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>hgroup</name><operator>-&gt;</operator><name>server_addr</name></name> <operator>=</operator> <name><name>ogroup</name><operator>-&gt;</operator><name>server_addr</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>hgroup</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name><name>ogroup</name><operator>-&gt;</operator><name>server</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// ä»åè¡¨ä¸­æ¾ip</comment>
                <expr_stmt><expr><name><name>hgroup</name><operator>-&gt;</operator><name>role</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

                <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>address_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name>hnode</name> <operator>=</operator> <call><name>easy_kfc_get_node</name><argument_list>(<argument><expr><name><name>hgroup</name><operator>-&gt;</operator><name>server_list</name></name></expr></argument>, <argument><expr><name><name>address</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>hnode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>hgroup</name><operator>-&gt;</operator><name>server_addr</name></name> <operator>=</operator> <name><name>hnode</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>hgroup</name><operator>-&gt;</operator><name>role</name></name> <operator>|=</operator> <name>EASY_KFC_ROLE_SERVER</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æ ¹æ®åå­å¾å°easy_kfc_group_t
 */</comment>
<function><type><specifier>static</specifier> <name>easy_kfc_group_t</name> <modifier>*</modifier></type><name>easy_kfc_get_group</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>group_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>group_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_group_t</name>        <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>kfc</name><operator>-&gt;</operator><name>group_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"group_list is null\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>group_id</name> <operator>=</operator> <call><name>easy_kfc_conv_group_id</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>group_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>group</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_group_t</name> <operator>*</operator><operator>)</operator><call><name>easy_hash_find</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>group_list</name></name></expr></argument>, <argument><expr><name>group_id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"group not found: %s\n"</literal></expr></argument>, <argument><expr><name>group_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>group</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æ´æ°server addr
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_kfc_do_connect</name><parameter_list>(<parameter><decl><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_t</name>              <modifier>*</modifier></type><name>kfc</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>kfc</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_group_t</name>        <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_node_t</name>         <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_list_t</name>        <modifier>*</modifier></type><name>hnode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>n</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>kfc</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name><name>agent</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// ä¿çä¹åè¿æ¥</comment>
        <decl_stmt><decl><type><name>int</name></type>                     <name>oldcnt</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>slist</name><operator>.</operator><name>cnt</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>easy_kfc_node_t</name>         <modifier>*</modifier></type><name><name>addr</name><index>[<expr><name>oldcnt</name></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>oldcnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>slist</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_node_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>oldcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// æ¸æä¹åç</comment>
        <expr_stmt><expr><call><name>easy_pool_clear</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_agent_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// lock</comment>
        <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>group</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_group_t</name> <operator>*</operator><operator>)</operator><call><name>easy_hash_find</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>group_list</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>group_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>slist</name><operator>.</operator><name>cnt</name></name> <operator>=</operator> <name><name>group</name><operator>-&gt;</operator><name>server_list</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>slist</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>easy_kfc_node_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_node_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>agent</name><operator>-&gt;</operator><name>slist</name><operator>.</operator><name>cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// for each</comment>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <macro><name>easy_hash_for_each</name><argument_list>(<argument>n</argument>, <argument>hnode</argument>, <argument>group-&gt;server_list</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_node_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>hnode</name> <operator>-</operator> <name><name>group</name><operator>-&gt;</operator><name>server_list</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>slist</name><operator>.</operator><name>addr</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>kfc</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>

        <comment type="line">// è¿æ¥</comment>
        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>slist</name><operator>.</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>slist</name><operator>.</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>connected</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_connection_connect</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>chandler</name></name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>connected</name></name> <operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// æ­å¼èç</comment>
        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>oldcnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>addr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>connected</name></name> <operator>--</operator></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>connected</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>easy_connection_disconnect</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_hash_del_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_hash_del_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_array_free</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>node_array</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// unlock</comment>
        <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// åéå¿è·³</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_heartbeat</name> <parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// on_connect</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_connect</name> <parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>user_data</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>easy_kfc_node_t</name>         <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>easy_kfc_node_t</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_KFC_STATUS_UP</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// on_disconnect</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_disconnect</name> <parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>user_data</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>easy_kfc_node_t</name>         <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>easy_kfc_node_t</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_KFC_STATUS_DOWN</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_join_server_ex</name><parameter_list>(<parameter><decl><type><name>easy_kfc_t</name> <modifier>*</modifier></type><name>kfc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>group_name</name></decl></parameter>, <parameter><decl><type><name>easy_io_process_pt</name> <modifier>*</modifier></type><name>process</name></decl></parameter>,
                                   <parameter><decl><type><name>int</name></type> <name>request_cnt</name></decl></parameter>, <parameter><decl><type><name>easy_request_process_pt</name> <modifier>*</modifier></type><name>request_process</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_group_t</name>        <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_handler_pt</name>      <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_server_t</name>       <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>group</name> <operator>=</operator> <call><name>easy_kfc_get_group</name><argument_list>(<argument><expr><name>kfc</name></expr></argument>, <argument><expr><name>group_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>group</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// kfc role server</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>group</name><operator>-&gt;</operator><name>role</name></name> <operator>&amp;</operator> <name>EASY_KFC_ROLE_SERVER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"join failure."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// calloc</comment>
    <expr_stmt><expr><name>handler</name> <operator>=</operator> <operator>(</operator><name>easy_io_handler_pt</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_io_handler_pt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>server</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_server_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_server_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>group_id</name></name> <operator>=</operator> <name><name>group</name><operator>-&gt;</operator><name>group_id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>client_allow</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>request_process</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>request_cnt</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>cproc</name></name> <operator>=</operator> <name>request_process</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>etp</name></name> <operator>=</operator> <call><name>easy_thread_pool_create</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name></name></expr></argument>, <argument><expr><name>request_cnt</name></expr></argument>, <argument><expr><name>request_process</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name>process</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// server</comment>
    <expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>decode</name></name> <operator>=</operator> <name>easy_kfc_decode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>encode</name></name> <operator>=</operator> <name>easy_kfc_encode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>get_packet_id</name></name> <operator>=</operator> <name>easy_kfc_packet_id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name>easy_kfc_server_process</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handler</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>server</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>easy_connection_listen_addr</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name></name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>server_addr</name></name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// monitor</comment>
    <decl_stmt><decl><type><name>easy_io_handler_pt</name>      <modifier>*</modifier></type><name>mh</name> <init>= <expr><operator>(</operator><name>easy_io_handler_pt</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_io_handler_pt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>decode</name></name> <operator>=</operator> <name>easy_http_server_on_decode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>encode</name></name> <operator>=</operator> <name>easy_http_server_on_encode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name>easy_kfc_monitor_process</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>kfc</name></expr>;</expr_stmt>

    <comment type="line">// history stat</comment>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>EASY_KFC_HIST_CNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>easy_summary_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>time</name> <operator>=</operator> <call><name>ev_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>hist_idx</name></name> <operator>=</operator> <operator>(</operator><name>EASY_KFC_HIST_CNT</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="line">// start monitor listen</comment>
    <decl_stmt><decl><type><name>easy_listen_t</name>           <modifier>*</modifier></type><name>lt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_addr_t</name></type>             <name>addr</name> <init>= <expr><call><name>easy_inet_add_port</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>server_addr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lt</name> <operator>=</operator> <call><name>easy_connection_listen_addr</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>mh</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>lt</name><operator>-&gt;</operator><name>hidden_sum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// hist watcher</comment>
    <expr_stmt><expr><name>ioth</name> <operator>=</operator> <operator>(</operator><name>easy_io_thread_t</name> <operator>*</operator><operator>)</operator><call><name>easy_thread_pool_index</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>io_thread_pool</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_timer_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>hist_watcher</name></name></expr></argument>, <argument><expr><name>easy_kfc_hist_watcher_process</name></expr></argument>, <argument><expr><literal type="number">0.</literal></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>hist_watcher</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>kfc</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_timer_start</name> <argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>hist_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <name>server</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
<label><name>error_exit</name>:</label>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kfc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_server_process</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_server_t</name>       <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>easy_kfc_server_t</name> <operator>*</operator><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_packet_t</name>       <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>easy_kfc_packet_t</name> <operator>*</operator><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>ipacket</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>group_id</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>group_id</name></name> <operator>||</operator> <call><name>easy_kfc_check_ip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// ping</comment>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>easy_kfc_packet_t</name>       <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>easy_kfc_packet_rnew</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>chid</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>chid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>group_id</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>group_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>opacket</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
        <return>return <expr><name>EASY_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// process</comment>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>process</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>process</name></name><operator>)</operator><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cproc</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cproc</name></name><operator>)</operator><operator>(</operator><name>r</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>args</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// push work thread</comment>
    <expr_stmt><expr><call><name>easy_thread_pool_push</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>etp</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>chid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EASY_AGAIN</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_monitor_process</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_t</name>              <modifier>*</modifier></type><name>kfc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_http_request_t</name>     <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_summary_t</name>          <modifier>*</modifier></type><name>diff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_summary_t</name>          <modifier>*</modifier></type><name>sum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>minute</name></decl>;</decl_stmt>

    <comment type="line">// process uri</comment>
    <expr_stmt><expr><name>kfc</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_t</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>easy_http_request_t</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>ipacket</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>str_path</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>str_path</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// args</comment>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>easy_http_get_args</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"5min"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>minute</name> <operator>=</operator> <name><name>kfc</name><operator>-&gt;</operator><name>hist_idx</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>minute</name> <operator>=</operator> <name><name>kfc</name><operator>-&gt;</operator><name>hist_idx</name></name> <operator>+</operator> <name>EASY_KFC_HIST_CNT</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="line">// hist summary</comment>
    <expr_stmt><expr><name>minute</name> <operator>%=</operator> <name>EASY_KFC_HIST_CNT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>kfc</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>minute</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>easy_summary_diff</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>eio_summary</name></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>diff</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <call><name>ev_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>sum</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>

    <comment type="line">// output</comment>
    <expr_stmt><expr><call><name>easy_summary_html_output</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>eio_summary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// print debug info</comment>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>easy_http_get_args</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type>                    <name><name>buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"showminute=%d, eio_summary\ntime=%.f"</literal></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><call><name>ev_time</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_summary_raw_output</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>eio_summary</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for<control>(<init><expr><name>minute</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>minute</name> <operator>&lt;</operator> <name>EASY_KFC_HIST_CNT</name></expr>;</condition> <incr><expr><name>minute</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>minute</name> <operator>==</operator> <name><name>kfc</name><operator>-&gt;</operator><name>hist_idx</name></name> <operator>%</operator> <name>EASY_KFC_HIST_CNT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>lnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"&gt;&gt; minute%d, cur=%d"</literal></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>hist_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>lnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"minute%d, cur=%d"</literal></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>hist_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>easy_summary_raw_output</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>minute</name></expr>]</index></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>easy_summary_raw_output</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><literal type="string">"diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>opacket</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// destroy</comment>
    <expr_stmt><expr><call><name>easy_summary_destroy</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_kfc_hist_watcher_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_timer</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_t</name>              <modifier>*</modifier></type><name>kfc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_summary_t</name>          <modifier>*</modifier></type><name>sum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>idx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>kfc</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_t</name> <operator>*</operator><operator>)</operator><name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>kfc</name><operator>-&gt;</operator><name>hist_idx</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>idx</name> <operator>%=</operator> <name>EASY_KFC_HIST_CNT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>kfc</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="line">// ækfc-&gt;eioå¤å¶å°æ°çsumä¸</comment>
    <expr_stmt><expr><call><name>easy_summary_copy</name><argument_list>(<argument><expr><name><name>kfc</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>eio_summary</name></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sum</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <call><name>ev_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>kfc</name><operator>-&gt;</operator><name>hist_idx</name></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_kfc_clear_node</name><parameter_list>(<parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>group_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_list_t</name>        <modifier>*</modifier></type><name>hnode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_group_t</name>        <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>
    <macro><name>easy_hash_for_each</name><argument_list>(<argument>n</argument>, <argument>hnode</argument>, <argument>group_list</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name>group</name> <operator>=</operator> <operator>(</operator><name>easy_kfc_group_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>hnode</name> <operator>-</operator> <name><name>group_list</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>server_list</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>easy_hash_clear</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>server_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>client_list</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>easy_hash_clear</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>client_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_check_ip</name><parameter_list>(<parameter><decl><type><name>easy_kfc_server_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_kfc_client_t</name>       <modifier>*</modifier></type><name>cl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>client_allow</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>client_ip</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cl</name> <operator>=</operator> <call><name>easy_hash_find</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>client_ip</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>u</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>allow</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"check_ip: %s =&gt; %d, cl: %p"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// easy_kfc_range</comment>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_range_extra</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type>                    <name>d</name></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <while>while<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <name>c</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>j</name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isalnum</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_kfc_range_parse</name><parameter_list>(<parameter><decl><type><name>easy_kfc_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>result</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_kfc_range_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>easy_pool_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name> <operator>=</operator> <call><name>easy_pool_strdup</name><argument_list>(<argument><expr><name><name>range</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>q</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>q</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>easy_kfc_range_extra</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>max</name>                     <operator>*=</operator> <name><name>range</name><operator>-&gt;</operator><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>easy_pool_strdup</name><argument_list>(<argument><expr><name><name>range</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>q</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_range_get</name><parameter_list>(<parameter><decl><type><name>easy_kfc_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>cur</name></name> <operator>&gt;=</operator> <name><name>range</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><name><name>range</name><operator>-&gt;</operator><name>cur</name></name> <operator>++</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>p</name> <init>= <expr><name>result</name></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>range</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>index</name> <operator>%</operator> <name><name>range</name><operator>-&gt;</operator><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> <operator>/=</operator> <name><name>range</name><operator>-&gt;</operator><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>lnprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_kfc_range_free</name><parameter_list>(<parameter><decl><type><name>easy_kfc_range_t</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>range</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * round-robin
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_choice_round_robin</name><parameter_list>(<parameter><decl><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_saddr_t</name>        <modifier>*</modifier></type><name>saddr</name> <init>= <expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>slist</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// current</comment>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>saddr</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name><name>saddr</name><operator>-&gt;</operator><name>cur</name></name> <operator>++</operator><operator>)</operator> <operator>%</operator> <name><name>saddr</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>saddr</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>status</name> <operator>==</operator> <name>EASY_KFC_STATUS_DOWN</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>saddr</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><name>EASY_OK</name></expr>;</return>
    </block_content>}</block></for>

    <return>return <expr><name>EASY_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * response_time
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_kfc_choice_response_time</name><parameter_list>(<parameter><decl><type><name>easy_kfc_agent_t</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>lastrt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_saddr_t</name>        <modifier>*</modifier></type><name>saddr</name> <init>= <expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>slist</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_kfc_node_t</name>         <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// current</comment>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>saddr</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>saddr</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>status</name> <operator>==</operator> <name>EASY_KFC_STATUS_DOWN</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>saddr</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>lastrt</name> <operator>+</operator> <name><name>saddr</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>rt</name> <operator>&lt;</operator> <name>lastrt</name> <operator>||</operator> <name>lastrt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>lastrt</name> <operator>=</operator> <name><name>saddr</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>lastrt</name> <operator>+</operator> <name><name>saddr</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>rt</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>saddr</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lastrt</name></name> <operator>=</operator> <name>lastrt</name></expr>;</expr_stmt>
        <return>return <expr><name>EASY_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_ERROR</name></expr>;</return>
</block_content>}</block></function>

</unit>
