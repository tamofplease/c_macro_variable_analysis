<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/util/easy_hash.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_hash.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_KEY_MAX_SIZE</name></cpp:macro> <cpp:value>65</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>easy_hash_getm</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type>         <name>easy_http_hdr_hseed</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_hash_string_tolower</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * åå»ºä¸easy_hash_t
 */</comment>
<function><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>easy_hash_create</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_hash_t</name>             <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_list_t</name>        <modifier>*</modifier><modifier>*</modifier></type><name>buckets</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>n</name> <init>= <expr><call><name>easy_hash_getm</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// alloc</comment>
    <expr_stmt><expr><name>buckets</name> <operator>=</operator> <operator>(</operator><name>easy_hash_list_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_hash_list_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>table</name> <operator>=</operator> <operator>(</operator><name>easy_hash_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_hash_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buckets</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>buckets</name></name> <operator>=</operator> <name>buckets</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>seqno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>table</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_hash_add</name><parameter_list>(<parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>easy_hash_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_list_t</name>        <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>easy_hash_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>&amp;=</operator> <name><name>table</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>

    <comment type="line">// init</comment>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>count</name></name> <operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>seqno</name></name> <operator>++</operator></expr>;</expr_stmt>

    <comment type="line">// add to list</comment>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>first</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>easy_hash_list_t</name> <operator>*</operator><operator>)</operator><name>list</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_hash_clear</name><parameter_list>(<parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_list_t</name>        <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>easy_hash_find</name><parameter_list>(<parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_list_t</name>        <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>easy_hash_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>&amp;=</operator> <name><name>table</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="line">// foreach</comment>
    <while>while<condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>key</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>list</name> <operator>-</operator> <name><name>table</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>easy_hash_find_ex</name><parameter_list>(<parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>easy_hash_cmp_pt</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_list_t</name>        <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>easy_hash_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>&amp;=</operator> <name><name>table</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="line">// foreach</comment>
    <while>while<condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>key</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>list</name> <operator>-</operator> <name><name>table</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>list</name> <operator>-</operator> <name><name>table</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>easy_hash_del</name><parameter_list>(<parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_hash_list_t</name>        <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>easy_hash_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>&amp;=</operator> <name><name>table</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="line">// foreach</comment>
    <while>while<condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>key</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_hash_del_node</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>count</name></name> <operator>--</operator></expr>;</expr_stmt>

            <return>return <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>list</name> <operator>-</operator> <name><name>table</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_hash_del_node</name><parameter_list>(<parameter><decl><type><name>easy_hash_list_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_hash_list_t</name>        <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>pprev</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>pprev</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pprev</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>pprev</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pprev</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <name>pprev</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_hash_dlist_add</name><parameter_list>(<parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>easy_hash_list_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>easy_hash_add</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>easy_hash_dlist_del</name><parameter_list>(<parameter><decl><type><name>easy_hash_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>object</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>easy_hash_del</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>(</operator><name>easy_list_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>object</name> <operator>+</operator> <name><name>table</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_hash_list_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>object</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * string hash
 */</comment>
<function><type><name>easy_hash_string_t</name> <modifier>*</modifier></type><name>easy_hash_string_create</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ignore_case</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_hash_string_t</name>      <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_string_pair_t</name>      <modifier>*</modifier><modifier>*</modifier></type><name>buckets</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>n</name> <init>= <expr><call><name>easy_hash_getm</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// alloc</comment>
    <expr_stmt><expr><name>buckets</name> <operator>=</operator> <operator>(</operator><name>easy_string_pair_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_string_pair_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>table</name> <operator>=</operator> <operator>(</operator><name>easy_hash_string_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_hash_string_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buckets</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>buckets</name></name> <operator>=</operator> <name>buckets</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>ignore_case</name></name> <operator>=</operator> <name>ignore_case</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>table</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * add string to table
 */</comment>
<function><type><name>void</name></type> <name>easy_hash_string_add</name><parameter_list>(<parameter><decl><type><name>easy_hash_string_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>easy_string_pair_t</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"/><name><name>buffer</name><index>[<expr><name>EASY_KEY_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>easy_buf_string_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

    <comment type="line">// è½¬å°å</comment>
    <if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>ignore_case</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>easy_hash_string_tolower</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>EASY_KEY_MAX_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>easy_fnv_hashcode</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>easy_http_hdr_hseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>&amp;=</operator> <name><name>table</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>count</name></name> <operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * find string
 */</comment>
<function><type><name>easy_string_pair_t</name> <modifier>*</modifier></type><name>easy_hash_string_get</name><parameter_list>(<parameter><decl><type><name>easy_hash_string_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_string_pair_t</name>      <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>buffer</name><index>[<expr><name>EASY_KEY_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="line">// è½¬å°å</comment>
    <if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>ignore_case</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>easy_hash_string_tolower</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>EASY_KEY_MAX_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>easy_fnv_hashcode</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>easy_http_hdr_hseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>&amp;=</operator> <name><name>table</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>

    <comment type="line">// ignore_case</comment>
    <if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>ignore_case</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type>                    <name><name>buffer1</name><index>[<expr><name>EASY_KEY_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

        <for>for<control>(<init><expr><name>t</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</init> <condition><expr><name>t</name></expr>;</condition> <incr><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>easy_hash_string_tolower</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buffer1</name></expr></argument>, <argument><expr><name>EASY_KEY_MAX_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>buffer1</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>t</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <for>for<control>(<init><expr><name>t</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</init> <condition><expr><name>t</name></expr>;</condition> <incr><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>t</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * delete string
 */</comment>
<function><type><name>easy_string_pair_t</name> <modifier>*</modifier></type><name>easy_hash_string_del</name><parameter_list>(<parameter><decl><type><name>easy_hash_string_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_string_pair_t</name>      <modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>buffer</name><index>[<expr><name>EASY_KEY_MAX_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buffer1</name><index>[<expr><name>EASY_KEY_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="line">// è½¬å°å</comment>
    <if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>ignore_case</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>easy_hash_string_tolower</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>EASY_KEY_MAX_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>easy_fnv_hashcode</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>easy_http_hdr_hseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>&amp;=</operator> <name><name>table</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>

    <comment type="line">// list</comment>
    <for>for<control>(<init><expr><name>t</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name></expr><operator>,</operator> <expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</init> <condition><expr><name>t</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>t</name></expr><operator>,</operator> <expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>ignore_case</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_hash_string_tolower</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buffer1</name></expr></argument>, <argument><expr><name>EASY_KEY_MAX_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>buffer1</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// delete from list</comment>
        <if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>count</name></name> <operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>t</name></expr>;</return>
    </block_content>}</block></for>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * delete string
 */</comment>
<function><type><name>easy_string_pair_t</name> <modifier>*</modifier></type><name>easy_hash_pair_del</name><parameter_list>(<parameter><decl><type><name>easy_hash_string_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>easy_string_pair_t</name> <modifier>*</modifier></type><name>pair</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_string_pair_t</name>      <modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>buffer</name><index>[<expr><name>EASY_KEY_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>len</name></decl>;</decl_stmt>

    <comment type="line">// è½¬å°å</comment>
    <if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>ignore_case</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>easy_hash_string_tolower</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>EASY_KEY_MAX_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>pair</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>pair</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>easy_fnv_hashcode</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>easy_http_hdr_hseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>n</name> <operator>&amp;=</operator> <name><name>table</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>

    <comment type="line">// list</comment>
    <for>for<control>(<init><expr><name>t</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name></expr><operator>,</operator> <expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</init> <condition><expr><name>t</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>t</name></expr><operator>,</operator> <expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>pair</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="line">// delete from list</comment>
        <if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>count</name></name> <operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>t</name></expr>;</return>
    </block_content>}</block></for>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// hash 64 bit</comment>
<function><type><name>uint64_t</name></type> <name>easy_hash_key</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>uint64_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name>                    <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>key</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>easy_hash_code</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROL64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &lt;&lt; (n)) | ((x) &gt;&gt; (64-(n))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &lt;&lt; (n)) | ((x) &gt;&gt; (32-(n))))</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_LP64</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_CONSTANT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x##LLU)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_FMIX</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ k ^= k &gt;&gt; 33; k *= BIG_CONSTANT(0xff51afd7ed558ccd); k ^= k &gt;&gt; 33; k *= BIG_CONSTANT(0xc4ceb9fe1a85ec53); k ^= k &gt;&gt; 33; }</cpp:value></cpp:define>

<function><type><name>uint64_t</name></type> <name>easy_hash_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>h1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>k1</name></decl>, <decl><type ref="prev"/><name>k2</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name>           <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type>               <name>nblocks</name> <init>= <expr><name>len</name> <operator>/</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type>          <name>c1</name> <init>= <expr><call><name>BIG_CONSTANT</name><argument_list>(<argument><expr><literal type="number">0x87c37b91114253d5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type>          <name>c2</name> <init>= <expr><call><name>BIG_CONSTANT</name><argument_list>(<argument><expr><literal type="number">0x4cf5ad432745937f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name>          <modifier>*</modifier></type><name>blocks</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>data</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>h1</name> <operator>=</operator> <name>h2</name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblocks</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>k1</name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k2</name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>k1</name>                      <operator>*=</operator> <name>c1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name>  <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name>                      <operator>*=</operator> <name>c2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h1</name> <operator>=</operator> <name>h1</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">0x52dce729</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>k2</name>                      <operator>*=</operator> <name>c2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k2</name>  <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k2</name>                      <operator>*=</operator> <name>c1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h2</name> <operator>^=</operator> <name>k2</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>h2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><name>h2</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h2</name> <operator>=</operator> <name>h2</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">0x38495ab5</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name>           <modifier>*</modifier></type><name>tail</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>data</name> <operator>+</operator> <name>nblocks</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>k1</name> <operator>=</operator> <name>k2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <switch>switch<condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">15</literal></expr>:</case>
            <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>

        <case>case <expr><literal type="number">14</literal></expr>:</case>
            <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>

        <case>case <expr><literal type="number">13</literal></expr>:</case>
            <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

        <case>case <expr><literal type="number">12</literal></expr>:</case>
            <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

        <case>case <expr><literal type="number">11</literal></expr>:</case>
            <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

        <case>case <expr><literal type="number">10</literal></expr>:</case>
            <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

        <case>case  <expr><literal type="number">9</literal></expr>:</case>
            <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>k2</name>                      <operator>*=</operator> <name>c2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k2</name>  <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>k2</name>                      <operator>*=</operator> <name>c1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>h2</name> <operator>^=</operator> <name>k2</name></expr>;</expr_stmt>

        <case>case  <expr><literal type="number">8</literal></expr>:</case>
            <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>

        <case>case  <expr><literal type="number">7</literal></expr>:</case>
            <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>

        <case>case  <expr><literal type="number">6</literal></expr>:</case>
            <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>

        <case>case  <expr><literal type="number">5</literal></expr>:</case>
            <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

        <case>case  <expr><literal type="number">4</literal></expr>:</case>
            <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

        <case>case  <expr><literal type="number">3</literal></expr>:</case>
            <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

        <case>case  <expr><literal type="number">2</literal></expr>:</case>
            <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

        <case>case  <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tail</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>k1</name>                      <operator>*=</operator> <name>c1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k1</name>  <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>k1</name>                      <operator>*=</operator> <name>c2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
        </block_content>}</block></switch><empty_stmt>;</empty_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h2</name> <operator>^=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HASH_FMIX</name><argument_list>(<argument><expr><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HASH_FMIX</name><argument_list>(<argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>h1</name> <operator>+</operator> <name>h2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>uint64_t</name></type> <name>easy_hash_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type>          <name>m</name> <init>= <expr><call><name>__UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xc6a4a7935bd1e995</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type>               <name>r</name> <init>= <expr><literal type="number">47</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>h</name> <init>= <expr><name>seed</name> <operator>^</operator> <operator>(</operator><name>len</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name>          <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name>          <modifier>*</modifier></type><name>end</name> <init>= <expr><name>data</name> <operator>+</operator> <operator>(</operator><name>len</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>data</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type>                <name>k</name> <init>= <expr><operator>*</operator><name>data</name><operator>++</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>k</name>                       <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>^=</operator> <name>k</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name>                       <operator>*=</operator> <name>m</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>k</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name>                       <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name>     <modifier>*</modifier></type><name>data2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

    <switch>switch<condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">7</literal></expr>:</case>
        <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>data2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>

    <case>case <expr><literal type="number">6</literal></expr>:</case>
        <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>data2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>

    <case>case <expr><literal type="number">5</literal></expr>:</case>
        <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>data2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

    <case>case <expr><literal type="number">4</literal></expr>:</case>
        <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>data2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

    <case>case <expr><literal type="number">3</literal></expr>:</case>
        <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>data2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

    <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>data2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

    <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>data2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name>                       <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
    </block_content>}</block></switch><empty_stmt>;</empty_stmt>

    <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>h</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>h</name>                       <operator>*=</operator> <name>m</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>h</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>

    <return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>easy_hash_getm</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>n</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>size</name> <operator>&amp;=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>size</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// tolower</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_hash_string_tolower</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>dlen</name> <operator>=</operator> <name>slen</name> <operator>=</operator> <call><name>easy_min</name><argument_list>(<argument><expr><name>slen</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>slen</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>src</name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>src</name><operator>)</operator> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>dst</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>src</name><operator>)</operator> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>dst</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>src</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><name>src</name> <operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>dst</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><name>dlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>easy_fnv_hashcode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wrdlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type>          <name>PRIME</name> <init>= <expr><literal type="number">11400714819323198393ULL</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>hash64</name> <init>= <expr><literal type="number">2166136261U</literal> <operator>+</operator> <name>seed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>hash64B</name> <init>= <expr><name>hash64</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init>;</init> <condition><expr><name>wrdlen</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>wrdlen</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>hash64</name> <operator>=</operator> <operator>(</operator><name>hash64</name> <operator>^</operator> <operator>(</operator><call><name>ROL64</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>-</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>^</operator> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <name>PRIME</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hash64B</name> <operator>=</operator> <operator>(</operator><name>hash64B</name> <operator>^</operator> <operator>(</operator><call><name>ROL64</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>-</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>^</operator> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <name>PRIME</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>hash64</name> <operator>=</operator> <operator>(</operator><name>hash64</name> <operator>^</operator> <name>hash64B</name><operator>)</operator></expr>;</expr_stmt> <comment type="line">// Some mix, the simplest is given, maybe the B-line should be rolled by 32bits before xoring.</comment>

    <comment type="line">// Cases: 0,1,2,3,4,5,6,7,... 15,... 31</comment>
    <if_stmt><if>if <condition>(<expr><name>wrdlen</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>hash64</name> <operator>=</operator> <operator>(</operator><name>hash64</name> <operator>^</operator> <operator>(</operator><call><name>ROL</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>-</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>^</operator> <operator>*</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <name>PRIME</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hash64</name> <operator>=</operator> <operator>(</operator><name>hash64</name> <operator>^</operator> <operator>(</operator><call><name>ROL</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>-</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>^</operator> <operator>*</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <name>PRIME</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>wrdlen</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>hash64</name> <operator>=</operator> <operator>(</operator><name>hash64</name> <operator>^</operator> <operator>(</operator><call><name>ROL</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>-</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>^</operator> <operator>*</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <name>PRIME</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>wrdlen</name> <operator>&amp;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>hash64</name> <operator>=</operator> <operator>(</operator><name>hash64</name> <operator>^</operator> <operator>*</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator> <operator>*</operator> <name>PRIME</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>wrdlen</name> <operator>&amp;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>hash64</name> <operator>=</operator> <operator>(</operator><name>hash64</name> <operator>^</operator> <operator>*</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator> <operator>*</operator> <name>PRIME</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>wrdlen</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>hash64</name> <operator>=</operator> <operator>(</operator><name>hash64</name> <operator>^</operator> <operator>*</operator><name>p</name><operator>)</operator> <operator>*</operator> <name>PRIME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>hash64</name> <operator>^</operator> <operator>(</operator><name>hash64</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">//constructor hash_seed</comment>
<decl_stmt><decl><type><name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>constructor</name><operator>)</operator></expr></argument>)</argument_list> <name>easy_hash_start_</name><argument_list>()</argument_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>srandom</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>easy_http_hdr_hseed</name> <operator>=</operator> <call><name>random</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">6</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</unit>
