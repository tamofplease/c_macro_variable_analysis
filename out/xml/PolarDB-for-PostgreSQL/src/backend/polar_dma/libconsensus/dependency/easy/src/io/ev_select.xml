<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/io/ev_select.c"><comment type="block">/*
 * libev select fd activity backend
 *
 * Copyright (c) 2007,2008,2009,2010 Marc Alexander Lehmann &lt;libev@schmorp.de&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modifica-
 * tion, are permitted provided that the following conditions are met:
 *
 *   1.  Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *   2.  Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-
 * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-
 * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-
 * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU General Public License ("GPL") version 2 or any later version,
 * in which case the provisions of the GPL are applicable instead of
 * the above. If you wish to allow the use of your version of this file
 * only under the terms of the GPL and not to allow others to use your
 * version of this file under the BSD license, indicate your decision
 * by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL. If you do not delete the
 * provisions above, a recipient may use your version of this file under
 * either the BSD or the GPL.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<comment type="block">/* for unix systems */</comment>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EV_SELECT_USE_FD_SET</name></cpp:ifndef>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>NFDBITS</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>EV_SELECT_USE_FD_SET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>EV_SELECT_USE_FD_SET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_SELECT_IS_WINSOCKET</name></expr></cpp:if>
<cpp:undef># <cpp:directive>undef</cpp:directive> <name>EV_SELECT_USE_FD_SET</name></cpp:undef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>EV_SELECT_USE_FD_SET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:undef># <cpp:directive>undef</cpp:directive> <name>NFDBITS</name></cpp:undef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>NFDBITS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>EV_SELECT_USE_FD_SET</name></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>NFDBYTES</name></cpp:macro> <cpp:value>(NFDBITS / 8)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>select_modify</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>oev</name> <operator>==</operator> <name>nev</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_SELECT_USE_FD_SET</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_SELECT_IS_WINSOCKET</name></expr></cpp:if>
        <decl_stmt><decl><type><name>SOCKET</name></type>                  <name>handle</name> <init>= <expr><name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>handle</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <decl_stmt><decl><type><name>int</name></type>                     <name>handle</name> <init>= <expr><name>fd</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><literal type="string">"libev: fd &gt;= FD_SETSIZE passed to fd_set-based select backend"</literal><operator>,</operator> <name>fd</name> <operator>&lt;</operator> <name>FD_SETSIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* FD_SET is broken on windows (it adds the fd to a set twice or more,
         * which eventually leads to overflows). Need to call it only on changes.
         */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_SELECT_IS_WINSOCKET</name></expr></cpp:if>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>oev</name> <operator>^</operator> <name>nev</name><operator>)</operator> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <if_stmt><if>if <condition>(<expr><name>nev</name> <operator>&amp;</operator> <name>EV_READ</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>FD_CLR</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_SELECT_IS_WINSOCKET</name></expr></cpp:if>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>oev</name> <operator>^</operator> <name>nev</name><operator>)</operator> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <if_stmt><if>if <condition>(<expr><name>nev</name> <operator>&amp;</operator> <name>EV_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>FD_CLR</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

        <decl_stmt><decl><type><name>int</name></type>                     <name>word</name> <init>= <expr><name>fd</name> <operator>/</operator> <name>NFDBITS</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>fd_mask</name></type>                 <name>mask</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>fd</name> <operator>%</operator> <name>NFDBITS</name><operator>)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>vec_max</name> <operator>&lt;=</operator> <name>word</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type>                     <name>new_max</name> <init>= <expr><name>word</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>vec_ri</name> <operator>=</operator> <call><name>ev_realloc</name> <argument_list>(<argument><expr><name>vec_ri</name></expr></argument>, <argument><expr><name>new_max</name> <operator>*</operator> <name>NFDBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>vec_ro</name> <operator>=</operator> <call><name>ev_realloc</name> <argument_list>(<argument><expr><name>vec_ro</name></expr></argument>, <argument><expr><name>new_max</name> <operator>*</operator> <name>NFDBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* could free/malloc */</comment>
            <expr_stmt><expr><name>vec_wi</name> <operator>=</operator> <call><name>ev_realloc</name> <argument_list>(<argument><expr><name>vec_wi</name></expr></argument>, <argument><expr><name>new_max</name> <operator>*</operator> <name>NFDBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>vec_wo</name> <operator>=</operator> <call><name>ev_realloc</name> <argument_list>(<argument><expr><name>vec_wo</name></expr></argument>, <argument><expr><name>new_max</name> <operator>*</operator> <name>NFDBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* could free/malloc */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
            <expr_stmt><expr><name>vec_eo</name> <operator>=</operator> <call><name>ev_realloc</name> <argument_list>(<argument><expr><name>vec_eo</name></expr></argument>, <argument><expr><name>new_max</name> <operator>*</operator> <name>NFDBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* could free/malloc */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <for>for <control>(<init>;</init> <condition><expr><name>vec_max</name> <operator>&lt;</operator> <name>new_max</name></expr>;</condition> <incr><expr><operator>++</operator><name>vec_max</name></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>fd_mask</name> <operator>*</operator><operator>)</operator><name>vec_ri</name><operator>)</operator> <index>[<expr><name>vec_max</name></expr>]</index> <operator>=</operator>
                    <operator>(</operator><operator>(</operator><name>fd_mask</name> <operator>*</operator><operator>)</operator><name>vec_wi</name><operator>)</operator> <index>[<expr><name>vec_max</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>fd_mask</name> <operator>*</operator><operator>)</operator><name>vec_ri</name><operator>)</operator> <index>[<expr><name>word</name></expr>]</index> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>nev</name> <operator>&amp;</operator> <name>EV_READ</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>fd_mask</name> <operator>*</operator><operator>)</operator><name>vec_ri</name><operator>)</operator> <index>[<expr><name>word</name></expr>]</index> <operator>&amp;=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>fd_mask</name> <operator>*</operator><operator>)</operator><name>vec_wi</name><operator>)</operator> <index>[<expr><name>word</name></expr>]</index> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>nev</name> <operator>&amp;</operator> <name>EV_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>fd_mask</name> <operator>*</operator><operator>)</operator><name>vec_wi</name><operator>)</operator> <index>[<expr><name>word</name></expr>]</index> <operator>&amp;=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>select_poll</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>ev_tstamp</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type>          <name>tv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>fd_setsize</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>EV_RELEASE_CB</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EV_TV_SET</name> <argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_SELECT_USE_FD_SET</name></expr></cpp:if>
    <expr_stmt><expr><name>fd_setsize</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>fd_setsize</name> <operator>=</operator> <name>vec_max</name> <operator>*</operator> <name>NFDBYTES</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>vec_ro</name></expr></argument>, <argument><expr><name>vec_ri</name></expr></argument>, <argument><expr><name>fd_setsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>vec_wo</name></expr></argument>, <argument><expr><name>vec_wi</name></expr></argument>, <argument><expr><name>fd_setsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <comment type="block">/* pass in the write set as except set.
     * the idea behind this is to work around a windows bug that causes
     * errors to be reported as an exception and not by setting
     * the writable bit. this is so uncontrollably lame.
     */</comment>
    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>vec_eo</name></expr></argument>, <argument><expr><name>vec_wi</name></expr></argument>, <argument><expr><name>fd_setsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>select</name> <argument_list>(<argument><expr><name>vec_max</name> <operator>*</operator> <name>NFDBITS</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_ro</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_wo</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_eo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>EV_SELECT_USE_FD_SET</name></expr></cpp:elif>
    <expr_stmt><expr><name>fd_setsize</name> <operator>=</operator> <ternary><condition><expr><name>anfdmax</name> <operator>&lt;</operator> <name>FD_SETSIZE</name></expr> ?</condition><then> <expr><name>anfdmax</name></expr> </then><else>: <expr><name>FD_SETSIZE</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>select</name> <argument_list>(<argument><expr><name>fd_setsize</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_ro</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_wo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>select</name> <argument_list>(<argument><expr><name>vec_max</name> <operator>*</operator> <name>NFDBITS</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_ro</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_wo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>EV_ACQUIRE_CB</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_SELECT_IS_WINSOCKET</name></expr></cpp:if>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>WSAGetLastError</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WSABASEERR</name></cpp:ifdef>

        <comment type="block">/* on windows, select returns incompatible error codes, fix this */</comment>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>&gt;=</operator> <name>WSABASEERR</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>&lt;</operator> <name>WSABASEERR</name> <operator>+</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>WSAENOTSOCK</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>errno</name> <operator>-=</operator> <name>WSABASEERR</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>

        <comment type="block">/* select on windows erroneously returns EINVAL when no fd sets have been
         * provided (this is documented). what microsoft doesn't tell you that this bug
         * exists even when the fd sets _are_ provided, so we have to check for this bug
         * here and emulate by sleeping manually.
         * we also get EINVAL when the timeout is invalid, but we ignore this case here
         * and assume that EINVAL always means: you have to wait manually.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ev_sleep</name> <argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EBADF</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fd_ebadf</name> <argument_list>(<argument><expr><name>EV_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>syserr_cb</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fd_enomem</name> <argument_list>(<argument><expr><name>EV_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ev_syserr</name> <argument_list>(<argument><expr><literal type="string">"(libev) select"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_SELECT_USE_FD_SET</name></expr></cpp:if>

    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>                     <name>fd</name></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>fd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fd</name> <operator>&lt;</operator> <name>anfdmax</name></expr>;</condition> <incr><expr><operator>++</operator><name>fd</name></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>events</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type>                     <name>events</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_SELECT_IS_WINSOCKET</name></expr></cpp:if>
                <decl_stmt><decl><type><name>SOCKET</name></type>                  <name>handle</name> <init>= <expr><name><name>anfds</name> <index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>handle</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <decl_stmt><decl><type><name>int</name></type>                     <name>handle</name> <init>= <expr><name>fd</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_ro</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>events</name> <operator>|=</operator> <name>EV_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_wo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>events</name> <operator>|=</operator> <name>EV_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>

                <if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_eo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>events</name> <operator>|=</operator> <name>EV_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <if_stmt><if>if <condition>(<expr><call><name>expect_true</name> <argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <macro><name>fd_event</name> <argument_list>(<argument>EV_A_ fd</argument>, <argument>events</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt></block_content></block></for>
    </block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>                     <name>word</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>word</name> <operator>=</operator> <name>vec_max</name></expr>;</init> <condition><expr><name>word</name><operator>--</operator></expr>;</condition> <incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>fd_mask</name></type>                 <name>word_r</name> <init>= <expr><operator>(</operator><operator>(</operator><name>fd_mask</name> <operator>*</operator><operator>)</operator><name>vec_ro</name><operator>)</operator> <index>[<expr><name>word</name></expr>]</index></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>fd_mask</name></type>                 <name>word_w</name> <init>= <expr><operator>(</operator><operator>(</operator><name>fd_mask</name> <operator>*</operator><operator>)</operator><name>vec_wo</name><operator>)</operator> <index>[<expr><name>word</name></expr>]</index></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
            <expr_stmt><expr><name>word_w</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>fd_mask</name> <operator>*</operator><operator>)</operator><name>vec_eo</name><operator>)</operator> <index>[<expr><name>word</name></expr>]</index></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <if_stmt><if>if <condition>(<expr><name>word_r</name> <operator>||</operator> <name>word_w</name></expr>)</condition><block type="pseudo"><block_content>
                <for>for <control>(<init><expr><name>bit</name> <operator>=</operator> <name>NFDBITS</name></expr>;</init> <condition><expr><name>bit</name><operator>--</operator></expr>;</condition> <incr/>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>fd_mask</name></type>                 <name>mask</name> <init>= <expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>bit</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type>                     <name>events</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name>events</name> <operator>|=</operator> <ternary><condition><expr><name>word_r</name> <operator>&amp;</operator> <name>mask</name></expr> ?</condition><then> <expr><name>EV_READ</name></expr>  </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
                    <expr_stmt><expr><name>events</name> <operator>|=</operator> <ternary><condition><expr><name>word_w</name> <operator>&amp;</operator> <name>mask</name></expr> ?</condition><then> <expr><name>EV_WRITE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name>expect_true</name> <argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <macro><name>fd_event</name> <argument_list>(<argument>EV_A_ word * NFDBITS + bit</argument>, <argument>events</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name> <name>inline_size</name></type>
<name>select_init</name> <parameter_list>(<parameter><decl><type><name>EV_P_</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>backend_fudge</name>  <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt> <comment type="block">/* posix says this is zero */</comment>
    <expr_stmt><expr><name>backend_modify</name> <operator>=</operator> <name>select_modify</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>backend_poll</name>   <operator>=</operator> <name>select_poll</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EV_SELECT_USE_FD_SET</name></expr></cpp:if>
    <expr_stmt><expr><name>vec_ri</name>  <operator>=</operator> <call><name>ev_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vec_ro</name>  <operator>=</operator> <call><name>ev_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vec_wi</name>  <operator>=</operator> <call><name>ev_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator><name>vec_wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vec_wo</name>  <operator>=</operator> <call><name>ev_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><name>vec_eo</name>  <operator>=</operator> <call><name>ev_malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fd_set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>vec_max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>vec_ri</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>vec_ro</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>vec_wi</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>vec_wo</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><name>vec_eo</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>EVBACKEND_SELECT</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>inline_size</name></type>
<name>select_destroy</name> <parameter_list>(<parameter><decl><type><name>EV_P</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>vec_ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>vec_ro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>vec_wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>vec_wo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ev_free</name> <argument_list>(<argument><expr><name>vec_eo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


</unit>
