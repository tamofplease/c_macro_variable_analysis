<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/util/easy_array.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block" format="doxygen">/**
 * åºå®é¿åº¦æ°ç»åé
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_array.h"</cpp:file></cpp:include>

<function><type><name>easy_array_t</name> <modifier>*</modifier></type><name>easy_array_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>object_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_array_t</name>            <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pool</name> <operator>=</operator> <call><name>easy_pool_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>array</name> <operator>=</operator> <operator>(</operator><name>easy_array_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_array_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>object_size</name></name> <operator>=</operator> <call><name>easy_max</name><argument_list>(<argument><expr><name>object_size</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>easy_list_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>array</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_array_destroy</name><parameter_list>(<parameter><decl><type><name>easy_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>easy_array_alloc</name><parameter_list>(<parameter><decl><type><name>easy_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>count</name></name> <operator>--</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>array</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>(</operator><name>easy_list_t</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ptr</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>object_size</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_array_free</name><parameter_list>(<parameter><decl><type><name>easy_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>count</name></name> <operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>(</operator><name>easy_list_t</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
