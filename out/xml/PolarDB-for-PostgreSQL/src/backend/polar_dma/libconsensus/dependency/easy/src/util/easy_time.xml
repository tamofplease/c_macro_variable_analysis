<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/util/easy_time.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;easy_time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * localtimeå é¤tzset,ä¸èµ·è°ç¨ä¸æ¬¡tzset
 */</comment>
<function><type><name>int</name></type> <name>easy_localtime</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <name>int</name></type> <name><name>mon_yday</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index></name> <init>= <expr><block>{
        <comment type="block">/* Normal years.  */</comment>
        <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">273</literal></expr>, <expr><literal type="number">304</literal></expr>, <expr><literal type="number">334</literal></expr>, <expr><literal type="number">365</literal></expr> }</block></expr>,
        <comment type="block">/* Leap years.  */</comment>
        <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">213</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">274</literal></expr>, <expr><literal type="number">305</literal></expr>, <expr><literal type="number">335</literal></expr>, <expr><literal type="number">366</literal></expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECS_PER_HOUR</name></cpp:macro>   <cpp:value>(60 * 60)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECS_PER_DAY</name></cpp:macro>    <cpp:value>(SECS_PER_HOUR * 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISLEAP</name><parameter_list>(<parameter><type><name>year</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>((year) % 4 == 0 &amp;&amp; ((year) % 100 != 0 || (year) % 400 == 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIV</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>((a) / (b) - ((a) % (b) &lt; 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEAPS_THRU_END_OF</name><parameter_list>(<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DIV (y, 4) - DIV (y, 100) + DIV (y, 400))</cpp:value></cpp:define>

    <decl_stmt><decl><type><name>long</name> <name>int</name></type>                <name>days</name></decl>, <decl><type ref="prev"/><name>rem</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <name>int</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>days</name> <operator>=</operator> <operator>*</operator><name>t</name> <operator>/</operator> <name>SECS_PER_DAY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rem</name> <operator>=</operator> <operator>*</operator><name>t</name> <operator>%</operator> <name>SECS_PER_DAY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rem</name> <operator>-=</operator> <name>timezone</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>rem</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rem</name> <operator>+=</operator> <name>SECS_PER_DAY</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>days</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <while>while <condition>(<expr><name>rem</name> <operator>&gt;=</operator> <name>SECS_PER_DAY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rem</name> <operator>-=</operator> <name>SECS_PER_DAY</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>days</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name>rem</name> <operator>/</operator> <name>SECS_PER_HOUR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rem</name> <operator>%=</operator> <name>SECS_PER_HOUR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <name>rem</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <name>rem</name> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>
    <comment type="block">/* January 1, 1970 was a Thursday.  */</comment>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>days</name><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1970</literal></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>days</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>days</name> <operator>&gt;=</operator> <operator>(</operator><ternary><condition><expr><call><name>ISLEAP</name> <argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">366</literal></expr> </then><else>: <expr><literal type="number">365</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Guess a corrected year, assuming 365 days per year.  */</comment>
        <decl_stmt><decl><type><name>long</name> <name>int</name></type>                <name>yg</name> <init>= <expr><name>y</name> <operator>+</operator> <name>days</name> <operator>/</operator> <literal type="number">365</literal> <operator>-</operator> <operator>(</operator><name>days</name> <operator>%</operator> <literal type="number">365</literal> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Adjust DAYS and Y to match the guessed year.  */</comment>
        <expr_stmt><expr><name>days</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>yg</name> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <literal type="number">365</literal>
                 <operator>+</operator> <call><name>LEAPS_THRU_END_OF</name> <argument_list>(<argument><expr><name>yg</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
                 <operator>-</operator> <call><name>LEAPS_THRU_END_OF</name> <argument_list>(<argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>yg</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>y</name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>!=</operator> <name>y</name> <operator>-</operator> <literal type="number">1900</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>=</operator> <name>days</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ip</name> <operator>=</operator> <name><name>mon_yday</name><index>[<expr><call><name>ISLEAP</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">11</literal></expr>;</init> <condition><expr><name>days</name> <operator>&lt;</operator> <operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <name><name>ip</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>--</operator><name>y</name></expr></incr>)</control><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></for>

    <expr_stmt><expr><name>days</name> <operator>-=</operator> <name><name>ip</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name>days</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>constructor</name><operator>)</operator></expr></argument>)</argument_list> <name>easy_time_start_</name><argument_list>()</argument_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>int64_t</name></type> <name>easy_time_now</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type>          <name>tv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>__INT64_C</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
