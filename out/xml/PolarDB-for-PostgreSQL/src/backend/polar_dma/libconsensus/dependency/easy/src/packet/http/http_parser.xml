<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/packet/http/http_parser.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/* Copyright Joyent, Inc. and other Node contributors. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http/http_parser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;easy_define.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MIN</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALLBACK2</name><parameter_list>(<parameter><type><name>FOR</name></type></parameter>)</parameter_list></cpp:macro>                                               \
    <cpp:value>do {                                                             \
        if (settings-&gt;on_##FOR) {                                    \
            if (0 != settings-&gt;on_##FOR(parser)) return (p - data);  \
        }                                                            \
    } while (0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARK</name><parameter_list>(<parameter><type><name>FOR</name></type></parameter>)</parameter_list></cpp:macro>                                                    \
    <cpp:value>do {                                                             \
        FOR##_mark = p;                                              \
    } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALLBACK_NOCLEAR</name><parameter_list>(<parameter><type><name>FOR</name></type></parameter>)</parameter_list></cpp:macro>                                        \
    <cpp:value>do {                                                             \
        if (FOR##_mark) {                                            \
            if (settings-&gt;on_##FOR) {                                \
                if (0 != settings-&gt;on_##FOR(parser,                  \
                                            FOR##_mark,              \
                                            p - FOR##_mark))         \
                {                                                    \
                    return (p - data);                               \
                }                                                    \
            }                                                        \
        }                                                            \
    } while (0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALLBACK</name><parameter_list>(<parameter><type><name>FOR</name></type></parameter>)</parameter_list></cpp:macro>                                                \
    <cpp:value>do {                                                             \
        CALLBACK_NOCLEAR(FOR);                                       \
        FOR##_mark = NULL;                                           \
    } while (0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_CONNECTION</name></cpp:macro> <cpp:value>"proxy-connection"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNECTION</name></cpp:macro> <cpp:value>"connection"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTENT_LENGTH</name></cpp:macro> <cpp:value>"content-length"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_ENCODING</name></cpp:macro> <cpp:value>"transfer-encoding"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPGRADE</name></cpp:macro> <cpp:value>"upgrade"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNKED</name></cpp:macro> <cpp:value>"chunked"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEP_ALIVE</name></cpp:macro> <cpp:value>"keep-alive"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOSE</name></cpp:macro> <cpp:value>"close"</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name><name>easy_method_strings</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"DELETE"</literal></expr>
    , <expr><literal type="string">"GET"</literal></expr>
    , <expr><literal type="string">"HEAD"</literal></expr>
    , <expr><literal type="string">"POST"</literal></expr>
    , <expr><literal type="string">"PUT"</literal></expr>
    , <expr><literal type="string">"PURGE"</literal></expr>
    , <expr><literal type="string">"CONNECT"</literal></expr>
    , <expr><literal type="string">"OPTIONS"</literal></expr>
    , <expr><literal type="string">"TRACE"</literal></expr>
    , <expr><literal type="string">"COPY"</literal></expr>
    , <expr><literal type="string">"LOCK"</literal></expr>
    , <expr><literal type="string">"MKCOL"</literal></expr>
    , <expr><literal type="string">"MOVE"</literal></expr>
    , <expr><literal type="string">"PROPFIND"</literal></expr>
    , <expr><literal type="string">"PROPPATCH"</literal></expr>
    , <expr><literal type="string">"UNLOCK"</literal></expr>
    , <expr><literal type="string">"REPORT"</literal></expr>
    , <expr><literal type="string">"MKACTIVITY"</literal></expr>
    , <expr><literal type="string">"CHECKOUT"</literal></expr>
    , <expr><literal type="string">"MERGE"</literal></expr>
    , <expr><literal type="string">"M-SEARCH"</literal></expr>
    , <expr><literal type="string">"NOTIFY"</literal></expr>
    , <expr><literal type="string">"SUBSCRIBE"</literal></expr>
    , <expr><literal type="string">"UNSUBSCRIBE"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Tokens as defined by rfc 2616. Also lowercases them.
 *        token       = 1*&lt;any CHAR except CTLs or separators&gt;
 *     separators     = "(" | ")" | "&lt;" | "&gt;" | "@"
 *                    | "," | ";" | ":" | "\" | &lt;"&gt;
 *                    | "/" | "[" | "]" | "?" | "="
 *                    | "{" | "}" | SP | HT
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type>       <name><name>tokens</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
    <comment type="block">/*   0 nul    1 soh    2 stx    3 etx    4 eot    5 enq    6 ack    7 bel  */</comment>
    <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,
    <comment type="block">/*   8 bs     9 ht    10 nl    11 vt    12 np    13 cr    14 so    15 si   */</comment>
    <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,
    <comment type="block">/*  16 dle   17 dc1   18 dc2   19 dc3   20 dc4   21 nak   22 syn   23 etb */</comment>
    <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,
    <comment type="block">/*  24 can   25 em    26 sub   27 esc   28 fs    29 gs    30 rs    31 us  */</comment>
    <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,
    <comment type="block">/*  32 sp    33  !    34  "    35  #    36  $    37  %    38  &amp;    39  '  */</comment>
    <expr><literal type="char">' '</literal></expr>,      <expr><literal type="char">'!'</literal></expr>,     <expr><literal type="char">'"'</literal></expr>,     <expr><literal type="char">'#'</literal></expr>,     <expr><literal type="char">'$'</literal></expr>,     <expr><literal type="char">'%'</literal></expr>,     <expr><literal type="char">'&amp;'</literal></expr>,    <expr><literal type="char">'\''</literal></expr>,
    <comment type="block">/*  40  (    41  )    42  *    43  +    44  ,    45  -    46  .    47  /  */</comment>
    <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,      <expr><literal type="char">'*'</literal></expr>,     <expr><literal type="char">'+'</literal></expr>,      <expr><literal type="number">0</literal></expr>,      <expr><literal type="char">'-'</literal></expr>,     <expr><literal type="char">'.'</literal></expr>,     <expr><literal type="char">'/'</literal></expr>,
    <comment type="block">/*  48  0    49  1    50  2    51  3    52  4    53  5    54  6    55  7  */</comment>
    <expr><literal type="char">'0'</literal></expr>,     <expr><literal type="char">'1'</literal></expr>,     <expr><literal type="char">'2'</literal></expr>,     <expr><literal type="char">'3'</literal></expr>,     <expr><literal type="char">'4'</literal></expr>,     <expr><literal type="char">'5'</literal></expr>,     <expr><literal type="char">'6'</literal></expr>,     <expr><literal type="char">'7'</literal></expr>,
    <comment type="block">/*  56  8    57  9    58  :    59  ;    60  &lt;    61  =    62  &gt;    63  ?  */</comment>
    <expr><literal type="char">'8'</literal></expr>,     <expr><literal type="char">'9'</literal></expr>,      <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,
    <comment type="block">/*  64  @    65  A    66  B    67  C    68  D    69  E    70  F    71  G  */</comment>
    <expr><literal type="number">0</literal></expr>,      <expr><literal type="char">'a'</literal></expr>,     <expr><literal type="char">'b'</literal></expr>,     <expr><literal type="char">'c'</literal></expr>,     <expr><literal type="char">'d'</literal></expr>,     <expr><literal type="char">'e'</literal></expr>,     <expr><literal type="char">'f'</literal></expr>,     <expr><literal type="char">'g'</literal></expr>,
    <comment type="block">/*  72  H    73  I    74  J    75  K    76  L    77  M    78  N    79  O  */</comment>
    <expr><literal type="char">'h'</literal></expr>,     <expr><literal type="char">'i'</literal></expr>,     <expr><literal type="char">'j'</literal></expr>,     <expr><literal type="char">'k'</literal></expr>,     <expr><literal type="char">'l'</literal></expr>,     <expr><literal type="char">'m'</literal></expr>,     <expr><literal type="char">'n'</literal></expr>,     <expr><literal type="char">'o'</literal></expr>,
    <comment type="block">/*  80  P    81  Q    82  R    83  S    84  T    85  U    86  V    87  W  */</comment>
    <expr><literal type="char">'p'</literal></expr>,     <expr><literal type="char">'q'</literal></expr>,     <expr><literal type="char">'r'</literal></expr>,     <expr><literal type="char">'s'</literal></expr>,     <expr><literal type="char">'t'</literal></expr>,     <expr><literal type="char">'u'</literal></expr>,     <expr><literal type="char">'v'</literal></expr>,     <expr><literal type="char">'w'</literal></expr>,
    <comment type="block">/*  88  X    89  Y    90  Z    91  [    92  \    93  ]    94  ^    95  _  */</comment>
    <expr><literal type="char">'x'</literal></expr>,     <expr><literal type="char">'y'</literal></expr>,     <expr><literal type="char">'z'</literal></expr>,      <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,      <expr><literal type="char">'^'</literal></expr>,     <expr><literal type="char">'_'</literal></expr>,
    <comment type="block">/*  96  `    97  a    98  b    99  c   100  d   101  e   102  f   103  g  */</comment>
    <expr><literal type="char">'`'</literal></expr>,     <expr><literal type="char">'a'</literal></expr>,     <expr><literal type="char">'b'</literal></expr>,     <expr><literal type="char">'c'</literal></expr>,     <expr><literal type="char">'d'</literal></expr>,     <expr><literal type="char">'e'</literal></expr>,     <expr><literal type="char">'f'</literal></expr>,     <expr><literal type="char">'g'</literal></expr>,
    <comment type="block">/* 104  h   105  i   106  j   107  k   108  l   109  m   110  n   111  o  */</comment>
    <expr><literal type="char">'h'</literal></expr>,     <expr><literal type="char">'i'</literal></expr>,     <expr><literal type="char">'j'</literal></expr>,     <expr><literal type="char">'k'</literal></expr>,     <expr><literal type="char">'l'</literal></expr>,     <expr><literal type="char">'m'</literal></expr>,     <expr><literal type="char">'n'</literal></expr>,     <expr><literal type="char">'o'</literal></expr>,
    <comment type="block">/* 112  p   113  q   114  r   115  s   116  t   117  u   118  v   119  w  */</comment>
    <expr><literal type="char">'p'</literal></expr>,     <expr><literal type="char">'q'</literal></expr>,     <expr><literal type="char">'r'</literal></expr>,     <expr><literal type="char">'s'</literal></expr>,     <expr><literal type="char">'t'</literal></expr>,     <expr><literal type="char">'u'</literal></expr>,     <expr><literal type="char">'v'</literal></expr>,     <expr><literal type="char">'w'</literal></expr>,
    <comment type="block">/* 120  x   121  y   122  z   123  {   124  |   125  }   126  ~   127 del */</comment>
    <expr><literal type="char">'x'</literal></expr>,     <expr><literal type="char">'y'</literal></expr>,     <expr><literal type="char">'z'</literal></expr>,      <expr><literal type="number">0</literal></expr>,      <expr><literal type="char">'|'</literal></expr>,     <expr><literal type="char">'}'</literal></expr>,     <expr><literal type="char">'~'</literal></expr>,       <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type>     <name><name>unhex</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
    , <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
    , <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
    , <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
    , <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
    , <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
    , <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
    , <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type>    <name><name>normal_url_char</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
    <comment type="block">/*   0 nul    1 soh    2 stx    3 etx    4 eot    5 enq    6 ack    7 bel  */</comment>
    <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,
    <comment type="block">/*   8 bs     9 ht    10 nl    11 vt    12 np    13 cr    14 so    15 si   */</comment>
    <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,
    <comment type="block">/*  16 dle   17 dc1   18 dc2   19 dc3   20 dc4   21 nak   22 syn   23 etb */</comment>
    <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,
    <comment type="block">/*  24 can   25 em    26 sub   27 esc   28 fs    29 gs    30 rs    31 us  */</comment>
    <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">0</literal></expr>,
    <comment type="block">/*  32 sp    33  !    34  "    35  #    36  $    37  %    38  &amp;    39  '  */</comment>
    <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">0</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/*  40  (    41  )    42  *    43  +    44  ,    45  -    46  .    47  /  */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/*  48  0    49  1    50  2    51  3    52  4    53  5    54  6    55  7  */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/*  56  8    57  9    58  :    59  ;    60  &lt;    61  =    62  &gt;    63  ?  */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">0</literal></expr>,
    <comment type="block">/*  64  @    65  A    66  B    67  C    68  D    69  E    70  F    71  G  */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/*  72  H    73  I    74  J    75  K    76  L    77  M    78  N    79  O  */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/*  80  P    81  Q    82  R    83  S    84  T    85  U    86  V    87  W  */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/*  88  X    89  Y    90  Z    91  [    92  \    93  ]    94  ^    95  _  */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/*  96  `    97  a    98  b    99  c   100  d   101  e   102  f   103  g  */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 104  h   105  i   106  j   107  k   108  l   109  m   110  n   111  o  */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 112  p   113  q   114  r   115  s   116  t   117  u   118  v   119  w  */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 120  x   121  y   122  z   123  {   124  |   125  }   126  ~   127 del */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 128      129      130      131      132      133      134      135     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 136      137      138      139      140      141      142      143     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 144      145      146      147      148      149      150      151     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 152      153      154      155      156      157      158      159     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 160      161      162      163      164      165      166      167     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 168      169      170      171      172      173      174      175     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 176      177      178      179      180      181      182      183     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 184      185      186      187      188      189      190      191     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 192      193      194      195      196      197      198      199     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 200      201      202      203      204      205      206      207     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 208      209      210      211      212      213      214      215     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 216      217      218      219      220      221      222      223     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 224      225      226      227      228      229      230      231     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 232      233      234      235      236      237      238      239     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 240      241      242      243      244      245      246      247     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,
    <comment type="block">/* 248      249      250      251      252      253      254      255     */</comment>
    <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>,       <expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<enum>enum <name>state</name> <block>{
    <decl><name>s_dead</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> <comment type="block">/* important that this is &gt; 0 */</comment>

    , <decl><name>s_start_req_or_res</name></decl>
    , <decl><name>s_res_or_resp_H</name></decl>
    , <decl><name>s_start_res</name></decl>
    , <decl><name>s_res_H</name></decl>
    , <decl><name>s_res_HT</name></decl>
    , <decl><name>s_res_HTT</name></decl>
    , <decl><name>s_res_HTTP</name></decl>
    , <decl><name>s_res_first_http_major</name></decl>
    , <decl><name>s_res_http_major</name></decl>
    , <decl><name>s_res_first_http_minor</name></decl>
    , <decl><name>s_res_http_minor</name></decl>
    , <decl><name>s_res_first_status_code</name></decl>
    , <decl><name>s_res_status_code</name></decl>
    , <decl><name>s_res_status</name></decl>
    , <decl><name>s_res_line_almost_done</name></decl>

    , <decl><name>s_start_req</name></decl>

    , <decl><name>s_req_method</name></decl>
    , <decl><name>s_req_spaces_before_url</name></decl>
    , <decl><name>s_req_schema</name></decl>
    , <decl><name>s_req_schema_slash</name></decl>
    , <decl><name>s_req_schema_slash_slash</name></decl>
    , <decl><name>s_req_host_start</name></decl>
    , <decl><name>s_req_host</name></decl>
    , <decl><name>s_req_port</name></decl>
    , <decl><name>s_req_path</name></decl>
    , <decl><name>s_req_query_string_start</name></decl>
    , <decl><name>s_req_query_string</name></decl>
    , <decl><name>s_req_fragment_start</name></decl>
    , <decl><name>s_req_fragment</name></decl>
    , <decl><name>s_req_http_start</name></decl>
    , <decl><name>s_req_http_H</name></decl>
    , <decl><name>s_req_http_HT</name></decl>
    , <decl><name>s_req_http_HTT</name></decl>
    , <decl><name>s_req_http_HTTP</name></decl>
    , <decl><name>s_req_first_http_major</name></decl>
    , <decl><name>s_req_http_major</name></decl>
    , <decl><name>s_req_first_http_minor</name></decl>
    , <decl><name>s_req_http_minor</name></decl>
    , <decl><name>s_req_line_almost_done</name></decl>

    , <decl><name>s_header_field_start</name></decl>
    , <decl><name>s_header_field</name></decl>
    , <decl><name>s_header_value_start</name></decl>
    , <decl><name>s_header_value</name></decl>

    , <decl><name>s_header_almost_done</name></decl>

    , <decl><name>s_chunk_size_start</name></decl>
    , <decl><name>s_chunk_size</name></decl>
    , <decl><name>s_chunk_parameters</name></decl>
    , <decl><name>s_chunk_size_almost_done</name></decl>

    , <decl><name>s_headers_almost_done</name></decl>
    <comment type="block">/* Important: 's_headers_almost_done' must be the last 'header' state. All
     * states beyond this must be 'body' states. It is used for overflow
     * checking. See the PARSING_HEADER() macro.
     */</comment>

    , <decl><name>s_chunk_data</name></decl>
    , <decl><name>s_chunk_data_almost_done</name></decl>
    , <decl><name>s_chunk_data_done</name></decl>

    , <decl><name>s_body_identity</name></decl>
    , <decl><name>s_body_identity_eof</name></decl>
}</block>;</enum>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSING_HEADER</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(state &lt;= s_headers_almost_done)</cpp:value></cpp:define>


<enum>enum <name>header_states</name> <block>{
    <decl><name>h_general</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>
    , <decl><name>h_C</name></decl>
    , <decl><name>h_CO</name></decl>
    , <decl><name>h_CON</name></decl>

    , <decl><name>h_matching_connection</name></decl>
    , <decl><name>h_matching_proxy_connection</name></decl>
    , <decl><name>h_matching_content_length</name></decl>
    , <decl><name>h_matching_transfer_encoding</name></decl>
    , <decl><name>h_matching_upgrade</name></decl>

    , <decl><name>h_connection</name></decl>
    , <decl><name>h_content_length</name></decl>
    , <decl><name>h_transfer_encoding</name></decl>
    , <decl><name>h_upgrade</name></decl>

    , <decl><name>h_matching_transfer_encoding_chunked</name></decl>
    , <decl><name>h_matching_connection_keep_alive</name></decl>
    , <decl><name>h_matching_connection_close</name></decl>

    , <decl><name>h_transfer_encoding_chunked</name></decl>
    , <decl><name>h_connection_keep_alive</name></decl>
    , <decl><name>h_connection_close</name></decl>
}</block>;</enum>


<enum>enum <name>flags</name> <block>{
      <decl><name>F_CHUNKED</name>               <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>
    , <decl><name>F_CONNECTION_KEEP_ALIVE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>
    , <decl><name>F_CONNECTION_CLOSE</name>      <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>
    , <decl><name>F_TRAILING</name>              <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>
    , <decl><name>F_UPGRADE</name>               <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>
    , <decl><name>F_SKIPBODY</name>              <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>
}</block>;</enum>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CR</name></cpp:macro> <cpp:value>'\r'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LF</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unsigned char)(c | 0x20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOKEN</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tokens[(unsigned char)c]</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>start_state</name></cpp:macro> <cpp:value>(parser-&gt;type == HTTP_REQUEST ? s_start_req : s_start_res)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HTTP_PARSER_STRICT</name></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>STRICT_CHECK</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (cond) goto error</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_MESSAGE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(http_should_keep_alive(parser) ? start_state : s_dead)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>STRICT_CHECK</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_MESSAGE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>start_state</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>size_t</name></type> <name>http_parser_execute</name> <parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>http_parser_settings</name> <modifier>*</modifier></type><name>settings</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
                            <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type>                    <name>c</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name>p</name> <init>= <expr><name>data</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>                 <name>to_read</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>enum</name> <name>state</name></name></type>              <name>state</name> <init>= <expr><operator>(</operator>enum <name>state</name><operator>)</operator> <name><name>parser</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>enum</name> <name>header_states</name></name></type>      <name>header_state</name> <init>= <expr><operator>(</operator>enum <name>header_states</name><operator>)</operator> <name><name>parser</name><operator>-&gt;</operator><name>header_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>index</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>s_body_identity_eof</name></expr>:</case>
            <expr_stmt><expr><call><name>CALLBACK2</name><argument_list>(<argument><expr><name>message_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>

        <case>case <expr><name>s_dead</name></expr>:</case>
        <case>case <expr><name>s_start_req_or_res</name></expr>:</case>
        <case>case <expr><name>s_start_res</name></expr>:</case>
        <case>case <expr><name>s_start_req</name></expr>:</case>
            <return>return <expr><literal type="number">0</literal></expr>;</return>

        <default>default:</default>
            <return>return <expr><literal type="number">1</literal></expr>;</return> <comment type="line">// error</comment>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* technically we could combine all of these (except for url_mark) into one
       variable, saving stack space, but it seems more clear to have them
       separated. */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name>header_field_mark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name>header_value_mark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name>fragment_mark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name>query_string_mark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name>path_mark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name>url_mark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name>proto_mark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name>host_mark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>

    <case>case <expr><name>s_header_field</name></expr>:</case>
        <expr_stmt><expr><name>header_field_mark</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>s_header_value</name></expr>:</case>
        <expr_stmt><expr><name>header_value_mark</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>s_req_fragment</name></expr>:</case>
        <expr_stmt><expr><name>fragment_mark</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>s_req_query_string</name></expr>:</case>
        <expr_stmt><expr><name>query_string_mark</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>s_req_path</name></expr>:</case>
        <expr_stmt><expr><name>path_mark</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>s_req_schema</name></expr>:</case>
        <expr_stmt><expr><name>proto_mark</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>s_req_host</name></expr>:</case>
        <expr_stmt><expr><name>host_mark</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
        <break>break;</break>

    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>

    <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>

    <case>case <expr><name>s_req_path</name></expr>:</case>
    <case>case <expr><name>s_req_schema</name></expr>:</case>
    <case>case <expr><name>s_req_schema_slash</name></expr>:</case>
    <case>case <expr><name>s_req_schema_slash_slash</name></expr>:</case>
    <case>case <expr><name>s_req_port</name></expr>:</case>
    <case>case <expr><name>s_req_query_string_start</name></expr>:</case>
    <case>case <expr><name>s_req_query_string</name></expr>:</case>
    <case>case <expr><name>s_req_host</name></expr>:</case>
    <case>case <expr><name>s_req_fragment_start</name></expr>:</case>
    <case>case <expr><name>s_req_fragment</name></expr>:</case>
        <expr_stmt><expr><name>url_mark</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
        <break>break;</break>

    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>

    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>data</name></expr><operator>,</operator> <expr><name>pe</name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>len</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>pe</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

        <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>

        <case>case <expr><name>s_dead</name></expr>:</case>
            <comment type="block">/* this state is used after a 'Connection: close' message
             * the parser will error out if it reads another message
             */</comment>
            <goto>goto <name>error</name>;</goto>

        <case>case <expr><name>s_req_path</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>normal_url_char</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">' '</literal></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_http_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>CR</name></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_line_almost_done</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>LF</name></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'?'</literal></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_query_string_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'#'</literal></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_fragment_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <default>default:</default>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></switch>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_header_value</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>LOWER</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>header_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_almost_done</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>LF</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>header_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>header_almost_done</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <switch>switch <condition>(<expr><name>header_state</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>h_general</name></expr>:</case>
                <break>break;</break>

            <case>case <expr><name>h_connection</name></expr>:</case>
            <case>case <expr><name>h_transfer_encoding</name></expr>:</case>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Shouldn't get here."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>h_content_length</name></expr>:</case>

                <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>+=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
                <break>break;</break>

            <comment type="block">/* Transfer-Encoding: chunked */</comment>
            <case>case <expr><name>h_matching_transfer_encoding_chunked</name></expr>:</case>
                <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CHUNKED</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal>
                        <operator>||</operator> <name>c</name> <operator>!=</operator> <name><name>CHUNKED</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CHUNKED</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_transfer_encoding_chunked</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <break>break;</break>

            <comment type="block">/* looking for 'Connection: keep-alive' */</comment>
            <case>case <expr><name>h_matching_connection_keep_alive</name></expr>:</case>
                <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>KEEP_ALIVE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal>
                        <operator>||</operator> <name>c</name> <operator>!=</operator> <name><name>KEEP_ALIVE</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>KEEP_ALIVE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_connection_keep_alive</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <break>break;</break>

            <comment type="block">/* looking for 'Connection: close' */</comment>
            <case>case <expr><name>h_matching_connection_close</name></expr>:</case>
                <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CLOSE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name>c</name> <operator>!=</operator> <name><name>CLOSE</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CLOSE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_connection_close</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <break>break;</break>

            <case>case <expr><name>h_transfer_encoding_chunked</name></expr>:</case>
            <case>case <expr><name>h_connection_keep_alive</name></expr>:</case>
            <case>case <expr><name>h_connection_close</name></expr>:</case>

                <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break>break;</break>

            <default>default:</default>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_start_req_or_res</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CR</name> <operator>||</operator> <name>ch</name> <operator>==</operator> <name>LF</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>CALLBACK2</name><argument_list>(<argument><expr><name>message_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_or_resp_H</name></expr>;</expr_stmt></block_content></block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>HTTP_REQUEST</name></expr>;</expr_stmt>
                <goto>goto <name>start_req_method_assign</name>;</goto>
            </block_content>}</block></else></if_stmt>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_res_or_resp_H</name></expr>:</case>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>HTTP_RESPONSE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_HT</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>HTTP_REQUEST</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_HEAD</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_method</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <break>break;</break>

        <case>case <expr><name>s_start_res</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>CALLBACK2</name><argument_list>(<argument><expr><name>message_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'H'</literal></expr>:</case>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_H</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>CR</name></expr>:</case>
            <case>case <expr><name>LF</name></expr>:</case>
                <break>break;</break>

            <default>default:</default>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></switch>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_res_H</name></expr>:</case>
            <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_HT</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>s_res_HT</name></expr>:</case>
            <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_HTT</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>s_res_HTT</name></expr>:</case>
            <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_HTTP</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>s_res_HTTP</name></expr>:</case>
            <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_first_http_major</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>s_res_first_http_major</name></expr>:</case>

            <if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'1'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_http_major</name></expr>;</expr_stmt>
            <break>break;</break>

        <comment type="block">/* major HTTP version or dot */</comment>
        <case>case <expr><name>s_res_http_major</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_first_http_minor</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>+=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>&gt;</operator> <literal type="number">999</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>

        <comment type="block">/* first digit of minor HTTP version */</comment>
        <case>case <expr><name>s_res_first_http_minor</name></expr>:</case>

            <if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_http_minor</name></expr>;</expr_stmt>
            <break>break;</break>

        <comment type="block">/* minor HTTP version or end of request line */</comment>
        <case>case <expr><name>s_res_http_minor</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_first_status_code</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>+=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>&gt;</operator> <literal type="number">999</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_res_first_status_code</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>status_code</name></name> <operator>=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_status_code</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_res_status_code</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
                <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="char">' '</literal></expr>:</case>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_status</name></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>CR</name></expr>:</case>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_line_almost_done</name></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>LF</name></expr>:</case>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field_start</name></expr>;</expr_stmt>
                    <break>break;</break>

                <default>default:</default>
                    <goto>goto <name>error</name>;</goto>
                </block_content>}</block></switch>

                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>status_code</name></name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>status_code</name></name> <operator>+=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>status_code</name></name> <operator>&gt;</operator> <literal type="number">999</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_res_status</name></expr>:</case>

            <comment type="block">/* the human readable status. e.g. "NOT FOUND"
             * we are not humans so just ignore this */</comment>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_res_line_almost_done</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>LF</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field_start</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>

        <case>case <expr><name>s_res_line_almost_done</name></expr>:</case>
            <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <name>LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field_start</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>s_start_req</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CR</name> <operator>||</operator> <name>ch</name> <operator>==</operator> <name>LF</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>CALLBACK2</name><argument_list>(<argument><expr><name>message_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>method_case_insensitive</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ch</name> <operator>&lt;</operator> <literal type="char">'A'</literal> <operator>||</operator> <literal type="char">'Z'</literal> <operator>&lt;</operator> <name>ch</name><operator>)</operator><operator>)</operator>
                    <operator>||</operator> <operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></if></if_stmt>

<label><name>start_req_method_assign</name>:</label>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <operator>(</operator>enum <name>http_method</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>method_case_insensitive</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'C'</literal></expr>:</case>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_CONNECT</name></expr>;</expr_stmt> <comment type="block">/* or COPY, CHECKOUT */</comment>
                <break>break;</break>

            <case>case <expr><literal type="char">'D'</literal></expr>:</case>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_DELETE</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'G'</literal></expr>:</case>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_GET</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'H'</literal></expr>:</case>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_HEAD</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'L'</literal></expr>:</case>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_LOCK</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'M'</literal></expr>:</case>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_MKCOL</name></expr>;</expr_stmt> <comment type="block">/* or MOVE, MKACTIVITY, MERGE, M-SEARCH */</comment>
                <break>break;</break>

            <case>case <expr><literal type="char">'N'</literal></expr>:</case>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_NOTIFY</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'O'</literal></expr>:</case>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_OPTIONS</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'P'</literal></expr>:</case>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_POST</name></expr>;</expr_stmt> <comment type="block">/* or PROPFIND or PROPPATCH or PUT */</comment>
                <break>break;</break>

            <case>case <expr><literal type="char">'R'</literal></expr>:</case>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_REPORT</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'S'</literal></expr>:</case>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_SUBSCRIBE</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'T'</literal></expr>:</case>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_TRACE</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'U'</literal></expr>:</case>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_UNLOCK</name></expr>;</expr_stmt> <comment type="block">/* or UNSUBSCRIBE */</comment>
                <break>break;</break>

            <default>default:</default>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></switch>

            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_method</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_req_method</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>method_case_insensitive</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>              <modifier>*</modifier></type><name>matcher</name> <init>= <expr><name><name>method_strings</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name><name>matcher</name><index>[<expr><name>index</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_spaces_before_url</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name><name>matcher</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <empty_stmt>;</empty_stmt> <comment type="block">/* nada */</comment>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>HTTP_CONNECT</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_CHECKOUT</name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">2</literal>  <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_COPY</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>HTTP_MKCOL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'O'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_MOVE</name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_MERGE</name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_MSEARCH</name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_MKACTIVITY</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>HTTP_POST</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_PROPFIND</name></expr>;</expr_stmt> <comment type="block">/* or HTTP_PROPPATCH */</comment>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>HTTP_POST</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'U'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_PUT</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>HTTP_PUT</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_PURGE</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>HTTP_UNLOCK</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_UNSUBSCRIBE</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>HTTP_PROPFIND</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>HTTP_PROPPATCH</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><operator>++</operator><name>index</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_req_spaces_before_url</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_path</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>LOWER</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_schema</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <goto>goto <name>error</name>;</goto>
        </block_content>}</block>

        <case>case <expr><name>s_req_schema</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>LOWER</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_schema_slash</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_host</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>ch</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_host</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <goto>goto <name>error</name>;</goto>
        </block_content>}</block>

        <case>case <expr><name>s_req_schema_slash</name></expr>:</case>
            <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_schema_slash_slash</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>s_req_schema_slash_slash</name></expr>:</case>
            <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_host_start</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>s_req_host_start</name></expr>:</case>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>LOWER</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_host</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                <goto>goto <name>error</name>;</goto></block_content></block></else></if_stmt>

            <break>break;</break>

        <case>case <expr><name>s_req_host</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>LOWER</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">':'</literal></expr>:</case>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_port</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'/'</literal></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_path</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">' '</literal></expr>:</case>
                <comment type="block">/* The request line looks like:
                 *   "GET http://foo.bar.com HTTP/1.1"
                 * That is, there is no path.
                 */</comment>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_http_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <default>default:</default>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></switch>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_req_port</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'/'</literal></expr>:</case>
                <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_path</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">' '</literal></expr>:</case>
                <comment type="block">/* The request line looks like:
                 *   "GET http://foo.bar.com:1234 HTTP/1.1"
                 * That is, there is no path.
                 */</comment>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_http_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <default>default:</default>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></switch>

            <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_req_query_string_start</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>normal_url_char</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_query_string</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'?'</literal></expr>:</case>
                <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_query_string</name></expr>;</expr_stmt>
                <break>break;</break> <comment type="block">/* XXX ignore extra '?' ... is this right? */</comment>

            <case>case <expr><literal type="char">' '</literal></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_http_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>CR</name></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_line_almost_done</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>LF</name></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'#'</literal></expr>:</case>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_fragment_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <default>default:</default>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></switch>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_req_query_string</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>normal_url_char</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'?'</literal></expr>:</case>
                <comment type="block">/* allow extra '?' in query string */</comment>
                <break>break;</break>

            <case>case <expr><literal type="char">' '</literal></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_http_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>CR</name></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_line_almost_done</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>LF</name></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'#'</literal></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_fragment_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <default>default:</default>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></switch>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_req_fragment_start</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>normal_url_char</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_fragment</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">' '</literal></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_http_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>CR</name></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_line_almost_done</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>LF</name></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'?'</literal></expr>:</case>
                <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_fragment</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'#'</literal></expr>:</case>
                <break>break;</break>

            <default>default:</default>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></switch>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_req_fragment</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>normal_url_char</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">' '</literal></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_http_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>CR</name></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_line_almost_done</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>LF</name></expr>:</case>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field_start</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'?'</literal></expr>:</case>
            <case>case <expr><literal type="char">'#'</literal></expr>:</case>
                <break>break;</break>

            <default>default:</default>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></switch>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_req_http_start</name></expr>:</case>

            <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'H'</literal></expr>:</case>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_http_H</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">' '</literal></expr>:</case>
                <break>break;</break>

            <default>default:</default>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></switch>

            <break>break;</break>

        <case>case <expr><name>s_req_http_H</name></expr>:</case>
            <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_http_HT</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>s_req_http_HT</name></expr>:</case>
            <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_http_HTT</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>s_req_http_HTT</name></expr>:</case>
            <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_http_HTTP</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>s_req_http_HTTP</name></expr>:</case>
            <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_first_http_major</name></expr>;</expr_stmt>
            <break>break;</break>

        <comment type="block">/* first digit of major HTTP version */</comment>
        <case>case <expr><name>s_req_first_http_major</name></expr>:</case>

            <if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'1'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_http_major</name></expr>;</expr_stmt>
            <break>break;</break>

        <comment type="block">/* major HTTP version or dot */</comment>
        <case>case <expr><name>s_req_http_major</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_first_http_minor</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>+=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>&gt;</operator> <literal type="number">999</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>

        <comment type="block">/* first digit of minor HTTP version */</comment>
        <case>case <expr><name>s_req_first_http_minor</name></expr>:</case>

            <if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_http_minor</name></expr>;</expr_stmt>
            <break>break;</break>

        <comment type="block">/* minor HTTP version or end of request line */</comment>
        <case>case <expr><name>s_req_http_minor</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_req_line_almost_done</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>LF</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field_start</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* XXX allow spaces after digit? */</comment>

            <if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>+=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>&gt;</operator> <literal type="number">999</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>

        <comment type="block">/* end of request line */</comment>
        <case>case <expr><name>s_req_line_almost_done</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <name>LF</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field_start</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_header_field_start</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_headers_almost_done</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>LF</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* they might be just sending \n instead of \r\n so this would be
                 * the second \n to denote the end of headers*/</comment>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_headers_almost_done</name></expr>;</expr_stmt>
                <goto>goto <name>headers_almost_done</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TOKEN</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>header_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field</name></expr>;</expr_stmt>

            <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'c'</literal></expr>:</case>
                <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_C</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'p'</literal></expr>:</case>
                <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_matching_proxy_connection</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'t'</literal></expr>:</case>
                <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_matching_transfer_encoding</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'u'</literal></expr>:</case>
                <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_matching_upgrade</name></expr>;</expr_stmt>
                <break>break;</break>

            <default>default:</default>
                <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_header_field</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TOKEN</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
                <switch>switch <condition>(<expr><name>header_state</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>h_general</name></expr>:</case>
                    <break>break;</break>

                <case>case <expr><name>h_C</name></expr>:</case>
                    <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>header_state</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'o'</literal></expr> ?</condition><then> <expr><name>h_CO</name></expr> </then><else>: <expr><name>h_general</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>h_CO</name></expr>:</case>
                    <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>header_state</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'n'</literal></expr> ?</condition><then> <expr><name>h_CON</name></expr> </then><else>: <expr><name>h_general</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>h_CON</name></expr>:</case>
                    <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

                    <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="char">'n'</literal></expr>:</case>
                        <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_matching_connection</name></expr>;</expr_stmt>
                        <break>break;</break>

                    <case>case <expr><literal type="char">'t'</literal></expr>:</case>
                        <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_matching_content_length</name></expr>;</expr_stmt>
                        <break>break;</break>

                    <default>default:</default>
                        <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></switch>

                    <break>break;</break>

                <comment type="block">/* connection */</comment>

                <case>case <expr><name>h_matching_connection</name></expr>:</case>
                    <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CONNECTION</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal>
                            <operator>||</operator> <name>c</name> <operator>!=</operator> <name><name>CONNECTION</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CONNECTION</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_connection</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <break>break;</break>

                <comment type="block">/* proxy-connection */</comment>

                <case>case <expr><name>h_matching_proxy_connection</name></expr>:</case>
                    <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PROXY_CONNECTION</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal>
                            <operator>||</operator> <name>c</name> <operator>!=</operator> <name><name>PROXY_CONNECTION</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PROXY_CONNECTION</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_connection</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <break>break;</break>

                <comment type="block">/* content-length */</comment>

                <case>case <expr><name>h_matching_content_length</name></expr>:</case>
                    <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CONTENT_LENGTH</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal>
                            <operator>||</operator> <name>c</name> <operator>!=</operator> <name><name>CONTENT_LENGTH</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CONTENT_LENGTH</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_content_length</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <break>break;</break>

                <comment type="block">/* transfer-encoding */</comment>

                <case>case <expr><name>h_matching_transfer_encoding</name></expr>:</case>
                    <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TRANSFER_ENCODING</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal>
                            <operator>||</operator> <name>c</name> <operator>!=</operator> <name><name>TRANSFER_ENCODING</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TRANSFER_ENCODING</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_transfer_encoding</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <break>break;</break>

                <comment type="block">/* upgrade */</comment>

                <case>case <expr><name>h_matching_upgrade</name></expr>:</case>
                    <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UPGRADE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal>
                            <operator>||</operator> <name>c</name> <operator>!=</operator> <name><name>UPGRADE</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UPGRADE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_upgrade</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <break>break;</break>

                <case>case <expr><name>h_connection</name></expr>:</case>
                <case>case <expr><name>h_content_length</name></expr>:</case>
                <case>case <expr><name>h_transfer_encoding</name></expr>:</case>
                <case>case <expr><name>h_upgrade</name></expr>:</case>

                    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break>break;</break>

                <default>default:</default>
                    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Unknown header_state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></switch>

                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>header_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_value_start</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_almost_done</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>header_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>LF</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>header_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field_start</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <goto>goto <name>error</name>;</goto>
        </block_content>}</block>

        <case>case <expr><name>s_header_value_start</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>MARK</name><argument_list>(<argument><expr><name>header_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_value</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>LOWER</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>header_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_almost_done</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>LF</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>CALLBACK</name><argument_list>(<argument><expr><name>header_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field_start</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <switch>switch <condition>(<expr><name>header_state</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>h_upgrade</name></expr>:</case>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>F_UPGRADE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>h_transfer_encoding</name></expr>:</case>

                <comment type="block">/* looking for 'Transfer-Encoding: chunked' */</comment>
                <if_stmt><if>if <condition>(<expr><literal type="char">'c'</literal> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_matching_transfer_encoding_chunked</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <break>break;</break>

            <case>case <expr><name>h_content_length</name></expr>:</case>

                <if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>h_connection</name></expr>:</case>

                <comment type="block">/* looking for 'Connection: keep-alive' */</comment>
                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'k'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_matching_connection_keep_alive</name></expr>;</expr_stmt>
                    <comment type="block">/* looking for 'Connection: close' */</comment>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_matching_connection_close</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <break>break;</break>

            <default>default:</default>
                <expr_stmt><expr><name>header_state</name> <operator>=</operator> <name>h_general</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_header_almost_done</name></expr>:</case>
<label><name>header_almost_done</name>:</label> <block>{<block_content>
                <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <name>LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field_start</name></expr>;</expr_stmt>

                <switch>switch <condition>(<expr><name>header_state</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>h_connection_keep_alive</name></expr>:</case>
                    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>F_CONNECTION_KEEP_ALIVE</name></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>h_connection_close</name></expr>:</case>
                    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>F_CONNECTION_CLOSE</name></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>h_transfer_encoding_chunked</name></expr>:</case>
                    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>F_CHUNKED</name></expr>;</expr_stmt>
                    <break>break;</break>

                <default>default:</default>
                    <break>break;</break>
                </block_content>}</block></switch>

                <break>break;</break>
            </block_content>}</block>

        <case>case <expr><name>s_headers_almost_done</name></expr>:</case>
<label><name>headers_almost_done</name>:</label> <block>{<block_content>
                <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <name>LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_TRAILING</name></expr>)</condition> <block>{<block_content>
                    <comment type="block">/* End of a chunked request */</comment>
                    <expr_stmt><expr><call><name>CALLBACK2</name><argument_list>(<argument><expr><name>message_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>NEW_MESSAGE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_UPGRADE</name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>HTTP_CONNECT</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>upgrade</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* Here we call the headers_complete callback. This is somewhat
                 * different than other callbacks because if the user returns 1, we
                 * will interpret that as saying that this message has no body. This
                 * is needed for the annoying case of recieving a response to a HEAD
                 * request.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>settings</name><operator>-&gt;</operator><name>on_headers_complete</name></name></expr>)</condition> <block>{<block_content>
                    <switch>switch <condition>(<expr><call><name><name>settings</name><operator>-&gt;</operator><name>on_headers_complete</name></name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="number">0</literal></expr>:</case>
                        <break>break;</break>

                    <case>case <expr><literal type="number">1</literal></expr>:</case>
                        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>F_SKIPBODY</name></expr>;</expr_stmt>
                        <break>break;</break>

                    <default>default:</default>
                        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
                        <return>return <expr><name>p</name> <operator>-</operator> <name>data</name></expr>;</return> <comment type="block">/* Error */</comment>
                    </block_content>}</block></switch>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* Exit, the rest of the connect is in a different protocol. */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>upgrade</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>CALLBACK2</name><argument_list>(<argument><expr><name>message_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>p</name> <operator>-</operator> <name>data</name><operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_SKIPBODY</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>CALLBACK2</name><argument_list>(<argument><expr><name>message_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>NEW_MESSAGE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CHUNKED</name></expr>)</condition> <block>{<block_content>
                    <comment type="block">/* chunked encoding - ignore Content-Length header */</comment>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_chunk_size_start</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <comment type="block">/* Content-Length header given but zero: Content-Length: 0\r\n */</comment>
                        <expr_stmt><expr><call><name>CALLBACK2</name><argument_list>(<argument><expr><name>message_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>NEW_MESSAGE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <comment type="block">/* Content-Length header given and non-zero */</comment>
                        <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_body_identity</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HTTP_REQUEST</name> <operator>||</operator> <call><name>http_should_keep_alive</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <comment type="block">/* Assume content-length 0 - read the next */</comment>
                            <expr_stmt><expr><call><name>CALLBACK2</name><argument_list>(<argument><expr><name>message_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>NEW_MESSAGE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <comment type="block">/* Read body until EOF */</comment>
                            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_body_identity_eof</name></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>

                <break>break;</break>
            </block_content>}</block>

        <case>case <expr><name>s_body_identity</name></expr>:</case>
            <expr_stmt><expr><name>to_read</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>pe</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>to_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>settings</name><operator>-&gt;</operator><name>on_body</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>settings</name><operator>-&gt;</operator><name>on_body</name></name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>to_read</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>-=</operator> <name>to_read</name></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>CALLBACK2</name><argument_list>(<argument><expr><name>message_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>NEW_MESSAGE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>

        <comment type="block">/* read until EOF */</comment>
        <case>case <expr><name>s_body_identity_eof</name></expr>:</case>
            <expr_stmt><expr><name>to_read</name> <operator>=</operator> <name>pe</name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>to_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>settings</name><operator>-&gt;</operator><name>on_body</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>settings</name><operator>-&gt;</operator><name>on_body</name></name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>to_read</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>

        <case>case <expr><name>s_chunk_size_start</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CHUNKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>unhex</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_chunk_size</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_chunk_size</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CHUNKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_chunk_size_almost_done</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>unhex</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_chunk_parameters</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>*=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_chunk_parameters</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CHUNKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* just ignore this shit. TODO check for overflow */</comment>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_chunk_size_almost_done</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_chunk_size_almost_done</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CHUNKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <name>LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>F_TRAILING</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_header_field_start</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_chunk_data</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_chunk_data</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CHUNKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>to_read</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>pe</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>to_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>settings</name><operator>-&gt;</operator><name>on_body</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>settings</name><operator>-&gt;</operator><name>on_body</name></name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>to_read</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>to_read</name> <operator>==</operator> <name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_chunk_data_almost_done</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>-=</operator> <name>to_read</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>s_chunk_data_almost_done</name></expr>:</case>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CHUNKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <name>CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_chunk_data_done</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>s_chunk_data_done</name></expr>:</case>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CHUNKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>STRICT_CHECK</name><argument_list>(<argument><expr><name>ch</name> <operator>!=</operator> <name>LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>s_chunk_size_start</name></expr>;</expr_stmt>
            <break>break;</break>

        <default>default:</default>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"unhandled state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error</name>;</goto>
        </block_content>}</block></switch>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>CALLBACK_NOCLEAR</name><argument_list>(<argument><expr><name>header_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CALLBACK_NOCLEAR</name><argument_list>(<argument><expr><name>header_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CALLBACK_NOCLEAR</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CALLBACK_NOCLEAR</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CALLBACK_NOCLEAR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CALLBACK_NOCLEAR</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CALLBACK_NOCLEAR</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>s_req_schema</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>CALLBACK_NOCLEAR</name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>header_state</name></name> <operator>=</operator> <name>header_state</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

    <return>return <expr><name>len</name></expr>;</return>

<label><name>error</name>:</label>
    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>s_dead</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>p</name> <operator>-</operator> <name>data</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>http_should_keep_alive</name> <parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>http_major</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>http_minor</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* HTTP/1.1 */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CONNECTION_CLOSE</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* HTTP/1.0 or earlier */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CONNECTION_KEEP_ALIVE</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_method_str</name> <parameter_list>(<parameter><decl><type><name><name>enum</name> <name>http_method</name></name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>method_strings</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>http_parser_init</name> <parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>http_parser_type</name></name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t</name> <operator>==</operator> <name>HTTP_REQUEST</name></expr> ?</condition><then> <expr><name>s_start_req</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>t</name> <operator>==</operator> <name>HTTP_RESPONSE</name></expr> ?</condition><then> <expr><name>s_start_res</name></expr> </then><else>: <expr><name>s_start_req_or_res</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>upgrade</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>method_case_insensitive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_parser_has_error</name><parameter_list>(<parameter><decl><type><name>http_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>s_dead</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
