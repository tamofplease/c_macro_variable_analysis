<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/util/easy_pool.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * ç®åçåå­æ± 
 */</comment>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>easy_pool_alloc_block</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>easy_pool_alloc_large</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_pool_large_t</name> <modifier>*</modifier></type><name>large</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>easy_pool_realloc_pt</name></type>    <name>easy_pool_realloc</name> <init>= <expr><name>easy_pool_default_realloc</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_POOL_LOCK</name><parameter_list>(<parameter><type><name>pool</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int kcolt = pool-&gt;flags; if (unlikely(kcolt)) easy_spin_lock(&amp;pool-&gt;tlock);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_POOL_UNLOCK</name><parameter_list>(<parameter><type><name>pool</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (unlikely(kcolt)) easy_spin_unlock(&amp;pool-&gt;tlock);</cpp:value></cpp:define>

<function><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>easy_pool_create</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <comment type="line">// å¯¹é½</comment>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>easy_align</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_pool_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>EASY_POOL_ALIGNMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>easy_pool_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_pool_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tlock</name></name> <operator>=</operator> <name>EASY_SPIN_INITER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>p</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_pool_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>p</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_pool_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_MAGIC</name></cpp:ifdef>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>EASY_DEBUG_MAGIC_POOL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// clear</comment>
<function><type><name>void</name></type> <name>easy_pool_clear</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_pool_large_t</name>       <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_pool_cleanup_t</name>     <modifier>*</modifier></type><name>cl</name></decl>;</decl_stmt>

    <comment type="line">// cleanup</comment>
    <for>for <control>(<init><expr><name>cl</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>cleanup</name></name></expr>;</init> <condition><expr><name>cl</name></expr>;</condition> <incr><expr><name>cl</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>handler</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name><name>cl</name><operator>-&gt;</operator><name>handler</name></name>)<argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// large</comment>
    <for>for<control>(<init><expr><name>l</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>large</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_pool_realloc</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// other page</comment>
    <for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name>n</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_pool_realloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>cleanup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>large</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>pool</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_pool_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_pool_destroy</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>easy_pool_clear</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_MAGIC</name></cpp:ifdef>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>magic</name></name> <operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>easy_pool_realloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>easy_pool_alloc_ex</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name>                 <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>dsize</name></decl>;</decl_stmt>

    <comment type="line">// init</comment>
    <expr_stmt><expr><name>dsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>dsize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_pool_large_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>EASY_POOL_LOCK</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>

    <do>do <block>{<block_content>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>easy_align_ptr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>m</name> <operator>+</operator> <name>size</name> <operator>&lt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>m</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>p</name></expr>)</condition>;</do>

    <comment type="line">// éæ°åéä¸ååºæ¥</comment>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc_block</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;&amp;</operator> <name>dsize</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc_large</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><operator>(</operator><name>easy_pool_large_t</name> <operator>*</operator><operator>)</operator><name>m</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>EASY_POOL_UNLOCK</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>easy_pool_calloc</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name>                    <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>easy_pool_alloc_ex</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// set lock</comment>
<function><type><name>void</name></type> <name>easy_pool_set_lock</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// set realloc</comment>
<function><type><name>void</name></type> <name>easy_pool_set_allocator</name><parameter_list>(<parameter><decl><type><name>easy_pool_realloc_pt</name></type> <name>alloc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>easy_pool_realloc</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>alloc</name></expr> ?</condition><then> <expr><name>alloc</name></expr> </then><else>: <expr><name>easy_pool_default_realloc</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>easy_pool_default_realloc</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>realloc</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// default realloc</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>easy_pool_alloc_block</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name>                 <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>psize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newpool</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>psize</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>pool</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>newpool</name> <operator>=</operator> <operator>(</operator><name>easy_pool_t</name> <operator>*</operator><operator>)</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newpool</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>m</name> <operator>+</operator> <name>psize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newpool</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newpool</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>m</name> <operator>+=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>easy_pool_t</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>easy_align_ptr</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newpool</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>m</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>current</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>failed</name></name><operator>++</operator> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newpool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <ternary><condition><expr><name>current</name></expr> ?</condition><then> <expr><name>current</name></expr> </then><else>: <expr><name>newpool</name></expr></else></ternary></expr>;</expr_stmt>

    <return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>easy_pool_alloc_large</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_pool_large_t</name> <modifier>*</modifier></type><name>large</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>large</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>large</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>large</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>large</name></name> <operator>=</operator> <name>large</name></expr>;</expr_stmt>
    <return>return <expr><name><name>large</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * strdup
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>easy_pool_strdup</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>sz</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>easy_pool_cleanup_t</name> <modifier>*</modifier></type><name>easy_pool_cleanup_new</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>easy_pool_cleanup_pt</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_pool_cleanup_t</name> <modifier>*</modifier></type><name>cl</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cl</name> <operator>=</operator> <call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_pool_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>cl</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>cl</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_pool_cleanup_reg</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_pool_cleanup_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EASY_POOL_LOCK</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>cleanup</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>cleanup</name></name> <operator>=</operator> <name>cl</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EASY_POOL_UNLOCK</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
