<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/memory/easy_mem_page.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_mem_page.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>easy_mem_page_t</name> <modifier>*</modifier></type><name>easy_mem_rmqueue</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>order</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_mem_expand</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>easy_mem_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>high</name></decl></parameter>, <parameter><decl><type><name>easy_mem_area_t</name> <modifier>*</modifier></type><name>area</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_mem_merge_buddy_page</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>easy_mem_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>order</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>easy_mem_page_t</name> <modifier>*</modifier></type><name>easy_mem_page_ptr</name><parameter_list>(<parameter><decl><type><name>easy_mem_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>easy_mem_page_t</name> <modifier>*</modifier></type><name>easy_mem_index_to_page</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>easy_mem_page_to_index</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>easy_mem_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>easy_mem_find_buddy_index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>page_idx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>order</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>easy_mem_find_combined_index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>page_idx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>order</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>easy_mem_set_page_free</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>easy_mem_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>easy_mem_set_page_used</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>easy_mem_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// åå­åå§å, æå¤§æ¯zone 2G</comment>
<function><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>easy_mem_zone_create</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>max_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_mem_zone_t</name>         <modifier>*</modifier></type><name>zone</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name>           <modifier>*</modifier></type><name>memptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>                 <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>page_size</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>order</name></decl>, <decl><type ref="prev"/><name>asize</name></decl>;</decl_stmt>

    <comment type="line">// min = 128k</comment>
    <expr_stmt><expr><name>order</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <name>EASY_MEM_PAGE_SIZE</name></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>size</name> <operator>&lt;</operator> <name>max_size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>size</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>order</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>/</operator> <name>EASY_MEM_PAGE_SIZE</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mem_zone_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name>page_size</name> <operator>=</operator> <call><name>easy_align</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>EASY_MEM_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>asize</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>EASY_MEM_MAX_ORDER</name> <operator>+</operator> <name>EASY_MEM_PAGE_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>asize</name> <operator>=</operator> <call><name>easy_max</name><argument_list>(<argument><expr><name>page_size</name></expr></argument>, <argument><expr><call><name>easy_min</name><argument_list>(<argument><expr><name>asize</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// alloc memory</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>memptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>memalign</name><argument_list>(<argument><expr><name>EASY_MEM_PAGE_SIZE</name></expr></argument>, <argument><expr><name>asize</name> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// init</comment>
    <expr_stmt><expr><name>zone</name> <operator>=</operator> <operator>(</operator><name>easy_mem_zone_t</name> <operator>*</operator><operator>)</operator><name>memptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_mem_zone_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>curr</name></name> <operator>=</operator> <name>memptr</name> <operator>+</operator> <call><name>easy_align</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>curr_end</name></name> <operator>=</operator> <name>memptr</name> <operator>+</operator> <name>page_size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>max_order</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>order</name> <operator>&gt;=</operator> <name>EASY_MEM_MAX_ORDER</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>EASY_MEM_MAX_ORDER</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>order</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>mem_start</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>easy_align</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>zone</name><operator>-&gt;</operator><name>curr_end</name></name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>mem_last</name></name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>mem_start</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>mem_end</name></name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>mem_start</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name><name>zone</name><operator>-&gt;</operator><name>max_order</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zone</name><operator>-&gt;</operator><name>area</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>free_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>zone</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// åå­éæ¾</comment>
<function><type><name>void</name></type> <name>easy_mem_zone_destroy</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>easy_free</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// åå­åé</comment>
<function><type><name>easy_mem_page_t</name> <modifier>*</modifier></type><name>easy_mem_alloc_pages</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_mem_page_t</name>         <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_mem_area_t</name>         <modifier>*</modifier></type><name>area</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>order</name> <operator>&gt;</operator> <name><name>zone</name><operator>-&gt;</operator><name>max_order</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// æç©ºçpageç´æ¥åé</comment>
    <if_stmt><if>if <condition>(<expr><name><name>zone</name><operator>-&gt;</operator><name>free_pages</name></name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>order</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>page</name> <operator>=</operator> <call><name>easy_mem_rmqueue</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>page</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <comment type="line">// å å¥freelist</comment>
    <if_stmt><if>if <condition>(<expr><name><name>zone</name><operator>-&gt;</operator><name>mem_last</name></name> <operator>&lt;</operator> <name><name>zone</name><operator>-&gt;</operator><name>mem_end</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>page</name> <operator>=</operator> <operator>(</operator><name>easy_mem_page_t</name> <operator>*</operator><operator>)</operator> <name><name>zone</name><operator>-&gt;</operator><name>mem_last</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>mem_last</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>zone</name><operator>-&gt;</operator><name>max_order</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <name>EASY_MEM_PAGE_SHIFT</name><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>free_pages</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>zone</name><operator>-&gt;</operator><name>max_order</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>area</name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>area</name></name> <operator>+</operator> <name><name>zone</name><operator>-&gt;</operator><name>max_order</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_add_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>page</name><operator>-&gt;</operator><name>lru</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>area</name><operator>-&gt;</operator><name>free_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>nr_free</name></name> <operator>++</operator></expr>;</expr_stmt>

        <return>return <expr><call><name>easy_mem_rmqueue</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// åå­éæ¾</comment>
<function><type><name>void</name></type> <name>easy_mem_free_pages</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>easy_mem_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>           <name>page_idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name>           <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>page</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>ptr</name> <argument_list type="generic">&lt; <argument><expr><name><name>zone</name><operator>-&gt;</operator><name>mem_start</name></name> <operator>||</operator> <name>ptr</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>mem_last</name></name> <operator>-</operator> <name>EASY_MEM_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// page index</comment>
    <expr_stmt><expr><name>page_idx</name> <operator>=</operator> <call><name>easy_mem_page_to_index</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>zone</name><operator>-&gt;</operator><name>page_flags</name><index>[<expr><name>page_idx</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_mem_merge_buddy_page</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><operator>(</operator><name><name>zone</name><operator>-&gt;</operator><name>page_flags</name><index>[<expr><name>page_idx</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<function><type><specifier>static</specifier> <name>easy_mem_page_t</name> <modifier>*</modifier></type><name>easy_mem_rmqueue</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_mem_area_t</name>         <modifier>*</modifier></type><name>area</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_mem_page_t</name>         <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>order</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name><name>zone</name><operator>-&gt;</operator><name>max_order</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>area</name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>area</name></name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>area</name><operator>-&gt;</operator><name>free_list</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>easy_list_entry</name><argument_list>(<argument><expr><name><name>area</name><operator>-&gt;</operator><name>free_list</name><operator>.</operator><name>next</name></name></expr></argument>, <argument><expr><name>easy_mem_page_t</name></expr></argument>, <argument><expr><name>lru</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>page</name><operator>-&gt;</operator><name>lru</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>nr_free</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>free_pages</name></name> <operator>-=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>order</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_mem_expand</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_mem_set_page_used</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>page</name></expr>;</return>
    </block_content>}</block></for>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_mem_expand</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>easy_mem_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>high</name></decl></parameter>, <parameter><decl><type><name>easy_mem_area_t</name> <modifier>*</modifier></type><name>area</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_mem_page_t</name>         <modifier>*</modifier></type><name>newpage</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>           <name>size</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>high</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>high</name> <operator>&gt;</operator> <name>low</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>area</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>high</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>newpage</name> <operator>=</operator> <call><name>easy_mem_page_ptr</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_add_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newpage</name><operator>-&gt;</operator><name>lru</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>area</name><operator>-&gt;</operator><name>free_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>nr_free</name></name> <operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_mem_set_page_free</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>newpage</name></expr></argument>, <argument><expr><name>high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_mem_merge_buddy_page</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>easy_mem_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>page_idx</name></decl>, <decl><type ref="prev"/><name>buddy_idx</name></decl>, <decl><type ref="prev"/><name>combined_idx</name></decl>, <decl><type ref="prev"/><name>order_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_mem_page_t</name>         <modifier>*</modifier></type><name>buddy</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>order_size</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>order</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>page_idx</name> <operator>=</operator> <call><name>easy_mem_page_to_index</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>free_pages</name></name> <operator>+=</operator> <name>order_size</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>order</name> <operator>&lt;</operator> <name><name>zone</name><operator>-&gt;</operator><name>max_order</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>buddy_idx</name> <operator>=</operator> <call><name>easy_mem_find_buddy_index</name><argument_list>(<argument><expr><name>page_idx</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>zone</name><operator>-&gt;</operator><name>page_flags</name><index>[<expr><name>buddy_idx</name></expr>]</index></name> <operator>!=</operator> <name>order</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>buddy</name> <operator>=</operator> <call><name>easy_mem_index_to_page</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>buddy_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buddy</name><operator>-&gt;</operator><name>lru</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>area</name><index>[<expr><name>order</name></expr>]</index></name><operator>.</operator><name>nr_free</name> <operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>page_flags</name><index>[<expr><name>buddy_idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>combined_idx</name> <operator>=</operator> <call><name>easy_mem_find_combined_index</name><argument_list>(<argument><expr><name>page_idx</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>easy_mem_index_to_page</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>combined_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>page_idx</name> <operator>=</operator> <name>combined_idx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>order</name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>easy_mem_set_page_free</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_add_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>page</name><operator>-&gt;</operator><name>lru</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zone</name><operator>-&gt;</operator><name>area</name><index>[<expr><name>order</name></expr>]</index></name><operator>.</operator><name>free_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>area</name><index>[<expr><name>order</name></expr>]</index></name><operator>.</operator><name>nr_free</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// inline function</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>easy_mem_page_t</name> <modifier>*</modifier></type><name>easy_mem_page_ptr</name><parameter_list>(<parameter><decl><type><name>easy_mem_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>easy_mem_page_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>page</name><operator>)</operator> <operator>+</operator> <name>index</name> <operator>*</operator> <name>EASY_MEM_PAGE_SIZE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>easy_mem_page_to_index</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>easy_mem_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>page</name><operator>)</operator> <operator>-</operator> <name><name>zone</name><operator>-&gt;</operator><name>mem_start</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>EASY_MEM_PAGE_SHIFT</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>easy_mem_page_t</name> <modifier>*</modifier></type><name>easy_mem_index_to_page</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>easy_mem_page_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>zone</name><operator>-&gt;</operator><name>mem_start</name></name> <operator>+</operator> <operator>(</operator><name>index</name> <operator>&lt;&lt;</operator> <name>EASY_MEM_PAGE_SHIFT</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>easy_mem_find_buddy_index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>page_idx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>page_idx</name> <operator>^</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>order</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>easy_mem_find_combined_index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>page_idx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>page_idx</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>order</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>easy_mem_set_page_free</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>easy_mem_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>           <name>page_idx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>page_idx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>page</name><operator>)</operator> <operator>-</operator> <name><name>zone</name><operator>-&gt;</operator><name>mem_start</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>EASY_MEM_PAGE_SHIFT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>page_flags</name><index>[<expr><name>page_idx</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">0x0f</literal> <operator>&amp;</operator> <name>order</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>easy_mem_set_page_used</name><parameter_list>(<parameter><decl><type><name>easy_mem_zone_t</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>easy_mem_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>           <name>page_idx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>page_idx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>page</name><operator>)</operator> <operator>-</operator> <name><name>zone</name><operator>-&gt;</operator><name>mem_start</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>EASY_MEM_PAGE_SHIFT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>page_flags</name><index>[<expr><name>page_idx</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <name>order</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
