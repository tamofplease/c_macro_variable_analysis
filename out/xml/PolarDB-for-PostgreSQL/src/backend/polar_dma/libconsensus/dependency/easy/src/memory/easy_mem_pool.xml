<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/memory/easy_mem_pool.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_mem_pool.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>
<comment type="block" format="doxygen">/**
 * mem buffer
 */</comment>

<comment type="line">// ç§ææ°æ®ç»æ</comment>

<enum>enum <block>{
    <decl><name>EASY_MEMPOOL_ALLOC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,     <comment type="line">// åå­ç±poolç³è¯·</comment>
    <decl><name>EASY_MEMPOOL_DIRECT_ALLOC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,   <comment type="line">// åå­ç´æ¥ä»allocatorç³è¯·</comment>
}</block>;</enum>

<typedef>typedef <type><union>union <name>easy_mempool_atomic_t</name> <block>{
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>uint64_t</name></type>       <name>atomic</name></decl>;</decl_stmt>
    <struct>struct <block>{
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>int32_t</name></type>        <name>ref_cnt</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>int32_t</name></type>        <name>seq_num</name></decl>;</decl_stmt>
    }</block>;</struct>
}</block></union></type> <name>easy_mempool_atomic_t</name>;</typedef>

<comment type="line">// pageç»æ åé¢ç´æ¥è·pageåå­</comment>
<typedef>typedef <type><struct>struct <name>easy_mempool_page_t</name> <block>{
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>int32_t</name></type>        <name>base</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>                 <name>reserve</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>easy_mempool_page_t</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>easy_mempool_page_t</name>;</typedef>

<comment type="line">// ç®¡çpageçåæ°æ®ç»æ 16Byte</comment>
<typedef>typedef <type><struct>struct <name>easy_mempool_page_meta_t</name> <block>{
    <union>union <block>{
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>uint64_t</name></type>       <name>atomic</name></decl>;</decl_stmt>
        <struct>struct <block>{
            <decl_stmt><decl><type><specifier>volatile</specifier> <name>int32_t</name></type>        <name>ref_cnt</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>volatile</specifier> <name>int32_t</name></type>        <name>seq_num</name></decl>;</decl_stmt>
        }</block>;</struct>
    }</block>;</union>
    <decl_stmt><decl><type><name>easy_mempool_page_t</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>page</name></decl>;</decl_stmt>
}</block></struct></type> <name>easy_mempool_page_meta_t</name>;</typedef>

<comment type="line">// åéåå­çå¤´é¨ç»æ 16Byte</comment>
<typedef>typedef <type><struct>struct <name>easy_mempool_buf_t</name> <block>{
    <decl_stmt><decl><type><name>uint16_t</name></type>                <name>magic_num</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type>                 <name>alloc_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type>                 <name>reserve1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type>                <name>page_pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>reserve2</name></decl>;</decl_stmt>
}</block></struct></type> <name>easy_mempool_buf_t</name>;</typedef>

<comment type="line">// ä¸ä¸ªpoolç»æ</comment>
<struct>struct <name>easy_mempool_t</name> <block>{
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>int32_t</name></type>        <name>cur_page_pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>int32_t</name></type>        <name>direct_alloc_cnt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>int64_t</name></type>        <name>mem_total</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>                 <name>mem_limit</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>easy_mempool_allocator_t</name> <modifier>*</modifier></type><name>allocator</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>                 <name>page_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>                 <name>page_num</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_mempool_page_meta_t</name> <modifier>*</modifier></type><name>page_metas</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>                 <name>free_num</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>                 <name>reserve2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_mempool_page_t</name>     <modifier>*</modifier></type><name>free_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pthread_spinlock_t</name></type>      <name>free_list_lock</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>easy_mempool_thread_info_t</name> <block>{
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>int64_t</name></type>        <name>ref_cnt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_mempool_t</name>          <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>easy_mempool_thread_info_t</name>;</typedef>

<decl_stmt><decl><type><name>easy_mempool_allocator_t</name></type> <name>easy_mempool_g_allocator</name> <init>= <expr><block>{<expr><name>memalign</name></expr>, <expr><name>free</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type>          <name>EASY_MEMPOOL_BUF_MAGIC_NUM</name> <init>= <expr><literal type="number">0xabcd</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type>          <name>EASY_MEMPOOL_BUF_FREE_FLAG</name> <init>= <expr><literal type="number">0Xef12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>easy_mempool_t</name>   <modifier>*</modifier></type><name>easy_mempool_g_pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type>    <name>easy_mempool_g_thread_key</name> <init>= <expr><name>INT32_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type>          <name>easy_mempool_g_thread_memlimit</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int64_t</name></type> <name>easy_mempool_g_thread_memtotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////</comment>

<comment type="line">// ç§ææ¹æ³</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INC</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)__sync_add_and_fetch((val), 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INC_FETCH</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__sync_add_and_fetch((val), 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_DEC</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)__sync_sub_and_fetch((val), 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_DEC_FETCH</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__sync_sub_and_fetch((val), 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_ADD</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>addv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)__sync_fetch_and_add((val), addv)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SUB</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>addv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)__sync_fetch_and_sub((val), addv)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_CAS</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>cmpv</name></type></parameter>, <parameter><type><name>newv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__sync_val_compare_and_swap((val), (cmpv), (newv))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>easy_mempool_alloc_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>align_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_mempool_destroy_free_list_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>easy_mempool_page_t</name> <modifier>*</modifier></type><name>easy_mempool_alloc_page_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_mempool_free_page_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_mempool_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>easy_mempool_page_t</name> <modifier>*</modifier></type><name>easy_mempool_get_cur_page_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ensure_size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>page_pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>easy_mempool_alloc_from_page_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>page_size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>alloc_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_mempool_deref_page_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>page_pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>easy_mempool_dec_ref_cnt_and_inc_seq_num_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_page_meta_t</name> <modifier>*</modifier></type><name>page_meta</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_mempool_thread_destroy_callback_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////</comment>

<function><type><name>void</name></type> <name>easy_mempool_set_global_memlimit</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>easy_mempool_set_memlimit</name><argument_list>(<argument><expr><name>easy_mempool_g_pool</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>easy_mempool_get_global_memtotal</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>easy_mempool_get_memtotal</name><argument_list>(<argument><expr><name>easy_mempool_g_pool</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>easy_mempool_global_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name>                    <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>easy_mempool_alloc</name><argument_list>(<argument><expr><name>easy_mempool_g_pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>ptr</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>easy_mempool_buf_t</name>      <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>easy_mempool_buf_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_buf_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_mempool_alloc</name><argument_list>(<argument><expr><operator>(</operator><name>easy_mempool_t</name> <operator>*</operator><operator>)</operator><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>size</name></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_mempool_free</name><argument_list>(<argument><expr><name>easy_mempool_g_pool</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_mempool_set_thread_memlimit</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>easy_mempool_g_thread_memlimit</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>easy_mempool_get_thread_memtotal</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><name>easy_mempool_g_thread_memtotal</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>easy_mempool_thread_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name>                    <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>                    <modifier>*</modifier></type><name>alloc_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>easy_mempool_thread_info_t</name> <modifier>*</modifier></type><name>thread_info</name> <init>= <expr><operator>(</operator><name>easy_mempool_thread_info_t</name> <operator>*</operator><operator>)</operator><call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>easy_mempool_g_thread_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>thread_info</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>thread_info</name> <operator>=</operator> <operator>(</operator><name>easy_mempool_thread_info_t</name> <operator>*</operator><operator>)</operator><call><name><name>easy_mempool_g_allocator</name><operator>.</operator><name>memalign</name></name><argument_list>(<argument><expr><name>EASY_MEMPOOL_ALIGNMENT</name></expr></argument>,
                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_thread_info_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>thread_info</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>thread_info</name><operator>-&gt;</operator><name>ref_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>thread_info</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>easy_mempool_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>easy_mempool_g_thread_key</name></expr></argument>, <argument><expr><name>thread_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>size</name>
            <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>thread_info</name>
            <operator>&amp;&amp;</operator> <name>easy_mempool_g_thread_memlimit</name> <operator>&gt;=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>easy_mempool_g_thread_memtotal</name> <operator>+</operator> <name>size</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>alloc_ptr</name> <operator>=</operator> <call><name>easy_mempool_alloc</name><argument_list>(<argument><expr><name><name>thread_info</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_thread_info_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>alloc_ptr</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>easy_mempool_thread_info_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>alloc_ptr</name><operator>)</operator> <operator>=</operator> <name>thread_info</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>alloc_ptr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_thread_info_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ATOMIC_INC</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>thread_info</name><operator>-&gt;</operator><name>ref_cnt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ATOMIC_ADD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_mempool_g_thread_memtotal</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>ptr</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>easy_mempool_buf_t</name>      <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>easy_mempool_buf_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>-</operator>
                                       <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_thread_info_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_buf_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_mempool_free</name><argument_list>(<argument><expr><name><name>thread_info</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>alloc_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>size</name></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_thread_info_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>easy_mempool_buf_t</name>      <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>easy_mempool_buf_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_buf_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>easy_mempool_thread_info_t</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><operator>*</operator><operator>(</operator><name>easy_mempool_thread_info_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ATOMIC_SUB</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_mempool_g_thread_memtotal</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_thread_info_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>host</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_mempool_free</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>ATOMIC_DEC_FETCH</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>host</name><operator>-&gt;</operator><name>ref_cnt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_mempool_destroy</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>easy_mempool_g_allocator</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////</comment>

<function><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>easy_mempool_create</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_mempool_t</name>          <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>                 <name>page_num</name> <init>= <expr><name>EASY_MEMPOOL_PAGE_MAX_NUM</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>                 <name>size2alloc</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_page_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>page_num</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <operator>(</operator><name>easy_mempool_t</name> <operator>*</operator><operator>)</operator><call><name><name>easy_mempool_g_allocator</name><operator>.</operator><name>memalign</name></name><argument_list>(<argument><expr><name>EASY_MEMPOOL_ALIGNMENT</name></expr></argument>, <argument><expr><name>size2alloc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>cur_page_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>direct_alloc_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>mem_total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>mem_limit</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>allocator</name></name> <operator>=</operator> <operator>&amp;</operator><name>easy_mempool_g_allocator</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>page_size</name></name> <operator>=</operator> <ternary><condition><expr><name>size</name></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name>EASY_MEMPOOL_PAGE_SIZE</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>page_num</name></name> <operator>=</operator> <name>page_num</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>page_metas</name></name> <operator>=</operator> <operator>(</operator><name>easy_mempool_page_meta_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ret</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>page_metas</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_page_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>page_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>page_metas</name><index>[<expr><name><name>ret</name><operator>-&gt;</operator><name>cur_page_pos</name></name></expr>]</index></name><operator>.</operator><name>ref_cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>free_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>free_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pthread_spin_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ret</name><operator>-&gt;</operator><name>free_list_lock</name></name><operator>)</operator></expr></argument>, <argument><expr><name>PTHREAD_PROCESS_PRIVATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_mempool_destroy</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pool</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_mempool_clear</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>easy_mempool_g_allocator</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_mempool_clear</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pool</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type>                 <name>unfreed_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type>                 <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>EASY_MEMPOOL_PAGE_MAX_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>pool</name><operator>-&gt;</operator><name>page_metas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ref_cnt</name>
                    <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name><name>pool</name><operator>-&gt;</operator><name>cur_page_pos</name></name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>pool</name><operator>-&gt;</operator><name>page_metas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ref_cnt</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_mempool_free_page_</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>page_metas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>page_metas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>page</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>unfreed_num</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>easy_mempool_destroy_free_list_</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>unfreed_num</name>
                <operator>||</operator> <literal type="number">0</literal> <operator>!=</operator> <name><name>pool</name><operator>-&gt;</operator><name>direct_alloc_cnt</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"[WARN] there are still %d pool_buf or %d direct_buf used cannot free"</literal></expr></argument>,
                    <argument><expr><name>unfreed_num</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>direct_alloc_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>easy_mempool_alloc</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>easy_mempool_alloc_</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>EASY_MEMPOOL_ALIGNMENT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_mempool_free</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pool</name>
            <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>easy_mempool_buf_t</name>      <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>easy_mempool_buf_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_buf_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>EASY_MEMPOOL_BUF_MAGIC_NUM</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>magic_num</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type>                 <name>size</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>magic_num</name></name> <operator>=</operator> <name>EASY_MEMPOOL_BUF_FREE_FLAG</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>EASY_MEMPOOL_DIRECT_ALLOC</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>alloc_type</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>allocator</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ATOMIC_DEC</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>direct_alloc_cnt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>easy_mempool_deref_page_</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>page_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>ATOMIC_SUB</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>mem_total</name></name><operator>)</operator></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_mempool_set_memlimit</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pool</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>mem_limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_mempool_set_allocator</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_mempool_allocator_t</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pool</name>
            <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>allocator</name><operator>-&gt;</operator><name>memalign</name></name>
            <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>allocator</name><operator>-&gt;</operator><name>free</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>allocator</name></name> <operator>=</operator> <name>allocator</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>easy_mempool_get_memtotal</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type>                 <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pool</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>mem_total</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>easy_mempool_alloc_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>align_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name>                    <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>                 <name>alloc_size</name> <init>= <expr><name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_buf_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>alloc_size</name> <operator>=</operator> <call><name>easy_mempool_align</name><argument_list>(<argument><expr><name>alloc_size</name></expr></argument>, <argument><expr><name>align_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pool</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>mem_total</name></name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>mem_limit</name></name></expr>)</condition> <block>{<block_content>
            <comment type="line">// memory over limit</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>page_size</name></name> <operator>&lt;</operator> <name>alloc_size</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>easy_mempool_buf_t</name>      <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>easy_mempool_buf_t</name> <operator>*</operator><operator>)</operator><call><name><name>pool</name><operator>-&gt;</operator><name>allocator</name><operator>-&gt;</operator><name>memalign</name></name><argument_list>(<argument><expr><name>align_size</name></expr></argument>, <argument><expr><name>alloc_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>magic_num</name></name> <operator>=</operator> <name>EASY_MEMPOOL_BUF_MAGIC_NUM</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>alloc_type</name></name> <operator>=</operator> <name>EASY_MEMPOOL_DIRECT_ALLOC</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_buf_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ATOMIC_INC</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>direct_alloc_cnt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>easy_mempool_page_t</name>     <modifier>*</modifier></type><name>page</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>easy_mempool_buf_t</name>      <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int32_t</name></type>                 <name>page_pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

            <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>page</name> <operator>=</operator> <call><name>easy_mempool_get_cur_page_</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>alloc_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_pos</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>easy_mempool_buf_t</name> <operator>*</operator><operator>)</operator><call><name>easy_mempool_align_ptr</name><argument_list>(<argument><expr><call><name>easy_mempool_alloc_from_page_</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>, <argument><expr><name>alloc_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>align_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>ATOMIC_INC</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>page_metas</name><index>[<expr><name>page_pos</name></expr>]</index></name><operator>.</operator><name>ref_cnt</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>easy_mempool_deref_page_</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>page_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>magic_num</name></name> <operator>=</operator> <name>EASY_MEMPOOL_BUF_MAGIC_NUM</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>alloc_type</name></name> <operator>=</operator> <name>EASY_MEMPOOL_ALLOC</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>page_pos</name></name> <operator>=</operator> <name>page_pos</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_buf_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ATOMIC_ADD</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>mem_total</name></name><operator>)</operator></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_mempool_destroy_free_list_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pool</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>easy_mempool_page_t</name>     <modifier>*</modifier></type><name>iter</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>free_list</name></name></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>iter</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>easy_mempool_page_t</name>     <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>allocator</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>iter</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>easy_mempool_page_t</name> <modifier>*</modifier></type><name>easy_mempool_alloc_page_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_mempool_page_t</name>     <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pool</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>free_list_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>easy_mempool_page_t</name>     <modifier>*</modifier></type><name>page</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>free_list</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>page</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>free_list</name></name> <operator>=</operator> <name><name>page</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>free_num</name></name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>page</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>free_list_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>easy_mempool_page_t</name> <operator>*</operator><operator>)</operator><call><name><name>pool</name><operator>-&gt;</operator><name>allocator</name><operator>-&gt;</operator><name>memalign</name></name><argument_list>(<argument><expr><name>EASY_MEMPOOL_ALIGNMENT</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>page_size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_page_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_mempool_free_page_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_mempool_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pool</name>
            <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>page</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>free_list_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>EASY_MEMPOOL_PAGE_FREE_NUM</name> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>free_num</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>free_list</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>free_list</name></name> <operator>=</operator> <name>page</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>free_num</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>page</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>free_list_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>page</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>allocator</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_mempool_deref_page_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>page_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pool</name>
            <operator>&amp;&amp;</operator> <name><name>pool</name><operator>-&gt;</operator><name>page_num</name></name> <operator>&gt;</operator> <name>page_pos</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>easy_mempool_page_t</name>     <modifier>*</modifier></type><name>tmp_page</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>page_metas</name><index>[<expr><name>page_pos</name></expr>]</index></name><operator>.</operator><name>page</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>easy_mempool_dec_ref_cnt_and_inc_seq_num_</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>page_metas</name><index>[<expr><name>page_pos</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>tmp_page</name> <operator>==</operator> <call><name>ATOMIC_CAS</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>page_metas</name><index>[<expr><name>page_pos</name></expr>]</index></name><operator>.</operator><name>page</name><operator>)</operator></expr></argument>, <argument><expr><name>tmp_page</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_mempool_free_page_</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>tmp_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>easy_mempool_page_t</name> <modifier>*</modifier></type><name>easy_mempool_get_cur_page_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ensure_size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>page_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_mempool_page_t</name>     <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pool</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>int32_t</name></type>        <name>oldv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>int32_t</name></type>        <name>newv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>int32_t</name></type>        <name>cmpv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>easy_mempool_page_t</name>     <modifier>*</modifier></type><name>cur_page</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>oldv</name> <operator>!=</operator> <name><name>pool</name><operator>-&gt;</operator><name>cur_page_pos</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>oldv</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>cur_page_pos</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>newv</name> <operator>=</operator> <name>oldv</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cmpv</name> <operator>=</operator> <name>oldv</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ATOMIC_INC</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>page_metas</name><index>[<expr><name>oldv</name></expr>]</index></name><operator>.</operator><name>ref_cnt</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pool</name><operator>-&gt;</operator><name>page_metas</name><index>[<expr><name>oldv</name></expr>]</index></name><operator>.</operator><name>page</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>easy_mempool_page_t</name>     <modifier>*</modifier></type><name>tmp_page</name> <init>= <expr><call><name>easy_mempool_alloc_page_</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>tmp_page</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>ATOMIC_CAS</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>page_metas</name><index>[<expr><name>oldv</name></expr>]</index></name><operator>.</operator><name>page</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tmp_page</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>easy_mempool_free_page_</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>tmp_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><name>cur_page</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>page_metas</name><index>[<expr><name>oldv</name></expr>]</index></name><operator>.</operator><name>page</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_mempool_deref_page_</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>oldv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>page_size</name></name> <operator>-</operator> <name><name>cur_page</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator> <operator>&lt;</operator> <name>ensure_size</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int32_t</name></type>                 <name>base</name> <init>= <expr><name><name>cur_page</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>easy_mempool_deref_page_</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>oldv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>base</name></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>int32_t</name></type>                 <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

                <while>while <condition>(<expr><operator>++</operator><name>counter</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>page_num</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>newv</name> <operator>=</operator> <operator>(</operator><name>newv</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pool</name><operator>-&gt;</operator><name>page_num</name></name></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>ATOMIC_CAS</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>page_metas</name><index>[<expr><name>newv</name></expr>]</index></name><operator>.</operator><name>ref_cnt</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>oldv</name> <operator>==</operator> <call><name>ATOMIC_CAS</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>cur_page_pos</name></name><operator>)</operator></expr></argument>, <argument><expr><name>cmpv</name></expr></argument>, <argument><expr><name>newv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>easy_mempool_deref_page_</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>oldv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><call><name>easy_mempool_deref_page_</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>newv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>

                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>page_pos</name> <operator>=</operator> <name>oldv</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>cur_page</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>easy_mempool_alloc_from_page_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>page_size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>alloc_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name>                    <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>page</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>int32_t</name></type>        <name>oldv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>int32_t</name></type>        <name>newv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>int32_t</name></type>        <name>cmpv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>oldv</name> <operator>=</operator> <name><name>page</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>newv</name> <operator>=</operator> <name>oldv</name> <operator>+</operator> <name>alloc_size</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cmpv</name> <operator>=</operator> <name>oldv</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>newv</name> <operator>&gt;</operator> <name>page_size</name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>oldv</name> <operator>==</operator> <call><name>ATOMIC_CAS</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>page</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator></expr></argument>, <argument><expr><name>cmpv</name></expr></argument>, <argument><expr><name>newv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>page</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mempool_page_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>oldv</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>easy_mempool_dec_ref_cnt_and_inc_seq_num_</name><parameter_list>(<parameter><decl><type><name>easy_mempool_page_meta_t</name> <modifier>*</modifier></type><name>page_meta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>                 <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>page_meta</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>easy_mempool_atomic_t</name></type>   <name>oldv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>easy_mempool_atomic_t</name></type>   <name>newv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>easy_mempool_atomic_t</name></type>   <name>cmpv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>oldv</name><operator>.</operator><name>atomic</name></name> <operator>=</operator> <name><name>page_meta</name><operator>-&gt;</operator><name>atomic</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newv</name><operator>.</operator><name>atomic</name></name> <operator>=</operator> <name><name>oldv</name><operator>.</operator><name>atomic</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cmpv</name><operator>.</operator><name>atomic</name></name> <operator>=</operator> <name><name>oldv</name><operator>.</operator><name>atomic</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newv</name><operator>.</operator><name>ref_cnt</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>newv</name><operator>.</operator><name>ref_cnt</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>newv</name><operator>.</operator><name>seq_num</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//assert(0 != oldv.ref_cnt);</comment>
            <if_stmt><if>if <condition>(<expr><name><name>oldv</name><operator>.</operator><name>atomic</name></name> <operator>==</operator> <call><name>ATOMIC_CAS</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>page_meta</name><operator>-&gt;</operator><name>atomic</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>cmpv</name><operator>.</operator><name>atomic</name></name></expr></argument>, <argument><expr><name><name>newv</name><operator>.</operator><name>atomic</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>newv</name><operator>.</operator><name>ref_cnt</name></name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_mempool_thread_destroy_callback_</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>data</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>easy_mempool_thread_info_t</name> <modifier>*</modifier></type><name>thread_info</name> <init>= <expr><operator>(</operator><name>easy_mempool_thread_info_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>ATOMIC_DEC_FETCH</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>thread_info</name><operator>-&gt;</operator><name>ref_cnt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_mempool_destroy</name><argument_list>(<argument><expr><name><name>thread_info</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>easy_mempool_g_allocator</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>thread_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>constructor</name><operator>)</operator></expr></argument>)</argument_list> <name>init_global_easy_mempool_</name><argument_list>()</argument_list>
<block>{<block_content>
    <expr_stmt><expr><name>easy_mempool_g_pool</name> <operator>=</operator> <call><name>easy_mempool_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_mempool_g_thread_key</name></expr></argument>, <argument><expr><name>easy_mempool_thread_destroy_callback_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>destructor</name><operator>)</operator></expr></argument>)</argument_list> <name>destroy_global_easy_mempool_</name><argument_list>()</argument_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>easy_mempool_destroy</name><argument_list>(<argument><expr><name>easy_mempool_g_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name>                    <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>easy_mempool_g_thread_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>easy_mempool_thread_destroy_callback_</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_key_delete</name><argument_list>(<argument><expr><name>easy_mempool_g_thread_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
