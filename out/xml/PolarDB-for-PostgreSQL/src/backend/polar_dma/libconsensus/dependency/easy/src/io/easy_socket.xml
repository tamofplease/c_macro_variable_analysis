<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/io/easy_socket.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;easy_inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;easy_string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sendfile.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_socket_chain_writev</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iovs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>again</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_socket_sendfile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>easy_file_buf_t</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>again</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * æå¼çå¬ç«¯å£
 */</comment>
<function><type><name>int</name></type> <name>easy_socket_listen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>udp</name></decl></parameter>, <parameter><decl><type><name>easy_addr_t</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>v</name></decl>, <decl><type ref="prev"/><name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>address</name><operator>-&gt;</operator><name>family</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>udp</name></expr> ?</condition><then> <expr><name>SOCK_DGRAM</name></expr> </then><else>: <expr><name>SOCK_STREAM</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"create socket error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_socket_non_blocking</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>udp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>EASY_FLAGS_DEFERACCEPT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_socket_set_tcpopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>TCP_DEFER_ACCEPT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_socket_set_tcpopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>TCP_SYNCNT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// set reuseport, reuseaddr</comment>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>EASY_FLAGS_SREUSEPORT</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>easy_socket_set_opt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SO_REUSEPORT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"SO_REUSEPORT error: %d, fd=%d\n"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>easy_socket_set_opt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SO_REUSEPORT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_socket_set_opt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SO_REUSEPORT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>address</name><operator>-&gt;</operator><name>family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>EASY_FLAGS_NOLISTEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>udp</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <name>EASY_FLAGS_REUSEPORT</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>easy_socket_set_opt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"SO_REUSEADDR error: %d, fd=%d\n"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>address</name><operator>-&gt;</operator><name>family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type>     <name>addr</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <name><name>address</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name><name>address</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>address</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"bind socket error: %d\n"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type>      <name>addr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>socklen_t</name></type>               <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"bind socket error: %d\n"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>address</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>udp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>listen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>backlog</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>backlog</name></expr> </then><else>: <expr><literal type="number">1024</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"listen error. %d\n"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>fd</name></expr>;</return>

<label><name>error_exit</name>:</label>

    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ä»socketè¯»å¥æ°æ®å°bufä¸­
 */</comment>
<function><type><name>int</name></type> <name>easy_socket_read</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pending</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>n</name></decl>;</decl_stmt>

    <do>do <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while<condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>EAGAIN</name><operator>)</operator></expr> ?</condition><then> <expr><name>EASY_AGAIN</name></expr> </then><else>: <expr><name>EASY_ERROR</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æbuf_chain_tä¸çåå®¹éè¿writevåå°socketä¸
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_SOCKET_RET_CHECK</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>again</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (ret&lt;0) return ret; else size += ret; if (again) return size;</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>easy_socket_write</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>easy_socket_tcpwrite</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_socket_tcpwrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_file_buf_t</name>         <modifier>*</modifier></type><name>fb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name>          <name>iovec</name></name></type>   <name><name>iovs</name><index>[<expr><name>EASY_IOV_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>sended</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>wbyte</name></decl>, <decl><type ref="prev"/><name>again</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>wbyte</name> <operator>=</operator> <name>cnt</name> <operator>=</operator> <name>sended</name> <operator>=</operator> <name>again</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line">// foreach</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>b</argument>, <argument>b1</argument>, <argument>l</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
        <comment type="line">// sendfile</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EASY_BUF_FILE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <comment type="line">// åwritevåºå»</comment>
            <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>easy_socket_chain_writev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>iovs</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>again</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>EASY_SOCKET_RET_CHECK</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>wbyte</name></expr></argument>, <argument><expr><name>again</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>fb</name> <operator>=</operator> <operator>(</operator><name>easy_file_buf_t</name> <operator>*</operator><operator>)</operator><name>b</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sended</name> <operator>+=</operator> <name><name>fb</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>easy_socket_sendfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>fb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>again</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>EASY_SOCKET_RET_CHECK</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>wbyte</name></expr></argument>, <argument><expr><name>again</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>iovs</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>iovs</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnt</name> <operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>sended</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// è·³åº</comment>
        <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <name>EASY_IOV_MAX</name> <operator>||</operator> <name>sended</name> <operator>&gt;=</operator> <name>EASY_IOV_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block>

    <comment type="line">// writev</comment>
    <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>easy_socket_chain_writev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>iovs</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>again</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EASY_SOCKET_RET_CHECK</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>wbyte</name></expr></argument>, <argument><expr><name>again</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>wbyte</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * writev
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_socket_chain_writev</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iovs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>again</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name></decl>, <decl><type ref="prev"/><name>sended</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b1</name></decl>;</decl_stmt>

    <do>do <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>iovs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><name><name>iovs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>writev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iovs</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block> while<condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

    <comment type="line">// ç»æå¤ç</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sended</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

        <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>b</argument>, <argument>b1</argument>, <argument>l</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>easy_log_level</name> <operator>&gt;=</operator> <name>EASY_LOG_TRACE</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>char</name></type>                    <name><name>btmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>easy_trace_log</name><argument_list>(<argument><expr><literal type="string">"fd: %d write: %d,%d =&gt; %s"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>sended</name></expr></argument>, <argument><expr><call><name>easy_string_tohex</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>btmp</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>sended</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sended</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>sended</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>cnt</name> <operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>easy_buf_destroy</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>sended</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><operator>*</operator><name>again</name> <operator>=</operator> <operator>(</operator><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>EAGAIN</name><operator>)</operator></expr> ?</condition><then> <expr><name>EASY_AGAIN</name></expr> </then><else>: <expr><name>EASY_ERROR</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * sendfile
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_socket_sendfile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>easy_file_buf_t</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>again</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name></decl>;</decl_stmt>

    <do>do <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sendfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>fb</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fb</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>fb</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while<condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

    <comment type="line">// ç»æå¤ç</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"sendfile: %d, fd: %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name><name>fb</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>count</name></name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>again</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>easy_buf_destroy</name><argument_list>(<argument><expr><operator>(</operator><name>easy_buf_t</name> <operator>*</operator><operator>)</operator><name>fb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>EAGAIN</name><operator>)</operator></expr> ?</condition><then> <expr><name>EASY_AGAIN</name></expr> </then><else>: <expr><name>EASY_ERROR</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// éé»å¡</comment>
<function><type><name>int</name></type> <name>easy_socket_non_blocking</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>flags</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// TCP</comment>
<function><type><name>int</name></type> <name>easy_socket_set_tcpopt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SOCKET</comment>
<function><type><name>int</name></type> <name>easy_socket_set_opt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// check ipv6</comment>
<function><type><name>int</name></type> <name>easy_socket_support_ipv6</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>fd</name> <init>= <expr><call><name>socket</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// udp send</comment>
<function><type><name>int</name></type> <name>easy_socket_usend</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>addr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_inet_etoa</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>easy_socket_udpwrite</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_socket_udpwrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type>           <name>msg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name>          <name>iovec</name></name></type>   <name><name>iovs</name><index>[<expr><name>EASY_IOV_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>socklen_t</name></type>               <name>addr_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <comment type="line">// foreach</comment>
    <macro><name>easy_list_for_each_entry</name><argument_list>(<argument>b</argument>, <argument>l</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name><name>iovs</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>iovs</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>++</operator> <name>cnt</name> <operator>&gt;=</operator> <name>EASY_IOV_MAX</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>addr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <name>addr_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <operator>(</operator>struct <name>iovec</name> <operator>*</operator><operator>)</operator><name>iovs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sendmsg</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>iovs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><name><name>iovs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>addr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>b</argument>, <argument>b1</argument>, <argument>l</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_buf_destroy</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>--</operator> <name>cnt</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_socket_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_socket_set_linger</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>linger</name></name></type> <name>so_linger</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>so_linger</name><operator>.</operator><name>l_onoff</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>so_linger</name><operator>.</operator><name>l_linger</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>t</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_LINGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>so_linger</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>so_linger</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
