<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/io/easy_summary.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_summary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_http_handler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;easy_time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;easy_string.h&gt;</cpp:file></cpp:include>

<comment type="line">//http content</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_SUMMARY_NODE_DIFF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a-&gt;field = ((b-&gt;field &gt;= c-&gt;field) ? (b-&gt;field - c-&gt;field) : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_SUMMARY_HTTP_CONTENT</name></cpp:macro>                                                   \
    <cpp:value>"&lt;html&gt;&lt;title&gt;SUMMARY&lt;/title&gt;&lt;body&gt;&lt;br&gt;&lt;table border=0"                         \
    "cellspacing=0 cellpadding=3 width=\"100%\"&gt;&lt;tr bgcolor=8899AA&gt;&lt;td&gt;"            \
    "&lt;center&gt;&lt;b&gt;&lt;font color=black&gt;Original Summary Data&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;"        \
    "&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;table bgcolor=blue border=0 cellspacing=1 cellpadding=3 "   \
    "width=\"100%\"&gt;&lt;tr bgcolor=99cc99&gt;"                                            \
    "&lt;TH&gt;FD&lt;/TH&gt;&lt;TH&gt;ADDRESS&lt;/TH&gt;&lt;TH&gt;IN_BYTE"                                        \
    "&lt;/TH&gt;&lt;TH&gt;OUT_BYTE&lt;/TH&gt;&lt;TH&gt;DOING_REQ_CNT&lt;/TH&gt;&lt;TH&gt;DONE_REQ_CNT&lt;/TH&gt;"             \
    "&lt;TH&gt;QPS&lt;/TH&gt;&lt;TH&gt;PROCESS_TIME(ms)&lt;/TH&gt;&lt;/TR&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_SUMMARY_HTTP_LIST</name></cpp:macro>                                                      \
    <cpp:value>"&lt;TR bgcolor=white&gt;&lt;TH&gt;%d&lt;/TH&gt;&lt;TH&gt;%s&lt;/TH&gt;&lt;TH&gt;%s /s&lt;/TH&gt;&lt;TH&gt;%s /s&lt;/TH&gt;&lt;TH&gt;%d"    \
    "&lt;/TH&gt;&lt;TH&gt;%" PRId64 "&lt;/TH&gt;&lt;TH&gt;%.2f&lt;/TH&gt;&lt;TH&gt;%.3f&lt;/TH&gt;&lt;/TR&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_SUMMARY_HTTP_FOOT</name></cpp:macro>                                                      \
    <cpp:value>"&lt;TR bgcolor=cccccc&gt;&lt;TH&gt;TOTAL: %d&lt;/TH&gt;&lt;TH&gt;&amp;nbsp;&lt;/TH&gt;&lt;TH&gt;%s /s&lt;/TH&gt;"            \
    "&lt;TH&gt;%s /s&lt;/TH&gt;&lt;TH&gt;%d&lt;/TH&gt;&lt;TH&gt;%" PRId64 "&lt;/TH&gt;&lt;TH&gt;%.2f&lt;/TH&gt;&lt;TH&gt;%.3f&lt;/TH&gt;&lt;/TR&gt;"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>easy_summary_node_t</name> <modifier>*</modifier></type><name>easy_summary_insert_node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>easy_summary_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>easy_summary_node_t</name></type>     <name>easy_summary_node_null</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * create easy_summary_t
 */</comment>
<function><type><name>easy_summary_t</name> <modifier>*</modifier></type><name>easy_summary_create</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_summary_t</name>          <modifier>*</modifier></type><name>sum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pool</name> <operator>=</operator> <call><name>easy_pool_create</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_summary_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>easy_summary_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_summary_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sum</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sum</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>EASY_SPIN_INITER</name></expr>;</expr_stmt>

    <return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * easy_summary_destroy
 */</comment>
<function><type><name>void</name></type> <name>easy_summary_destroy</name><parameter_list>(<parameter><decl><type><name>easy_summary_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>sum</name> <operator>&amp;&amp;</operator> <name><name>sum</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>sum</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 *locate the place
 */</comment>
<function><type><name>easy_summary_node_t</name> <modifier>*</modifier></type><name>easy_summary_locate_node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>easy_summary_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hidden</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_summary_node_t</name>     <modifier>*</modifier></type><name>sum_node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>idx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <literal type="number">65535</literal> <operator>||</operator> <name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>&amp;</operator><name>easy_summary_node_null</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>sum</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sum</name><operator>-&gt;</operator><name>pool</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"sum or sum-&gt;pool is  NULL \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>&amp;</operator><name>easy_summary_node_null</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//find node and add fd_total</comment>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>fd</name> <operator>&gt;&gt;</operator> <name>EASY_SUMMARY_LENGTH_BIT</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sum_node</name> <operator>=</operator> <name><name>sum</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// lock</comment>
        <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sum</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sum_node</name> <operator>=</operator> <name><name>sum</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sum_node</name> <operator>=</operator> <call><name>easy_summary_insert_node</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sum</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>&amp;</operator><name>easy_summary_node_null</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sum_node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_summary_node_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>EASY_SUMMARY_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// unlock</comment>
        <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sum</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>node</name> <operator>=</operator> <name>sum_node</name> <operator>+</operator> <operator>(</operator><name>fd</name> <operator>&amp;</operator> <name>EASY_SUMMARY_LENGTH_MASK</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line">// max fd, FIXME: Ö»?ï¿½?</comment>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <name><name>sum</name><operator>-&gt;</operator><name>max_fd</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sum</name><operator>-&gt;</operator><name>max_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>hidden</name></expr> ?</condition><then> <expr><operator>-</operator><name>fd</name></expr> </then><else>: <expr><name>fd</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 *clean and destroy node
 */</comment>
<function><type><name>void</name></type> <name>easy_summary_destroy_node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>easy_summary_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_summary_node_t</name>     <modifier>*</modifier></type><name>sum_node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

    <comment type="line">//for ueser ,be selfsafe</comment>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <literal type="number">65535</literal> <operator>||</operator> <name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>sum</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sum</name><operator>-&gt;</operator><name>pool</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"sum or pool is NULL \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//find node and clean</comment>
    <expr_stmt><expr><name>sum_node</name> <operator>=</operator> <name><name>sum</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>fd</name> <operator>&gt;&gt;</operator> <name>EASY_SUMMARY_LENGTH_BIT</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>sum_node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>node</name> <operator>=</operator> <name>sum_node</name> <operator>+</operator> <operator>(</operator><name>fd</name> <operator>&amp;</operator> <name>EASY_SUMMARY_LENGTH_MASK</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * copy to dest
 */</comment>
<function><type><name>void</name></type> <name>easy_summary_copy</name><parameter_list>(<parameter><decl><type><name>easy_summary_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>easy_summary_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_summary_node_t</name>     <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newnode</name></decl>;</decl_stmt>

    <comment type="line">// size</comment>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_summary_node_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>EASY_SUMMARY_LENGTH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>max</name> <operator>=</operator> <operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>max_fd</name></name> <operator>&gt;&gt;</operator> <name>EASY_SUMMARY_LENGTH_BIT</name><operator>)</operator></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>newnode</name> <operator>=</operator> <name><name>dest</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>newnode</name> <operator>=</operator> <call><name>easy_summary_insert_node</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newnode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>max_fd</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>max_fd</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * diff easy_summary_t
 */</comment>
<function><type><name>easy_summary_t</name> <modifier>*</modifier></type><name>easy_summary_diff</name><parameter_list>(<parameter><decl><type><name>easy_summary_t</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>, <parameter><decl><type><name>easy_summary_t</name> <modifier>*</modifier></type><name>os</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_summary_t</name>          <modifier>*</modifier></type><name>diff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_summary_node_t</name>     <modifier>*</modifier></type><name>onode</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nnode</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dnode</name></decl>;</decl_stmt>

    <comment type="line">// size</comment>
    <expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>easy_summary_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>diff</name><operator>-&gt;</operator><name>max_fd</name></name> <operator>=</operator> <call><name>easy_max</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>max_fd</name></name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>max_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>max</name> <operator>=</operator> <operator>(</operator><name><name>diff</name><operator>-&gt;</operator><name>max_fd</name></name> <operator>&gt;&gt;</operator> <name>EASY_SUMMARY_LENGTH_BIT</name><operator>)</operator></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>onode</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nnode</name> <operator>=</operator> <name><name>ns</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>nnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="line">// new diff</comment>
        <expr_stmt><expr><name>dnode</name> <operator>=</operator> <call><name>easy_summary_insert_node</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// diff</comment>
        <if_stmt><if>if <condition>(<expr><name>onode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dnode</name></expr></argument>, <argument><expr><name>nnode</name></expr></argument>, <argument><expr><name>EASY_SUMMARY_LENGTH</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_summary_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>EASY_SUMMARY_LENGTH</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>dnode</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>nnode</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>EASY_SUMMARY_NODE_DIFF</name><argument_list>(<argument><expr><name>dnode</name></expr></argument>, <argument><expr><name>nnode</name></expr></argument>, <argument><expr><name>onode</name></expr></argument>, <argument><expr><name>rt_total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>EASY_SUMMARY_NODE_DIFF</name><argument_list>(<argument><expr><name>dnode</name></expr></argument>, <argument><expr><name>nnode</name></expr></argument>, <argument><expr><name>onode</name></expr></argument>, <argument><expr><name>doing_request_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>EASY_SUMMARY_NODE_DIFF</name><argument_list>(<argument><expr><name>dnode</name></expr></argument>, <argument><expr><name>nnode</name></expr></argument>, <argument><expr><name>onode</name></expr></argument>, <argument><expr><name>done_request_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>EASY_SUMMARY_NODE_DIFF</name><argument_list>(<argument><expr><name>dnode</name></expr></argument>, <argument><expr><name>nnode</name></expr></argument>, <argument><expr><name>onode</name></expr></argument>, <argument><expr><name>in_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>EASY_SUMMARY_NODE_DIFF</name><argument_list>(<argument><expr><name>dnode</name></expr></argument>, <argument><expr><name>nnode</name></expr></argument>, <argument><expr><name>onode</name></expr></argument>, <argument><expr><name>out_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>dnode</name> <operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>nnode</name> <operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>onode</name> <operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>diff</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name><name>ns</name><operator>-&gt;</operator><name>time</name></name> <operator>-</operator> <name><name>os</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>

    <return>return <expr><name>diff</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 *http request html output
 */</comment>
<function><type><name>void</name></type> <name>easy_summary_html_output</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>easy_summary_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>easy_summary_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_summary_node_t</name>     <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lnode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>doing_rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>                 <name>done_rc</name></decl>, <decl><type ref="prev"/><name>done_request_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_addr_t</name></type>             <name>addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_summary_node_t</name></type>     <name>ts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>inbytes</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>outbytes</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="line">// header</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_summary_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>easy_buf_check_write_space</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EASY_SUMMARY_HTTP_CONTENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <call><name>lnprintf</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>EASY_SUMMARY_HTTP_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>done_request_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>max</name> <operator>=</operator> <operator>(</operator><name><name>sum</name><operator>-&gt;</operator><name>max_fd</name></name> <operator>&gt;&gt;</operator> <name>EASY_SUMMARY_LENGTH_BIT</name><operator>)</operator></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>max</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <name><name>sum</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>lnode</name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>EASY_SUMMARY_LENGTH</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr><operator>,</operator> <expr><name>node</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>easy_inet_getpeername</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// total</comment>
            <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>fd</name></name> <operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>rt_total</name></name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>rt_total</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>doing_rc</name> <operator>=</operator> <name>done_rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>lnode</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>doing_rc</name> <operator>=</operator> <name><name>lnode</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>doing_request_count</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>done_rc</name> <operator>=</operator> <name><name>lnode</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>done_request_count</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>doing_request_count</name></name> <operator>+=</operator> <name>doing_rc</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>done_request_count</name></name> <operator>+=</operator> <name>done_rc</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>in_byte</name></name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>in_byte</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>out_byte</name></name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>out_byte</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>done_request_count</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>done_request_count</name></name></expr>;</expr_stmt>

            <comment type="line">//html output node</comment>
            <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>easy_buf_check_write_space</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EASY_SUMMARY_HTTP_LIST</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_string_format_size</name><argument_list>(<argument><expr><call><name>easy_div</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>in_byte</name></name></expr></argument>, <argument><expr><name><name>sum</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>inbytes</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_string_format_size</name><argument_list>(<argument><expr><call><name>easy_div</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>out_byte</name></name></expr></argument>, <argument><expr><name><name>sum</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outbytes</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>lnprintf</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>,
                         <argument><expr><name>EASY_SUMMARY_HTTP_LIST</name></expr></argument>,
                         <argument><expr><name><name>node</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>easy_inet_addr_to_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>inbytes</name></expr></argument>, <argument><expr><name>outbytes</name></expr></argument>,
                         <argument><expr><name>doing_rc</name></expr></argument>, <argument><expr><name>done_rc</name></expr></argument>,
                         <argument><expr><call><name>easy_div</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>done_request_count</name></name></expr></argument>, <argument><expr><name><name>sum</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name>easy_div</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>rt_total</name></name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>done_request_count</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">// total</comment>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>easy_buf_check_write_space</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EASY_SUMMARY_HTTP_LIST</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_string_format_size</name><argument_list>(<argument><expr><call><name>easy_div</name><argument_list>(<argument><expr><name><name>ts</name><operator>.</operator><name>in_byte</name></name></expr></argument>, <argument><expr><name><name>sum</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>inbytes</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_string_format_size</name><argument_list>(<argument><expr><call><name>easy_div</name><argument_list>(<argument><expr><name><name>ts</name><operator>.</operator><name>out_byte</name></name></expr></argument>, <argument><expr><name><name>sum</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outbytes</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>lnprintf</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>,
                 <argument><expr><name>EASY_SUMMARY_HTTP_FOOT</name></expr></argument>,
                 <argument><expr><name><name>ts</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>inbytes</name></expr></argument>, <argument><expr><name>outbytes</name></expr></argument>,
                 <argument><expr><name><name>ts</name><operator>.</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><name><name>ts</name><operator>.</operator><name>done_request_count</name></name></expr></argument>,
                 <argument><expr><call><name>easy_div</name><argument_list>(<argument><expr><name>done_request_count</name></expr></argument>, <argument><expr><name><name>sum</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name>easy_div</name><argument_list>(<argument><expr><name><name>ts</name><operator>.</operator><name>rt_total</name></name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><name>done_request_count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;/table&gt;&lt;br&gt;&lt;/body&gt;&lt;/html&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// print raw</comment>
<function><type><name>void</name></type> <name>easy_summary_raw_output</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>easy_summary_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_summary_node_t</name>     <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_addr_t</name></type>             <name>addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="line">// header</comment>
    <expr_stmt><expr><name>max</name> <operator>=</operator> <operator>(</operator><name><name>sum</name><operator>-&gt;</operator><name>max_fd</name></name> <operator>&gt;&gt;</operator> <name>EASY_SUMMARY_LENGTH_BIT</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>easy_buf_check_write_space</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <call><name>lnprintf</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;pre&gt;\n%s\ntime=%.3f\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>sum</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>max</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <name><name>sum</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>EASY_SUMMARY_LENGTH</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr><operator>,</operator> <expr><name>node</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>easy_inet_getpeername</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name><name>node</name><operator>-&gt;</operator><name>fd</name></name></expr> </then><else>: <expr><name><name>node</name><operator>-&gt;</operator><name>fd</name></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//raw output node</comment>
            <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>easy_buf_check_write_space</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>lnprintf</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>,
                         <argument><expr><literal type="string">"fd=%d,addr=%s,inb=%"</literal> <name>PRId64</name> <literal type="string">",outb=%"</literal> <name>PRId64</name> <literal type="string">",doing=%d,done=%"</literal> <name>PRId64</name> <literal type="string">",rt=%.3f\n"</literal></expr></argument>,
                         <argument><expr><name><name>node</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>easy_inet_addr_to_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name><name>node</name><operator>-&gt;</operator><name>in_byte</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>out_byte</name></name></expr></argument>,
                         <argument><expr><name><name>node</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>done_request_count</name></name></expr></argument>,
                         <argument><expr><name><name>node</name><operator>-&gt;</operator><name>rt_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>easy_buf_check_write_space</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <call><name>lnprintf</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;/pre&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="block" format="doxygen">/**
 *insert node
 */</comment>
<function><type><specifier>static</specifier> <name>easy_summary_node_t</name> <modifier>*</modifier></type><name>easy_summary_insert_node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>easy_summary_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_summary_node_t</name>         <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

    <comment type="line">// for locate use</comment>
    <decl_stmt><decl><type><name>int</name></type>                     <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_summary_node_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>EASY_SUMMARY_LENGTH</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <operator>(</operator><name>easy_summary_node_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name><name>sum</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>&amp;</operator><name>easy_summary_node_null</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>sum</name><operator>-&gt;</operator><name>bucket</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

    <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>
</unit>
