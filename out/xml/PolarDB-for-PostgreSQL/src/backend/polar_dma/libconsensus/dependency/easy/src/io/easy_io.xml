<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/io/easy_io.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_baseth_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sched.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKAGE_VERSION</name></cpp:macro> <cpp:value>"2.0"</cpp:value></cpp:define>
<comment type="line">// å¨å±åé</comment>
<decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>easy_build_time</name> <init>= <expr><literal type="string">"LIBEASY VERSION: "</literal> <name>PACKAGE_VERSION</name> <literal type="string">", BUILD:"</literal> <name>__DATE__</name> <literal type="string">" "</literal> <name>__TIME__</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>easy_io_t</name></type>               <name>easy_io_var</name> <init>= <expr><block>{<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>easy_spin_t</name></type>             <name>easy_io_list_lock</name> <init>= <expr><name>EASY_SPIN_INITER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>easy_list_t</name></type>             <name>easy_io_list_var</name> <init>= <expr><call><name>EASY_LIST_HEAD_INIT</name><argument_list>(<argument><expr><name>easy_io_list_var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>easy_io_on_thread_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_io_on_uthread_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_io_on_uthread_evstart</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_io_uthread_invoke</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_io_thread_destroy</name><parameter_list>(<parameter><decl><type><name>easy_io_thread_t</name> <modifier>*</modifier></type><name>ioth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_io_stat_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_timer</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_io_print_status</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_signal_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_listen_close</name><parameter_list>(<parameter><decl><type><name>easy_listen_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * åå§åeasy_io
 */</comment>
<function><type><name>easy_io_t</name> <modifier>*</modifier></type><name>easy_eio_create</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>io_thread_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_thread_pool_t</name>      <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>v</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>eio</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>eio</name><operator>-&gt;</operator><name>pool</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>eio</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>io_thread_count</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>io_thread_count</name> <operator>&gt;</operator> <name>EASY_MAX_THREAD_CNT</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>io_thread_count</name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_NPROCESSORS_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pool</name> <operator>=</operator> <call><name>easy_pool_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// åéç©ºé´</comment>
    <if_stmt><if>if <condition>(<expr><name>eio</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>eio</name> <operator>=</operator> <operator>(</operator><name>easy_io_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_io_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// åå§å</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_io_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>EASY_SPIN_INITER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>io_thread_count</name></name> <operator>=</operator> <name>io_thread_count</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <call><name>ev_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>thread_pool_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_set_allocator</name><argument_list>(<argument><expr><name>easy_pool_realloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//create summary buffer</comment>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>eio_summary</name></name> <operator>=</operator> <call><name>easy_summary_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// åå»ºIOçº¿ç¨æ± </comment>
    <expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>easy_baseth_pool_create</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>io_thread_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_io_thread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error_exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>io_thread_pool</name></name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>tcp_nodelay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>no_delayack</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>use_accept4</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>tcp_defer_accept</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>do_signal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>send_qlen</name></name> <operator>=</operator> <name>EASY_CONN_DOING_REQ_CNT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>support_ipv6</name></name> <operator>=</operator> <call><name>easy_socket_support_ipv6</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>listen_backlog</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_RECVMMSG</name></cpp:ifdef>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>recv_vlen</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// åå§åçº¿ç¨æ± </comment>
    <macro><name>easy_thread_pool_for_each</name><argument_list>(<argument>ioth</argument>, <argument>tp</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>connected_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>easy_client_t</name></expr></argument>, <argument><expr><name>client_list_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ioth</name><operator>-&gt;</operator><name>client_list</name></name> <operator>=</operator> <call><name>easy_hash_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>EASY_MAX_CLIENT_CNT</name> <operator>/</operator> <name>io_thread_count</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ioth</name><operator>-&gt;</operator><name>client_array</name></name> <operator>=</operator> <call><name>easy_array_create</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_client_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// èµ·å¼æ­¥äºä»¶</comment>
        <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>conn_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>request_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ev_timer_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>listen_watcher</name></name></expr></argument>, <argument><expr><name>easy_connection_on_listen</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ioth</name><operator>-&gt;</operator><name>listen_watcher</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>ioth</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ioth</name><operator>-&gt;</operator><name>iot</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <comment type="line">// base thread init</comment>
        <expr_stmt><expr><call><name>easy_baseth_init</name><argument_list>(<argument><expr><name>ioth</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>easy_io_on_thread_start</name></expr></argument>, <argument><expr><name>easy_connection_on_wakeup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// å±è½æSIGPIPE</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="line">// add to easy_io_list_var</comment>
    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_io_list_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>eio_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>easy_io_list_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_io_list_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>eio</name></expr>;</return>
<label><name>error_exit</name>:</label>
    <expr_stmt><expr><call><name>easy_eio_destroy</name><argument_list>(<argument><expr><name>eio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æä¸ä¸ªeasy_ioå é¤æ
 */</comment>
<function><type><name>void</name></type> <name>easy_eio_destroy</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_thread_pool_t</name>      <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_listen_t</name>           <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>eio</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// ä»easy_io_list_varå»æ</comment>
    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_io_list_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>stoped</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>eio_list_node</name><operator>.</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>eio_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_io_list_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// close listen</comment>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name><name>eio</name><operator>-&gt;</operator><name>listen</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_listen_close</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name><name>eio</name><operator>-&gt;</operator><name>listenadd</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_listen_close</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// destroy io_thread</comment>
    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>io_thread_pool</name></name></expr>)</condition> <block>{<block_content>
        <macro><name>easy_thread_pool_for_each</name><argument_list>(<argument>ioth</argument>, <argument>eio-&gt;io_thread_pool</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_io_thread_destroy</name><argument_list>(<argument><expr><name>ioth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// destroy baseth pool</comment>
    <macro><name>easy_list_for_each_entry</name><argument_list>(<argument>tp</argument>, <argument>&amp;eio-&gt;thread_pool_list</argument>, <argument>list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_baseth_pool_destroy</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>easy_summary_destroy</name><argument_list>(<argument><expr><name><name>eio</name><operator>-&gt;</operator><name>eio_summary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pool</name> <operator>=</operator> <name><name>eio</name><operator>-&gt;</operator><name>pool</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_io_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"easy_eio_destroy, eio=%p\n"</literal></expr></argument>, <argument><expr><name>eio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å¼å§easy_io, ç¬¬ä¸ä¸ªçº¿ç¨ç¨äºlisten, åé¢ççº¿ç¨ç¨äºå¤ç
 */</comment>
<function><type><name>int</name></type> <name>easy_eio_start</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_baseth_t</name>           <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_thread_pool_t</name>      <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

    <comment type="line">// æ²¡åå§åpool</comment>
    <if_stmt><if>if <condition>(<expr><name>eio</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>eio</name><operator>-&gt;</operator><name>pool</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ABORT</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>tcp_nodelay</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>tcp_cork</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>no_delayack</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>do_signal</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type>        <name>sigact</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sigaction</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sigact</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>easy_signal_handler</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sigact</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sigact</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_RESETHAND</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// èµ·çº¿ç¨</comment>
    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>easy_list_for_each_entry</name><argument_list>(<argument>tp</argument>, <argument>&amp;eio-&gt;thread_pool_list</argument>, <argument>list_node</argument>)</argument_list></macro> <block>{<block_content>
        <macro><name>easy_thread_pool_for_each</name><argument_list>(<argument>th</argument>, <argument>tp</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>th</name><operator>-&gt;</operator><name>tid</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>on_start</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ç­å¾easy_io
 */</comment>
<function><type><name>int</name></type> <name>easy_eio_wait</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_baseth_t</name>           <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_thread_pool_t</name>      <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

    <comment type="line">// ç­å¾thread</comment>
    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>easy_list_for_each_entry</name><argument_list>(<argument>tp</argument>, <argument>&amp;eio-&gt;thread_pool_list</argument>, <argument>list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>easy_thread_pool_for_each</name><argument_list>(<argument>th</argument>, <argument>tp</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name> <operator>&amp;&amp;</operator> <call><name>pthread_join</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EDEADLK</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"easy_io_wait fatal, eio=%p, tid=%lx\n"</literal></expr></argument>, <argument><expr><name>eio</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"easy_io_wait exit, eio=%p\n"</literal></expr></argument>, <argument><expr><name>eio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_eio_shutdown</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_thread_pool_t</name>      <modifier>*</modifier></type><name>tp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tp1</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>eio</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>eio</name><operator>-&gt;</operator><name>shutdown</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"easy_eio_shutdown exit, eio=%p\n"</literal></expr></argument>, <argument><expr><name>eio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>shutdown</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <comment type="line">// è®©threadåæ­¢</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>tp</argument>, <argument>tp1</argument>, <argument>&amp;eio-&gt;thread_pool_list</argument>, <argument>list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_baseth_pool_on_wakeup</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"easy_eio_shutdown exit, eio=%p %s\n"</literal></expr></argument>, <argument><expr><name>eio</name></expr></argument>, <argument><expr><name>easy_build_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * åæ­¢easy_io
 */</comment>
<function><type><name>int</name></type> <name>easy_eio_stop</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_thread_pool_t</name>      <modifier>*</modifier></type><name>tp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tp1</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>eio</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>eio</name><operator>-&gt;</operator><name>stoped</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"easy_eio_stop exit, eio=%p\n"</literal></expr></argument>, <argument><expr><name>eio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>stoped</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <comment type="line">// è®©threadåæ­¢</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>tp</argument>, <argument>tp1</argument>, <argument>&amp;eio-&gt;thread_pool_list</argument>, <argument>list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_baseth_pool_on_wakeup</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"easy_eio_stop exit, eio=%p %s\n"</literal></expr></argument>, <argument><expr><name>eio</name></expr></argument>, <argument><expr><name>easy_build_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * åçº¿ç¨çev_loop,  è¦å¨easy_io_initåè°ç¨
 */</comment>
<function><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>easy_eio_thread_loop</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ioth</name> <operator>=</operator> <operator>(</operator><name>easy_io_thread_t</name> <operator>*</operator><operator>)</operator><call><name>easy_thread_pool_index</name><argument_list>(<argument><expr><name><name>eio</name><operator>-&gt;</operator><name>io_thread_pool</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><ternary><condition><expr><name>ioth</name></expr> ?</condition><then> <expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * èµ·å¤çéåº¦å®æ¶å¨
 */</comment>
<function><type><name>void</name></type> <name>easy_eio_stat_watcher_start</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>ev_timer</name> <modifier>*</modifier></type><name>stat_watcher</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>interval</name></decl></parameter>,
                                 <parameter><decl><type><name>easy_io_stat_t</name> <modifier>*</modifier></type><name>iostat</name></decl></parameter>, <parameter><decl><type><name>easy_io_stat_process_pt</name> <modifier>*</modifier></type><name>process</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>iostat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_io_stat_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iostat</name><operator>-&gt;</operator><name>last_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iostat</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <name><name>eio</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iostat</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name>process</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iostat</name><operator>-&gt;</operator><name>eio</name></name> <operator>=</operator> <name>eio</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ioth</name> <operator>=</operator> <operator>(</operator><name>easy_io_thread_t</name> <operator>*</operator><operator>)</operator><call><name>easy_thread_pool_index</name><argument_list>(<argument><expr><name><name>eio</name><operator>-&gt;</operator><name>io_thread_pool</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_timer_init</name> <argument_list>(<argument><expr><name>stat_watcher</name></expr></argument>, <argument><expr><name>easy_io_stat_process</name></expr></argument>, <argument><expr><literal type="number">0.</literal></expr></argument>, <argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stat_watcher</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>iostat</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_timer_start</name> <argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>stat_watcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_baseth_on_wakeup</name><argument_list>(<argument><expr><name>ioth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * è®¾ç½®ç¨æ·æçº¿ç¨å¼å§
 */</comment>
<function><type><name>void</name></type> <name>easy_eio_set_uthread_start</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>easy_io_uthread_start_pt</name> <modifier>*</modifier></type><name>on_utstart</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>uthread_enable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <macro><name>easy_thread_pool_for_each</name><argument_list>(<argument>ioth</argument>, <argument>eio-&gt;io_thread_pool</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name><name>ioth</name><operator>-&gt;</operator><name>on_utstart</name></name> <operator>=</operator> <name>on_utstart</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ioth</name><operator>-&gt;</operator><name>ut_args</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////////////////////</comment>
<comment type="block" format="doxygen">/**
 * IOçº¿ç¨çåè°ç¨åº
 */</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>easy_io_on_thread_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_listen_t</name>           <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_t</name>               <modifier>*</modifier></type><name>eio</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ioth</name> <operator>=</operator> <operator>(</operator><name>easy_io_thread_t</name> <operator>*</operator><operator>)</operator> <name>args</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>easy_baseth_self</name> <operator>=</operator> <operator>(</operator><name>easy_baseth_t</name> <operator>*</operator><operator>)</operator> <name>args</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>eio</name> <operator>=</operator> <name><name>ioth</name><operator>-&gt;</operator><name>eio</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>block_thread_signal</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pthread_sigmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>block_thread_sigset</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// sched_setaffinity</comment>
    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>affinity_enable</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>static</specifier> <name>easy_atomic_t</name></type>    <name>cpuid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>                     <name>cpunum</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_NPROCESSORS_CONF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cpu_set_t</name></type>               <name>mask</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>                     <name>idx</name> <init>= <expr><operator>(</operator><call><name>easy_atomic_add_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpuid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>%</operator> <name>cpunum</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CPU_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CPU_SET</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>sched_setaffinity</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"sched_setaffinity error: %d (%s), cpuid=%d\n"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cpuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// ælisten</comment>
    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>listen</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// çå¬åæ¢timer</comment>
        <decl_stmt><decl><type><name>int</name></type>                     <name>ts</name> <init>= <expr><operator>(</operator><name><name>eio</name><operator>-&gt;</operator><name>listen_all</name></name> <operator>||</operator> <name><name>eio</name><operator>-&gt;</operator><name>io_thread_count</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name><name>eio</name><operator>-&gt;</operator><name>listen</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>reuseport</name></name> <operator>||</operator> <name>ts</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_connection_reuseport</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>read_watcher</name><index>[<expr><name><name>ioth</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>ev_timer_start</name> <argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>listen_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// åè®¸ä½¿ç¨ç¨æ·çº¿ç¨</comment>
    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>uthread_enable</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>easy_uthread_control_t</name></type>  <name>control</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ev_set_invoke_pending_cb</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>easy_io_uthread_invoke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_uthread_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_uthread_create</name><argument_list>(<argument><expr><name>easy_io_on_uthread_evstart</name></expr></argument>, <argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ioth</name><operator>-&gt;</operator><name>on_utstart</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_uthread_create</name><argument_list>(<argument><expr><name>easy_io_on_uthread_start</name></expr></argument>, <argument><expr><name>ioth</name></expr></argument>, <argument><expr><name>EASY_UTHREAD_STACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_baseth_on_wakeup</name><argument_list>(<argument><expr><name>ioth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>easy_uthread_scheduler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_uthread_destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ioth</name><operator>-&gt;</operator><name>on_utstart</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>ioth</name><operator>-&gt;</operator><name>on_utstart</name></name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>ut_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>ev_run</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>easy_baseth_self</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"pthread exit: %lx\n"</literal></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
 * ç¨æ·æçº¿ç¨(uthread)çioå½æ°
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_io_on_uthread_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name> <init>= <expr><operator>(</operator><name>easy_io_thread_t</name> <operator>*</operator><operator>)</operator><name>args</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ioth</name><operator>-&gt;</operator><name>on_utstart</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><name><name>ioth</name><operator>-&gt;</operator><name>on_utstart</name></name><operator>)</operator><operator>(</operator><name><name>ioth</name><operator>-&gt;</operator><name>ut_args</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_io_on_uthread_evstart</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ev_run</name><argument_list>(<argument><expr><operator>(</operator>struct <name>ev_loop</name> <operator>*</operator><operator>)</operator><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æio_thread_téæ¾æ
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_io_thread_destroy</name><parameter_list>(<parameter><decl><type><name>easy_io_thread_t</name> <modifier>*</modifier></type><name>ioth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s1</name></decl>;</decl_stmt>

    <comment type="line">// session at ioth</comment>
    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>s</argument>, <argument>s1</argument>, <argument>&amp;ioth-&gt;session_list</argument>, <argument>session_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    <comment type="line">// connection at ioth</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>c</argument>, <argument>c1</argument>, <argument>&amp;ioth-&gt;conn_list</argument>, <argument>conn_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <comment type="line">// foreach connected_list</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>c</argument>, <argument>c1</argument>, <argument>&amp;ioth-&gt;connected_list</argument>, <argument>conn_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_array_destroy</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>client_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ç»è®¡å¤çå½æ°
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_io_stat_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_timer</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_io_stat_t</name>          <modifier>*</modifier></type><name>iostat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ev_tstamp</name></type>               <name>last_time</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>                 <name>last_cnt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_t</name>               <modifier>*</modifier></type><name>eio</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>iostat</name> <operator>=</operator> <operator>(</operator><name>easy_io_stat_t</name> <operator>*</operator><operator>)</operator><name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>eio</name> <operator>=</operator> <name><name>iostat</name><operator>-&gt;</operator><name>eio</name></name></expr>;</expr_stmt>

    <comment type="line">// ç»è®¡å½åå¼</comment>
    <expr_stmt><expr><name>last_time</name> <operator>=</operator> <call><name>ev_now</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>last_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ql</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <macro><name>easy_thread_pool_for_each</name><argument_list>(<argument>ioth</argument>, <argument>eio-&gt;io_thread_pool</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name>last_cnt</name> <operator>+=</operator> <name><name>ioth</name><operator>-&gt;</operator><name>done_request_count</name></name></expr>;</expr_stmt>
        <macro><name>easy_list_for_each_entry</name><argument_list>(<argument>c</argument>, <argument>&amp;ioth-&gt;connected_list</argument>, <argument>conn_list_node</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><name>ql</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>con_summary</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block>

    <expr_stmt><expr><name>t1</name> <operator>=</operator> <name>last_time</name> <operator>-</operator> <name><name>iostat</name><operator>-&gt;</operator><name>last_time</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>last_time</name> <operator>-</operator> <name><name>eio</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>

    <comment type="line">// ä¿å­èµ·æ¥</comment>
    <expr_stmt><expr><name><name>iostat</name><operator>-&gt;</operator><name>last_speed</name></name> <operator>=</operator> <operator>(</operator><name>last_cnt</name> <operator>-</operator> <name><name>iostat</name><operator>-&gt;</operator><name>last_cnt</name></name><operator>)</operator> <operator>/</operator> <name>t1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iostat</name><operator>-&gt;</operator><name>total_speed</name></name> <operator>=</operator> <name>last_cnt</name> <operator>/</operator> <name>t2</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>iostat</name><operator>-&gt;</operator><name>last_cnt</name></name> <operator>=</operator> <name>last_cnt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iostat</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <name>last_time</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>iostat</name><operator>-&gt;</operator><name>process</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"cnt: %"</literal> <name>PRId64</name> <literal type="string">", speed: %.2f, total_speed: %.2f, ql:%d\n"</literal></expr></argument>,
                      <argument><expr><name><name>iostat</name><operator>-&gt;</operator><name>last_cnt</name></name></expr></argument>, <argument><expr><name><name>iostat</name><operator>-&gt;</operator><name>last_speed</name></name></expr></argument>, <argument><expr><name><name>iostat</name><operator>-&gt;</operator><name>total_speed</name></name></expr></argument>, <argument><expr><name>ql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name><name>iostat</name><operator>-&gt;</operator><name>process</name></name><operator>)</operator><operator>(</operator><name>iostat</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_signal_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_io_t</name>               <modifier>*</modifier></type><name>eio</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e1</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>easy_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_io_list_lock</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGINT</name> <operator>||</operator> <name>sig</name> <operator>==</operator> <name>SIGTERM</name></expr>)</condition> <block>{<block_content>
        <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>eio</argument>, <argument>e1</argument>, <argument>&amp;easy_io_list_var</argument>, <argument>eio_list_node</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_eio_stop</name><argument_list>(<argument><expr><name>eio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sig</name> <operator>==</operator> <literal type="number">39</literal></expr>)</condition> <block>{<block_content>
        <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>eio</argument>, <argument>e1</argument>, <argument>&amp;easy_io_list_var</argument>, <argument>eio_list_node</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_io_print_status</name><argument_list>(<argument><expr><name>eio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_io_list_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// uthreadçå¤çå½æ°</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_io_uthread_invoke</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_baseth_t</name>           <modifier>*</modifier></type><name>th</name> <init>= <expr><operator>(</operator><name>easy_baseth_t</name> <operator>*</operator><operator>)</operator> <call><name>ev_userdata</name> <argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// æ¯å¦éåº</comment>
    <if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>stoped</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ev_break</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>EVBREAK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_uthread_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ev_invoke_pending</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><call><name>easy_uthread_yield</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æåºconnectionä¿¡æ¯
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_io_print_status</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>

    <comment type="line">// foreach connected_list</comment>
    <macro><name>easy_thread_pool_for_each</name><argument_list>(<argument>ioth</argument>, <argument>eio-&gt;io_thread_pool</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"thread:%d, doing: %d, done: %"</literal> <name>PRIdFAST32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>,
                      <argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>done_request_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>easy_list_for_each_entry</name><argument_list>(<argument>c</argument>, <argument>&amp;ioth-&gt;connected_list</argument>, <argument>conn_list_node</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"%d %s =&gt; doing: %d, done:%"</literal> <name>PRIdFAST32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><name><name>c</name><operator>-&gt;</operator><name>con_summary</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>con_summary</name><operator>-&gt;</operator><name>done_request_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_listen_close</name><parameter_list>(<parameter><decl><type><name>easy_listen_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>reuseport</name></name></expr>)</condition> <block>{<block_content>
        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>l</name><operator>-&gt;</operator><name>bind_port_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>read_watcher</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>!=</operator> <name><name>l</name><operator>-&gt;</operator><name>fd</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_socket_set_linger</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>read_watcher</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>easy_safe_close</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>read_watcher</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_socket_set_linger</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_safe_close</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
