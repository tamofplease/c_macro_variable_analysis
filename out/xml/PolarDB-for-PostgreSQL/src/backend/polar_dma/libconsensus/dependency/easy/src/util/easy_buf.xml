<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/util/easy_buf.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_buf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_string.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * åå»ºä¸ä¸ªæ°çeasy_buf_t
 */</comment>
<function><type><name>easy_buf_t</name> <modifier>*</modifier></type><name>easy_buf_create</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>easy_buf_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_buf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// ä¸ä¸ªpageå¤§å°</comment>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>pool</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cleanup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ædataåæeasy_buf_t
 */</comment>
<function><type><name>easy_buf_t</name> <modifier>*</modifier></type><name>easy_buf_pack</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>=</operator> <operator>(</operator><name>easy_buf_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_buf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_buf_set_data</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * è®¾ç½®æ°æ®å°bé
 */</comment>
<function><type><name>void</name></type> <name>easy_buf_set_data</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_buf_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cleanup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * åå»ºä¸ä¸ªeasy_file_buf_t, ç¨äºsendfileç­
 */</comment>
<function><type><name>easy_file_buf_t</name> <modifier>*</modifier></type><name>easy_file_buf_create</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_file_buf_t</name>         <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>easy_file_buf_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_file_buf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>EASY_BUF_FILE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cleanup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_file_buf_set_close</name><parameter_list>(<parameter><decl><type><name>easy_file_buf_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EASY_BUF_FILE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>EASY_BUF_CLOSE_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_buf_set_cleanup</name><parameter_list>(<parameter><decl><type><name>easy_buf_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>easy_buf_cleanup_pt</name> <modifier>*</modifier></type><name>cleanup</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cleanup</name></name> <operator>=</operator> <name>cleanup</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_buf_destroy</name><parameter_list>(<parameter><decl><type><name>easy_buf_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_cleanup_pt</name>         <modifier>*</modifier></type><name>cleanup</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EASY_BUF_CLOSE_FILE</name><operator>)</operator> <operator>==</operator> <name>EASY_BUF_CLOSE_FILE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>easy_file_buf_t</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// cleanup</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cleanup</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>cleanup</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cleanup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call>(<modifier>*</modifier><name>cleanup</name>)<argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ç©ºé´ä¸å¤,åéåºä¸åæ¥,ä¿çä¹åçç©ºé´
 */</comment>
<function><type><name>int</name></type> <name>easy_buf_check_read_space</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_buf_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>dsize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_OK</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// éè¦å¤§å°</comment>
    <expr_stmt><expr><name>dsize</name> <operator>=</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>easy_max</name><argument_list>(<argument><expr><name>dsize</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name>dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>easy_align</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>EASY_POOL_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// alloc</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// copy old buf to new buf</comment>
    <if_stmt><if>if <condition>(<expr><name>dsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>dsize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ç©ºé´ä¸å¤,åéåºä¸åæ¥,ä¿çä¹åçç©ºé´
 */</comment>
<function><type><name>easy_buf_t</name> <modifier>*</modifier></type><name>easy_buf_check_write_space</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>easy_list_get_last</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>easy_buf_t</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>last</name></name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>b</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// éæ°çæä¸ä¸ªbuf,æ¾å¥buf_chain_tä¸­</comment>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>easy_align</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>EASY_POOL_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>=</operator> <call><name>easy_buf_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æ¸é¤æ
 */</comment>
<function><type><name>void</name></type> <name>easy_buf_chain_clear</name><parameter_list>(<parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b1</name></decl>;</decl_stmt>

    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>b</argument>, <argument>b1</argument>, <argument>l</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_buf_destroy</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å å°åé¢
 */</comment>
<function><type><name>void</name></type> <name>easy_buf_chain_offer</name><parameter_list>(<parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>easy_buf_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æså¤å¶å°dä¸
 */</comment>
<function><type><name>int</name></type> <name>easy_buf_string_copy</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_buf_string_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>easy_buf_string_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_buf_string_printf</name><parameter_list>(<parameter><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>easy_buf_string_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>buffer</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>va_list</name></type>                 <name>args</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>easy_vsnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_buf_list_len</name><parameter_list>(<parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <macro><name>easy_list_for_each_entry</name><argument_list>(<argument>b</argument>, <argument>l</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>easy_buf_len</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

</unit>
