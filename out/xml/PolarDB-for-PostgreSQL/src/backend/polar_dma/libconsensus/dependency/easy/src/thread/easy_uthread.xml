<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/thread/easy_uthread.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_uthread.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * ç¨æ·æçº¿ç¨
 */</comment>

<decl_stmt><decl><type><name>__thread</name> <name>easy_uthread_control_t</name> <modifier>*</modifier></type><name>easy_uthread_var</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>easy_uthread_t</name> <modifier>*</modifier></type><name>easy_uthread_alloc</name><parameter_list>(<parameter><decl><type><name>easy_uthread_start_pt</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stack_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_uthread_start</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_uthread_context_switch</name><parameter_list>(<parameter><decl><type><name>ucontext_t</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>ucontext_t</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * éè¦åå§åä¸ä¸
 */</comment>
<function><type><name>void</name></type> <name>easy_uthread_init</name><parameter_list>(<parameter><decl><type><name>easy_uthread_control_t</name> <modifier>*</modifier></type><name>control</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>easy_uthread_var</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>easy_uthread_var</name> <operator>=</operator> <name>control</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>easy_uthread_var</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_uthread_control_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>runqueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>thread_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * éæ¾æææèµæº
 */</comment>
<function><type><name>void</name></type> <name>easy_uthread_destroy</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_uthread_t</name>          <modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t2</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>easy_uthread_var</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>t</argument>, <argument>t2</argument>, <argument>&amp;easy_uthread_var-&gt;thread_list</argument>, <argument>thread_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><name>easy_uthread_var</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * åæ­¢è¿è¡
 */</comment>
<function><type><name>void</name></type> <name>easy_uthread_stop</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>easy_uthread_var</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>stoped</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * åå»ºä¸ç¨æ·æçº¿ç¨
 */</comment>
<function><type><name>easy_uthread_t</name> <modifier>*</modifier></type><name>easy_uthread_create</name><parameter_list>(<parameter><decl><type><name>easy_uthread_start_pt</name> <modifier>*</modifier></type><name>start_routine</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stack_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_uthread_t</name>          <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>easy_uthread_var</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>easy_uthread_alloc</name><argument_list>(<argument><expr><name>start_routine</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>stack_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>thread_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>thread_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_uthread_ready</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * éåºçº¿ç¨æ°
 */</comment>
<function><type><name>void</name></type> <name>easy_uthread_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>exit_value</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>running</name><operator>-&gt;</operator><name>exiting</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_uthread_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * åæ¢ç»å¶ä»CPU
 */</comment>
<function><type><name>void</name></type> <name>easy_uthread_switch</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>running</name><operator>-&gt;</operator><name>errcode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_uthread_needstack</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_uthread_context_switch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>running</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å¾å°å½åæ­£å¸¸è¿è¡çeasy_uthread_t
 */</comment>
<function><type><name>easy_uthread_t</name> <modifier>*</modifier></type><name>easy_uthread_current</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><ternary><condition><expr><name>easy_uthread_var</name></expr> ?</condition><then> <expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>running</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å¾å°errcode
 */</comment>
<function><type><name>int</name></type> <name>easy_uthread_get_errcode</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>easy_uthread_var</name> <operator>&amp;&amp;</operator> <name><name>easy_uthread_var</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>running</name><operator>-&gt;</operator><name>errcode</name></name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen">/**
 * è®¾ç½®errcode
 */</comment>
<function><type><name>void</name></type> <name>easy_uthread_set_errcode</name><parameter_list>(<parameter><decl><type><name>easy_uthread_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>errcode</name></name> <operator>=</operator> <operator>(</operator><name>errcode</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * stackæ£æ¥.
 */</comment>
<function><type><name>void</name></type> <name>easy_uthread_needstack</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_uthread_t</name>          <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>easy_uthread_var</name><operator>-&gt;</operator><name>running</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>t</name> <operator>&lt;=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>stk</name></name> <operator>||</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>t</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>stk</name></name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>+</operator> <name>n</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"uthread stack overflow: &amp;t=%p tstk=%p n=%d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>stk</name></name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * åå¤å°±ç»ª, å å¥å°è¿è¡éåä¸­
 */</comment>
<function><type><name>void</name></type> <name>easy_uthread_ready</name><parameter_list>(<parameter><decl><type><name>easy_uthread_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>runqueue_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>runqueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ç©ºé²,éæ¾CPU
 */</comment>
<function><type><name>int</name></type> <name>easy_uthread_yield</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>easy_uthread_var</name><operator>-&gt;</operator><name>nswitch</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_uthread_ready</name><argument_list>(<argument><expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_uthread_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>nswitch</name></name> <operator>-</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * è°åº¦æ§å¶
 */</comment>
<function><type><name>int</name></type> <name>easy_uthread_scheduler</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_uthread_t</name>          <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

    <while>while<condition>(<expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>stoped</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>runqueue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"no runnable user thread! (%d)\n"</literal></expr></argument>, <argument><expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>thread_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>exit_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// first entry</comment>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>easy_list_entry</name><argument_list>(<argument><expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>runqueue</name><operator>.</operator><name>next</name></name></expr></argument>, <argument><expr><name>easy_uthread_t</name></expr></argument>, <argument><expr><name>runqueue_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>runqueue_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>nswitch</name></name> <operator>++</operator></expr>;</expr_stmt>

        <comment type="line">// åæ¢åå»è¿è¡</comment>
        <expr_stmt><expr><call><name>easy_uthread_context_switch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <comment type="line">// ç¨æ·çº¿ç¨éåºäº</comment>
        <if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>exiting</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>thread_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><name><name>easy_uthread_var</name><operator>-&gt;</operator><name>exit_value</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æå°åºuthreadä¿¡æ¯
 */</comment>
<function><type><name>void</name></type> <name>easy_uthread_print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_uthread_t</name>          <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"uthread list:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>easy_list_for_each_entry</name><argument_list>(<argument>t</argument>, <argument>&amp;easy_uthread_var-&gt;thread_list</argument>, <argument>thread_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name><name>easy_uthread_var</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>extra</name> <operator>=</operator> <literal type="string">" (running)"</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>ready</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>extra</name> <operator>=</operator> <literal type="string">" (ready)"</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>extra</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%6d %s\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<function><type><specifier>static</specifier> <name>easy_uthread_t</name> <modifier>*</modifier></type><name>easy_uthread_alloc</name><parameter_list>(<parameter><decl><type><name>easy_uthread_start_pt</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stack_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_uthread_t</name>          <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sigset_t</name></type>                <name>zero</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>z</name></decl>;</decl_stmt>

    <comment type="line">// åå»ºä¸ä¸ªpool</comment>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_uthread_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>stack_size</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pool</name> <operator>=</operator> <call><name>easy_pool_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <operator>(</operator><name>easy_uthread_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error_exit</name>;</goto></block_content></block></if></if_stmt>

    <comment type="line">// åå§å</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_uthread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>stk</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>t</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>stksize</name></name> <operator>=</operator> <name>stack_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>++</operator> <name><name>easy_uthread_var</name><operator>-&gt;</operator><name>gid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>startfn</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>startargs</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>

    <comment type="block">/* do a reasonable initialization */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>uc_sigmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* must initialize with current context */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>getcontext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error_exit</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* call makecontext to do the real work. */</comment>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>uc_stack</name><operator>.</operator><name>ss_sp</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>stk</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>uc_stack</name><operator>.</operator><name>ss_size</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>stksize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>makecontext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name><argument_list>( <argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>()</argument_list></call><operator>)</operator><name>easy_uthread_start</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>t</name></expr>;</return>
<label><name>error_exit</name>:</label>

    <if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_uthread_start</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>z</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>z</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name> <operator>|=</operator> <name>y</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>easy_uthread_t</name>          <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><name>easy_uthread_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>z</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>t</name><operator>-&gt;</operator><name>startfn</name></name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>startargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_uthread_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_uthread_context_switch</name><parameter_list>(<parameter><decl><type><name>ucontext_t</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>ucontext_t</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name>swapcontext</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"swapcontext failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
