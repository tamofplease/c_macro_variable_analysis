<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/io/easy_connection.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;easy_string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_log.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_switch_listen</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>easy_connection_t</name> <modifier>*</modifier></type><name>easy_connection_new</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_on_timeout_mesg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_timer</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_on_timeout_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_timer</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_on_pause</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_timer</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_redispatch_thread</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_evio_start</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_do_request</name><parameter_list>(<parameter><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_do_response</name><parameter_list>(<parameter><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_send_response</name><parameter_list>(<parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>request_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>easy_message_t</name> <modifier>*</modifier></type><name>easy_connection_recycle_message</name><parameter_list>(<parameter><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>easy_connection_t</name> <modifier>*</modifier></type><name>easy_connection_do_connect</name><parameter_list>(<parameter><decl><type><name>easy_client_t</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>afd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>easy_connection_t</name> <modifier>*</modifier></type><name>easy_connection_do_client</name><parameter_list>(<parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_autoconn</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_process_request</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_sendsocket</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_listen_dispatch</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>easy_addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>easy_listen_t</name> <modifier>*</modifier></type><name>listen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_listen_watcher</name><parameter_list>(<parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_accept_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_io</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_checkself</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_dump_slow_request</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * å¢å çå¬ç«¯å£, è¦å¨easy_io_startå¼å§è°ç¨
 *
 * @param host  æºå¨åæIP, æNULL
 * @param port  ç«¯å£å·
 *
 * @return      å¦ææåè¿åeasy_listen_tå¯¹è±¡, å¦åè¿åNULL
 */</comment>
<function><type><name>easy_listen_t</name> <modifier>*</modifier></type><name>easy_connection_add_listen</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>easy_io_handler_pt</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>easy_add_listen</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>easy_listen_t</name> <modifier>*</modifier></type><name>easy_connection_listen_addr</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>easy_addr_t</name></type> <name>addr</name></decl></parameter>,
        <parameter><decl><type><name>easy_io_handler_pt</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>udp</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>handler</name> <operator>&amp;&amp;</operator> <name><name>handler</name><operator>-&gt;</operator><name>is_udp</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>easy_add_listen_addr</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>udp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>easy_listen_t</name> <modifier>*</modifier></type><name>easy_add_listen</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
                               <parameter><decl><type><name>easy_io_handler_pt</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_addr_t</name></type>             <name>address</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>udp</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>udp</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>handler</name> <operator>&amp;&amp;</operator> <name><name>handler</name><operator>-&gt;</operator><name>is_udp</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>host</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>support_ipv6</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>host</name> <operator>=</operator> <literal type="string">"[]"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"udp:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"tcp:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>udp</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>host</name> <operator>==</operator> <literal type="char">'u'</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>host</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>address</name> <operator>=</operator> <call><name>easy_inet_str_to_addr</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><name>family</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_trace_log</name><argument_list>(<argument><expr><literal type="string">"error addr: host=%s, port=%d.\n"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>easy_add_listen_addr</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>udp</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * éè¿easy_addr_tåå»ºeasy_listen_t
 */</comment>
<function><type><name>easy_listen_t</name> <modifier>*</modifier></type><name>easy_add_listen_addr</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>easy_addr_t</name></type> <name>addr</name></decl></parameter>,
                                    <parameter><decl><type><name>easy_io_handler_pt</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>udp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>flags</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>eio</name><operator>-&gt;</operator><name>tcp_defer_accept</name></name></expr> ?</condition><then> <expr><name>EASY_FLAGS_DEFERACCEPT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_listen_t</name>           <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>pool</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_connection_add_listen failure: eio-&gt;started=%d, eio-&gt;pool=%p\n"</literal></expr></argument>,
                       <argument><expr><name><name>eio</name><operator>-&gt;</operator><name>started</name></name></expr></argument>, <argument><expr><name><name>eio</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// alloc memory</comment>
    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <name><name>eio</name><operator>-&gt;</operator><name>io_thread_count</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <name>cnt</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ev_io</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_listen_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <operator>(</operator><name>easy_listen_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name><name>eio</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_pool_calloc failure: eio-&gt;pool=%p, size=%d\n"</literal></expr></argument>,
                       <argument><expr><name><name>eio</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// æå¼çå¬</comment>
    <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>listen_lock</name></name> <operator>=</operator> <name>EASY_SPIN_INITER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>no_reuseport</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EASY_FLAGS_NOLISTEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>easy_socket_listen</name><argument_list>(<argument><expr><name>udp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><name><name>eio</name><operator>-&gt;</operator><name>listen_backlog</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_socket_listen failure: host=%s\n"</literal></expr></argument>, <argument><expr><call><name>easy_inet_addr_to_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// åå§å</comment>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>udp</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ev_io_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>read_watcher</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>easy_connection_on_udpread</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_READ</name> <operator>|</operator> <name>EV_CLEANUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>ev_io_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>read_watcher</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>easy_connection_on_accept</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_READ</name> <operator>|</operator> <name>EV_CLEANUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>ev_set_priority</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>read_watcher</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>EV_MAXPRI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>read_watcher</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>no_reuseport</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>reuseport</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EASY_FLAGS_REUSEPORT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>accept_count</name></name> <operator>=</operator> <name><name>eio</name><operator>-&gt;</operator><name>accept_count</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>reuseport</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"easy_socket_listen: host=%s, fd=%d"</literal></expr></argument>, <argument><expr><call><name>easy_inet_addr_to_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>reuseport</name></name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>eio</name><operator>-&gt;</operator><name>io_thread_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>cidx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>easy_connection_listen_dispatch</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

            <while>while<condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>bind_port_cnt</name></name> <operator>&lt;</operator> <name><name>eio</name><operator>-&gt;</operator><name>io_thread_count</name></name> <operator>&amp;&amp;</operator> <name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>cidx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_connection_listen_dispatch</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>eio</name><operator>-&gt;</operator><name>listen</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>listen</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * session_timeout
 */</comment>
<function><type><name>void</name></type> <name>easy_connection_wakeup_session</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_request_t</name>          <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rn</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_CLIENT</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>send_queue</name></name></expr>)</condition> <block>{<block_content>
        <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>s</argument>, <argument>sn</argument>, <argument>&amp;(c-&gt;send_queue-&gt;list)</argument>, <argument>send_queue_list</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_hash_del_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>send_queue_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_session_process</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>seqno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EASY_TYPE_SERVER</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>conn_has_error</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>r</argument>, <argument>rn</argument>, <argument>&amp;c-&gt;session_list</argument>, <argument>request_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>waiting</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>request_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>process</name></name><operator>)</operator><operator>(</operator><name>r</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * destroyæeasy_connection_tå¯¹è±¡
 *
 * @param c - easy_connection_tå¯¹è±¡
 */</comment>
<function><type><name>void</name></type> <name>easy_connection_destroy</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_message_t</name>          <modifier>*</modifier></type><name>m</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>m2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_t</name>               <modifier>*</modifier></type><name>eio</name></decl>;</decl_stmt>

    <comment type="line">// release session</comment>
    <expr_stmt><expr><call><name>easy_connection_wakeup_session</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// disconnect</comment>
    <expr_stmt><expr><name>eio</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>eio</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EASY_CONN_CLOSE</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>on_disconnect</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>on_disconnect</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// refcount</comment>
    <if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>eio</name><operator>-&gt;</operator><name>stoped</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EASY_CONN_CLOSE</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ev_io_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ev_io_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>ev_timer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ev_timer_again</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EASY_CONN_CLOSE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <call><name>ev_now</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_CONN_CLOSE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// release message</comment>
    <if_stmt><if>if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"%s has data"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_buf_chain_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>m</argument>, <argument>m2</argument>, <argument>&amp;c-&gt;message_list</argument>, <argument>message_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>stoped</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>easy_message_destroy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>message_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_io_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_io_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_timer_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_timer_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pause_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//clean summary</comment>
    <expr_stmt><expr><call><name>easy_summary_destroy_node</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>eio</name><operator>-&gt;</operator><name>eio_summary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// close</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"%s close\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>read_eof</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type>                    <name><name>buf</name><index>[<expr><name>EASY_POOL_PAGE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

            <while>while <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>EASY_POOL_PAGE_SIZE</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// autoreconn</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>auto_reconn</name></name> <operator>&amp;&amp;</operator> <name><name>eio</name><operator>-&gt;</operator><name>stoped</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_CONN_AUTO_CONN</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type>                  <name>t</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>reconn_time</name></name> <operator>/</operator> <literal type="number">1000.0</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>reconn_fail</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>reconn_fail</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>reconn_fail</name></name> <operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>client</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>timeout</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>timeout</name></name></expr> </then><else>: <expr><name>EASY_CLIENT_DEFAULT_TIMEOUT</name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"%s reconn_time: %f, reconn_fail: %d\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>reconn_fail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_timer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_timer_again</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>conn_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>group_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_atomic32_add_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>stoped</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// SSL</comment>
    <expr_stmt><expr><call><name>easy_ssl_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>on_close</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>on_close</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_MAGIC</name></cpp:ifdef>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>magic</name></name> <operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * connectåæ°è®¾ç½®
 */</comment>
<function><type><name>easy_session_t</name> <modifier>*</modifier></type><name>easy_connection_connect_init</name><parameter_list>(<parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
        <parameter><decl><type><name>easy_io_handler_pt</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>conn_timeout</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
        <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>servername</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>easy_session_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pool</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pool</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_session_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_CONNECT_ADDR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thread_ptr</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>handler</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>conn_timeout</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>args</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_id</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>servername</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_id</name></name> <operator>|=</operator> <name>EASY_CONNECT_SSL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>user_data</name></name> <operator>=</operator> <name>servername</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å¼æ­¥è¿æ¥
 */</comment>
<function><type><name>int</name></type> <name>easy_connection_connect</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>easy_addr_t</name></type> <name>addr</name></decl></parameter>,
                            <parameter><decl><type><name>easy_io_handler_pt</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>conn_timeout</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>easy_connection_connect_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>conn_timeout</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>easy_connection_connect_ex</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_connection_connect_ex</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>easy_addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>.</operator><name>family</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>easy_client_dispatch</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>easy_session_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * åæ­¥è¿æ¥
 */</comment>
<function><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>easy_connection_connect_thread</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>easy_addr_t</name></type> <name>addr</name></decl></parameter>,
        <parameter><decl><type><name>easy_io_handler_pt</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>conn_timeout</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>.</operator><name>family</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>easy_session_t</name></type>          <name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ps</name> <operator>=</operator> <call><name>easy_connection_connect_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>conn_timeout</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>easy_connection_connect_thread_ex</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>easy_connection_connect_thread_ex</name><parameter_list>(<parameter><decl><type><name>easy_addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>.</operator><name>family</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
    <return>return <expr><call><name>easy_connection_do_client</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æ­å¼è¿æ¥
 */</comment>
<function><type><name>int</name></type> <name>easy_connection_disconnect</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>easy_addr_t</name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>.</operator><name>family</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>easy_session_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_DISCONNECT_ADDR</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>easy_client_dispatch</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_session_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_connection_disconnect_thread</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>easy_addr_t</name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>.</operator><name>family</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>easy_session_t</name></type>          <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_session_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>EASY_DISCONNECT_ADDR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_connection_do_client</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_connection_session_build</name><parameter_list>(<parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type>                  <name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EASY_TYPE_CLIENT</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cleanup</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cleanup</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>cleanup</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// å¾å°packet_id</comment>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_id</name></name> <operator>=</operator> <call><name>easy_connection_get_packet_id</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>opacket</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// encode</comment>
    <expr_stmt><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>encode</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>r</name></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>opacket</name></name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timeout_watcher</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_hash_dlist_add</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>send_queue_hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>send_queue_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_atomic_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_DOING</name></cpp:ifdef>
    <expr_stmt><expr><call><name>EASY_PRINT_BT</name><argument_list>(<argument><expr><literal type="string">"doing_request_count_inc:%d,c:%s,r:%p,%ld."</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>con_summary</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>++</operator></expr>;</expr_stmt>

    <comment type="line">// å å¥c-&gt;session_list</comment>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>now</name></name> <operator>=</operator> <call><name>ev_now</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>timeout</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>timeout</name></name></expr> </then><else>: <expr><name>EASY_CLIENT_DEFAULT_TIMEOUT</name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_timer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>, <argument><expr><name>easy_connection_on_timeout_mesg</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_timer_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * åéå°cä¸, åªåè®¸æ¬ioçº¿ç¨è°ç¨
 */</comment>
<function><type><name>int</name></type> <name>easy_connection_send_session</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name> <init>= <expr><name>EASY_IOTH_SELF</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>ioth</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ioth</name><operator>-&gt;</operator><name>iot</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>stoped</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>checkdrc</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>&gt;=</operator> <name>EASY_IOTH_DOING_REQ_CNT</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"%p, ioth-&gt;doing_request_count: %d, EASY_IOTH_DOING_REQ_CNT: %d\n"</literal></expr></argument>,
                       <argument><expr><name>ioth</name></expr></argument>, <argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><name>EASY_IOTH_DOING_REQ_CNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>process</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>process</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_atomic32_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>easy_connection_session_build</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">//easy_warn_log("sendsocket in send_session: %p, packet_id: %" PRIx64 " %s",</comment>
    <comment type="line">//              s, s-&gt;packet_id, easy_connection_str(c));</comment>
    <return>return <expr><call><name>easy_connection_sendsocket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ææ°æ®åéå°cä¸, åªåè®¸æ¬ioçº¿ç¨è°ç¨
 */</comment>
<function><type><name>int</name></type> <name>easy_connection_send_session_data</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

    <comment type="line">// encode</comment>
    <expr_stmt><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>encode</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>r</name></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>opacket</name></name><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><call><name>easy_connection_sendsocket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="block" format="doxygen">/**
 * accept äºä»¶å¤ç
 */</comment>
<function><type><name>void</name></type> <name>easy_connection_on_accept</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_io</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_listen_simple_t</name>    <modifier>*</modifier></type><name>listen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>cnt</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>listen</name> <operator>=</operator> <operator>(</operator><name>easy_listen_simple_t</name> <operator>*</operator><operator>)</operator> <name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>listen</name><operator>-&gt;</operator><name>accept_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <name><name>listen</name><operator>-&gt;</operator><name>accept_count</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>listen</name><operator>-&gt;</operator><name>reuseport</name></name></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <do>do <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>easy_connection_accept_one</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>cnt</name> <operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block> while<condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_accept_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_io</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>easy_atomic_t</name></type>    <name>easy_accept_sequence</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_listen_simple_t</name>    <modifier>*</modifier></type><name>listen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>socklen_t</name></type>               <name>addr_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name> <init>= <expr><name>EASY_IOTH_SELF</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>listen</name> <operator>=</operator> <operator>(</operator><name>easy_listen_simple_t</name> <operator>*</operator><operator>)</operator> <name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>addr_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <comment type="line">// accept</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ACCEPT4</name></expr></cpp:if>

    <if_stmt><if>if <condition>(<expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>use_accept4</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>accept4</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_len</name></expr></argument>, <argument><expr><name>SOCK_NONBLOCK</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOSYS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>use_accept4</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>easy_socket_non_blocking</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>easy_socket_non_blocking</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// ä¸ºæ°è¿æ¥åå»ºä¸ä¸ªeasy_connection_tå¯¹è±¡</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>easy_connection_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_connection_new\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>tcp_nodelay</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_socket_set_tcpopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// åå§å</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EASY_TYPE_SERVER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name><name>listen</name><operator>-&gt;</operator><name>handler</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>evdata</name></name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_inet_atoe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <call><name>easy_atomic_add_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_accept_sequence</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// äºä»¶åå§å</comment>
    <expr_stmt><expr><call><name>ev_io_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>, <argument><expr><name>easy_connection_on_readable</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_io_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>, <argument><expr><name>easy_connection_on_writable</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>, <argument><expr><name>easy_connection_on_timeout_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ioth</name></name> <operator>=</operator> <name>ioth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <call><name>ev_now</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// create ssl_connection_t</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>is_ssl</name></name> <operator>&amp;&amp;</operator> <name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>ssl</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>sc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>easy_ssl_connection_create</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>ssl</name><operator>-&gt;</operator><name>server_ctx</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_ssl_connection_create\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// set read callback</comment>
        <expr_stmt><expr><call><name>ev_set_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>, <argument><expr><name>easy_ssl_connection_handshake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"accept from %s, cb: %p\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ev_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//server locate</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>con_summary</name></name> <operator>=</operator> <call><name>easy_summary_locate_node</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>eio_summary</name></name></expr></argument>, <argument><expr><name><name>listen</name><operator>-&gt;</operator><name>hidden_sum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// on connect</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>on_connect</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>on_connect</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>)</operator> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// start idle</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>on_idle</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type>                  <name>t</name> <init>= <expr><call><name>easy_max</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>idle_time</name></name> <operator>/</operator> <literal type="number">2000.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ev_timer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_timer_again</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// è®©åºæ¥ç»å¶ä»ççº¿ç¨</comment>
    <if_stmt><if>if <condition>(<expr><name><name>listen</name><operator>-&gt;</operator><name>is_simple</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>listen</name><operator>-&gt;</operator><name>reuseport</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>listen_all</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>easy_switch_listen</name><argument_list>(<argument><expr><name>listen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// start read</comment>
    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>conn_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>connected_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>event_status</name></name> <operator>=</operator> <name>EASY_EVENT_READ</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>tcp_defer_accept</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><call><name>ev_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>loop</name><operator>,</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>easy_connection_evio_start</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_switch_listen</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_listen_t</name>           <modifier>*</modifier></type><name>listen</name> <init>= <expr><operator>(</operator><name>easy_listen_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name> <init>= <expr><name>EASY_IOTH_SELF</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>listen_all</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>listen</name><operator>-&gt;</operator><name>old_ioth</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>listen</name><operator>-&gt;</operator><name>curr_ioth</name></name> <operator>==</operator> <name>ioth</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>listen</name><operator>-&gt;</operator><name>old</name></name> <operator>=</operator> <name><name>listen</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>listen</name><operator>-&gt;</operator><name>curr_ioth</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>listen</name><operator>-&gt;</operator><name>old_ioth</name></name> <operator>=</operator> <name>ioth</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ioth</name><operator>-&gt;</operator><name>listen_watcher</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_timer_again</name> <argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>listen_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>listen</name><operator>-&gt;</operator><name>listen_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_evio_start</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"%s evio: %d, cb:%p"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>event_status</name></name></expr></argument>, <argument><expr><operator>(</operator><call><name>ev_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>event_status</name></name> <operator>&amp;</operator> <name>EASY_EVENT_READ</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>event_status</name></name> <operator>&amp;</operator> <name>EASY_EVENT_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>event_status</name></name> <operator>&amp;</operator> <name>EASY_EVENT_TIMEOUT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ev_timer_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>event_status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ä¸ºäºåè¡¡ï¼åæ¢å°å¶ä»çº¿ç¨
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_redispatch_thread</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>

    <comment type="line">// å¤çäºï¼æ¬¡ä»¥ä¸, æèæè¯»åæ²¡å®, ä¸è½åæ¢</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>need_redispatch</name></name> <operator>||</operator> <call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>message_list</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_AGAIN</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// éæ©ä¸æ°çioth</comment>
    <expr_stmt><expr><name>ioth</name> <operator>=</operator> <operator>(</operator><name>easy_io_thread_t</name> <operator>*</operator><operator>)</operator><call><name>easy_thread_pool_hash</name><argument_list>(<argument><expr><name><name>EASY_IOTH_SELF</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>io_thread_pool</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>easy_connection_dispatch_to_thread</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ioth</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æcç´æ¥ç»æå®ioth
 */</comment>
<function><type><name>int</name></type> <name>easy_connection_dispatch_to_thread</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>easy_io_thread_t</name> <modifier>*</modifier></type><name>ioth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>status</name> <init>= <expr><name>EASY_EVENT_READ</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>doing</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>need_redispatch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ioth</name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>ioth</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_AGAIN</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>conn_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ev_is_active</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>status</name> <operator>|=</operator> <name>EASY_EVENT_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ev_is_active</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>status</name> <operator>|=</operator> <name>EASY_EVENT_TIMEOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>&amp;</operator> <name>EASY_EVENT_WRITE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ev_io_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ev_io_stop_ctrl</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>ev_io_stop_ctrl</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_timer_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// request_list</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_SERVER</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>easy_list_t</name>             <modifier>*</modifier></type><name>request</name> <init>= <expr><operator>(</operator><name>easy_list_t</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>send_queue</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>easy_list_join</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"%s redispatch %p to %p, cnt:%d\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ioth</name></name></expr></argument>, <argument><expr><name>ioth</name></expr></argument>, <argument><expr><name>doing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// å å¥å°æ°çéåä¸­</comment>
    <if_stmt><if>if <condition>(<expr><name>doing</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_atomic32_add_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><operator>-</operator><name>doing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_atomic32_add_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><name>doing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>event_status</name></name> <operator>|=</operator> <name>status</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ioth</name></name> <operator>=</operator> <name>ioth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr>;</expr_stmt>

    <comment type="line">// wakeup</comment>
    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>conn_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>conn_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_async_send</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_ASYNC</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * åæ¢listen
 */</comment>
<function><type><name>void</name></type> <name>easy_connection_on_listen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_timer</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_listen_t</name>               <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>            <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ioth</name> <operator>=</operator> <operator>(</operator><name>easy_io_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>easy_io_t</name>                   <modifier>*</modifier></type><name>eio</name> <init>= <expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>listenadd</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>listenadd</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>eio</name><operator>-&gt;</operator><name>listen</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>listen</name></name> <operator>=</operator> <name><name>eio</name><operator>-&gt;</operator><name>listenadd</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>listenadd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// å¯¹æ¯ä¸ä¸ªlisten</comment>
    <for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name><name>eio</name><operator>-&gt;</operator><name>listen</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>reuseport</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="line">// trylockä¸ä¸</comment>
        <if_stmt><if>if <condition>(<expr><call><name>easy_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>listen_lock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// æ¯èªå·±</comment>
            <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>old_ioth</name></name> <operator>==</operator> <name>ioth</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>old_ioth</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>curr_ioth</name></name> <operator>=</operator> <name>ioth</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>cur</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>read_watcher</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>cur</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>curr_ioth</name></name> <operator>=</operator> <name>ioth</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ioth</name><operator>-&gt;</operator><name>listen_watcher</name><operator>.</operator><name>repeat</name></name> <operator>=</operator> <literal type="number">60.</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ev_timer_again</name> <argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>listen_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>curr_ioth</name></name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>old_ioth</name></name> <operator>==</operator> <name>ioth</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ev_io_stop</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>read_watcher</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>old</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>old_ioth</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * connäºä»¶å¤ç
 */</comment>
<function><type><name>void</name></type> <name>easy_connection_on_wakeup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_async</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_list_t</name></type>             <name>conn_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_list_t</name></type>             <name>session_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_list_t</name></type>             <name>request_list</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ioth</name> <operator>=</operator> <operator>(</operator><name>easy_io_thread_t</name> <operator>*</operator><operator>)</operator> <name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

    <comment type="line">// åålist</comment>
    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_movelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>conn_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_movelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>session_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_movelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>request_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// foreach</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>c</argument>, <argument>c2</argument>, <argument>&amp;conn_list</argument>, <argument>conn_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <call><name>ev_now</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_connection_evio_start</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>on_redispatch</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>on_redispatch</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>easy_list_join</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>connected_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_connection_send_session_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>session_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_connection_send_response</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * readäºä»¶å¤ç
 */</comment>
<function><type><name>void</name></type> <name>easy_connection_on_readable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_io</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_message_t</name>          <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>pending</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>easy_connection_t</name> <operator>*</operator><operator>)</operator><name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name><name>w</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// é²æ­¢è¯·æ±è¿å¤</comment>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_SERVER</name> <operator>&amp;&amp;</operator>
                 <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>&gt;</operator> <name>EASY_CONN_DOING_REQ_CNT</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>&gt;</operator> <name>EASY_IOTH_DOING_REQ_CNT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>checkdrc</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>%</operator> <name>EASY_WARN_LOG_INTERVAL</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"c-&gt;doing_request_count: %d, c-&gt;ioth-&gt;doing_request_count: %d\n"</literal></expr></argument>,
                          <argument><expr><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>checkdrc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error_exit</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// æåçè¯·æ±, å¦ææ°æ®æ²¡å®, éè¦ç»§ç»­è¯»</comment>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>easy_list_get_last</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>message_list</name></name></expr></argument>, <argument><expr><name>easy_message_t</name></expr></argument>, <argument><expr><name>message_list_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// ç¬¬ä¸æ¬¡è¯»æèä¸æ¬¡è¯»å®æ´äº, éæ°å»ºä¸ä¸ªeasy_message_t</comment>
    <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EASY_MESG_READ_AGAIN</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>easy_message_create</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_message_create failure, c=%p\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <do>do <block>{<block_content>
        <comment type="line">// æ£æ¥bufferå¤§å°</comment>
        <expr_stmt><expr><name>pending</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>easy_buf_check_read_space</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>next_read_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_buf_check_read_space failure, m=%p, len=%d\n"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>next_read_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// ä»connéè¯»å¥æ°æ®</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>read</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>,</operator> <name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name><operator>,</operator> <name><name>m</name><operator>-&gt;</operator><name>next_read_len</name></name><operator>,</operator> <operator>&amp;</operator><name>pending</name><operator>)</operator><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>EASY_AGAIN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_connection_evio_start</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// client</comment>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_CLIENT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"%s: do read eof\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if<condition>(<expr><name>EASY_ERROR</name> <operator>==</operator> <call><name>easy_connection_do_response</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"%s type=client error\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"%s n: %d\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"%s n: %d, error: %s(%d)\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>conn_has_error</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>easy_log_level</name> <operator>&gt;=</operator> <name>EASY_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>easy_log_level</name> <operator>==</operator> <name>EASY_LOG_DEBUG</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"%s read: %d"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>char</name></type>                    <name><name>btmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>easy_trace_log</name><argument_list>(<argument><expr><literal type="string">"%s read: %d =&gt; %s"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>easy_string_tohex</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>btmp</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>read_eof</name></name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>next_read_len</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>con_summary</name><operator>-&gt;</operator><name>in_byte</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block> while<condition>(<expr><name>pending</name></expr>)</condition>;</do>

    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <call><name>ev_now</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>reconn_fail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>read_eof</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>first_msglen</name></name> <operator>==</operator> <name>EASY_FIRST_MSGLEN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>first_msglen</name></name> <operator>=</operator> <name>EASY_IO_BUFFER_SIZE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next_read_len</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>first_msglen</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// client</comment>
    <if_stmt><if>if <condition>(<expr><name>EASY_ERROR</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_CLIENT</name><operator>)</operator></expr> ?</condition><then>
                       <expr><call><name>easy_connection_do_response</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>easy_connection_do_request</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"%s type=%s error\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_CLIENT</name></expr> ?</condition><then> <expr><literal type="string">"client"</literal></expr> </then><else>: <expr><literal type="string">"server"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <return>return;</return>
<label><name>error_exit</name>:</label>
    <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å¤çååº
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_do_response</name><parameter_list>(<parameter><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>packet_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>                    <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_list_t</name></type>             <name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>                  <name>now</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

    <comment type="line">// å¤çbuf</comment>
    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>ev_now</name><argument_list>(<argument><expr><name><name>easy_baseth_self</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>decode</name></name><operator>)</operator><operator>(</operator><name>m</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// quickack</comment>
                <if_stmt><if>if <condition>(<expr><name><name>EASY_IOTH_SELF</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>no_delayack</name></name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>next_read_len</name></name> <operator>&lt;</operator> <name>EASY_MSS</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>easy_socket_set_tcpopt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>TCP_QUICKACK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"decode error, %s\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>cnt</name> <operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>packet_id</name> <operator>=</operator> <call><name>easy_connection_get_packet_id</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>easy_session_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_hash_dlist_del</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><name>packet_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// éè¦cleanup</comment>
            <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>cleanup</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>cleanup</name></name><operator>)</operator><operator>(</operator><name>NULL</name><operator>,</operator> <name>packet</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"not found session, packet_id=%ld %s\n"</literal></expr></argument>, <argument><expr><name>packet_id</name></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// process</comment>
        <expr_stmt><expr><name><name>EASY_IOTH_SELF</name><operator>-&gt;</operator><name>done_request_count</name></name> <operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>ipacket</name></name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>              <comment type="line">// in</comment>

        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>                     <comment type="line">// messageå»¶åéæ¾</comment>
            <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>async</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>async</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_atomic_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>request_list_node</name><operator>.</operator><name>next</name></name> <operator>=</operator> <operator>(</operator><name>easy_list_t</name> <operator>*</operator><operator>)</operator> <name>m</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// stop timer</comment>
        <expr_stmt><expr><call><name>ev_timer_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_request_client_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_atomic_dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>batch_process</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>now</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>now</name></name> <operator>=</operator> <name>now</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>now</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>++</operator> <name>left</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>batch_process</name></name><operator>)</operator><operator>(</operator><operator>(</operator><name>easy_message_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>easy_session_process</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"easy_session_process error, fd=%d, s=%p\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="line">// batch process</comment>
    <if_stmt><if>if <condition>(<expr><name>cnt</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>recycle_cnt</name></name> <operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>batch_process</name></name><operator>)</operator><operator>(</operator><operator>(</operator><name>easy_message_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// close</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>wait_close</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>wait_close</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// send new packet</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>new_packet</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>(</operator><name>EASY_CONN_DOING_REQ_CNT</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>easy_min</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><operator>(</operator><name>EASY_IOTH_DOING_REQ_CNT</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>easy_min</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>left</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>new_packet</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>)</operator> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>easy_connection_recycle_message</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"easy_connection_recycle_message error, fd=%d, m=%p\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// status, message æ²¡è¯»å®</comment>
    <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_MESG_READ_AGAIN</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>easy_message_destroy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å¤çè¯·æ±
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_do_request</name><parameter_list>(<parameter><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>                    <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_request_t</name>          <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>cnt</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

    <comment type="line">// å¤çbuf, decode</comment>
    <while>while <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>decode</name></name><operator>)</operator><operator>(</operator><name>m</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// quickack</comment>
                <if_stmt><if>if <condition>( <expr><name><name>EASY_IOTH_SELF</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>no_delayack</name></name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>next_read_len</name></name> <operator>&lt;</operator> <name>EASY_MSS</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>easy_socket_set_tcpopt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>TCP_QUICKACK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"decode error, %s m=%p, cnt=%d\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_atomic32_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// new request</comment>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>easy_request_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_request_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_pool_calloc failure, %s, m: %p\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_atomic32_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_MAGIC</name></cpp:ifdef>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>EASY_DEBUG_MAGIC_REQUEST</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name></name> <operator>=</operator> <operator>(</operator><name>easy_message_session_t</name> <operator>*</operator><operator>)</operator><name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ipacket</name></name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>    <comment type="line">//è¿æ¥çæ°æ®å</comment>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <call><name>ev_now</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add m-&gt;request_list</comment>
        <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>request_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>request_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>all_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>all_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name> <operator>++</operator></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_DOING</name></cpp:ifdef>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>uuid</name></name> <operator>=</operator> <call><name>easy_atomic_add_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_debug_uuid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EASY_PRINT_BT</name><argument_list>(<argument><expr><literal type="string">"doing_request_count_inc:%d,c:%s,r:%p,%ld."</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></while>

    <comment type="line">// cnt</comment>
    <if_stmt><if>if <condition>(<expr><name>cnt</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>request_list_count</name></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>con_summary</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_atomic32_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>recycle_cnt</name></name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>easy_connection_recycle_message</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>EASY_MESG_READ_AGAIN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

    <comment type="line">// batch process</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>batch_process</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>batch_process</name></name><operator>)</operator><operator>(</operator><name>m</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// process</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>easy_connection_process_request</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>request_list</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// å å¥çå¬</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>event_status</name></name> <operator>==</operator> <name>EASY_EVENT_READ</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>wait_close</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>easy_connection_evio_start</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_connection_redispatch_thread</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * writeäºä»¶å¤ç
 */</comment>
<function><type><name>void</name></type> <name>easy_connection_on_writable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_io</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>easy_connection_t</name> <operator>*</operator><operator>)</operator><name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name><name>w</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// wait client time</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>wcs</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>wait_client_time</name></name> <operator>+=</operator> <operator>(</operator><call><name>ev_now</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>wcs</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>wcs</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>easy_connection_write_socket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EASY_ABORT</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error_exit</name>;</goto></block_content></block></if></if_stmt>

    <comment type="line">// æ²¡æ°æ®å¯å, æwriteåæ</comment>
    <if_stmt><if>if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>easy_connection_redispatch_thread</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_ASYNC</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>ev_io_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// client</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_CLIENT</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// connected.</comment>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EASY_CONN_CONNECTING</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_CONN_OK</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ev_timer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ev_timer_again</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>easy_socket_error</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>conn_has_error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>error_exit</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// on connect</comment>
            <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>on_connect</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>on_connect</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>)</operator> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>error_exit</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// send new packet</comment>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>new_packet</name></name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <name>EASY_OK</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name> <operator>&lt;</operator> <operator>(</operator><name>EASY_CONN_DOING_REQ_CNT</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>new_packet</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>)</operator> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>error_exit</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

        <comment type="line">// è°ç¨process</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>easy_connection_process_request</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>error_exit</name>;</goto></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>EASY_ASYNC</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <comment type="line">// è¿ææ°æ®å¯å</comment>
        <if_stmt><if>if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return;</return>
<label><name>error_exit</name>:</label>
    <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å¯¹timeoutçå¤çmessage
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_on_timeout_mesg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_timer</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>              <name>now</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>easy_session_t</name> <operator>*</operator><operator>)</operator><name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>now</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ev_now</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>error</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"timeout_mesg: %p, time: %f (s), packet_id: %"</literal> <name>PRIx64</name> <literal type="string">" %s"</literal></expr></argument>,
                      <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>ev_now</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>now</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_id</name></name></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>now</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ev_now</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// process</comment>
    <expr_stmt><expr><call><name>easy_hash_dlist_del</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>easy_session_process</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å¯¹timeoutçå¤çconnection
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_on_timeout_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_timer</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>                  <name>t</name></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>easy_connection_t</name> <operator>*</operator><operator>)</operator><name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"%s timeout_conn: status=%d, type=%d\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EASY_CONN_AUTO_CONN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_connection_autoconn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EASY_CONN_OK</name></expr>)</condition> <block>{<block_content> <comment type="line">// EASY_CONN_CLOSE, EASY_CONN_CONNECTING</comment>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>conn_has_error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EASY_CONN_CLOSE</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>force_destroy_second</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>ev_now</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>force_destroy_second</name></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>last_time</name></name> <operator>&lt;</operator> <name>now</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>no_force_destroy</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>no_force_destroy</name></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>slow_request_dumped</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>easy_connection_dump_slow_request</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// EASY_CONN_OK</comment>
        <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>ev_now</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>life_idle</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>t</name> <operator>=</operator> <name>now</name> <operator>-</operator> <call><name>easy_max</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>last_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>t</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>last_time</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>on_idle</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>idle_time</name></name> <operator>/</operator> <literal type="number">1000.0</literal> <operator>&lt;</operator> <name>t</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <comment type="line">// on_idle</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>on_idle</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>EASY_ABORT</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>error_exit</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_CLIENT</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>on_idle</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>easy_max</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>idle_time</name></name> <operator>/</operator> <literal type="number">2000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ev_timer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ev_timer_again</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>ev_timer_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return;</return>
<label><name>error_exit</name>:</label>
    <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æconnectionä¸çoutputçbufferåå°socketä¸
 *
 * @param c - easy_connection_tå¯¹è±¡
 * @return  - EASY_ABORT ç½ç»æ­å¼
 *            EASY_AGAIN æ²¡åå®,éè¦ç»§ç»­å
 *            EASY_OK    åå®äº
 */</comment>
<function><type><name>int</name></type> <name>easy_connection_write_socket</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name></decl>;</decl_stmt>

    <comment type="line">// ç©ºçç´æ¥è¿å</comment>
    <if_stmt><if>if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_OK</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// å å¡</comment>
    <if_stmt><if>if <condition>(<expr><name><name>EASY_IOTH_SELF</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>tcp_cork</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>tcp_cork_flag</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_socket_set_tcpopt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>TCP_CORK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tcp_cork_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>write</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>,</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"%s write: %d"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>con_summary</name><operator>-&gt;</operator><name>out_byte</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"ret=%d, %s, error: %s (%d)\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>conn_has_error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_io_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ABORT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <call><name>ev_now</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>easy_connection_write_again</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// å¤æ­write again</comment>
<function><type><name>int</name></type> <name>easy_connection_write_again</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// è¿ææ²¡ååºå», èµ·åäºä»¶</comment>
    <if_stmt><if>if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>sending_data</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>sending_data</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>wcs</name></name> <operator>=</operator> <call><name>ev_now</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_AGAIN</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>send_data_done</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>send_data_done</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_SERVER</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>wait_close</name></name> <operator>&amp;&amp;</operator> <call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content><comment type="line">// éè¦å³é­æ</comment>
                <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>wait_close</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SHUT_WR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>EASY_ABORT</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// tcp_cork</comment>
        <if_stmt><if>if <condition>(<expr><name><name>EASY_IOTH_SELF</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>tcp_cork</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>tcp_cork_flag</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_socket_set_tcpopt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>TCP_CORK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tcp_cork_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å¾å°packetçid
 */</comment>
<function><type><name>uint64_t</name></type> <name>easy_connection_get_packet_id</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type>                <name>packet_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>get_packet_id</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>packet_id</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>get_packet_id</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>,</operator> <name>packet</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>packet_id</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>seqno</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>packet_id</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>packet_id</name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>packet_id</name> <operator>|=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>packet_id</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * new åºä¸ä¸ªconnection_tå¯¹è±¡
 */</comment>
<function><type><specifier>static</specifier> <name>easy_connection_t</name> <modifier>*</modifier></type><name>easy_connection_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

    <comment type="line">// ä¸ºconnectionå»ºpool</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pool</name> <operator>=</operator> <call><name>easy_pool_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// åå»ºeasy_connection_tå¯¹è±¡</comment>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>easy_connection_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_connection_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error_exit</name>;</goto></block_content></block></if></if_stmt>

    <comment type="line">// åå§å</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_MAGIC</name></cpp:ifdef>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>EASY_DEBUG_MAGIC_CONNECT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>reconn_time</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idle_time</name></name> <operator>=</operator> <literal type="number">60000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>first_msglen</name></name> <operator>=</operator> <name>EASY_FIRST_MSGLEN</name></expr>;</expr_stmt> <comment type="line">// 1Kbyte</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>default_msglen</name></name> <operator>=</operator> <name>EASY_IO_BUFFER_SIZE</name></expr>;</expr_stmt> <comment type="line">// 8Kbyte</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <name>easy_socket_read</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>easy_socket_write</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>message_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>conn_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>group_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pause_watcher</name></name></expr></argument>, <argument><expr><name>easy_connection_on_pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>c</name></expr>;</return>
<label><name>error_exit</name>:</label>
    <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * serveråå¤
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_send_response</name><parameter_list>(<parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>request_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_request_t</name>              <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_message_t</name>              <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_connection_t</name>           <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_list_t</name></type>                 <name>wlist</name> <init>= <expr><call><name>EASY_LIST_HEAD_INIT</name><argument_list>(<argument><expr><name>wlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_list_t</name></type>                 <name>flist</name> <init>= <expr><call><name>EASY_LIST_HEAD_INIT</name><argument_list>(<argument><expr><name>flist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                         <name>ret</name></decl>;</decl_stmt>

    <comment type="line">// encode</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>r</argument>, <argument>rn</argument>, <argument>request_list</argument>, <argument>request_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>request_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>easy_message_t</name> <operator>*</operator><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>ms</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

        <comment type="line">// ä»å¶ä»è¿ç¨è¿åå</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>EASY_ERROR</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>easy_atomic_dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>retcode</name></name> <operator>!=</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>opacket</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>retcode</name></name> <operator>==</operator> <name>EASY_AGAIN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>process</name></name><operator>)</operator><operator>(</operator><name>r</name><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>easy_connection_request_done</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>group_list_node</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>group_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// å¦æåºé</comment>
            <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>group_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>group_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// å¼ç¨è®¡æ°</comment>
        <expr_stmt><expr><call><name>easy_atomic_dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// messageæ¯å¦ä¹ä¸å¨ä½¿ç¨äº</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>EASY_OK</name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>request_list_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EASY_MESG_READ_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>easy_message_destroy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>

    <comment type="line">// failure request, close connection</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>c</argument>, <argument>nc</argument>, <argument>&amp;flist</argument>, <argument>group_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>group_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// foreach write socket</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>c</argument>, <argument>nc</argument>, <argument>&amp;wlist</argument>, <argument>group_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>group_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>easy_connection_write_socket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_ABORT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_SERVER</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_connection_redispatch_thread</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_connection_send_session_list</name><parameter_list>(<parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_list_t</name></type>             <name>wlist</name> <init>= <expr><call><name>EASY_LIST_HEAD_INIT</name><argument_list>(<argument><expr><name>wlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>status</name></decl>;</decl_stmt>

    <comment type="line">// foreach encode</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>s</argument>, <argument>s1</argument>, <argument>list</argument>, <argument>session_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// write buffer</comment>
        <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>EASY_TYPE_WBUFFER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_WBUFFER</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>easy_buf_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>easy_message_session_t</name> <operator>*</operator><operator>)</operator><name>s</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>group_list_node</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>group_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_PAUSE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_connection_pause</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_LISTEN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_connection_listen_watcher</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// connect, disconnect</comment>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>easy_connection_do_client</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>status</name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="line">// build session</comment>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>easy_connection_session_build</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>easy_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>group_list_node</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>group_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">//easy_warn_log("sendsocket in send_session_list: %p, packet_id: %" PRIx64 " %s",</comment>
        <comment type="line">//              s, s-&gt;packet_id, easy_connection_str(c));</comment>
    </block_content>}</block>

    <comment type="line">// foreach</comment>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>c</argument>, <argument>c1</argument>, <argument>&amp;wlist</argument>, <argument>group_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>group_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_connection_sendsocket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>easy_message_t</name> <modifier>*</modifier></type><name>easy_connection_recycle_message</name><parameter_list>(<parameter><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_message_t</name>          <modifier>*</modifier></type><name>newm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>len</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>recycle_cnt</name></name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>m</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// å¢å default_message_lenå¤§å°</comment>
    <expr_stmt><expr><name>olen</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>first_msglen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>first_msglen</name></name> <operator>=</operator> <call><name>easy_max</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>newm</name> <operator>=</operator> <call><name>easy_message_create</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>first_msglen</name></name> <operator>=</operator> <name>olen</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>newm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// ææ§çç§»å°æ°çä¸é¢</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>newm</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newm</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newm</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_MESG_READ_AGAIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>

    <comment type="line">// å é¤ä¹åçmessage</comment>
    <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>request_list_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_message_destroy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>newm</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>m</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * è¿æ¥å°addrv
 */</comment>
<function><type><specifier>static</specifier> <name>easy_connection_t</name> <modifier>*</modifier></type><name>easy_connection_do_connect</name><parameter_list>(<parameter><decl><type><name>easy_client_t</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>                  <name>t</name></decl>;</decl_stmt>

    <comment type="line">// å»ºç«ä¸ä¸ªconnection</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>easy_connection_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"new connect failure.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_inet_etoa</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>ss_family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"socket failure: %s (%d)\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// åå§å</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EASY_TYPE_CLIENT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>handler</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <name>client</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_socket_non_blocking</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// è¿æ¥</comment>
    <if_stmt><if>if <condition>(<expr><name><name>EASY_IOTH_SELF</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>tcp_nodelay</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_socket_set_tcpopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINPROGRESS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"connect to %s failure: %s (%d)\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_CONN_CONNECTING</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// self connect self</comment>
    <if_stmt><if>if <condition>(<expr><call><name>easy_connection_checkself</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>easy_session_t</name></expr></argument>, <argument><expr><name>send_queue_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>=</operator> <call><name>easy_hash_create</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>EASY_IOTH_SELF</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>send_qlen</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_hash_create failure."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// åå§åäºä»¶</comment>
    <expr_stmt><expr><call><name>ev_io_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>, <argument><expr><name>easy_connection_on_readable</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_io_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>, <argument><expr><name>easy_connection_on_writable</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>client</name><operator>-&gt;</operator><name>timeout</name></name></expr> ?</condition><then> <expr><name><name>client</name><operator>-&gt;</operator><name>timeout</name></name></expr> </then><else>: <expr><name>EASY_CLIENT_DEFAULT_TIMEOUT</name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_timer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>, <argument><expr><name>easy_connection_on_timeout_conn</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>timeout_watcher</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

    <comment type="line">// event_status</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EASY_CONN_CONNECTING</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>EASY_EVENT_TIMEOUT</name> <operator>|</operator> <name>EASY_EVENT_WRITE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>EASY_EVENT_TIMEOUT</name> <operator>|</operator> <name>EASY_EVENT_READ</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"connect to '%s' start\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>event_status</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ioth</name></name> <operator>=</operator> <name>EASY_IOTH_SELF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr>;</expr_stmt>

    <comment type="line">// create ssl_connection_t</comment>
    <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>is_ssl</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>sc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// set write callback</comment>
        <expr_stmt><expr><call><name>ev_set_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>, <argument><expr><name>easy_ssl_client_handshake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EASY_CONN_CONNECTING</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_ssl_client_do_handshake</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//locate node</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>con_summary</name></name> <operator>=</operator> <call><name>easy_summary_locate_node</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>eio_summary</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// å å¥</comment>
    <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>conn_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ioth</name><operator>-&gt;</operator><name>connected_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_connection_evio_start</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>c</name></expr>;</return>
<label><name>error_exit</name>:</label>

    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>easy_connection_t</name> <modifier>*</modifier></type><name>easy_connection_do_client</name><parameter_list>(<parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name> <init>= <expr><name>EASY_IOTH_SELF</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_client_t</name>           <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>afd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// hashcode</comment>
    <expr_stmt><expr><name>client</name> <operator>=</operator> <operator>(</operator><name>easy_client_t</name> <operator>*</operator><operator>)</operator><call><name>easy_client_list_find</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>client_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// æ­£å¸¸çsession</comment>
    <if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>client</name> <operator>&amp;&amp;</operator> <name><name>client</name><operator>-&gt;</operator><name>ref</name></name></expr> ?</condition><then> <expr><name><name>client</name><operator>-&gt;</operator><name>c</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>process</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>handler</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>process</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>stoped</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_session_process</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>c</name></expr>;</return>
        <comment type="line">// è¿æ¥æä»¤</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>client</name> <operator>=</operator> <operator>(</operator><name>easy_client_t</name> <operator>*</operator><operator>)</operator><call><name>easy_array_alloc</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>client_array</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>error_exit</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_client_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <operator>(</operator><name>easy_io_handler_pt</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>thread_ptr</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>args</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>is_ssl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>reserved</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>afd</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>reserved</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>ssl</name></name> <operator>&amp;&amp;</operator> <name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>ssl</name><operator>-&gt;</operator><name>client_ctx</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>packet_id</name></name> <operator>&amp;</operator> <name>EASY_CONNECT_SSL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>is_ssl</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>server_name</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>user_data</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thread_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_client_list_add</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>client_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>client_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>client</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>easy_connection_do_connect</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>afd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>packet_id</name></name> <operator>&amp;</operator> <name>EASY_CONNECT_AUTOCONN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>auto_reconn</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EASY_CONNECT_SEND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>ref</name></name> <operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// æ­å¼æä»¤</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>client</name> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>client</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>auto_reconn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>wait_close</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>wait_close</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>easy_hash_del_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>client_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_array_free</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>client_array</name></name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>error_exit</name>:</label>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pool</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_session_process</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_connection_request_done</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_message_t</name>          <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>retcode</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>retcode</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>easy_message_t</name> <operator>*</operator><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>ms</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

    <comment type="line">// encode</comment>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>opacket</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>encode</name></name><operator>)</operator><operator>(</operator><name>r</name><operator>,</operator> <name><name>r</name><operator>-&gt;</operator><name>opacket</name></name><operator>)</operator> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>easy_request_set_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>retcode</name> <operator>==</operator> <name>EASY_AGAIN</name></expr>)</condition> <block>{<block_content> <comment type="line">// å½write_socketåå®</comment>
            <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>request_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>opacket</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// retcode</comment>
    <if_stmt><if>if <condition>(<expr><name>retcode</name> <operator>==</operator> <name>EASY_OK</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EASY_REQUEST_DONE</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// è®¡ç®</comment>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_REQUEST_DONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>request_list_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>request_list_count</name></name> <operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>con_summary</name><operator>-&gt;</operator><name>done_request_count</name></name> <operator>++</operator></expr>;</expr_stmt>

        <comment type="line">// è®¾ç½®redispatch</comment>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_SERVER</name> <operator>&amp;&amp;</operator> <name><name>EASY_IOTH_SELF</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>no_redispatch</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>con_summary</name><operator>-&gt;</operator><name>done_request_count</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>need_redispatch</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_autoconn</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                         <name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type>     <name>addr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_CONN_CLOSE</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_inet_etoa</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>ss_family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"socket failure: %s (%d)\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_socket_non_blocking</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>EASY_IOTH_SELF</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>tcp_nodelay</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_socket_set_tcpopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINPROGRESS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"connect to '%s' failure: %s (%d)\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_CONN_CONNECTING</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_CONN_OK</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// self connect self</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>easy_connection_checkself</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// åå§å</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>conn_has_error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_io_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_io_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>seqno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>send_queue</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EASY_CONN_CONNECTING</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>event_status</name></name> <operator>=</operator> <operator>(</operator><name>EASY_EVENT_TIMEOUT</name> <operator>|</operator> <name>EASY_EVENT_WRITE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>event_status</name></name> <operator>=</operator> <operator>(</operator><name>EASY_EVENT_TIMEOUT</name> <operator>|</operator> <name>EASY_EVENT_READ</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"reconnect to '%s' start\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_connection_evio_start</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
<label><name>error_exit</name>:</label>
    <expr_stmt><expr><call><name>easy_safe_close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>auto_reconn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>easy_connection_str</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>char</name></type>    <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="string">"null"</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type>                    <name><name>str</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"%s_%d_%p"</literal></expr></argument>, <argument><expr><call><name>easy_inet_addr_to_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_process_request</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>easy_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_request_t</name>          <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_message_t</name>          <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_list_t</name></type>             <name>request_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name></decl>, <decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>max</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>EASY_IOTH_SELF</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>tcp_nodelay</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">128</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EASY_TYPE_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_movelist</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>=</operator> <operator>(</operator><name>easy_hash_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>request_list</name></expr>;</expr_stmt>

    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>r</argument>, <argument>rn</argument>, <argument>&amp;request_list</argument>, <argument>request_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>easy_message_t</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>ms</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>request_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>EASY_IOTH_SELF</name><operator>-&gt;</operator><name>done_request_count</name></name> <operator>++</operator></expr>;</expr_stmt>

        <comment type="line">// process</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>process</name></name><operator>)</operator><operator>(</operator><name>r</name><operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>EASY_ABORT</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>EASY_ASYNC</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>EASY_ERROR</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>easy_connection_request_done</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cnt</name> <operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// write to socket</comment>
        <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>easy_connection_write_socket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EASY_ABORT</name></expr>)</condition> <block>{<block_content>
                <goto>goto <name>error_exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// check request count</comment>
        <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>request_list_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EASY_MESG_READ_AGAIN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_message_destroy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="line">// ææçrequesté½æreplyäº,ä¸èµ·æååº</comment>
    <if_stmt><if>if <condition>(<expr><call><name>easy_connection_write_socket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_ABORT</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
<label><name>error_exit</name>:</label>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>send_queue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>EASY_ASYNC</name></expr>)</condition> <block>{<block_content>
        <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>r</argument>, <argument>rn</argument>, <argument>&amp;request_list</argument>, <argument>request_list_node</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>request_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>EASY_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ä½¿ç¨reuseport
 */</comment>
<function><type><name>void</name></type> <name>easy_connection_reuseport</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>easy_listen_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>fd</name></decl>, <decl><type ref="prev"/><name>udp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>flags</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>eio</name><operator>-&gt;</operator><name>tcp_defer_accept</name></name></expr> ?</condition><then> <expr><name>EASY_FLAGS_DEFERACCEPT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>reuseport</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EASY_FLAGS_SREUSEPORT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>udp</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>l</name><operator>-&gt;</operator><name>handler</name></name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>is_udp</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>easy_socket_listen</name><argument_list>(<argument><expr><name>udp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><name><name>eio</name><operator>-&gt;</operator><name>listen_backlog</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_socket_listen failure: host=%s\n"</literal></expr></argument>, <argument><expr><call><name>easy_inet_addr_to_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>easy_atomic_add_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>bind_port_cnt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>eio</name><operator>-&gt;</operator><name>io_thread_count</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_safe_close</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"easy_socket_listen: host=%s, fd=%d, reuseport=%d"</literal></expr></argument>, <argument><expr><call><name>easy_inet_addr_to_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>reuseport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// åå§å</comment>
    <if_stmt><if>if <condition>(<expr><name>udp</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ev_io_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>read_watcher</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>easy_connection_on_udpread</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_READ</name> <operator>|</operator> <name>EV_CLEANUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ev_io_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>read_watcher</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>easy_connection_on_accept</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EV_READ</name> <operator>|</operator> <name>EV_CLEANUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * udp read
 */</comment>
<function><type><name>void</name></type> <name>easy_connection_on_udpread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_io</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name> <init>= <expr><name>EASY_IOTH_SELF</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>blen</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_listen_simple_t</name>    <modifier>*</modifier></type><name>listen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>socklen_t</name></type>               <name>addr_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_connection_t</name>       <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_message_t</name>          <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_request_t</name>          <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>                    <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_RECVMMSG</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type>                     <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name>            <modifier>*</modifier></type><name>iovec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mmsghdr</name></name>          <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>listen</name> <operator>=</operator> <operator>(</operator><name>easy_listen_simple_t</name> <operator>*</operator><operator>)</operator> <name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>addr_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <comment type="line">// è®©åºæ¥ç»å¶ä»ççº¿ç¨</comment>
    <if_stmt><if>if <condition>(<expr><name><name>listen</name><operator>-&gt;</operator><name>is_simple</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>listen</name><operator>-&gt;</operator><name>reuseport</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>listen_all</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>easy_switch_listen</name><argument_list>(<argument><expr><name>listen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// ä¸ºconnectionå»ºpool</comment>
    <expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_RECVMMSG</name></cpp:ifdef>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_connection_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_message_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_buf_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>blen</name> <operator>+</operator>
            <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>mmsghdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>iovec</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>*</operator> <name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>recv_vlen</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_connection_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_message_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>blen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_buf_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pool</name> <operator>=</operator> <call><name>easy_pool_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// åå»ºeasy_connection_tå¯¹è±¡</comment>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>easy_connection_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_connection_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>easy_message_t</name> <operator>*</operator><operator>)</operator> <call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_message_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_RECVMMSG</name></cpp:ifdef>
    <expr_stmt><expr><name>input</name> <operator>=</operator> <operator>(</operator><name>easy_buf_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_buf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iovec</name> <operator>=</operator> <operator>(</operator>struct <name>iovec</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>recv_vlen</name></name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>iovec</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hdr</name> <operator>=</operator> <operator>(</operator>struct <name>mmsghdr</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>recv_vlen</name></name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mmsghdr</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>recv_vlen</name></name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>easy_buf_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>m</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>input</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>addr</name> <operator>==</operator> <name>NULL</name>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_RECVMMSG</name></cpp:ifdef>
            <operator>||</operator> <name>iovec</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>hdr</name> <operator>==</operator> <name>NULL</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
       )</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"easy_pool_calloc failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_RECVMMSG</name></cpp:ifdef>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>recv_vlen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>iovec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>iovec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>blen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>msg_hdr</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>iovec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>msg_hdr</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>msg_hdr</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>addr</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>msg_hdr</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <name>addr_len</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>recv_vlen</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>iovec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>hdr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>msg_len</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>recvmmsg</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name><operator>-&gt;</operator><name>recv_vlen</name></name></expr></argument>, <argument><expr><name>MSG_DONTWAIT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="line">// recvfrom</comment>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name><name>listen</name><operator>-&gt;</operator><name>handler</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_RECVMMSG</name></cpp:ifdef>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>iovec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name><name>hdr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg_len</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>easy_inet_atoe</name><argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>easy_inet_atoe</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>last</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>packet</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>decode</name></name><operator>)</operator><operator>(</operator><name>m</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>easy_request_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_request_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_DOING</name></cpp:ifdef>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>uuid</name></name> <operator>=</operator> <call><name>easy_atomic_add_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_debug_uuid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EASY_PRINT_BT</name><argument_list>(<argument><expr><literal type="string">"doing_request_count_inc:%d,c:%s,r:%p,%ld."</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>doing_request_count</name></name></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name></name> <operator>=</operator> <operator>(</operator><name>easy_message_session_t</name> <operator>*</operator><operator>)</operator><name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ipacket</name></name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>    <comment type="line">//è¿æ¥çæ°æ®å</comment>

        <comment type="line">// process</comment>
        <expr_stmt><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>process</name></name><operator>)</operator><operator>(</operator><name>r</name><operator>)</operator></expr>;</expr_stmt>

        <comment type="line">// encode</comment>
        <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>opacket</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>encode</name></name><operator>)</operator><operator>(</operator><name>r</name><operator>,</operator> <name><name>r</name><operator>-&gt;</operator><name>opacket</name></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_socket_usend</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>opacket</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_RECVMMSG</name></cpp:ifdef>
    </block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>error_exit</name>:</label>
    <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_sendsocket</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// ç­ä¸æ¬¡ååºå»</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>EASY_CONN_OK</name> <operator>||</operator> <call><name>ev_is_active</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_watcher</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_OK</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// ååºå°socket</comment>
    <if_stmt><if>if <condition>(<expr><call><name>easy_connection_write_socket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EASY_ABORT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_connection_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_ABORT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * listen dispatch
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_listen_dispatch</name><parameter_list>(<parameter><decl><type><name>easy_io_t</name> <modifier>*</modifier></type><name>eio</name></decl></parameter>, <parameter><decl><type><name>easy_addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>easy_listen_t</name> <modifier>*</modifier></type><name>listen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>easy_connection_connect_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>easy_io_handler_pt</name> <operator>*</operator><operator>)</operator><name>listen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EASY_TYPE_LISTEN</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>easy_client_dispatch</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EASY_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>easy_session_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_listen_watcher</name><parameter_list>(<parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_listen_t</name>           <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>(</operator><name>easy_listen_t</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>thread_ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>        <modifier>*</modifier></type><name>ioth</name> <init>= <expr><name>EASY_IOTH_SELF</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_t</name>               <modifier>*</modifier></type><name>eio</name> <init>= <expr><name><name>ioth</name><operator>-&gt;</operator><name>eio</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>eio</name><operator>-&gt;</operator><name>listen_all</name></name> <operator>||</operator> <name><name>eio</name><operator>-&gt;</operator><name>io_thread_count</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>reuseport</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_connection_reuseport</name><argument_list>(<argument><expr><name>eio</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>read_watcher</name><index>[<expr><name><name>ioth</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ev_timer_start</name> <argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>listen_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>eio</name><operator>-&gt;</operator><name>listenadd</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eio</name><operator>-&gt;</operator><name>listenadd</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eio</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"add listen: %s\n"</literal></expr></argument>, <argument><expr><call><name>easy_inet_addr_to_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_connection_destroy_dispatch</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SHUT_RD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>easy_connection_checkself</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <comment type="line">// self connect self</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <call><name>getsockname</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>.</operator><name>sin_port</name></name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>port</name></name> <operator>&amp;&amp;</operator> <name><name>addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>u</name><operator>.</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"connect to %s failure, self connect self\n"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EASY_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_dump_slow_request</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                    <name><name>btmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"start dump request on connection %s"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>m</argument>, <argument>mn</argument>, <argument>&amp;c-&gt;message_list</argument>, <argument>message_list_node</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"start dump request on message %p"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>r</argument>, <argument>rn</argument>, <argument>&amp;m-&gt;all_list</argument>, <argument>all_node</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"dump request r-&gt;retcode=%d"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>retcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"dump request r-&gt;ipacket=%s"</literal></expr></argument>, <argument><expr><call><name>easy_string_tohex</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ipacket</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>btmp</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"end dump request on message %p"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"end dump request on connection %s"</literal></expr></argument>, <argument><expr><call><name>easy_connection_str</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slow_request_dumped</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_cleanup_buffer</name><parameter_list>(<parameter><decl><type><name>easy_buf_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><operator>(</operator><name>easy_pool_t</name> <operator>*</operator><operator>)</operator> <name>args</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * åéæ°æ®
 */</comment>
<function><type><name>int</name></type> <name>easy_connection_write_buffer</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_buf_t</name>             <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_io_thread_t</name>       <modifier>*</modifier></type><name>ioth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_pool_t</name>            <modifier>*</modifier></type><name>pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_message_session_t</name> <modifier>*</modifier></type><name>ms</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EASY_CONN_CLOSE</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// pool create</comment>
    <expr_stmt><expr><name>ioth</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ioth</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pool</name> <operator>=</operator> <call><name>easy_pool_create</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// self thread</comment>
    <if_stmt><if>if <condition>(<expr><name>ioth</name> <operator>==</operator> <operator>(</operator><name>easy_io_thread_t</name> <operator>*</operator><operator>)</operator><name>easy_baseth_self</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>=</operator> <call><name>easy_buf_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>easy_memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_buf_set_cleanup</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>easy_connection_cleanup_buffer</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>easy_connection_write_socket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// easy_message_session_t + easy_buf_t + data</comment>
        <expr_stmt><expr><name>ms</name> <operator>=</operator> <call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_message_session_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_buf_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ms</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>error_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>easy_buf_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ms</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_buf_set_data</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_buf_set_cleanup</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>easy_connection_cleanup_buffer</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EASY_TYPE_WBUFFER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_async_send</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
<label><name>error_exit</name>:</label>

    <if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>EASY_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_connection_on_pause</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ev_loop</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ev_timer</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>revents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>easy_connection_t</name> <operator>*</operator><operator>)</operator><name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EASY_CONN_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ev_io_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_connection_pause</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_io_thread_t</name> <modifier>*</modifier></type><name>ioth</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ioth</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>ioth</name> <operator>==</operator> <operator>(</operator><name>easy_io_thread_t</name> <operator>*</operator><operator>)</operator><name>easy_baseth_self</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ev_io_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>ev_is_active</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pause_watcher</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ev_timer_stop</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pause_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>ev_timer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pause_watcher</name></name></expr></argument>, <argument><expr><name>ms</name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pause_watcher</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_timer_start</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pause_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>easy_pool_t</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>easy_pool_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>easy_message_session_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_message_session_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EASY_TYPE_PAUSE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>ms</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>session_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ev_async_send</name><argument_list>(<argument><expr><name><name>ioth</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ioth</name><operator>-&gt;</operator><name>thread_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
