<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/memory/easy_mem_slab.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_mem_slab.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASY_MEM_POS_END</name></cpp:macro>      <cpp:value>(((uint16_t)(~0U))-0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>easy_mem_mgr_t</name></type>          <name>easy_mem_mgr_var</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>easy_mem_slab_get_obj</name><parameter_list>(<parameter><decl><type><name>easy_mem_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>easy_mem_slab_t</name> <modifier>*</modifier></type><name>slab</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>easy_mem_cache_grow</name><parameter_list>(<parameter><decl><type><name>easy_mem_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>easy_mem_slab_put_obj</name><parameter_list>(<parameter><decl><type><name>easy_mem_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>easy_mem_slab_t</name> <modifier>*</modifier></type><name>slab</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>easy_mem_cache_t</name> <modifier>*</modifier></type><name>easy_mem_get_cache</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>easy_mem_slab_t</name> <modifier>*</modifier></type><name>easy_mem_virt_to_slab</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>easy_mem_cache_t</name> <modifier>*</modifier></type><name>easy_mem_cache_size</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// åå­åå§å</comment>
<function><type><name>int</name></type> <name>easy_mem_slab_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start_alloc_size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>max_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>size</name></decl>, <decl><type ref="prev"/><name>cache_num</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>easy_mem_mgr_var</name><operator>.</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// åå§å</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_mem_mgr_var</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_mem_mgr_var</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>easy_mem_mgr_var</name><operator>.</operator><name>lock</name></name> <operator>=</operator> <name>EASY_SPIN_INITER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>easy_mem_mgr_var</name><operator>.</operator><name>max_size</name></name> <operator>=</operator> <name>max_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>easy_mem_mgr_var</name><operator>.</operator><name>zone</name></name> <operator>=</operator> <call><name>easy_mem_zone_create</name><argument_list>(<argument><expr><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>easy_mem_mgr_var</name><operator>.</operator><name>zone</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EASY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// init</comment>
    <expr_stmt><expr><name>cache_num</name> <operator>=</operator> <operator>(</operator><name><name>easy_mem_mgr_var</name><operator>.</operator><name>zone</name><operator>-&gt;</operator><name>curr_end</name></name> <operator>-</operator> <name><name>easy_mem_mgr_var</name><operator>.</operator><name>zone</name><operator>-&gt;</operator><name>curr</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>cache_num</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mem_cache_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name>cache_num</name> <operator>--</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>size</name> <operator>=</operator> <name>EASY_MEM_SLAB_MIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>easy_mem_mgr_var</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>easy_mem_mgr_var</name><operator>.</operator><name>cache_max_num</name></name> <operator>=</operator> <call><name>easy_max</name><argument_list>(<argument><expr><name>cache_num</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>easy_mem_mgr_var</name><operator>.</operator><name>caches</name></name> <operator>=</operator> <operator>(</operator><name>easy_mem_cache_t</name> <operator>*</operator><operator>)</operator><name><name>easy_mem_mgr_var</name><operator>.</operator><name>zone</name><operator>-&gt;</operator><name>curr</name></name></expr>;</expr_stmt>

    <comment type="line">// åémem_cache</comment>
    <while>while<condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>start_alloc_size</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>easy_mem_cache_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>size</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>easy_mem_mgr_var</name><operator>.</operator><name>cache_fix_num</name></name> <operator>=</operator> <name><name>easy_mem_mgr_var</name><operator>.</operator><name>cache_num</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>easy_mem_mgr_var</name><operator>.</operator><name>started</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// destroy</comment>
<function><type><name>void</name></type> <name>easy_mem_slab_destroy</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>easy_mem_mgr_var</name><operator>.</operator><name>started</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_mem_zone_destroy</name><argument_list>(<argument><expr><name><name>easy_mem_mgr_var</name><operator>.</operator><name>zone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_mem_mgr_var</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_mem_mgr_var</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// åå­åé</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>easy_mem_slab_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_mem_cache_t</name>        <modifier>*</modifier></type><name>cache</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ncache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name>           <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

    <comment type="line">// free</comment>
    <expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>obj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cache</name> <operator>=</operator> <call><name>easy_mem_get_cache</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>easy_mem_cache_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>easy_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <return>return <expr><name>NULL</name></expr>;</return>
        <comment type="line">// realloc</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cache</name> <operator>=</operator> <call><name>easy_mem_get_cache</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;=</operator> <name><name>cache</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>ptr</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// åéæ°ç</comment>
        <expr_stmt><expr><name>ncache</name> <operator>=</operator> <call><name>easy_mem_cache_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ncache</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>easy_mem_cache_alloc</name><argument_list>(<argument><expr><name>ncache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cache</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>easy_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>easy_realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// ææ§çmemcpyå°æ°çä¸</comment>
        <if_stmt><if>if <condition>(<expr><name>cache</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_mem_cache_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>ptr</name></expr>;</return>
        <comment type="line">// malloc</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name>easy_mem_cache_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><ternary><condition><expr><name>cache</name></expr> ?</condition><then> <expr><call><name>easy_mem_cache_alloc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// åé</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>easy_mem_cache_alloc</name><parameter_list>(<parameter><decl><type><name>easy_mem_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_list_t</name>             <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_mem_slab_t</name>         <modifier>*</modifier></type><name>slab</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>                    <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>obj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>slabs_partial</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>slabs_partial</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>slabs_free</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>slabs_free</name></name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>grow_done</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// slab</comment>
    <expr_stmt><expr><name>slab</name> <operator>=</operator> <call><name>easy_list_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>easy_mem_slab_t</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>easy_mem_slab_get_obj</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>slab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* move slab to correct slab list */</comment>
    <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slab</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>slab</name><operator>-&gt;</operator><name>free</name></name> <operator>==</operator> <name>EASY_MEM_POS_END</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_add_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slab</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>slabs_full</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_add_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slab</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>slabs_partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

<label><name>grow_done</name>:</label>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>easy_mem_cache_grow</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// éæ¾</comment>
<function><type><name>void</name></type> <name>easy_mem_cache_free</name><parameter_list>(<parameter><decl><type><name>easy_mem_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_mem_slab_t</name>         <modifier>*</modifier></type><name>slab</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slab</name> <operator>=</operator> <call><name>easy_mem_virt_to_slab</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_mem_slab_put_obj</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>slab</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// no use</comment>
    <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slab</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>slab</name><operator>-&gt;</operator><name>inuse</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>free_objects</name></name> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>free_limit</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>free_objects</name></name> <operator>-=</operator> <name><name>cache</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>slab</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <comment type="line">// free mem</comment>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>easy_list_add_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slab</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>slabs_free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slab</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>slabs_partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>slab</name><operator>-&gt;</operator><name>mem</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>easy_mem_mgr_var</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_mem_free_pages</name><argument_list>(<argument><expr><name><name>easy_mem_mgr_var</name><operator>.</operator><name>zone</name></name></expr></argument>, <argument><expr><operator>(</operator><name>easy_mem_page_t</name> <operator>*</operator><operator>)</operator><name>slab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>easy_mem_mgr_var</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<function><type><name>easy_mem_cache_t</name> <modifier>*</modifier></type><name>easy_mem_cache_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_mem_cache_t</name>        <modifier>*</modifier></type><name>cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>order</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>left_over</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>easy_mem_mgr_var</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>easy_mem_mgr_var</name><operator>.</operator><name>cache_num</name></name> <operator>&lt;</operator> <name><name>easy_mem_mgr_var</name><operator>.</operator><name>cache_max_num</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cache</name> <operator>=</operator> <name><name>easy_mem_mgr_var</name><operator>.</operator><name>caches</name></name> <operator>+</operator> <name><name>easy_mem_mgr_var</name><operator>.</operator><name>cache_num</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_mem_cache_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// è®¡ç®slab_sizeå¤§å°</comment>
        <expr_stmt><expr><name>left_over</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>order</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>order</name> <operator>&lt;=</operator> <name>EASY_MEM_MAX_ORDER</name></expr>;</condition> <incr><expr><name>order</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>EASY_MEM_PAGE_SIZE</name> <operator>&lt;&lt;</operator> <name>order</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mem_slab_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <operator>(</operator><name>buffer_size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>left_over</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>num</name> <operator>*</operator> <name>buffer_size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_mem_slab_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>left_over</name> <operator>*</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>EASY_SPIN_INITER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>buffer_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>-</operator> <name><name>cache</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <name>buffer_size</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>free_limit</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>free_objects</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name><name>easy_mem_mgr_var</name><operator>.</operator><name>cache_num</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>slabs_full</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>slabs_partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>slabs_free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>easy_mem_mgr_var</name><operator>.</operator><name>cache_num</name></name> <operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>easy_mem_mgr_var</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>cache</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>easy_mem_slab_get_obj</name><parameter_list>(<parameter><decl><type><name>easy_mem_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>easy_mem_slab_t</name> <modifier>*</modifier></type><name>slab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name>                    <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type>                <name>next</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>slab</name><operator>-&gt;</operator><name>mem</name></name> <operator>+</operator> <name><name>cache</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>*</operator> <name><name>slab</name><operator>-&gt;</operator><name>free</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>slab</name><operator>-&gt;</operator><name>inuse</name></name> <operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>slab</name><operator>-&gt;</operator><name>next_pos</name><index>[<expr><name><name>slab</name><operator>-&gt;</operator><name>free</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>slab</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

    <return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>easy_mem_cache_grow</name><parameter_list>(<parameter><decl><type><name>easy_mem_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_mem_zone_t</name>         <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_mem_slab_t</name>         <modifier>*</modifier></type><name>slab</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>                    <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name>           <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>           <name>page_idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>                <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>easy_mem_mgr_var</name><operator>.</operator><name>zone</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>easy_mem_mgr_var</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slab</name> <operator>=</operator> <operator>(</operator><name>easy_mem_slab_t</name> <operator>*</operator><operator>)</operator><call><name>easy_mem_alloc_pages</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>easy_mem_mgr_var</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// åéä¸åºæ¥</comment>
    <if_stmt><if>if <condition>(<expr><name>slab</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// init</comment>
    <expr_stmt><expr><name><name>slab</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>slab</name> <operator>+</operator> <name><name>cache</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>slab</name><operator>-&gt;</operator><name>inuse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>slab</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>slab</name><operator>-&gt;</operator><name>cache_idx</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>idx</name></name></expr>;</expr_stmt>

    <comment type="line">// set page flags</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>&gt;</operator> <name>EASY_MEM_PAGE_SIZE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>slab</name><operator>-&gt;</operator><name>mem</name></name></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>page_idx</name> <operator>=</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>mem_start</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>EASY_MEM_PAGE_SHIFT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>page_flags</name><index>[<expr><name>page_idx</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <name><name>cache</name><operator>-&gt;</operator><name>order</name></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>cache</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>page_idx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>slab</name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>mem_start</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>EASY_MEM_PAGE_SHIFT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>page_flags</name></name> <operator>+</operator> <name>page_idx</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <name><name>cache</name><operator>-&gt;</operator><name>order</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>order</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// num</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>slab</name><operator>-&gt;</operator><name>next_pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>slab</name><operator>-&gt;</operator><name>next_pos</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>EASY_MEM_POS_END</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>free_objects</name></name> <operator>+=</operator> <name><name>cache</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

    <comment type="line">// åé</comment>
    <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>easy_mem_slab_get_obj</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>slab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>slab</name><operator>-&gt;</operator><name>free</name></name> <operator>==</operator> <name>EASY_MEM_POS_END</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_add_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slab</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>slabs_full</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>easy_list_add_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slab</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>slabs_partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>easy_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// æ ¹æ®objå®ä½åºslabçä½ç½®</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>easy_mem_slab_t</name> <modifier>*</modifier></type><name>easy_mem_virt_to_slab</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>           <name>a</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>EASY_MEM_PAGE_SHIFT</name> <operator>+</operator> <name>order</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>easy_mem_slab_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>obj</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>easy_mem_slab_put_obj</name><parameter_list>(<parameter><decl><type><name>easy_mem_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>easy_mem_slab_t</name> <modifier>*</modifier></type><name>slab</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint16_t</name></type>                <name>idx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>obj</name> <operator>-</operator> <name><name>slab</name><operator>-&gt;</operator><name>mem</name></name><operator>)</operator> <operator>/</operator> <name><name>cache</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>slab</name><operator>-&gt;</operator><name>next_pos</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>slab</name><operator>-&gt;</operator><name>free</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>slab</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>slab</name><operator>-&gt;</operator><name>inuse</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>easy_mem_cache_t</name> <modifier>*</modifier></type><name>easy_mem_get_cache</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>order</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_mem_slab_t</name>         <modifier>*</modifier></type><name>slab</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&lt;</operator> <name><name>easy_mem_mgr_var</name><operator>.</operator><name>zone</name><operator>-&gt;</operator><name>mem_start</name></name> <operator>||</operator> <name>obj</name> <operator>&gt;=</operator> <name><name>easy_mem_mgr_var</name><operator>.</operator><name>zone</name><operator>-&gt;</operator><name>mem_end</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// order</comment>
    <expr_stmt><expr><name>order</name> <operator>=</operator> <operator>(</operator><name>obj</name> <operator>-</operator> <name><name>easy_mem_mgr_var</name><operator>.</operator><name>zone</name><operator>-&gt;</operator><name>mem_start</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>EASY_MEM_PAGE_SHIFT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>order</name> <operator>=</operator> <operator>(</operator><name><name>easy_mem_mgr_var</name><operator>.</operator><name>zone</name><operator>-&gt;</operator><name>page_flags</name><index>[<expr><name>order</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>slab</name> <operator>=</operator> <call><name>easy_mem_virt_to_slab</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>&amp;</operator><name><name>easy_mem_mgr_var</name><operator>.</operator><name>caches</name><index>[<expr><name><name>slab</name><operator>-&gt;</operator><name>cache_idx</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>easy_mem_cache_t</name> <modifier>*</modifier></type><name>easy_mem_cache_size</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                     <name>flag</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>mid</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>mid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>easy_mem_mgr_var</name><operator>.</operator><name>cache_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// å¤§äºæå¤§</comment>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>easy_mem_mgr_var</name><operator>.</operator><name>caches</name><index>[<expr><name>end</name></expr>]</index></name><operator>.</operator><name>buffer_size</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <while>while <condition>(<expr><name>start</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>start</name> <operator>+</operator> <name>end</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>flag</name> <operator>=</operator> <name><name>easy_mem_mgr_var</name><operator>.</operator><name>caches</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>buffer_size</name> <operator>-</operator> <name>size</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>end</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>flag</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>start</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>start</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><operator>&amp;</operator><name><name>easy_mem_mgr_var</name><operator>.</operator><name>caches</name><index>[<expr><name>start</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
</unit>
