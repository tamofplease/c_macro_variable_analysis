<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/tcop/dest.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * dest.c
 *	  support for communication destinations
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/tcop/dest.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 *	 INTERFACE ROUTINES
 *		BeginCommand - initialize the destination at start of command
 *		CreateDestReceiver - create tuple receiver object for destination
 *		EndCommand - clean up the destination at end of command
 *		NullCommand - tell dest that an empty query string was recognized
 *		ReadyForQuery - tell dest that we are ready for a new query
 *
 *	 NOTES
 *		These routines do the appropriate work before and after
 *		tuples are returned by a query to keep the backend and the
 *		"destination" portals synchronized.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/printsimple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/printtup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/createas.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/matview.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tqueue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tstoreReceiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/portal.h"</cpp:file></cpp:include>

<comment type="block">/* POLAR */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<comment type="block">/* POLAR end */</comment>

<comment type="block">/* POLAR px */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_vars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_gang.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_snapshot.h"</cpp:file></cpp:include>
<comment type="block">/* POLAR end */</comment>

<comment type="block">/* POLAR */</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>px_check_qc_connection_alive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPIN_SLEEP_MSEC</name></cpp:macro>		<cpp:value>10</cpp:value></cpp:define>	<comment type="block">/* 10ms */</comment>

<comment type="block">/* ----------------
 *		dummy DestReceiver functions
 * ----------------
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>donothingReceive</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>donothingStartup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>typeinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>donothingCleanup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* this is used for both shutdown and destroy methods */</comment>
</block_content>}</block></function>

<comment type="block">/* POLAR: send proxy info, including lsn and xact split info, also collects stats */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_send_proxy_info</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* POLAR: send lsn to maxscale if needed */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>MyProcPort</name><operator>-&gt;</operator><name>polar_send_lsn</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>RecoveryInProgress</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name><operator>)</operator><call><name>GetXLogReplayRecPtr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name><operator>)</operator><call><name>GetXLogInsertRecPtr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_enable_xact_split_debug</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>RecoveryInProgress</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xids</name> <init>= <expr><call><name>polar_xact_split_xact_info</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"current xids : %s"</literal></expr></argument>, <argument><expr><name>xids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"current xact able to split: %s"</literal></expr></argument>,
					<argument><expr><ternary><condition><expr><call><name>polar_xact_split_splittable</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"Yes"</literal></expr> </then><else>: <expr><literal type="string">"No"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>xids</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>xids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>polar_stat_update_proxy_info</name><argument_list>(<argument><expr><name><name>polar_stat_proxy</name><operator>-&gt;</operator><name>proxy_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* POLAR: send xact split info to mxs if needed */</comment>
	<if_stmt><if>if <condition>(<expr><name>polar_enable_xact_split</name> <operator>&amp;&amp;</operator>
		<name>XactIsoLevel</name> <operator>==</operator> <name>XACT_READ_COMMITTED</name> <operator>&amp;&amp;</operator>
		<name><name>MyProcPort</name><operator>-&gt;</operator><name>polar_send_xact</name></name> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>RecoveryInProgress</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>polar_xact_split_splittable</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xids</name> <init>= <expr><call><name>polar_xact_split_xact_info</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>xids</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* POLAR: send xids info */</comment>
				<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>xids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>xids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>polar_stat_update_proxy_info</name><argument_list>(<argument><expr><name><name>polar_stat_proxy</name><operator>-&gt;</operator><name>proxy_splittable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_stat_update_proxy_info</name><argument_list>(<argument><expr><name><name>polar_stat_proxy</name><operator>-&gt;</operator><name>proxy_unsplittable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<switch>switch <condition>(<expr><name>polar_unable_to_split_reason</name></expr>)</condition>
		<block>{<block_content>
		<case>case <expr><name>POLAR_UNSPLITTABLE_FOR_ERROR</name></expr>:</case>
			<expr_stmt><expr><call><name>polar_stat_update_proxy_info</name><argument_list>(<argument><expr><name><name>polar_stat_proxy</name><operator>-&gt;</operator><name>proxy_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>POLAR_UNSPLITTABLE_FOR_LOCK</name></expr>:</case>
			<expr_stmt><expr><call><name>polar_stat_update_proxy_info</name><argument_list>(<argument><expr><name><name>polar_stat_proxy</name><operator>-&gt;</operator><name>proxy_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>POLAR_UNSPLITTABLE_FOR_COMBOCID</name></expr>:</case>
			<expr_stmt><expr><call><name>polar_stat_update_proxy_info</name><argument_list>(<argument><expr><name><name>polar_stat_proxy</name><operator>-&gt;</operator><name>proxy_combocid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>POLAR_UNSPLITTABLE_FOR_AUTOXACT</name></expr>:</case>
			<expr_stmt><expr><call><name>polar_stat_update_proxy_info</name><argument_list>(<argument><expr><name><name>polar_stat_proxy</name><operator>-&gt;</operator><name>proxy_autoxact</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_stat_update_proxy_info</name><argument_list>(<argument><expr><name><name>polar_stat_proxy</name><operator>-&gt;</operator><name>proxy_disablesplit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>RecoveryInProgress</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>MyProcPort</name><operator>-&gt;</operator><name>polar_proxy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_stat_update_ro_proxy_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>polar_stat_need_update_proxy_info</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *		static DestReceiver structs for dest types needing no local state
 * ----------------
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>DestReceiver</name></type> <name>donothingDR</name> <init>= <expr><block>{
	<expr><name>donothingReceive</name></expr>, <expr><name>donothingStartup</name></expr>, <expr><name>donothingCleanup</name></expr>, <expr><name>donothingCleanup</name></expr>,
	<expr><name>DestNone</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DestReceiver</name></type> <name>debugtupDR</name> <init>= <expr><block>{
	<expr><name>debugtup</name></expr>, <expr><name>debugStartup</name></expr>, <expr><name>donothingCleanup</name></expr>, <expr><name>donothingCleanup</name></expr>,
	<expr><name>DestDebug</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DestReceiver</name></type> <name>printsimpleDR</name> <init>= <expr><block>{
	<expr><name>printsimple</name></expr>, <expr><name>printsimple_startup</name></expr>, <expr><name>donothingCleanup</name></expr>, <expr><name>donothingCleanup</name></expr>,
	<expr><name>DestRemoteSimple</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DestReceiver</name></type> <name>spi_printtupDR</name> <init>= <expr><block>{
	<expr><name>spi_printtup</name></expr>, <expr><name>spi_dest_startup</name></expr>, <expr><name>donothingCleanup</name></expr>, <expr><name>donothingCleanup</name></expr>,
	<expr><name>DestSPI</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Globally available receiver for DestNone */</comment>
<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>None_Receiver</name> <init>= <expr><operator>&amp;</operator><name>donothingDR</name></expr></init></decl>;</decl_stmt>


<comment type="block">/* ----------------
 *		BeginCommand - initialize the destination at start of command
 * ----------------
 */</comment>
<function><type><name>void</name></type>
<name>BeginCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>commandTag</name></decl></parameter>, <parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Nothing to do at present */</comment>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *		CreateDestReceiver - return appropriate receiver function set for dest
 * ----------------
 */</comment>
<function><type><name>DestReceiver</name> <modifier>*</modifier></type>
<name>CreateDestReceiver</name><parameter_list>(<parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>dest</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DestRemote</name></expr>:</case>
		<case>case <expr><name>DestRemoteExecute</name></expr>:</case>
			<return>return <expr><call><name>printtup_create_DR</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>DestRemoteSimple</name></expr>:</case>
			<return>return <expr><operator>&amp;</operator><name>printsimpleDR</name></expr>;</return>

		<case>case <expr><name>DestNone</name></expr>:</case>
			<return>return <expr><operator>&amp;</operator><name>donothingDR</name></expr>;</return>

		<case>case <expr><name>DestDebug</name></expr>:</case>
			<return>return <expr><operator>&amp;</operator><name>debugtupDR</name></expr>;</return>

		<case>case <expr><name>DestSPI</name></expr>:</case>
			<return>return <expr><operator>&amp;</operator><name>spi_printtupDR</name></expr>;</return>

		<case>case <expr><name>DestTuplestore</name></expr>:</case>
			<return>return <expr><call><name>CreateTuplestoreDestReceiver</name><argument_list>()</argument_list></call></expr>;</return>

		<case>case <expr><name>DestIntoRel</name></expr>:</case>
			<return>return <expr><call><name>CreateIntoRelDestReceiver</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>DestCopyOut</name></expr>:</case>
			<return>return <expr><call><name>CreateCopyDestReceiver</name><argument_list>()</argument_list></call></expr>;</return>

		<case>case <expr><name>DestSQLFunction</name></expr>:</case>
			<return>return <expr><call><name>CreateSQLFunctionDestReceiver</name><argument_list>()</argument_list></call></expr>;</return>

		<case>case <expr><name>DestTransientRel</name></expr>:</case>
			<return>return <expr><call><name>CreateTransientRelDestReceiver</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>DestTupleQueue</name></expr>:</case>
			<return>return <expr><call><name>CreateTupleQueueDestReceiver</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<comment type="block">/* should never get here */</comment>
	<return>return <expr><operator>&amp;</operator><name>donothingDR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *		EndCommand - clean up the destination at end of command
 * ----------------
 */</comment>
<function><type><name>void</name></type>
<name>EndCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>commandTag</name></decl></parameter>, <parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>dest</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DestRemote</name></expr>:</case>
		<case>case <expr><name>DestRemoteExecute</name></expr>:</case>
		<case>case <expr><name>DestRemoteSimple</name></expr>:</case>

			<comment type="block">/*
			 * We assume the commandTag is plain ASCII and therefore requires
			 * no encoding conversion.
			 */</comment>
			<expr_stmt><expr><call><name>pq_putmessage</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>commandTag</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>commandTag</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>DestNone</name></expr>:</case>
		<case>case <expr><name>DestDebug</name></expr>:</case>
		<case>case <expr><name>DestSPI</name></expr>:</case>
		<case>case <expr><name>DestTuplestore</name></expr>:</case>
		<case>case <expr><name>DestIntoRel</name></expr>:</case>
		<case>case <expr><name>DestCopyOut</name></expr>:</case>
		<case>case <expr><name>DestSQLFunction</name></expr>:</case>
		<case>case <expr><name>DestTransientRel</name></expr>:</case>
		<case>case <expr><name>DestTupleQueue</name></expr>:</case>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *		NullCommand - tell dest that an empty query string was recognized
 *
 *		In FE/BE protocol version 1.0, this hack is necessary to support
 *		libpq's crufty way of determining whether a multiple-command
 *		query string is done.  In protocol 2.0 it's probably not really
 *		necessary to distinguish empty queries anymore, but we still do it
 *		for backwards compatibility with 1.0.  In protocol 3.0 it has some
 *		use again, since it ensures that there will be a recognizable end
 *		to the response to an Execute message.
 * ----------------
 */</comment>
<function><type><name>void</name></type>
<name>NullCommand</name><parameter_list>(<parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>dest</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DestRemote</name></expr>:</case>
		<case>case <expr><name>DestRemoteExecute</name></expr>:</case>
		<case>case <expr><name>DestRemoteSimple</name></expr>:</case>

			<comment type="block">/*
			 * tell the fe that we saw an empty query string.  In protocols
			 * before 3.0 this has a useless empty-string message body.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>PG_PROTOCOL_MAJOR</name><argument_list>(<argument><expr><name>FrontendProtocol</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pq_putemptymessage</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pq_putmessage</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>DestNone</name></expr>:</case>
		<case>case <expr><name>DestDebug</name></expr>:</case>
		<case>case <expr><name>DestSPI</name></expr>:</case>
		<case>case <expr><name>DestTuplestore</name></expr>:</case>
		<case>case <expr><name>DestIntoRel</name></expr>:</case>
		<case>case <expr><name>DestCopyOut</name></expr>:</case>
		<case>case <expr><name>DestSQLFunction</name></expr>:</case>
		<case>case <expr><name>DestTransientRel</name></expr>:</case>
		<case>case <expr><name>DestTupleQueue</name></expr>:</case>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *		ReadyForQuery - tell dest that we are ready for a new query
 *
 *		The ReadyForQuery message is sent so that the FE can tell when
 *		we are done processing a query string.
 *		In versions 3.0 and up, it also carries a transaction state indicator.
 *
 *		Note that by flushing the stdio buffer here, we can avoid doing it
 *		most other places and thus reduce the number of separate packets sent.
 * ----------------
 */</comment>
<function><type><name>void</name></type>
<name>ReadyForQuery</name><parameter_list>(<parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>dest</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DestRemote</name></expr>:</case>
		<case>case <expr><name>DestRemoteExecute</name></expr>:</case>
		<case>case <expr><name>DestRemoteSimple</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>PG_PROTOCOL_MAJOR</name><argument_list>(<argument><expr><name>FrontendProtocol</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><call><name>TransactionBlockStatusCode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>polar_send_proxy_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pq_putemptymessage</name><argument_list>(<argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<comment type="block">/* Flush output at end of cycle in any case. */</comment>
			<expr_stmt><expr><call><name>pq_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>DestNone</name></expr>:</case>
		<case>case <expr><name>DestDebug</name></expr>:</case>
		<case>case <expr><name>DestSPI</name></expr>:</case>
		<case>case <expr><name>DestTuplestore</name></expr>:</case>
		<case>case <expr><name>DestIntoRel</name></expr>:</case>
		<case>case <expr><name>DestCopyOut</name></expr>:</case>
		<case>case <expr><name>DestSQLFunction</name></expr>:</case>
		<case>case <expr><name>DestTransientRel</name></expr>:</case>
		<case>case <expr><name>DestTupleQueue</name></expr>:</case>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* POLAR px */</comment>
<comment type="block">/*
 * Send a px libpq message.
 *
 * This sends a message identical to that used when sending values of
 * GUC_REPORT gucs to the client (see ReportGUCOption()). The motion
 * listener port is sent as if there was a GUC called "px_listener_port".
 */</comment>
<function><type><name>void</name></type>
<name>sendPXDetails</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>msgbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>port_str</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Snapshot</name></type>	<name>xact_snap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Snapshot</name></type>	<name>snap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>serialized_snap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>serialized_snap_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>encoded_snap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>retry_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* POLAR */</comment>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>max_valid_lsn</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>port_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>port_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>px_listener_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * POLAR: if px_enable_replay_wait is on, all the mpp queries in PXs should
	 * wait for the wal replayed the QC query begin.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name>px_sql_wal_lsn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>polar_in_replica_mode</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"polardb px enabled, but current sql wal lsn is invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>cached_px_enable_replay_wait</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>polar_is_master</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>max_valid_lsn</name> <operator>=</operator> <call><name>GetXLogReplayRecPtr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>max_valid_lsn</name> <operator>&gt;=</operator> <name>px_sql_wal_lsn</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>retry_count</name> <operator>&gt;</operator> <literal type="number">10000</literal></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG1</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"before exec px query on node: px sessid %d, max valid lsn %lX, current sql wal lsn %lX, use time %dus"</literal></expr></argument>, 
				<argument><expr><name>px_session_id</name></expr></argument>, <argument><expr><name>max_valid_lsn</name></expr></argument>, 
				<argument><expr><name>px_sql_wal_lsn</name></expr></argument>, <argument><expr><name>retry_count</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><name>SPIN_SLEEP_MSEC</name> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retry_count</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>px_check_qc_connection_alive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* large then 1s, print trace log every 1s */</comment>
		<if_stmt><if>if <condition>(<expr><name>retry_count</name> <operator>&gt;</operator> <literal type="number">10000</literal> <operator>&amp;&amp;</operator> <name>retry_count</name> <operator>%</operator> <literal type="number">10000</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"before exec px query on node: px sessid %d, max valid lsn %lX, current sql wal lsn %lX, try time %dus"</literal></expr></argument>, 
				<argument><expr><name>px_session_id</name></expr></argument>, <argument><expr><name>max_valid_lsn</name></expr></argument>, <argument><expr><name>px_sql_wal_lsn</name></expr></argument>, <argument><expr><name>retry_count</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>xact_snap</name> <operator>=</operator> <call><name>GetTransactionSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>xact_snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>snap</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SnapshotData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>snap</name></expr></argument>, <argument><expr><name>xact_snap</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SnapshotData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pxsn_set_snapshot</name><argument_list>(<argument><expr><name>snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>serialized_snap</name> <operator>=</operator> <call><name>pxsn_get_serialized_snapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>serialized_snap_size</name> <operator>=</operator> <call><name>pxsn_get_serialized_snapshot_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>encoded_snap</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>serialized_snap_size</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hex_encode</name><argument_list>(<argument><expr><name>serialized_snap</name></expr></argument>, <argument><expr><name>serialized_snap_size</name></expr></argument>, <argument><expr><name>encoded_snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>encoded_snap</name><index>[<expr><name>serialized_snap_size</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>px_info_debug</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"px_snapshot_encode: %d sendPXDetails: encoded_snap: %s"</literal></expr></argument>, 
			<argument><expr><name><name>PxIdentity</name><operator>.</operator><name>dbid</name></name></expr></argument>, <argument><expr><name>encoded_snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><literal type="string">"px_listener_port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>port_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><literal type="string">"snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>encoded_snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pxsn_set_snapshot</name><argument_list>(<argument><expr><name>InvalidSnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>encoded_snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
