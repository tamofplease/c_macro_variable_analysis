<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/catalog/objectaddress.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * objectaddress.c
 *	  functions for working with ObjectAddresses
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/catalog/objectaddress.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/sysattr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/objectaddress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amproc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_attrdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_authid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_cast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_default_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_event_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_collation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_constraint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_conversion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_foreign_data_wrapper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_foreign_server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_language.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_largeobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_largeobject_metadata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opclass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opfamily.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_operator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_policy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_publication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_publication_rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_rewrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_statistic_ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_subscription.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_transform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_ts_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_ts_dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_ts_parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_ts_template.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_user_mapping.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/dbcommands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/event_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/policy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/proclang.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"foreign/foreign.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_func.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_oper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rewrite/rewriteSupport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/large_object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/sinval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/regproc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/tqual.h"</cpp:file></cpp:include>

<comment type="block">/*
 * ObjectProperty
 *
 * This array provides a common part of system object structure; to help
 * consolidate routines to handle various kind of object classes.
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>Oid</name></type>			<name>class_oid</name></decl>;</decl_stmt>		<comment type="block">/* oid of catalog */</comment>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>oid_index_oid</name></decl>;</decl_stmt>	<comment type="block">/* oid of index on system oid column */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>oid_catcache_id</name></decl>;</decl_stmt>	<comment type="block">/* id of catcache on system oid column	*/</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>name_catcache_id</name></decl>;</decl_stmt>	<comment type="block">/* id of catcache on (name,namespace), or
									 * (name) if the object does not live in a
									 * namespace */</comment>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attnum_name</name></decl>;</decl_stmt>	<comment type="block">/* attnum of name field */</comment>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attnum_namespace</name></decl>;</decl_stmt>	<comment type="block">/* attnum of namespace field */</comment>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attnum_owner</name></decl>;</decl_stmt>	<comment type="block">/* attnum of owner field */</comment>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attnum_acl</name></decl>;</decl_stmt>		<comment type="block">/* attnum of acl field */</comment>
	<decl_stmt><decl><type><name>ObjectType</name></type>	<name>objtype</name></decl>;</decl_stmt>		<comment type="block">/* OBJECT_* of this object type */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_nsp_name_unique</name></decl>;</decl_stmt> <comment type="block">/* can the nsp/name combination (or name
									 * alone, if there's no namespace) be
									 * considered a unique identifier for an
									 * object of this class? */</comment>
}</block></struct></type> <name>ObjectPropertyType</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ObjectPropertyType</name></type> <name><name>ObjectProperty</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{
		<expr><name>AccessMethodRelationId</name></expr>,
		<expr><name>AmOidIndexId</name></expr>,
		<expr><name>AMOID</name></expr>,
		<expr><name>AMNAME</name></expr>,
		<expr><name>Anum_pg_am_amname</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>CastRelationId</name></expr>,
		<expr><name>CastOidIndexId</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>false</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>CollationRelationId</name></expr>,
		<expr><name>CollationOidIndexId</name></expr>,
		<expr><name>COLLOID</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,						<comment type="block">/* COLLNAMEENCNSP also takes encoding */</comment>
		<expr><name>Anum_pg_collation_collname</name></expr>,
		<expr><name>Anum_pg_collation_collnamespace</name></expr>,
		<expr><name>Anum_pg_collation_collowner</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>OBJECT_COLLATION</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ConstraintRelationId</name></expr>,
		<expr><name>ConstraintOidIndexId</name></expr>,
		<expr><name>CONSTROID</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>Anum_pg_constraint_conname</name></expr>,
		<expr><name>Anum_pg_constraint_connamespace</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>false</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ConversionRelationId</name></expr>,
		<expr><name>ConversionOidIndexId</name></expr>,
		<expr><name>CONVOID</name></expr>,
		<expr><name>CONNAMENSP</name></expr>,
		<expr><name>Anum_pg_conversion_conname</name></expr>,
		<expr><name>Anum_pg_conversion_connamespace</name></expr>,
		<expr><name>Anum_pg_conversion_conowner</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>OBJECT_CONVERSION</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>DatabaseRelationId</name></expr>,
		<expr><name>DatabaseOidIndexId</name></expr>,
		<expr><name>DATABASEOID</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>Anum_pg_database_datname</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>Anum_pg_database_datdba</name></expr>,
		<expr><name>Anum_pg_database_datacl</name></expr>,
		<expr><name>OBJECT_DATABASE</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ExtensionRelationId</name></expr>,
		<expr><name>ExtensionOidIndexId</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>Anum_pg_extension_extname</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,		<comment type="block">/* extension doesn't belong to extnamespace */</comment>
		<expr><name>Anum_pg_extension_extowner</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>OBJECT_EXTENSION</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ForeignDataWrapperRelationId</name></expr>,
		<expr><name>ForeignDataWrapperOidIndexId</name></expr>,
		<expr><name>FOREIGNDATAWRAPPEROID</name></expr>,
		<expr><name>FOREIGNDATAWRAPPERNAME</name></expr>,
		<expr><name>Anum_pg_foreign_data_wrapper_fdwname</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>Anum_pg_foreign_data_wrapper_fdwowner</name></expr>,
		<expr><name>Anum_pg_foreign_data_wrapper_fdwacl</name></expr>,
		<expr><name>OBJECT_FDW</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ForeignServerRelationId</name></expr>,
		<expr><name>ForeignServerOidIndexId</name></expr>,
		<expr><name>FOREIGNSERVEROID</name></expr>,
		<expr><name>FOREIGNSERVERNAME</name></expr>,
		<expr><name>Anum_pg_foreign_server_srvname</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>Anum_pg_foreign_server_srvowner</name></expr>,
		<expr><name>Anum_pg_foreign_server_srvacl</name></expr>,
		<expr><name>OBJECT_FOREIGN_SERVER</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ProcedureRelationId</name></expr>,
		<expr><name>ProcedureOidIndexId</name></expr>,
		<expr><name>PROCOID</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,						<comment type="block">/* PROCNAMEARGSNSP also takes argument types */</comment>
		<expr><name>Anum_pg_proc_proname</name></expr>,
		<expr><name>Anum_pg_proc_pronamespace</name></expr>,
		<expr><name>Anum_pg_proc_proowner</name></expr>,
		<expr><name>Anum_pg_proc_proacl</name></expr>,
		<expr><name>OBJECT_FUNCTION</name></expr>,
		<expr><name>false</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>LanguageRelationId</name></expr>,
		<expr><name>LanguageOidIndexId</name></expr>,
		<expr><name>LANGOID</name></expr>,
		<expr><name>LANGNAME</name></expr>,
		<expr><name>Anum_pg_language_lanname</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>Anum_pg_language_lanowner</name></expr>,
		<expr><name>Anum_pg_language_lanacl</name></expr>,
		<expr><name>OBJECT_LANGUAGE</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>LargeObjectMetadataRelationId</name></expr>,
		<expr><name>LargeObjectMetadataOidIndexId</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>Anum_pg_largeobject_metadata_lomowner</name></expr>,
		<expr><name>Anum_pg_largeobject_metadata_lomacl</name></expr>,
		<expr><name>OBJECT_LARGEOBJECT</name></expr>,
		<expr><name>false</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>OperatorClassRelationId</name></expr>,
		<expr><name>OpclassOidIndexId</name></expr>,
		<expr><name>CLAOID</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,						<comment type="block">/* CLAAMNAMENSP also takes opcmethod */</comment>
		<expr><name>Anum_pg_opclass_opcname</name></expr>,
		<expr><name>Anum_pg_opclass_opcnamespace</name></expr>,
		<expr><name>Anum_pg_opclass_opcowner</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>OBJECT_OPCLASS</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>OperatorRelationId</name></expr>,
		<expr><name>OperatorOidIndexId</name></expr>,
		<expr><name>OPEROID</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,						<comment type="block">/* OPERNAMENSP also takes left and right type */</comment>
		<expr><name>Anum_pg_operator_oprname</name></expr>,
		<expr><name>Anum_pg_operator_oprnamespace</name></expr>,
		<expr><name>Anum_pg_operator_oprowner</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>OBJECT_OPERATOR</name></expr>,
		<expr><name>false</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>OperatorFamilyRelationId</name></expr>,
		<expr><name>OpfamilyOidIndexId</name></expr>,
		<expr><name>OPFAMILYOID</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,						<comment type="block">/* OPFAMILYAMNAMENSP also takes opfmethod */</comment>
		<expr><name>Anum_pg_opfamily_opfname</name></expr>,
		<expr><name>Anum_pg_opfamily_opfnamespace</name></expr>,
		<expr><name>Anum_pg_opfamily_opfowner</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>OBJECT_OPFAMILY</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>AuthIdRelationId</name></expr>,
		<expr><name>AuthIdOidIndexId</name></expr>,
		<expr><name>AUTHOID</name></expr>,
		<expr><name>AUTHNAME</name></expr>,
		<expr><name>Anum_pg_authid_rolname</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>RewriteRelationId</name></expr>,
		<expr><name>RewriteOidIndexId</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>Anum_pg_rewrite_rulename</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>false</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>NamespaceRelationId</name></expr>,
		<expr><name>NamespaceOidIndexId</name></expr>,
		<expr><name>NAMESPACEOID</name></expr>,
		<expr><name>NAMESPACENAME</name></expr>,
		<expr><name>Anum_pg_namespace_nspname</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>Anum_pg_namespace_nspowner</name></expr>,
		<expr><name>Anum_pg_namespace_nspacl</name></expr>,
		<expr><name>OBJECT_SCHEMA</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>RelationRelationId</name></expr>,
		<expr><name>ClassOidIndexId</name></expr>,
		<expr><name>RELOID</name></expr>,
		<expr><name>RELNAMENSP</name></expr>,
		<expr><name>Anum_pg_class_relname</name></expr>,
		<expr><name>Anum_pg_class_relnamespace</name></expr>,
		<expr><name>Anum_pg_class_relowner</name></expr>,
		<expr><name>Anum_pg_class_relacl</name></expr>,
		<expr><name>OBJECT_TABLE</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>TableSpaceRelationId</name></expr>,
		<expr><name>TablespaceOidIndexId</name></expr>,
		<expr><name>TABLESPACEOID</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>Anum_pg_tablespace_spcname</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>Anum_pg_tablespace_spcowner</name></expr>,
		<expr><name>Anum_pg_tablespace_spcacl</name></expr>,
		<expr><name>OBJECT_TABLESPACE</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>TransformRelationId</name></expr>,
		<expr><name>TransformOidIndexId</name></expr>,
		<expr><name>TRFOID</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>TriggerRelationId</name></expr>,
		<expr><name>TriggerOidIndexId</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>Anum_pg_trigger_tgname</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>false</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>PolicyRelationId</name></expr>,
		<expr><name>PolicyOidIndexId</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>Anum_pg_policy_polname</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>false</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>EventTriggerRelationId</name></expr>,
		<expr><name>EventTriggerOidIndexId</name></expr>,
		<expr><name>EVENTTRIGGEROID</name></expr>,
		<expr><name>EVENTTRIGGERNAME</name></expr>,
		<expr><name>Anum_pg_event_trigger_evtname</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>Anum_pg_event_trigger_evtowner</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>OBJECT_EVENT_TRIGGER</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>TSConfigRelationId</name></expr>,
		<expr><name>TSConfigOidIndexId</name></expr>,
		<expr><name>TSCONFIGOID</name></expr>,
		<expr><name>TSCONFIGNAMENSP</name></expr>,
		<expr><name>Anum_pg_ts_config_cfgname</name></expr>,
		<expr><name>Anum_pg_ts_config_cfgnamespace</name></expr>,
		<expr><name>Anum_pg_ts_config_cfgowner</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>OBJECT_TSCONFIGURATION</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>TSDictionaryRelationId</name></expr>,
		<expr><name>TSDictionaryOidIndexId</name></expr>,
		<expr><name>TSDICTOID</name></expr>,
		<expr><name>TSDICTNAMENSP</name></expr>,
		<expr><name>Anum_pg_ts_dict_dictname</name></expr>,
		<expr><name>Anum_pg_ts_dict_dictnamespace</name></expr>,
		<expr><name>Anum_pg_ts_dict_dictowner</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>OBJECT_TSDICTIONARY</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>TSParserRelationId</name></expr>,
		<expr><name>TSParserOidIndexId</name></expr>,
		<expr><name>TSPARSEROID</name></expr>,
		<expr><name>TSPARSERNAMENSP</name></expr>,
		<expr><name>Anum_pg_ts_parser_prsname</name></expr>,
		<expr><name>Anum_pg_ts_parser_prsnamespace</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>TSTemplateRelationId</name></expr>,
		<expr><name>TSTemplateOidIndexId</name></expr>,
		<expr><name>TSTEMPLATEOID</name></expr>,
		<expr><name>TSTEMPLATENAMENSP</name></expr>,
		<expr><name>Anum_pg_ts_template_tmplname</name></expr>,
		<expr><name>Anum_pg_ts_template_tmplnamespace</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><name>true</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><name>TypeRelationId</name></expr>,
		<expr><name>TypeOidIndexId</name></expr>,
		<expr><name>TYPEOID</name></expr>,
		<expr><name>TYPENAMENSP</name></expr>,
		<expr><name>Anum_pg_type_typname</name></expr>,
		<expr><name>Anum_pg_type_typnamespace</name></expr>,
		<expr><name>Anum_pg_type_typowner</name></expr>,
		<expr><name>Anum_pg_type_typacl</name></expr>,
		<expr><name>OBJECT_TYPE</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>PublicationRelationId</name></expr>,
		<expr><name>PublicationObjectIndexId</name></expr>,
		<expr><name>PUBLICATIONOID</name></expr>,
		<expr><name>PUBLICATIONNAME</name></expr>,
		<expr><name>Anum_pg_publication_pubname</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>Anum_pg_publication_pubowner</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>OBJECT_PUBLICATION</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>SubscriptionRelationId</name></expr>,
		<expr><name>SubscriptionObjectIndexId</name></expr>,
		<expr><name>SUBSCRIPTIONOID</name></expr>,
		<expr><name>SUBSCRIPTIONNAME</name></expr>,
		<expr><name>Anum_pg_subscription_subname</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>Anum_pg_subscription_subowner</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,
		<expr><name>OBJECT_SUBSCRIPTION</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>StatisticExtRelationId</name></expr>,
		<expr><name>StatisticExtOidIndexId</name></expr>,
		<expr><name>STATEXTOID</name></expr>,
		<expr><name>STATEXTNAMENSP</name></expr>,
		<expr><name>Anum_pg_statistic_ext_stxname</name></expr>,
		<expr><name>Anum_pg_statistic_ext_stxnamespace</name></expr>,
		<expr><name>Anum_pg_statistic_ext_stxowner</name></expr>,
		<expr><name>InvalidAttrNumber</name></expr>,		<comment type="block">/* no ACL (same as relation) */</comment>
		<expr><name>OBJECT_STATISTIC_EXT</name></expr>,
		<expr><name>true</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * This struct maps the string object types as returned by
 * getObjectTypeDescription into ObjType enum values.  Note that some enum
 * values can be obtained by different names, and that some string object types
 * do not have corresponding values in the output enum.  The user of this map
 * must be careful to test for invalid values being returned.
 *
 * To ease maintenance, this follows the order of getObjectTypeDescription.
 */</comment>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>object_type_map</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tm_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectType</name></type>	<name>tm_type</name></decl>;</decl_stmt>
}</block>

			<decl><name><name>ObjectTypeMap</name><index>[]</index></name> <init>=
<expr><block>{
	<comment type="block">/* OCLASS_CLASS, all kinds of relations */</comment>
	<expr><block>{
		<expr><literal type="string">"table"</literal></expr>, <expr><name>OBJECT_TABLE</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"index"</literal></expr>, <expr><name>OBJECT_INDEX</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"sequence"</literal></expr>, <expr><name>OBJECT_SEQUENCE</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"toast table"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
	}</block></expr>,							<comment type="block">/* unmapped */</comment>
	<expr><block>{
		<expr><literal type="string">"view"</literal></expr>, <expr><name>OBJECT_VIEW</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"materialized view"</literal></expr>, <expr><name>OBJECT_MATVIEW</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"composite type"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
	}</block></expr>,							<comment type="block">/* unmapped */</comment>
	<expr><block>{
		<expr><literal type="string">"foreign table"</literal></expr>, <expr><name>OBJECT_FOREIGN_TABLE</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"table column"</literal></expr>, <expr><name>OBJECT_COLUMN</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"index column"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
	}</block></expr>,							<comment type="block">/* unmapped */</comment>
	<expr><block>{
		<expr><literal type="string">"sequence column"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
	}</block></expr>,							<comment type="block">/* unmapped */</comment>
	<expr><block>{
		<expr><literal type="string">"toast table column"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
	}</block></expr>,							<comment type="block">/* unmapped */</comment>
	<expr><block>{
		<expr><literal type="string">"view column"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
	}</block></expr>,							<comment type="block">/* unmapped */</comment>
	<expr><block>{
		<expr><literal type="string">"materialized view column"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
	}</block></expr>,							<comment type="block">/* unmapped */</comment>
	<expr><block>{
		<expr><literal type="string">"composite type column"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
	}</block></expr>,							<comment type="block">/* unmapped */</comment>
	<expr><block>{
		<expr><literal type="string">"foreign table column"</literal></expr>, <expr><name>OBJECT_COLUMN</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_PROC */</comment>
	<expr><block>{
		<expr><literal type="string">"aggregate"</literal></expr>, <expr><name>OBJECT_AGGREGATE</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"function"</literal></expr>, <expr><name>OBJECT_FUNCTION</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"procedure"</literal></expr>, <expr><name>OBJECT_PROCEDURE</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_TYPE */</comment>
	<expr><block>{
		<expr><literal type="string">"type"</literal></expr>, <expr><name>OBJECT_TYPE</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_CAST */</comment>
	<expr><block>{
		<expr><literal type="string">"cast"</literal></expr>, <expr><name>OBJECT_CAST</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_COLLATION */</comment>
	<expr><block>{
		<expr><literal type="string">"collation"</literal></expr>, <expr><name>OBJECT_COLLATION</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_CONSTRAINT */</comment>
	<expr><block>{
		<expr><literal type="string">"table constraint"</literal></expr>, <expr><name>OBJECT_TABCONSTRAINT</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"domain constraint"</literal></expr>, <expr><name>OBJECT_DOMCONSTRAINT</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_CONVERSION */</comment>
	<expr><block>{
		<expr><literal type="string">"conversion"</literal></expr>, <expr><name>OBJECT_CONVERSION</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_DEFAULT */</comment>
	<expr><block>{
		<expr><literal type="string">"default value"</literal></expr>, <expr><name>OBJECT_DEFAULT</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_LANGUAGE */</comment>
	<expr><block>{
		<expr><literal type="string">"language"</literal></expr>, <expr><name>OBJECT_LANGUAGE</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_LARGEOBJECT */</comment>
	<expr><block>{
		<expr><literal type="string">"large object"</literal></expr>, <expr><name>OBJECT_LARGEOBJECT</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_OPERATOR */</comment>
	<expr><block>{
		<expr><literal type="string">"operator"</literal></expr>, <expr><name>OBJECT_OPERATOR</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_OPCLASS */</comment>
	<expr><block>{
		<expr><literal type="string">"operator class"</literal></expr>, <expr><name>OBJECT_OPCLASS</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_OPFAMILY */</comment>
	<expr><block>{
		<expr><literal type="string">"operator family"</literal></expr>, <expr><name>OBJECT_OPFAMILY</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_AM */</comment>
	<expr><block>{
		<expr><literal type="string">"access method"</literal></expr>, <expr><name>OBJECT_ACCESS_METHOD</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_AMOP */</comment>
	<expr><block>{
		<expr><literal type="string">"operator of access method"</literal></expr>, <expr><name>OBJECT_AMOP</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_AMPROC */</comment>
	<expr><block>{
		<expr><literal type="string">"function of access method"</literal></expr>, <expr><name>OBJECT_AMPROC</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_REWRITE */</comment>
	<expr><block>{
		<expr><literal type="string">"rule"</literal></expr>, <expr><name>OBJECT_RULE</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_TRIGGER */</comment>
	<expr><block>{
		<expr><literal type="string">"trigger"</literal></expr>, <expr><name>OBJECT_TRIGGER</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_SCHEMA */</comment>
	<expr><block>{
		<expr><literal type="string">"schema"</literal></expr>, <expr><name>OBJECT_SCHEMA</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_TSPARSER */</comment>
	<expr><block>{
		<expr><literal type="string">"text search parser"</literal></expr>, <expr><name>OBJECT_TSPARSER</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_TSDICT */</comment>
	<expr><block>{
		<expr><literal type="string">"text search dictionary"</literal></expr>, <expr><name>OBJECT_TSDICTIONARY</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_TSTEMPLATE */</comment>
	<expr><block>{
		<expr><literal type="string">"text search template"</literal></expr>, <expr><name>OBJECT_TSTEMPLATE</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_TSCONFIG */</comment>
	<expr><block>{
		<expr><literal type="string">"text search configuration"</literal></expr>, <expr><name>OBJECT_TSCONFIGURATION</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_ROLE */</comment>
	<expr><block>{
		<expr><literal type="string">"role"</literal></expr>, <expr><name>OBJECT_ROLE</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_DATABASE */</comment>
	<expr><block>{
		<expr><literal type="string">"database"</literal></expr>, <expr><name>OBJECT_DATABASE</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_TBLSPACE */</comment>
	<expr><block>{
		<expr><literal type="string">"tablespace"</literal></expr>, <expr><name>OBJECT_TABLESPACE</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_FDW */</comment>
	<expr><block>{
		<expr><literal type="string">"foreign-data wrapper"</literal></expr>, <expr><name>OBJECT_FDW</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_FOREIGN_SERVER */</comment>
	<expr><block>{
		<expr><literal type="string">"server"</literal></expr>, <expr><name>OBJECT_FOREIGN_SERVER</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_USER_MAPPING */</comment>
	<expr><block>{
		<expr><literal type="string">"user mapping"</literal></expr>, <expr><name>OBJECT_USER_MAPPING</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_DEFACL */</comment>
	<expr><block>{
		<expr><literal type="string">"default acl"</literal></expr>, <expr><name>OBJECT_DEFACL</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_EXTENSION */</comment>
	<expr><block>{
		<expr><literal type="string">"extension"</literal></expr>, <expr><name>OBJECT_EXTENSION</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_EVENT_TRIGGER */</comment>
	<expr><block>{
		<expr><literal type="string">"event trigger"</literal></expr>, <expr><name>OBJECT_EVENT_TRIGGER</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_POLICY */</comment>
	<expr><block>{
		<expr><literal type="string">"policy"</literal></expr>, <expr><name>OBJECT_POLICY</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_PUBLICATION */</comment>
	<expr><block>{
		<expr><literal type="string">"publication"</literal></expr>, <expr><name>OBJECT_PUBLICATION</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_PUBLICATION_REL */</comment>
	<expr><block>{
		<expr><literal type="string">"publication relation"</literal></expr>, <expr><name>OBJECT_PUBLICATION_REL</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_SUBSCRIPTION */</comment>
	<expr><block>{
		<expr><literal type="string">"subscription"</literal></expr>, <expr><name>OBJECT_SUBSCRIPTION</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_TRANSFORM */</comment>
	<expr><block>{
		<expr><literal type="string">"transform"</literal></expr>, <expr><name>OBJECT_TRANSFORM</name></expr>
	}</block></expr>,
	<comment type="block">/* OCLASS_STATISTIC_EXT */</comment>
	<expr><block>{
		<expr><literal type="string">"statistics object"</literal></expr>, <expr><name>OBJECT_STATISTIC_EXT</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectAddress</name></type> <name>InvalidObjectAddress</name> <init>=
<expr><block>{
	<expr><name>InvalidOid</name></expr>,
	<expr><name>InvalidOid</name></expr>,
	<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>ObjectAddress</name></type> <name>get_object_address_unqualified</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>,
							   <parameter><decl><type><name>Value</name> <modifier>*</modifier></type><name>strval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ObjectAddress</name></type> <name>get_relation_by_qualified_name</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>,
							   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>Relation</name> <modifier>*</modifier></type><name>relp</name></decl></parameter>,
							   <parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ObjectAddress</name></type> <name>get_object_address_relobject</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>,
							 <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>Relation</name> <modifier>*</modifier></type><name>relp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ObjectAddress</name></type> <name>get_object_address_attribute</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>,
							 <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>Relation</name> <modifier>*</modifier></type><name>relp</name></decl></parameter>,
							 <parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ObjectAddress</name></type> <name>get_object_address_attrdef</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>,
						   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>Relation</name> <modifier>*</modifier></type><name>relp</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>,
						   <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ObjectAddress</name></type> <name>get_object_address_type</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>,
						<parameter><decl><type><name>TypeName</name> <modifier>*</modifier></type><name>typename</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ObjectAddress</name></type> <name>get_object_address_opcf</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
						<parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ObjectAddress</name></type> <name>get_object_address_opf_member</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>,
							  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ObjectAddress</name></type> <name>get_object_address_usermapping</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
							   <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ObjectAddress</name></type> <name>get_object_address_publication_rel</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
								   <parameter><decl><type><name>Relation</name> <modifier>*</modifier></type><name>relp</name></decl></parameter>,
								   <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ObjectAddress</name></type> <name>get_object_address_defacl</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
						  <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ObjectPropertyType</name> <modifier>*</modifier></type><name>get_object_property_data</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getRelationDescription</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getOpFamilyDescription</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>opfid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getRelationTypeDescription</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>,
						   <parameter><decl><type><name>int32</name></type> <name>objectSubId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getProcedureTypeDescription</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>procid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getConstraintTypeDescription</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>constroid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getOpFamilyIdentity</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>opfid</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getRelationIdentity</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Translate an object name and arguments (as passed by the parser) to an
 * ObjectAddress.
 *
 * The returned object will be locked using the specified lockmode.  If a
 * sub-object is looked up, the parent object will be locked instead.
 *
 * If the object is a relation or a child object of a relation (e.g. an
 * attribute or constraint), the relation is also opened and *relp receives
 * the open relcache entry pointer; otherwise, *relp is set to NULL.  This
 * is a bit grotty but it makes life simpler, since the caller will
 * typically need the relcache entry too.  Caller must close the relcache
 * entry when done with it.  The relation is locked with the specified lockmode
 * if the target object is the relation itself or an attribute, but for other
 * child objects, only AccessShareLock is acquired on the relation.
 *
 * If the object is not found, an error is thrown, unless missing_ok is
 * true.  In this case, no lock is acquired, relp is set to NULL, and the
 * returned address has objectId set to InvalidOid.
 *
 * We don't currently provide a function to release the locks acquired here;
 * typically, the lock must be held until commit to guard against a concurrent
 * drop operation.
 *
 * Note: If the object is not found, we don't give any indication of the
 * reason.  (It might have been a missing schema if the name was qualified, or
 * a nonexistent type name in case of a cast, function or operator; etc).
 * Currently there is only one caller that might be interested in such info, so
 * we don't spend much effort here.  If more callers start to care, it might be
 * better to add some support for that in this function.
 */</comment>
<function><type><name>ObjectAddress</name></type>
<name>get_object_address</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
				   <parameter><decl><type><name>Relation</name> <modifier>*</modifier></type><name>relp</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>old_address</name> <init>= <expr><block>{<expr><name>InvalidOid</name></expr>, <expr><name>InvalidOid</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>relation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>inval_count</name></decl>;</decl_stmt>

	<comment type="block">/* Some kind of lock must be taken. */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lockmode</name> <operator>!=</operator> <name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<comment type="block">/*
		 * Remember this value, so that, after looking up the object name and
		 * locking it, we can check whether any invalidation messages have
		 * been processed that might require a do-over.
		 */</comment>
		<expr_stmt><expr><name>inval_count</name> <operator>=</operator> <name>SharedInvalidMessageCounter</name></expr>;</expr_stmt>

		<comment type="block">/* Look up object address. */</comment>
		<switch>switch <condition>(<expr><name>objtype</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>OBJECT_INDEX</name></expr>:</case>
			<case>case <expr><name>OBJECT_SEQUENCE</name></expr>:</case>
			<case>case <expr><name>OBJECT_TABLE</name></expr>:</case>
			<case>case <expr><name>OBJECT_VIEW</name></expr>:</case>
			<case>case <expr><name>OBJECT_MATVIEW</name></expr>:</case>
			<case>case <expr><name>OBJECT_FOREIGN_TABLE</name></expr>:</case>
				<expr_stmt><expr><name>address</name> <operator>=</operator>
					<call><name>get_relation_by_qualified_name</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>,
												   <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>,
												   <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_COLUMN</name></expr>:</case>
				<expr_stmt><expr><name>address</name> <operator>=</operator>
					<call><name>get_object_address_attribute</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>,
												 <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>,
												 <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_DEFAULT</name></expr>:</case>
				<expr_stmt><expr><name>address</name> <operator>=</operator>
					<call><name>get_object_address_attrdef</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>,
											   <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>,
											   <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_RULE</name></expr>:</case>
			<case>case <expr><name>OBJECT_TRIGGER</name></expr>:</case>
			<case>case <expr><name>OBJECT_TABCONSTRAINT</name></expr>:</case>
			<case>case <expr><name>OBJECT_POLICY</name></expr>:</case>
				<expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address_relobject</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>,
													   <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_DOMCONSTRAINT</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>objlist</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>domaddr</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>constrname</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>objlist</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>domaddr</name> <operator>=</operator> <call><name>get_object_address_type</name><argument_list>(<argument><expr><name>OBJECT_DOMAIN</name></expr></argument>,
													  <argument><expr><call><name>linitial_node</name><argument_list>(<argument><expr><name>TypeName</name></expr></argument>, <argument><expr><name>objlist</name></expr></argument>)</argument_list></call></expr></argument>,
													  <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>constrname</name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name>objlist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>ConstraintRelationId</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_domain_constraint_oid</name><argument_list>(<argument><expr><name><name>domaddr</name><operator>.</operator><name>objectId</name></name></expr></argument>,
																 <argument><expr><name>constrname</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><name>OBJECT_DATABASE</name></expr>:</case>
			<case>case <expr><name>OBJECT_EXTENSION</name></expr>:</case>
			<case>case <expr><name>OBJECT_TABLESPACE</name></expr>:</case>
			<case>case <expr><name>OBJECT_ROLE</name></expr>:</case>
			<case>case <expr><name>OBJECT_SCHEMA</name></expr>:</case>
			<case>case <expr><name>OBJECT_LANGUAGE</name></expr>:</case>
			<case>case <expr><name>OBJECT_FDW</name></expr>:</case>
			<case>case <expr><name>OBJECT_FOREIGN_SERVER</name></expr>:</case>
			<case>case <expr><name>OBJECT_EVENT_TRIGGER</name></expr>:</case>
			<case>case <expr><name>OBJECT_ACCESS_METHOD</name></expr>:</case>
			<case>case <expr><name>OBJECT_PUBLICATION</name></expr>:</case>
			<case>case <expr><name>OBJECT_SUBSCRIPTION</name></expr>:</case>
				<expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address_unqualified</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>,
														 <argument><expr><operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator> <name>object</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_TYPE</name></expr>:</case>
			<case>case <expr><name>OBJECT_DOMAIN</name></expr>:</case>
				<expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address_type</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>TypeName</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_AGGREGATE</name></expr>:</case>
			<case>case <expr><name>OBJECT_FUNCTION</name></expr>:</case>
			<case>case <expr><name>OBJECT_PROCEDURE</name></expr>:</case>
			<case>case <expr><name>OBJECT_ROUTINE</name></expr>:</case>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>ProcedureRelationId</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>LookupFuncWithArgs</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>ObjectWithArgs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_OPERATOR</name></expr>:</case>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>OperatorRelationId</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>LookupOperWithArgs</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>ObjectWithArgs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_COLLATION</name></expr>:</case>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>CollationRelationId</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_collation_oid</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_CONVERSION</name></expr>:</case>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>ConversionRelationId</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_conversion_oid</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_OPCLASS</name></expr>:</case>
			<case>case <expr><name>OBJECT_OPFAMILY</name></expr>:</case>
				<expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address_opcf</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_AMOP</name></expr>:</case>
			<case>case <expr><name>OBJECT_AMPROC</name></expr>:</case>
				<expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address_opf_member</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_LARGEOBJECT</name></expr>:</case>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>LargeObjectRelationId</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>oidparse</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LargeObjectExists</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missing_ok</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"large object %u does not exist"</literal></expr></argument>,
										<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_CAST</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>TypeName</name>   <modifier>*</modifier></type><name>sourcetype</name> <init>= <expr><call><name>linitial_node</name><argument_list>(<argument><expr><name>TypeName</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>TypeName</name>   <modifier>*</modifier></type><name>targettype</name> <init>= <expr><call><name>lsecond_node</name><argument_list>(<argument><expr><name>TypeName</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>Oid</name></type>			<name>sourcetypeid</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>Oid</name></type>			<name>targettypeid</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>sourcetypeid</name> <operator>=</operator> <call><name>LookupTypeNameOid</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sourcetype</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>targettypeid</name> <operator>=</operator> <call><name>LookupTypeNameOid</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>targettype</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>CastRelationId</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator>
						<call><name>get_cast_oid</name><argument_list>(<argument><expr><name>sourcetypeid</name></expr></argument>, <argument><expr><name>targettypeid</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><name>OBJECT_TRANSFORM</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>TypeName</name>   <modifier>*</modifier></type><name>typename</name> <init>= <expr><call><name>linitial_node</name><argument_list>(<argument><expr><name>TypeName</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>langname</name> <init>= <expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>Oid</name></type>			<name>type_id</name> <init>= <expr><call><name>LookupTypeNameOid</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>typename</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>Oid</name></type>			<name>lang_id</name> <init>= <expr><call><name>get_language_oid</name><argument_list>(<argument><expr><name>langname</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>TransformRelationId</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator>
						<call><name>get_transform_oid</name><argument_list>(<argument><expr><name>type_id</name></expr></argument>, <argument><expr><name>lang_id</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><name>OBJECT_TSPARSER</name></expr>:</case>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>TSParserRelationId</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_ts_parser_oid</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_TSDICTIONARY</name></expr>:</case>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>TSDictionaryRelationId</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_ts_dict_oid</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_TSTEMPLATE</name></expr>:</case>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>TSTemplateRelationId</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_ts_template_oid</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_TSCONFIGURATION</name></expr>:</case>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>TSConfigRelationId</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_ts_config_oid</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_USER_MAPPING</name></expr>:</case>
				<expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address_usermapping</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>,
														 <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_PUBLICATION_REL</name></expr>:</case>
				<expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address_publication_rel</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>,
															 <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>,
															 <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_DEFACL</name></expr>:</case>
				<expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address_defacl</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>,
													<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OBJECT_STATISTIC_EXT</name></expr>:</case>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>StatisticExtRelationId</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_statistics_object_oid</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>,
															 <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized objtype: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* placate compiler, in case it thinks elog might return */</comment>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></switch>

		<comment type="block">/*
		 * If we could not find the supplied object, return without locking.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>address</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * If we're retrying, see if we got the same answer as last time.  If
		 * so, we're done; if not, we locked the wrong thing, so give up our
		 * lock.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>old_address</name><operator>.</operator><name>classId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>old_address</name><operator>.</operator><name>classId</name></name> <operator>==</operator> <name><name>address</name><operator>.</operator><name>classId</name></name>
				<operator>&amp;&amp;</operator> <name><name>old_address</name><operator>.</operator><name>objectId</name></name> <operator>==</operator> <name><name>address</name><operator>.</operator><name>objectId</name></name>
				<operator>&amp;&amp;</operator> <name><name>old_address</name><operator>.</operator><name>objectSubId</name></name> <operator>==</operator> <name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>old_address</name><operator>.</operator><name>classId</name></name> <operator>!=</operator> <name>RelationRelationId</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>IsSharedRelation</name><argument_list>(<argument><expr><name><name>old_address</name><operator>.</operator><name>classId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>UnlockSharedObject</name><argument_list>(<argument><expr><name><name>old_address</name><operator>.</operator><name>classId</name></name></expr></argument>,
									   <argument><expr><name><name>old_address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
									   <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>UnlockDatabaseObject</name><argument_list>(<argument><expr><name><name>old_address</name><operator>.</operator><name>classId</name></name></expr></argument>,
										 <argument><expr><name><name>old_address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
										 <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * If we're dealing with a relation or attribute, then the relation is
		 * already locked.  Otherwise, we lock it now.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>!=</operator> <name>RelationRelationId</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>IsSharedRelation</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>LockSharedObject</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>, <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
								 <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>LockDatabaseObject</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>, <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
								   <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * At this point, we've resolved the name to an OID and locked the
		 * corresponding database object.  However, it's possible that by the
		 * time we acquire the lock on the object, concurrent DDL has modified
		 * the database in such a way that the name we originally looked up no
		 * longer resolves to that OID.
		 *
		 * We can be certain that this isn't an issue if (a) no shared
		 * invalidation messages have been processed or (b) we've locked a
		 * relation somewhere along the line.  All the relation name lookups
		 * in this module ultimately use RangeVarGetRelid() to acquire a
		 * relation lock, and that function protects against the same kinds of
		 * races we're worried about here.  Even when operating on a
		 * constraint, rule, or trigger, we still acquire AccessShareLock on
		 * the relation, which is enough to freeze out any concurrent DDL.
		 *
		 * In all other cases, however, it's possible that the name we looked
		 * up no longer refers to the object we locked, so we retry the lookup
		 * and see whether we get the same answer.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>inval_count</name> <operator>==</operator> <name>SharedInvalidMessageCounter</name> <operator>||</operator> <name>relation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>old_address</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Return the object address and the relation. */</comment>
	<expr_stmt><expr><operator>*</operator><name>relp</name> <operator>=</operator> <name>relation</name></expr>;</expr_stmt>
	<return>return <expr><name>address</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return an ObjectAddress based on a RangeVar and an object name. The
 * name of the relation identified by the RangeVar is prepended to the
 * (possibly empty) list passed in as object. This is useful to find
 * the ObjectAddress of objects that depend on a relation. All other
 * considerations are exactly as for get_object_address above.
 */</comment>
<function><type><name>ObjectAddress</name></type>
<name>get_object_address_rv</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>, <parameter><decl><type><name>RangeVar</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
					  <parameter><decl><type><name>Relation</name> <modifier>*</modifier></type><name>relp</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>,
					  <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>rel</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>lcons</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>schemaname</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>lcons</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>schemaname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>catalogname</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>lcons</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>catalogname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>get_object_address</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>object</name></expr></argument>,
							  <argument><expr><name>relp</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find an ObjectAddress for a type of object that is identified by an
 * unqualified name.
 */</comment>
<function><type><specifier>static</specifier> <name>ObjectAddress</name></type>
<name>get_object_address_unqualified</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>,
							   <parameter><decl><type><name>Value</name> <modifier>*</modifier></type><name>strval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><name>strval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Translate name to OID. */</comment>
	<switch>switch <condition>(<expr><name>objtype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OBJECT_ACCESS_METHOD</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>AccessMethodRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_am_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_DATABASE</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>DatabaseRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_database_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_EXTENSION</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>ExtensionRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_extension_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_TABLESPACE</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>TableSpaceRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_tablespace_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_ROLE</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>AuthIdRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_role_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_SCHEMA</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>NamespaceRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_namespace_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_LANGUAGE</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>LanguageRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_language_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_FDW</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>ForeignDataWrapperRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_foreign_data_wrapper_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_FOREIGN_SERVER</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>ForeignServerRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_foreign_server_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_EVENT_TRIGGER</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>EventTriggerRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_event_trigger_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_PUBLICATION</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>PublicationRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_publication_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_SUBSCRIPTION</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>SubscriptionRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_subscription_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized objtype: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* placate compiler, which doesn't know elog won't return */</comment>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<return>return <expr><name>address</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Locate a relation by qualified name.
 */</comment>
<function><type><specifier>static</specifier> <name>ObjectAddress</name></type>
<name>get_relation_by_qualified_name</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
							   <parameter><decl><type><name>Relation</name> <modifier>*</modifier></type><name>relp</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>,
							   <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>relation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>relation_openrv_extended</name><argument_list>(<argument><expr><call><name>makeRangeVarFromNameList</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><name>lockmode</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>relation</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>address</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>objtype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OBJECT_INDEX</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>!=</operator> <name>RELKIND_INDEX</name> <operator>&amp;&amp;</operator>
				<name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>!=</operator> <name>RELKIND_PARTITIONED_INDEX</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not an index"</literal></expr></argument>,
								<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_SEQUENCE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>!=</operator> <name>RELKIND_SEQUENCE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a sequence"</literal></expr></argument>,
								<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_TABLE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>!=</operator> <name>RELKIND_RELATION</name> <operator>&amp;&amp;</operator>
				<name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>!=</operator> <name>RELKIND_PARTITIONED_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a table"</literal></expr></argument>,
								<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_VIEW</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>!=</operator> <name>RELKIND_VIEW</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a view"</literal></expr></argument>,
								<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_MATVIEW</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>!=</operator> <name>RELKIND_MATVIEW</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a materialized view"</literal></expr></argument>,
								<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_FOREIGN_TABLE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>!=</operator> <name>RELKIND_FOREIGN_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a foreign table"</literal></expr></argument>,
								<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized objtype: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/* Done. */</comment>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>relp</name> <operator>=</operator> <name>relation</name></expr>;</expr_stmt>

	<return>return <expr><name>address</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find object address for an object that is attached to a relation.
 *
 * Note that we take only an AccessShareLock on the relation.  We need not
 * pass down the LOCKMODE from get_object_address(), because that is the lock
 * mode for the object itself, not the relation to which it is attached.
 */</comment>
<function><type><specifier>static</specifier> <name>ObjectAddress</name></type>
<name>get_object_address_relobject</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
							 <parameter><decl><type><name>Relation</name> <modifier>*</modifier></type><name>relp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>relation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nnames</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>depname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>relname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>reloid</name></decl>;</decl_stmt>

	<comment type="block">/* Extract name of dependent object. */</comment>
	<expr_stmt><expr><name>depname</name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>llast</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Separate relation name from dependent object name. */</comment>
	<expr_stmt><expr><name>nnames</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>nnames</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must specify relation and object name"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Extract relation name and open relation. */</comment>
	<expr_stmt><expr><name>relname</name> <operator>=</operator> <call><name>list_truncate</name><argument_list>(<argument><expr><call><name>list_copy</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nnames</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>heap_openrv_extended</name><argument_list>(<argument><expr><call><name>makeRangeVarFromNameList</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>AccessShareLock</name></expr></argument>,
									<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>reloid</name> <operator>=</operator> <ternary><condition><expr><name>relation</name></expr> ?</condition><then> <expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>InvalidOid</name></expr></else></ternary></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>objtype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OBJECT_RULE</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RewriteRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <ternary><condition><expr><name>relation</name></expr> ?</condition><then>
				<expr><call><name>get_rewrite_oid</name><argument_list>(<argument><expr><name>reloid</name></expr></argument>, <argument><expr><name>depname</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>InvalidOid</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_TRIGGER</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>TriggerRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <ternary><condition><expr><name>relation</name></expr> ?</condition><then>
				<expr><call><name>get_trigger_oid</name><argument_list>(<argument><expr><name>reloid</name></expr></argument>, <argument><expr><name>depname</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>InvalidOid</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_TABCONSTRAINT</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>ConstraintRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <ternary><condition><expr><name>relation</name></expr> ?</condition><then>
				<expr><call><name>get_relation_constraint_oid</name><argument_list>(<argument><expr><name>reloid</name></expr></argument>, <argument><expr><name>depname</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr> </then><else>:
				<expr><name>InvalidOid</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_POLICY</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>PolicyRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <ternary><condition><expr><name>relation</name></expr> ?</condition><then>
				<expr><call><name>get_relation_policy_oid</name><argument_list>(<argument><expr><name>reloid</name></expr></argument>, <argument><expr><name>depname</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr> </then><else>:
				<expr><name>InvalidOid</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized objtype: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/* Avoid relcache leak when object not found. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>relation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>relation</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>		<comment type="block">/* department of accident prevention */</comment>
		<return>return <expr><name>address</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Done. */</comment>
	<expr_stmt><expr><operator>*</operator><name>relp</name> <operator>=</operator> <name>relation</name></expr>;</expr_stmt>
	<return>return <expr><name>address</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find the ObjectAddress for an attribute.
 */</comment>
<function><type><specifier>static</specifier> <name>ObjectAddress</name></type>
<name>get_object_address_attribute</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
							 <parameter><decl><type><name>Relation</name> <modifier>*</modifier></type><name>relp</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>,
							 <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>relname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>reloid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>relation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attnum</name></decl>;</decl_stmt>

	<comment type="block">/* Extract relation name and open relation. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"column name must be qualified"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>attname</name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><call><name>list_tail</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>relname</name> <operator>=</operator> <call><name>list_truncate</name><argument_list>(<argument><expr><call><name>list_copy</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* XXX no missing_ok support here */</comment>
	<expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>relation_openrv</name><argument_list>(<argument><expr><call><name>makeRangeVarFromNameList</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>reloid</name> <operator>=</operator> <call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Look up attribute and construct return value. */</comment>
	<expr_stmt><expr><name>attnum</name> <operator>=</operator> <call><name>get_attnum</name><argument_list>(<argument><expr><name>reloid</name></expr></argument>, <argument><expr><name>attname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>attnum</name> <operator>==</operator> <name>InvalidAttrNumber</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missing_ok</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_COLUMN</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"column \"%s\" of relation \"%s\" does not exist"</literal></expr></argument>,
							<argument><expr><name>attname</name></expr></argument>, <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidAttrNumber</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>address</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>reloid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>attnum</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>relp</name> <operator>=</operator> <name>relation</name></expr>;</expr_stmt>
	<return>return <expr><name>address</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find the ObjectAddress for an attribute's default value.
 */</comment>
<function><type><specifier>static</specifier> <name>ObjectAddress</name></type>
<name>get_object_address_attrdef</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
						   <parameter><decl><type><name>Relation</name> <modifier>*</modifier></type><name>relp</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>,
						   <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>relname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>reloid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>relation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>defoid</name></decl>;</decl_stmt>

	<comment type="block">/* Extract relation name and open relation. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"column name must be qualified"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>attname</name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>llast</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>relname</name> <operator>=</operator> <call><name>list_truncate</name><argument_list>(<argument><expr><call><name>list_copy</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* XXX no missing_ok support here */</comment>
	<expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>relation_openrv</name><argument_list>(<argument><expr><call><name>makeRangeVarFromNameList</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>reloid</name> <operator>=</operator> <call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Look up attribute number and scan pg_attrdef to find its tuple */</comment>
	<expr_stmt><expr><name>attnum</name> <operator>=</operator> <call><name>get_attnum</name><argument_list>(<argument><expr><name>reloid</name></expr></argument>, <argument><expr><name>attname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>defoid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>attnum</name> <operator>!=</operator> <name>InvalidAttrNumber</name> <operator>&amp;&amp;</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>constr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Relation</name></type>	<name>attrdef</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>attrdef</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>AttrDefaultRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
					<argument><expr><name>Anum_pg_attrdef_adrelid</name></expr></argument>,
					<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
					<argument><expr><name>F_OIDEQ</name></expr></argument>,
					<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>reloid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
					<argument><expr><name>Anum_pg_attrdef_adnum</name></expr></argument>,
					<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
					<argument><expr><name>F_INT2EQ</name></expr></argument>,
					<argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>attrdef</name></expr></argument>, <argument><expr><name>AttrDefaultIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
								  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>defoid</name> <operator>=</operator> <call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>attrdef</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>defoid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missing_ok</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_COLUMN</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"default value for column \"%s\" of relation \"%s\" does not exist"</literal></expr></argument>,
							<argument><expr><name>attname</name></expr></argument>, <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>AttrDefaultRelationId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidAttrNumber</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>address</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>AttrDefaultRelationId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>defoid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>relp</name> <operator>=</operator> <name>relation</name></expr>;</expr_stmt>
	<return>return <expr><name>address</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find the ObjectAddress for a type or domain
 */</comment>
<function><type><specifier>static</specifier> <name>ObjectAddress</name></type>
<name>get_object_address_type</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>, <parameter><decl><type><name>TypeName</name> <modifier>*</modifier></type><name>typename</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Type</name></type>		<name>tup</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>TypeRelationId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>LookupTypeName</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>typename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missing_ok</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"type \"%s\" does not exist"</literal></expr></argument>,
							<argument><expr><call><name>TypeNameToString</name><argument_list>(<argument><expr><name>typename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>address</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>typeTypeId</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>objtype</name> <operator>==</operator> <name>OBJECT_DOMAIN</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>typtype</name> <operator>!=</operator> <name>TYPTYPE_DOMAIN</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a domain"</literal></expr></argument>,
							<argument><expr><call><name>TypeNameToString</name><argument_list>(<argument><expr><name>typename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>address</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find the ObjectAddress for an opclass or opfamily.
 */</comment>
<function><type><specifier>static</specifier> <name>ObjectAddress</name></type>
<name>get_object_address_opcf</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>amoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>

	<comment type="block">/* XXX no missing_ok support here */</comment>
	<expr_stmt><expr><name>amoid</name> <operator>=</operator> <call><name>get_index_am_oid</name><argument_list>(<argument><expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>list_copy_tail</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>objtype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OBJECT_OPCLASS</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>OperatorClassRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_opclass_oid</name><argument_list>(<argument><expr><name>amoid</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_OPFAMILY</name></expr>:</case>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>OperatorFamilyRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_opfamily_oid</name><argument_list>(<argument><expr><name>amoid</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized objtype: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* placate compiler, which doesn't know elog won't return */</comment>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<return>return <expr><name>address</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find the ObjectAddress for an opclass/opfamily member.
 *
 * (The returned address corresponds to a pg_amop/pg_amproc object).
 */</comment>
<function><type><specifier>static</specifier> <name>ObjectAddress</name></type>
<name>get_object_address_opf_member</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>,
							  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>famaddr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TypeName</name>   <modifier>*</modifier></type><name><name>typenames</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name><name>typeoids</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>membernum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * The last element of the object list contains the strategy or procedure
	 * number.  We need to strip that out before getting the opclass/family
	 * address.  The rest can be used directly by get_object_address_opcf().
	 */</comment>
	<expr_stmt><expr><name>membernum</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>llast</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>list_truncate</name><argument_list>(<argument><expr><call><name>list_copy</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* no missing_ok support here */</comment>
	<expr_stmt><expr><name>famaddr</name> <operator>=</operator> <call><name>get_object_address_opcf</name><argument_list>(<argument><expr><name>OBJECT_OPFAMILY</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* find out left/right type names and OIDs */</comment>
	<expr_stmt><expr><name><name>typenames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>typenames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>typeoids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>typeoids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>lsecond(object)</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>typaddr</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>typenames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lfirst_node</name><argument_list>(<argument><expr><name>TypeName</name></expr></argument>, <argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>typaddr</name> <operator>=</operator> <call><name>get_object_address_type</name><argument_list>(<argument><expr><name>OBJECT_TYPE</name></expr></argument>, <argument><expr><name><name>typenames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>typeoids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>typaddr</name><operator>.</operator><name>objectId</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block>

	<switch>switch <condition>(<expr><name>objtype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OBJECT_AMOP</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tp</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>AccessMethodOperatorRelationId</name></expr></argument>,
								 <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>SearchSysCache4</name><argument_list>(<argument><expr><name>AMOPSTRATEGY</name></expr></argument>,
									 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>famaddr</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>typeoids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>typeoids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>membernum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missing_ok</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator %d (%s, %s) of %s does not exist"</literal></expr></argument>,
										<argument><expr><name>membernum</name></expr></argument>,
										<argument><expr><call><name>TypeNameToString</name><argument_list>(<argument><expr><name><name>typenames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>TypeNameToString</name><argument_list>(<argument><expr><name><name>typenames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>getObjectDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>famaddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>OBJECT_AMPROC</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tp</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>AccessMethodProcedureRelationId</name></expr></argument>,
								 <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>SearchSysCache4</name><argument_list>(<argument><expr><name>AMPROCNUM</name></expr></argument>,
									 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>famaddr</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>typeoids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>typeoids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>membernum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missing_ok</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function %d (%s, %s) of %s does not exist"</literal></expr></argument>,
										<argument><expr><name>membernum</name></expr></argument>,
										<argument><expr><call><name>TypeNameToString</name><argument_list>(<argument><expr><name><name>typenames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>TypeNameToString</name><argument_list>(<argument><expr><name><name>typenames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>getObjectDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>famaddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized objtype: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<return>return <expr><name>address</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find the ObjectAddress for a user mapping.
 */</comment>
<function><type><specifier>static</specifier> <name>ObjectAddress</name></type>
<name>get_object_address_usermapping</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>userid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>username</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>servername</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ForeignServer</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>UserMappingRelationId</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* fetch string names from input lists, for error messages */</comment>
	<expr_stmt><expr><name>username</name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>servername</name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* look up pg_authid OID of mapped user; InvalidOid if PUBLIC */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><literal type="string">"public"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>userid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>AUTHNAME</name></expr></argument>,
							 <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missing_ok</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"user mapping for user \"%s\" on server \"%s\" does not exist"</literal></expr></argument>,
								<argument><expr><name>username</name></expr></argument>, <argument><expr><name>servername</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><name>address</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>userid</name> <operator>=</operator> <call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Now look up the pg_user_mapping tuple */</comment>
	<expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>GetForeignServerByName</name><argument_list>(<argument><expr><name>servername</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>server</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missing_ok</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"server \"%s\" does not exist"</literal></expr></argument>, <argument><expr><name>servername</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>address</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>SearchSysCache2</name><argument_list>(<argument><expr><name>USERMAPPINGUSERSERVER</name></expr></argument>,
						 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>userid</name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>serverid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missing_ok</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"user mapping for user \"%s\" on server \"%s\" does not exist"</literal></expr></argument>,
							<argument><expr><name>username</name></expr></argument>, <argument><expr><name>servername</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>address</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>address</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find the ObjectAddress for a publication relation.  The first element of
 * the object parameter is the relation name, the second is the
 * publication name.
 */</comment>
<function><type><specifier>static</specifier> <name>ObjectAddress</name></type>
<name>get_object_address_publication_rel</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
								   <parameter><decl><type><name>Relation</name> <modifier>*</modifier></type><name>relp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>relation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>relname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pubname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Publication</name> <modifier>*</modifier></type><name>pub</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>PublicationRelRelationId</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>relname</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>relation_openrv_extended</name><argument_list>(<argument><expr><call><name>makeRangeVarFromNameList</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><name>AccessShareLock</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>relation</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>address</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* fetch publication name from input list */</comment>
	<expr_stmt><expr><name>pubname</name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Now look up the pg_publication tuple */</comment>
	<expr_stmt><expr><name>pub</name> <operator>=</operator> <call><name>GetPublicationByName</name><argument_list>(<argument><expr><name>pubname</name></expr></argument>, <argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pub</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>address</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Find the publication relation mapping in syscache. */</comment>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator>
		<call><name>GetSysCacheOid2</name><argument_list>(<argument><expr><name>PUBLICATIONRELMAP</name></expr></argument>,
						<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>pub</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missing_ok</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"publication relation \"%s\" in publication \"%s\" does not exist"</literal></expr></argument>,
							<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubname</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>address</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>relp</name> <operator>=</operator> <name>relation</name></expr>;</expr_stmt>
	<return>return <expr><name>address</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find the ObjectAddress for a default ACL.
 */</comment>
<function><type><specifier>static</specifier> <name>ObjectAddress</name></type>
<name>get_object_address_defacl</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>userid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>schemaid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>username</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>objtype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>objtype_str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>DefaultAclRelationId</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * First figure out the textual attributes so that they can be used for
	 * error reporting.
	 */</comment>
	<expr_stmt><expr><name>username</name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>schema</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>lthird</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>schema</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * Decode defaclobjtype.  Only first char is considered; the rest of the
	 * string, if any, is blissfully ignored.
	 */</comment>
	<expr_stmt><expr><name>objtype</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>objtype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DEFACLOBJ_RELATION</name></expr>:</case>
			<expr_stmt><expr><name>objtype_str</name> <operator>=</operator> <literal type="string">"tables"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DEFACLOBJ_SEQUENCE</name></expr>:</case>
			<expr_stmt><expr><name>objtype_str</name> <operator>=</operator> <literal type="string">"sequences"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DEFACLOBJ_FUNCTION</name></expr>:</case>
			<expr_stmt><expr><name>objtype_str</name> <operator>=</operator> <literal type="string">"functions"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DEFACLOBJ_TYPE</name></expr>:</case>
			<expr_stmt><expr><name>objtype_str</name> <operator>=</operator> <literal type="string">"types"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DEFACLOBJ_NAMESPACE</name></expr>:</case>
			<expr_stmt><expr><name>objtype_str</name> <operator>=</operator> <literal type="string">"schemas"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unrecognized default ACL object type \"%c\""</literal></expr></argument>, <argument><expr><name>objtype</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Valid object types are \"%c\", \"%c\", \"%c\", \"%c\", \"%c\"."</literal></expr></argument>,
							 <argument><expr><name>DEFACLOBJ_RELATION</name></expr></argument>,
							 <argument><expr><name>DEFACLOBJ_SEQUENCE</name></expr></argument>,
							 <argument><expr><name>DEFACLOBJ_FUNCTION</name></expr></argument>,
							 <argument><expr><name>DEFACLOBJ_TYPE</name></expr></argument>,
							 <argument><expr><name>DEFACLOBJ_NAMESPACE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Look up user ID.  Behave as "default ACL not found" if the user doesn't
	 * exist.
	 */</comment>
	<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>AUTHNAME</name></expr></argument>,
						 <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>not_found</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>userid</name> <operator>=</operator> <call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If a schema name was given, look up its OID.  If it doesn't exist,
	 * behave as "default ACL not found".
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>schema</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>schemaid</name> <operator>=</operator> <call><name>get_namespace_oid</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>schemaid</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>not_found</name>;</goto></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>schemaid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* Finally, look up the pg_default_acl object */</comment>
	<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>SearchSysCache3</name><argument_list>(<argument><expr><name>DEFACLROLENSPOBJ</name></expr></argument>,
						 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>userid</name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>schemaid</name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><call><name>CharGetDatum</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>not_found</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>address</name></expr>;</return>

<label><name>not_found</name>:</label>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missing_ok</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>schema</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"default ACL for user \"%s\" in schema \"%s\" on %s does not exist"</literal></expr></argument>,
							<argument><expr><name>username</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>objtype_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"default ACL for user \"%s\" on %s does not exist"</literal></expr></argument>,
							<argument><expr><name>username</name></expr></argument>, <argument><expr><name>objtype_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>address</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert an array of TEXT into a List of string Values, as emitted by the
 * parser, which is what get_object_address uses as input.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>textarray_to_strvaluelist</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>arr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>elems</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nelems</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>,
					  <argument><expr><operator>&amp;</operator><name>elems</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nulls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nelems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nelems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"name or argument lists may not contain nulls"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * SQL-callable version of get_object_address
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_get_object_address</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ttype</name> <init>= <expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>namearr</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>argsarr</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>itype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectType</name></type>	<name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TypeName</name>   <modifier>*</modifier></type><name>typename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>args</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>objnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>htup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>relation</name></decl>;</decl_stmt>

	<comment type="block">/* Decode object type, raise error if unknown */</comment>
	<expr_stmt><expr><name>itype</name> <operator>=</operator> <call><name>read_objtype_from_string</name><argument_list>(<argument><expr><name>ttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>itype</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsupported object type \"%s\""</literal></expr></argument>, <argument><expr><name>ttype</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>ObjectType</name><operator>)</operator> <name>itype</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Convert the text array to the representation appropriate for the given
	 * object type.  Most use a simple string Values list, but there are some
	 * exceptions.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBJECT_TYPE</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>OBJECT_DOMAIN</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>OBJECT_CAST</name> <operator>||</operator>
		<name>type</name> <operator>==</operator> <name>OBJECT_TRANSFORM</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>OBJECT_DOMCONSTRAINT</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>elems</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>nelems</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>namearr</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name>elems</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nulls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nelems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>nelems</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"name list length must be exactly %d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"name or argument lists may not contain nulls"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>typename</name> <operator>=</operator> <call><name>typeStringToTypeName</name><argument_list>(<argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBJECT_LARGEOBJECT</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>elems</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>nelems</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>namearr</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name>elems</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nulls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nelems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>nelems</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"name list length must be exactly %d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"large object OID may not be null"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>objnode</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeFloat</name><argument_list>(<argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>textarray_to_strvaluelist</name><argument_list>(<argument><expr><name>namearr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"name list length must be at least %d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * If args are given, decode them according to the object type.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBJECT_AGGREGATE</name> <operator>||</operator>
		<name>type</name> <operator>==</operator> <name>OBJECT_FUNCTION</name> <operator>||</operator>
		<name>type</name> <operator>==</operator> <name>OBJECT_PROCEDURE</name> <operator>||</operator>
		<name>type</name> <operator>==</operator> <name>OBJECT_ROUTINE</name> <operator>||</operator>
		<name>type</name> <operator>==</operator> <name>OBJECT_OPERATOR</name> <operator>||</operator>
		<name>type</name> <operator>==</operator> <name>OBJECT_CAST</name> <operator>||</operator>
		<name>type</name> <operator>==</operator> <name>OBJECT_AMOP</name> <operator>||</operator>
		<name>type</name> <operator>==</operator> <name>OBJECT_AMPROC</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* in these cases, the args list must be of TypeName */</comment>
		<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>elems</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>nelems</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>argsarr</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name>elems</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nulls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nelems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>args</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nelems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"name or argument lists may not contain nulls"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>args</name></expr></argument>,
						   <argument><expr><call><name>typeStringToTypeName</name><argument_list>(<argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* For all other object types, use string Values */</comment>
		<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>textarray_to_strvaluelist</name><argument_list>(<argument><expr><name>argsarr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * get_object_address is pretty sensitive to the length of its input
	 * lists; check that they're what it wants.
	 */</comment>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OBJECT_DOMCONSTRAINT</name></expr>:</case>
		<case>case <expr><name>OBJECT_CAST</name></expr>:</case>
		<case>case <expr><name>OBJECT_USER_MAPPING</name></expr>:</case>
		<case>case <expr><name>OBJECT_PUBLICATION_REL</name></expr>:</case>
		<case>case <expr><name>OBJECT_DEFACL</name></expr>:</case>
		<case>case <expr><name>OBJECT_TRANSFORM</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"argument list length must be exactly %d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_OPFAMILY</name></expr>:</case>
		<case>case <expr><name>OBJECT_OPCLASS</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"name list length must be at least %d"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_AMOP</name></expr>:</case>
		<case>case <expr><name>OBJECT_AMPROC</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"name list length must be at least %d"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="block">/* fall through to check args length */</comment>
			<comment type="block">/* FALLTHROUGH */</comment>
		<case>case <expr><name>OBJECT_OPERATOR</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"argument list length must be exactly %d"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Now build the Node type that get_object_address() expects for the given
	 * type.
	 */</comment>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OBJECT_TABLE</name></expr>:</case>
		<case>case <expr><name>OBJECT_SEQUENCE</name></expr>:</case>
		<case>case <expr><name>OBJECT_VIEW</name></expr>:</case>
		<case>case <expr><name>OBJECT_MATVIEW</name></expr>:</case>
		<case>case <expr><name>OBJECT_INDEX</name></expr>:</case>
		<case>case <expr><name>OBJECT_FOREIGN_TABLE</name></expr>:</case>
		<case>case <expr><name>OBJECT_COLUMN</name></expr>:</case>
		<case>case <expr><name>OBJECT_ATTRIBUTE</name></expr>:</case>
		<case>case <expr><name>OBJECT_COLLATION</name></expr>:</case>
		<case>case <expr><name>OBJECT_CONVERSION</name></expr>:</case>
		<case>case <expr><name>OBJECT_STATISTIC_EXT</name></expr>:</case>
		<case>case <expr><name>OBJECT_TSPARSER</name></expr>:</case>
		<case>case <expr><name>OBJECT_TSDICTIONARY</name></expr>:</case>
		<case>case <expr><name>OBJECT_TSTEMPLATE</name></expr>:</case>
		<case>case <expr><name>OBJECT_TSCONFIGURATION</name></expr>:</case>
		<case>case <expr><name>OBJECT_DEFAULT</name></expr>:</case>
		<case>case <expr><name>OBJECT_POLICY</name></expr>:</case>
		<case>case <expr><name>OBJECT_RULE</name></expr>:</case>
		<case>case <expr><name>OBJECT_TRIGGER</name></expr>:</case>
		<case>case <expr><name>OBJECT_TABCONSTRAINT</name></expr>:</case>
		<case>case <expr><name>OBJECT_OPCLASS</name></expr>:</case>
		<case>case <expr><name>OBJECT_OPFAMILY</name></expr>:</case>
			<expr_stmt><expr><name>objnode</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>name</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_ACCESS_METHOD</name></expr>:</case>
		<case>case <expr><name>OBJECT_DATABASE</name></expr>:</case>
		<case>case <expr><name>OBJECT_EVENT_TRIGGER</name></expr>:</case>
		<case>case <expr><name>OBJECT_EXTENSION</name></expr>:</case>
		<case>case <expr><name>OBJECT_FDW</name></expr>:</case>
		<case>case <expr><name>OBJECT_FOREIGN_SERVER</name></expr>:</case>
		<case>case <expr><name>OBJECT_LANGUAGE</name></expr>:</case>
		<case>case <expr><name>OBJECT_PUBLICATION</name></expr>:</case>
		<case>case <expr><name>OBJECT_ROLE</name></expr>:</case>
		<case>case <expr><name>OBJECT_SCHEMA</name></expr>:</case>
		<case>case <expr><name>OBJECT_SUBSCRIPTION</name></expr>:</case>
		<case>case <expr><name>OBJECT_TABLESPACE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"name list length must be exactly %d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>objnode</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_TYPE</name></expr>:</case>
		<case>case <expr><name>OBJECT_DOMAIN</name></expr>:</case>
			<expr_stmt><expr><name>objnode</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>typename</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_CAST</name></expr>:</case>
		<case>case <expr><name>OBJECT_DOMCONSTRAINT</name></expr>:</case>
		<case>case <expr><name>OBJECT_TRANSFORM</name></expr>:</case>
			<expr_stmt><expr><name>objnode</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_PUBLICATION_REL</name></expr>:</case>
			<expr_stmt><expr><name>objnode</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_USER_MAPPING</name></expr>:</case>
			<expr_stmt><expr><name>objnode</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_DEFACL</name></expr>:</case>
			<expr_stmt><expr><name>objnode</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lcons</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_AMOP</name></expr>:</case>
		<case>case <expr><name>OBJECT_AMPROC</name></expr>:</case>
			<expr_stmt><expr><name>objnode</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_FUNCTION</name></expr>:</case>
		<case>case <expr><name>OBJECT_PROCEDURE</name></expr>:</case>
		<case>case <expr><name>OBJECT_ROUTINE</name></expr>:</case>
		<case>case <expr><name>OBJECT_AGGREGATE</name></expr>:</case>
		<case>case <expr><name>OBJECT_OPERATOR</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ObjectWithArgs</name> <modifier>*</modifier></type><name>owa</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ObjectWithArgs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>owa</name><operator>-&gt;</operator><name>objname</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>owa</name><operator>-&gt;</operator><name>objargs</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>objnode</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>owa</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
		<case>case <expr><name>OBJECT_LARGEOBJECT</name></expr>:</case>
			<comment type="block">/* already handled above */</comment>
			<break>break;</break>
			<comment type="block">/* no default, to let compiler warn about missing case */</comment>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>objnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized object type: %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>get_object_address</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>objnode</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We don't need the relcache entry, thank you very much */</comment>
	<if_stmt><if>if <condition>(<expr><name>relation</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"classid"</literal></expr></argument>,
					   <argument><expr><name>OIDOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"objid"</literal></expr></argument>,
					   <argument><expr><name>OIDOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"objsubid"</literal></expr></argument>,
					   <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>classId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>objectSubId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>htup</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>htup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check ownership of an object previously identified by get_object_address.
 */</comment>
<function><type><name>void</name></type>
<name>check_object_ownership</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>roleid</name></decl></parameter>, <parameter><decl><type><name>ObjectType</name></type> <name>objtype</name></decl></parameter>, <parameter><decl><type><name>ObjectAddress</name></type> <name>address</name></decl></parameter>,
					   <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>objtype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OBJECT_INDEX</name></expr>:</case>
		<case>case <expr><name>OBJECT_SEQUENCE</name></expr>:</case>
		<case>case <expr><name>OBJECT_TABLE</name></expr>:</case>
		<case>case <expr><name>OBJECT_VIEW</name></expr>:</case>
		<case>case <expr><name>OBJECT_MATVIEW</name></expr>:</case>
		<case>case <expr><name>OBJECT_FOREIGN_TABLE</name></expr>:</case>
		<case>case <expr><name>OBJECT_COLUMN</name></expr>:</case>
		<case>case <expr><name>OBJECT_RULE</name></expr>:</case>
		<case>case <expr><name>OBJECT_TRIGGER</name></expr>:</case>
		<case>case <expr><name>OBJECT_POLICY</name></expr>:</case>
		<case>case <expr><name>OBJECT_TABCONSTRAINT</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_class_ownercheck</name><argument_list>(<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_DATABASE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_database_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_TYPE</name></expr>:</case>
		<case>case <expr><name>OBJECT_DOMAIN</name></expr>:</case>
		<case>case <expr><name>OBJECT_ATTRIBUTE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_type_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error_type</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_DOMCONSTRAINT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>contypid</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>CONSTROID</name></expr></argument>,
										<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"constraint with OID %u does not exist"</literal></expr></argument>,
						 <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>contypid</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Form_pg_constraint</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>contypid</name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * Fallback to type ownership check in this case as this is
				 * what domain constraints rely on.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_type_ownercheck</name><argument_list>(<argument><expr><name>contypid</name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>aclcheck_error_type</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>contypid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>OBJECT_AGGREGATE</name></expr>:</case>
		<case>case <expr><name>OBJECT_FUNCTION</name></expr>:</case>
		<case>case <expr><name>OBJECT_PROCEDURE</name></expr>:</case>
		<case>case <expr><name>OBJECT_ROUTINE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_proc_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><operator>(</operator><call><name>castNode</name><argument_list>(<argument><expr><name>ObjectWithArgs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>objname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_OPERATOR</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_oper_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><operator>(</operator><call><name>castNode</name><argument_list>(<argument><expr><name>ObjectWithArgs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>objname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_SCHEMA</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_namespace_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_COLLATION</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_collation_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_CONVERSION</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_conversion_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_EXTENSION</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_extension_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_FDW</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_foreign_data_wrapper_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_FOREIGN_SERVER</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_foreign_server_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_EVENT_TRIGGER</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_event_trigger_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_LANGUAGE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_language_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_OPCLASS</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_opclass_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_OPFAMILY</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_opfamily_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_LARGEOBJECT</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lo_compat_privileges</name> <operator>&amp;&amp;</operator>
				<operator>!</operator><call><name>pg_largeobject_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be owner of large object %u"</literal></expr></argument>,
								<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_CAST</name></expr>:</case>
			<block>{<block_content>
				<comment type="block">/* We can only check permissions on the source/target types */</comment>
				<decl_stmt><decl><type><name>TypeName</name>   <modifier>*</modifier></type><name>sourcetype</name> <init>= <expr><call><name>linitial_node</name><argument_list>(<argument><expr><name>TypeName</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>TypeName</name>   <modifier>*</modifier></type><name>targettype</name> <init>= <expr><call><name>lsecond_node</name><argument_list>(<argument><expr><name>TypeName</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>sourcetypeid</name> <init>= <expr><call><name>typenameTypeId</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sourcetype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>targettypeid</name> <init>= <expr><call><name>typenameTypeId</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>targettype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_type_ownercheck</name><argument_list>(<argument><expr><name>sourcetypeid</name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call>
					<operator>&amp;&amp;</operator> <operator>!</operator><call><name>pg_type_ownercheck</name><argument_list>(<argument><expr><name>targettypeid</name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be owner of type %s or type %s"</literal></expr></argument>,
									<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>sourcetypeid</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>targettypeid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>OBJECT_PUBLICATION</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_publication_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_SUBSCRIPTION</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_subscription_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_TRANSFORM</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>TypeName</name>   <modifier>*</modifier></type><name>typename</name> <init>= <expr><call><name>linitial_node</name><argument_list>(<argument><expr><name>TypeName</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>typeid</name> <init>= <expr><call><name>typenameTypeId</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>typename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_type_ownercheck</name><argument_list>(<argument><expr><name>typeid</name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>aclcheck_error_type</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>typeid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>OBJECT_TABLESPACE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_tablespace_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_TSDICTIONARY</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_ts_dict_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_TSCONFIGURATION</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_ts_config_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>,
							   <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_ROLE</name></expr>:</case>

			<comment type="block">/*
			 * We treat roles as being "owned" by those with CREATEROLE priv,
			 * except that superusers are only owned by superusers.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>superuser_arg</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser_arg</name><argument_list>(<argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be superuser"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_createrole_privilege</name><argument_list>(<argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must have CREATEROLE privilege"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_TSPARSER</name></expr>:</case>
		<case>case <expr><name>OBJECT_TSTEMPLATE</name></expr>:</case>
		<case>case <expr><name>OBJECT_ACCESS_METHOD</name></expr>:</case>
			<comment type="block">/* We treat these object types as being owned by superusers */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser_arg</name><argument_list>(<argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be superuser"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>OBJECT_STATISTIC_EXT</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_statistics_object_ownercheck</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>roleid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>aclcheck_error_type</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized object type: %d"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * get_object_namespace
 *
 * Find the schema containing the specified object.  For non-schema objects,
 * this function returns InvalidOid.
 */</comment>
<function><type><name>Oid</name></type>
<name>get_object_namespace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>cache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>oid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectPropertyType</name> <modifier>*</modifier></type><name>property</name></decl>;</decl_stmt>

	<comment type="block">/* If not owned by a namespace, just return InvalidOid. */</comment>
	<expr_stmt><expr><name>property</name> <operator>=</operator> <call><name>get_object_property_data</name><argument_list>(<argument><expr><name><name>address</name><operator>-&gt;</operator><name>classId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>property</name><operator>-&gt;</operator><name>attnum_namespace</name></name> <operator>==</operator> <name>InvalidAttrNumber</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>InvalidOid</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Currently, we can only handle object types with system caches. */</comment>
	<expr_stmt><expr><name>cache</name> <operator>=</operator> <name><name>property</name><operator>-&gt;</operator><name>oid_catcache_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>cache</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Fetch tuple from syscache and extract namespace attribute. */</comment>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>address</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for cache %d oid %u"</literal></expr></argument>,
			 <argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>address</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>oid</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>cache</name></expr></argument>,
										   <argument><expr><name>tuple</name></expr></argument>,
										   <argument><expr><name><name>property</name><operator>-&gt;</operator><name>attnum_namespace</name></name></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>oid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return ObjectType for the given object type as given by
 * getObjectTypeDescription; if no valid ObjectType code exists, but it's a
 * possible output type from getObjectTypeDescription, return -1.
 * Otherwise, an error is thrown.
 */</comment>
<function><type><name>int</name></type>
<name>read_objtype_from_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>objtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>ObjectTypeMap</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ObjectTypeMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tm_name</name></expr></argument>, <argument><expr><name>objtype</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>ObjectTypeMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tm_type</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unrecognized object type \"%s\""</literal></expr></argument>, <argument><expr><name>objtype</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>					<comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Interfaces to reference fields of ObjectPropertyType
 */</comment>
<function><type><name>Oid</name></type>
<name>get_object_oid_index</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectPropertyType</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>get_object_property_data</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>prop</name><operator>-&gt;</operator><name>oid_index_oid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>get_object_catcache_oid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectPropertyType</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>get_object_property_data</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>prop</name><operator>-&gt;</operator><name>oid_catcache_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>get_object_catcache_name</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectPropertyType</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>get_object_property_data</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>prop</name><operator>-&gt;</operator><name>name_catcache_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AttrNumber</name></type>
<name>get_object_attnum_name</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectPropertyType</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>get_object_property_data</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>prop</name><operator>-&gt;</operator><name>attnum_name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AttrNumber</name></type>
<name>get_object_attnum_namespace</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectPropertyType</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>get_object_property_data</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>prop</name><operator>-&gt;</operator><name>attnum_namespace</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AttrNumber</name></type>
<name>get_object_attnum_owner</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectPropertyType</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>get_object_property_data</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>prop</name><operator>-&gt;</operator><name>attnum_owner</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AttrNumber</name></type>
<name>get_object_attnum_acl</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectPropertyType</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>get_object_property_data</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>prop</name><operator>-&gt;</operator><name>attnum_acl</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get_object_type
 *
 * Return the object type associated with a given object.  This routine
 * is primarily used to determine the object type to mention in ACL check
 * error messages, so it's desirable for it to avoid failing.
 */</comment>
<function><type><name>ObjectType</name></type>
<name>get_object_type</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>object_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectPropertyType</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>get_object_property_data</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>objtype</name></name> <operator>==</operator> <name>OBJECT_TABLE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If the property data says it's a table, dig a little deeper to get
		 * the real relation kind, so that callers can produce more precise
		 * error messages.
		 */</comment>
		<return>return <expr><call><name>get_relkind_objtype</name><argument_list>(<argument><expr><call><name>get_rel_relkind</name><argument_list>(<argument><expr><name>object_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name><name>prop</name><operator>-&gt;</operator><name>objtype</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>get_object_namensp_unique</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectPropertyType</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>get_object_property_data</name><argument_list>(<argument><expr><name>class_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>prop</name><operator>-&gt;</operator><name>is_nsp_name_unique</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return whether we have useful data for the given object class in the
 * ObjectProperty table.
 */</comment>
<function><type><name>bool</name></type>
<name>is_objectclass_supported</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>index</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>ObjectProperty</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ObjectProperty</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>class_oid</name> <operator>==</operator> <name>class_id</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find ObjectProperty structure by class_id.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ObjectPropertyType</name> <modifier>*</modifier></type>
<name>get_object_property_data</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ObjectPropertyType</name> <modifier>*</modifier></type><name>prop_last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>index</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * A shortcut to speed up multiple consecutive lookups of a particular
	 * object class.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>prop_last</name> <operator>&amp;&amp;</operator> <name><name>prop_last</name><operator>-&gt;</operator><name>class_oid</name></name> <operator>==</operator> <name>class_id</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>prop_last</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>ObjectProperty</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ObjectProperty</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>class_oid</name> <operator>==</operator> <name>class_id</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>prop_last</name> <operator>=</operator> <operator>&amp;</operator><name><name>ObjectProperty</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
			<return>return <expr><operator>&amp;</operator><name><name>ObjectProperty</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"unrecognized class ID: %u"</literal></expr></argument>, <argument><expr><name>class_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>				<comment type="block">/* keep MSC compiler happy */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Return a copy of the tuple for the object with the given object OID, from
 * the given catalog (which must have been opened by the caller and suitably
 * locked).  NULL is returned if the OID is not found.
 *
 * We try a syscache first, if available.
 */</comment>
<function><type><name>HeapTuple</name></type>
<name>get_catalog_object_by_oid</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>objectId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>classId</name> <init>= <expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>oidCacheId</name> <init>= <expr><call><name>get_object_catcache_oid</name><argument_list>(<argument><expr><name>classId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>oidCacheId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCacheCopy1</name><argument_list>(<argument><expr><name>oidCacheId</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* should not happen */</comment>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>oidIndexId</name> <init>= <expr><call><name>get_object_oid_index</name><argument_list>(<argument><expr><name>classId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ScanKeyData</name></type> <name>skey</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>oidIndexId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>,
					<argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
					<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
					<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>oidIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
								  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_copytuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>tuple</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * getObjectDescription: build an object description for messages
 *
 * The result is a palloc'd string.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>getObjectDescription</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buffer</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>getObjectClass</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OCLASS_CLASS</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>objectSubId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>getRelationDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* column, not whole relation */</comment>
				<decl_stmt><decl><type><name>StringInfoData</name></type> <name>rel</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getRelationDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* translator: second %s is, e.g., "table %s" */</comment>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"column %s of %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>get_attname</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>,
											 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectSubId</name></name></expr></argument>,
											 <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name><name>rel</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>rel</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_PROC</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"function %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>format_procedure</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_TYPE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"type %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_CAST</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>castDesc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>rcscan</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_cast</name></type> <name>castForm</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>castDesc</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>CastRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
							<argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
							<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
							<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>rcscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>castDesc</name></expr></argument>, <argument><expr><name>CastOidIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
											<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>rcscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for cast %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>castForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_cast</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cast from %s to %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>castForm</name><operator>-&gt;</operator><name>castsource</name></name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>castForm</name><operator>-&gt;</operator><name>casttarget</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>rcscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>castDesc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_COLLATION</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>collTup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_collation</name></type> <name>coll</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>collTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>COLLOID</name></expr></argument>,
										  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>collTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for collation %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>coll</name> <operator>=</operator> <operator>(</operator><name>Form_pg_collation</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>collTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Qualify the name if not visible in search path */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>CollationIsVisible</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>coll</name><operator>-&gt;</operator><name>collnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"collation %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>,
															<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>coll</name><operator>-&gt;</operator><name>collname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>collTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_CONSTRAINT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>conTup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_constraint</name></type> <name>con</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>conTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>CONSTROID</name></expr></argument>,
										 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>conTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for constraint %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>con</name> <operator>=</operator> <operator>(</operator><name>Form_pg_constraint</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>conTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>conrelid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>StringInfoData</name></type> <name>rel</name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>getRelationDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>conrelid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* translator: second %s is, e.g., "table %s" */</comment>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"constraint %s on %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>conname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rel</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>rel</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"constraint %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>conname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>conTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_CONVERSION</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>conTup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_conversion</name></type> <name>conv</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>conTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>CONVOID</name></expr></argument>,
										 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>conTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for conversion %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>conv</name> <operator>=</operator> <operator>(</operator><name>Form_pg_conversion</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>conTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Qualify the name if not visible in search path */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>ConversionIsVisible</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>conv</name><operator>-&gt;</operator><name>connamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"conversion %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>,
															<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>conv</name><operator>-&gt;</operator><name>conname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>conTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_DEFAULT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>attrdefDesc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>adscan</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_attrdef</name></type> <name>attrdef</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>colobject</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>attrdefDesc</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>AttrDefaultRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
							<argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
							<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
							<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>adscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>attrdefDesc</name></expr></argument>, <argument><expr><name>AttrDefaultOidIndexId</name></expr></argument>,
											<argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>adscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for attrdef %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>attrdef</name> <operator>=</operator> <operator>(</operator><name>Form_pg_attrdef</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>colobject</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>colobject</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name><name>attrdef</name><operator>-&gt;</operator><name>adrelid</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>colobject</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name><name>attrdef</name><operator>-&gt;</operator><name>adnum</name></name></expr>;</expr_stmt>

				<comment type="block">/* translator: %s is typically "column %s of table %s" */</comment>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"default value for %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>getObjectDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>colobject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>adscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>attrdefDesc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_LANGUAGE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"language %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>get_language_name</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_LARGEOBJECT</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"large object %u"</literal></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_OPERATOR</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"operator %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>format_operator</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_OPCLASS</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>opcTup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_opclass</name></type> <name>opcForm</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>amTup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_am</name></type>	<name>amForm</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>opcTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>CLAOID</name></expr></argument>,
										 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>opcTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for opclass %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>opcForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_opclass</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>opcTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>amTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>AMOID</name></expr></argument>,
										<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>opcForm</name><operator>-&gt;</operator><name>opcmethod</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>amTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for access method %u"</literal></expr></argument>,
						 <argument><expr><name><name>opcForm</name><operator>-&gt;</operator><name>opcmethod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>amForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_am</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>amTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Qualify the name if not visible in search path */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>OpclassIsVisible</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>opcForm</name><operator>-&gt;</operator><name>opcnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"operator class %s for access method %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>,
															<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>opcForm</name><operator>-&gt;</operator><name>opcname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>amForm</name><operator>-&gt;</operator><name>amname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>amTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>opcTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_OPFAMILY</name></expr>:</case>
			<expr_stmt><expr><call><name>getOpFamilyDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_AM</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>AMOID</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for access method %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"access method %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Form_pg_am</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>amname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_AMOP</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>amopDesc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>amscan</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_amop</name></type> <name>amopForm</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>StringInfoData</name></type> <name>opfam</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>amopDesc</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>AccessMethodOperatorRelationId</name></expr></argument>,
									 <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
							<argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
							<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
							<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>amscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>amopDesc</name></expr></argument>, <argument><expr><name>AccessMethodOperatorOidIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
											<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>amscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for amop entry %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>amopForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_amop</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opfam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getOpFamilyDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opfam</name></expr></argument>, <argument><expr><name><name>amopForm</name><operator>-&gt;</operator><name>amopfamily</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*------
				   translator: %d is the operator strategy (a number), the
				   first two %s's are data type names, the third %s is the
				   description of the operator family, and the last %s is the
				   textual form of the operator with arguments.  */</comment>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"operator %d (%s, %s) of %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name><name>amopForm</name><operator>-&gt;</operator><name>amopstrategy</name></name></expr></argument>,
								 <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>amopForm</name><operator>-&gt;</operator><name>amoplefttype</name></name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>amopForm</name><operator>-&gt;</operator><name>amoprighttype</name></name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name><name>opfam</name><operator>.</operator><name>data</name></name></expr></argument>,
								 <argument><expr><call><name>format_operator</name><argument_list>(<argument><expr><name><name>amopForm</name><operator>-&gt;</operator><name>amopopr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>opfam</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>amscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>amopDesc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_AMPROC</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>amprocDesc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>amscan</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_amproc</name></type> <name>amprocForm</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>StringInfoData</name></type> <name>opfam</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>amprocDesc</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>AccessMethodProcedureRelationId</name></expr></argument>,
									   <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
							<argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
							<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
							<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>amscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>amprocDesc</name></expr></argument>, <argument><expr><name>AccessMethodProcedureOidIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
											<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>amscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for amproc entry %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>amprocForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_amproc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opfam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getOpFamilyDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opfam</name></expr></argument>, <argument><expr><name><name>amprocForm</name><operator>-&gt;</operator><name>amprocfamily</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*------
				   translator: %d is the function number, the first two %s's
				   are data type names, the third %s is the description of the
				   operator family, and the last %s is the textual form of the
				   function with arguments.  */</comment>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"function %d (%s, %s) of %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name><name>amprocForm</name><operator>-&gt;</operator><name>amprocnum</name></name></expr></argument>,
								 <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>amprocForm</name><operator>-&gt;</operator><name>amproclefttype</name></name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>amprocForm</name><operator>-&gt;</operator><name>amprocrighttype</name></name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name><name>opfam</name><operator>.</operator><name>data</name></name></expr></argument>,
								 <argument><expr><call><name>format_procedure</name><argument_list>(<argument><expr><name><name>amprocForm</name><operator>-&gt;</operator><name>amproc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>opfam</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>amscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>amprocDesc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_REWRITE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>ruleDesc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>rcscan</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_rewrite</name></type> <name>rule</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>StringInfoData</name></type> <name>rel</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>ruleDesc</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>RewriteRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
							<argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
							<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
							<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>rcscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>ruleDesc</name></expr></argument>, <argument><expr><name>RewriteOidIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
											<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>rcscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for rule %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>rule</name> <operator>=</operator> <operator>(</operator><name>Form_pg_rewrite</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getRelationDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><name><name>rule</name><operator>-&gt;</operator><name>ev_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* translator: second %s is, e.g., "table %s" */</comment>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"rule %s on %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>rulename</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rel</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>rel</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>rcscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>ruleDesc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_TRIGGER</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>trigDesc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>tgscan</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_trigger</name></type> <name>trig</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>StringInfoData</name></type> <name>rel</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>trigDesc</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>TriggerRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
							<argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
							<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
							<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tgscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>trigDesc</name></expr></argument>, <argument><expr><name>TriggerOidIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
											<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>tgscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for trigger %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>trig</name> <operator>=</operator> <operator>(</operator><name>Form_pg_trigger</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getRelationDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><name><name>trig</name><operator>-&gt;</operator><name>tgrelid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* translator: second %s is, e.g., "table %s" */</comment>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"trigger %s on %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>trig</name><operator>-&gt;</operator><name>tgname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rel</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>rel</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>tgscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>trigDesc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_SCHEMA</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>nspname</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nspname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for namespace %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"schema %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nspname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_STATISTIC_EXT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>stxTup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_statistic_ext</name></type> <name>stxForm</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>stxTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>STATEXTOID</name></expr></argument>,
										 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>stxTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for statistics object %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>stxForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_statistic_ext</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>stxTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Qualify the name if not visible in search path */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>StatisticsObjIsVisible</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>stxForm</name><operator>-&gt;</operator><name>stxnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"statistics object %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>,
															<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>stxForm</name><operator>-&gt;</operator><name>stxname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>stxTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_TSPARSER</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_ts_parser</name></type> <name>prsForm</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TSPARSEROID</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for text search parser %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>prsForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_ts_parser</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Qualify the name if not visible in search path */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>TSParserIsVisible</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>prsForm</name><operator>-&gt;</operator><name>prsnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"text search parser %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>,
															<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>prsForm</name><operator>-&gt;</operator><name>prsname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_TSDICT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_ts_dict</name></type> <name>dictForm</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TSDICTOID</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for text search dictionary %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>dictForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_ts_dict</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Qualify the name if not visible in search path */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>TSDictionaryIsVisible</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>dictForm</name><operator>-&gt;</operator><name>dictnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"text search dictionary %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>,
															<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>dictForm</name><operator>-&gt;</operator><name>dictname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_TSTEMPLATE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_ts_template</name></type> <name>tmplForm</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TSTEMPLATEOID</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for text search template %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>tmplForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_ts_template</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Qualify the name if not visible in search path */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>TSTemplateIsVisible</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>tmplForm</name><operator>-&gt;</operator><name>tmplnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"text search template %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>,
															<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>tmplForm</name><operator>-&gt;</operator><name>tmplname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_TSCONFIG</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_ts_config</name></type> <name>cfgForm</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TSCONFIGOID</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for text search configuration %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>cfgForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_ts_config</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Qualify the name if not visible in search path */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>TSConfigIsVisible</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>cfgForm</name><operator>-&gt;</operator><name>cfgnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"text search configuration %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>,
															<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cfgForm</name><operator>-&gt;</operator><name>cfgname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_ROLE</name></expr>:</case>
			<block>{<block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"role %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_DATABASE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>datname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>datname</name> <operator>=</operator> <call><name>get_database_name</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>datname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for database %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"database %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>datname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_TBLSPACE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tblspace</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tblspace</name> <operator>=</operator> <call><name>get_tablespace_name</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tblspace</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for tablespace %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"tablespace %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tblspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_FDW</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ForeignDataWrapper</name> <modifier>*</modifier></type><name>fdw</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>fdw</name> <operator>=</operator> <call><name>GetForeignDataWrapper</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"foreign-data wrapper %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fdw</name><operator>-&gt;</operator><name>fdwname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_FOREIGN_SERVER</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ForeignServer</name> <modifier>*</modifier></type><name>srv</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>srv</name> <operator>=</operator> <call><name>GetForeignServer</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"server %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>servername</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_USER_MAPPING</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>useid</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>usename</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_user_mapping</name></type> <name>umform</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ForeignServer</name> <modifier>*</modifier></type><name>srv</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>USERMAPPINGOID</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for user mapping %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>umform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_user_mapping</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>useid</name> <operator>=</operator> <name><name>umform</name><operator>-&gt;</operator><name>umuser</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>srv</name> <operator>=</operator> <call><name>GetForeignServer</name><argument_list>(<argument><expr><name><name>umform</name><operator>-&gt;</operator><name>umserver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>useid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>usename</name> <operator>=</operator> <call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name>useid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>usename</name> <operator>=</operator> <literal type="string">"public"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"user mapping for %s on server %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>usename</name></expr></argument>,
								 <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>servername</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_DEFACL</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>defaclrel</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>rcscan</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_default_acl</name></type> <name>defacl</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rolename</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>defaclrel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>DefaultAclRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
							<argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
							<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
							<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>rcscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>defaclrel</name></expr></argument>, <argument><expr><name>DefaultAclOidIndexId</name></expr></argument>,
											<argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>rcscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for default ACL %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>defacl</name> <operator>=</operator> <operator>(</operator><name>Form_pg_default_acl</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>rolename</name> <operator>=</operator> <call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name><name>defacl</name><operator>-&gt;</operator><name>defaclrole</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>defacl</name><operator>-&gt;</operator><name>defaclnamespace</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>defacl</name><operator>-&gt;</operator><name>defaclnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>nspname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<switch>switch <condition>(<expr><name><name>defacl</name><operator>-&gt;</operator><name>defaclobjtype</name></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>DEFACLOBJ_RELATION</name></expr>:</case>
						<if_stmt><if>if <condition>(<expr><name>nspname</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"default privileges on new relations belonging to role %s in schema %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>rolename</name></expr></argument>, <argument><expr><name>nspname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"default privileges on new relations belonging to role %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>rolename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
						<break>break;</break>
					<case>case <expr><name>DEFACLOBJ_SEQUENCE</name></expr>:</case>
						<if_stmt><if>if <condition>(<expr><name>nspname</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"default privileges on new sequences belonging to role %s in schema %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>rolename</name></expr></argument>, <argument><expr><name>nspname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"default privileges on new sequences belonging to role %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>rolename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
						<break>break;</break>
					<case>case <expr><name>DEFACLOBJ_FUNCTION</name></expr>:</case>
						<if_stmt><if>if <condition>(<expr><name>nspname</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"default privileges on new functions belonging to role %s in schema %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>rolename</name></expr></argument>, <argument><expr><name>nspname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"default privileges on new functions belonging to role %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>rolename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
						<break>break;</break>
					<case>case <expr><name>DEFACLOBJ_TYPE</name></expr>:</case>
						<if_stmt><if>if <condition>(<expr><name>nspname</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"default privileges on new types belonging to role %s in schema %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>rolename</name></expr></argument>, <argument><expr><name>nspname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"default privileges on new types belonging to role %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>rolename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
						<break>break;</break>
					<case>case <expr><name>DEFACLOBJ_NAMESPACE</name></expr>:</case>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>nspname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
										 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"default privileges on new schemas belonging to role %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
										 <argument><expr><name>rolename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<comment type="block">/* shouldn't get here */</comment>
						<if_stmt><if>if <condition>(<expr><name>nspname</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"default privileges belonging to role %s in schema %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>rolename</name></expr></argument>, <argument><expr><name>nspname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"default privileges belonging to role %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>rolename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
						<break>break;</break>
				</block_content>}</block></switch>

				<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>rcscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>defaclrel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_EXTENSION</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>extname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>extname</name> <operator>=</operator> <call><name>get_extension_name</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>extname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for extension %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"extension %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>extname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_EVENT_TRIGGER</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>EVENTTRIGGEROID</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for event trigger %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"event trigger %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Form_pg_event_trigger</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>evtname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_POLICY</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>policy_rel</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>sscan</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_policy</name></type> <name>form_policy</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>StringInfoData</name></type> <name>rel</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>policy_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>PolicyRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
							<argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
							<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
							<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>sscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>policy_rel</name></expr></argument>, <argument><expr><name>PolicyOidIndexId</name></expr></argument>,
										   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for policy %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>form_policy</name> <operator>=</operator> <operator>(</operator><name>Form_pg_policy</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getRelationDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><name><name>form_policy</name><operator>-&gt;</operator><name>polrelid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* translator: second %s is, e.g., "table %s" */</comment>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"policy %s on %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>form_policy</name><operator>-&gt;</operator><name>polname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rel</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>rel</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>policy_rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_PUBLICATION</name></expr>:</case>
			<block>{<block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"publication %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>get_publication_name</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_PUBLICATION_REL</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pubname</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_publication_rel</name></type> <name>prform</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>StringInfoData</name></type> <name>rel</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>PUBLICATIONREL</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for publication table %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>prform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_publication_rel</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>pubname</name> <operator>=</operator> <call><name>get_publication_name</name><argument_list>(<argument><expr><name><name>prform</name><operator>-&gt;</operator><name>prpubid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getRelationDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><name><name>prform</name><operator>-&gt;</operator><name>prrelid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* translator: first %s is, e.g., "table %s" */</comment>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"publication of %s in publication %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name><name>rel</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>pubname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>rel</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_SUBSCRIPTION</name></expr>:</case>
			<block>{<block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"subscription %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>get_subscription_name</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_TRANSFORM</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>trfTup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_transform</name></type> <name>trfForm</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>trfTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TRFOID</name></expr></argument>,
										 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>trfTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for transform %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>trfForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_transform</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>trfTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"transform for %s language %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>trfForm</name><operator>-&gt;</operator><name>trftype</name></name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>get_language_name</name><argument_list>(<argument><expr><name><name>trfForm</name><operator>-&gt;</operator><name>trflang</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>trfTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

			<comment type="block">/*
			 * There's intentionally no default: case here; we want the
			 * compiler to warn if a new OCLASS hasn't been handled above.
			 */</comment>
	</block_content>}</block></switch>

	<return>return <expr><name><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * getObjectDescriptionOids: as above, except the object is specified by Oids
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>getObjectDescriptionOids</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>classid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>objid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>classid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>objid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><call><name>getObjectDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * subroutine for getObjectDescription: describe a relation
 *
 * The result is appended to "buffer".
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>getRelationDescription</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>relTup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_class</name></type> <name>relForm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>relname</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>relTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>,
							 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>relTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for relation %u"</literal></expr></argument>, <argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>relForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>relTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Qualify the name if not visible in search path */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>RelationIsVisible</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nspname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>nspname</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>relForm</name><operator>-&gt;</operator><name>relnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>relname</name> <operator>=</operator> <call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>relForm</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>relForm</name><operator>-&gt;</operator><name>relkind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RELKIND_RELATION</name></expr>:</case>
		<case>case <expr><name>RELKIND_PARTITIONED_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"table %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_INDEX</name></expr>:</case>
		<case>case <expr><name>RELKIND_PARTITIONED_INDEX</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"index %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_SEQUENCE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"sequence %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_TOASTVALUE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"toast table %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_VIEW</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"view %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_MATVIEW</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"materialized view %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_COMPOSITE_TYPE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"composite type %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_FOREIGN_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"foreign table %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* shouldn't get here */</comment>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"relation %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>relTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * subroutine for getObjectDescription: describe an operator family
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>getOpFamilyDescription</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>opfid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>opfTup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_opfamily</name></type> <name>opfForm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>amTup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_am</name></type>	<name>amForm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>opfTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>OPFAMILYOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opfid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>opfTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for opfamily %u"</literal></expr></argument>, <argument><expr><name>opfid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>opfForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_opfamily</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>opfTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>amTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>AMOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>opfForm</name><operator>-&gt;</operator><name>opfmethod</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>amTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for access method %u"</literal></expr></argument>,
			 <argument><expr><name><name>opfForm</name><operator>-&gt;</operator><name>opfmethod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>amForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_am</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>amTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Qualify the name if not visible in search path */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>OpfamilyIsVisible</name><argument_list>(<argument><expr><name>opfid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nspname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>nspname</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>opfForm</name><operator>-&gt;</operator><name>opfnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"operator family %s for access method %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>,
												<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>opfForm</name><operator>-&gt;</operator><name>opfname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>amForm</name><operator>-&gt;</operator><name>amname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>amTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>opfTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SQL-level callable version of getObjectDescription
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_describe_object</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>classid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>objid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>objsubid</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>

	<comment type="block">/* for "pinned" items in pg_depend, return null */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>classid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>objid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>classid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>objid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>objsubid</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>description</name> <operator>=</operator> <call><name>getObjectDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SQL-level callable function to obtain object type + identity
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_identify_object</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>classid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>objid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>objsubid</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>schema_oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>objname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>htup</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>classid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>objid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>objsubid</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Construct a tuple descriptor for the result row.  This must match this
	 * function's pg_proc entry!
	 */</comment>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>,
					   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"schema"</literal></expr></argument>,
					   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>,
					   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"identity"</literal></expr></argument>,
					   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>is_objectclass_supported</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>objtup</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Relation</name></type>	<name>catalog</name> <init>= <expr><call><name>heap_open</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>objtup</name> <operator>=</operator> <call><name>get_catalog_object_by_oid</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>objtup</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>nspAttnum</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>nameAttnum</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>nspAttnum</name> <operator>=</operator> <call><name>get_object_attnum_namespace</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nspAttnum</name> <operator>!=</operator> <name>InvalidAttrNumber</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>schema_oid</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><name>objtup</name></expr></argument>, <argument><expr><name>nspAttnum</name></expr></argument>,
										  <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid null namespace in object %u/%u/%d"</literal></expr></argument>,
						 <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>, <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * We only return the object name if it can be used (together with
			 * the schema name, if any) as a unique identifier.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>get_object_namensp_unique</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>nameAttnum</name> <operator>=</operator> <call><name>get_object_attnum_name</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>nameAttnum</name> <operator>!=</operator> <name>InvalidAttrNumber</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>Datum</name></type>		<name>nameDatum</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>nameDatum</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><name>objtup</name></expr></argument>, <argument><expr><name>nameAttnum</name></expr></argument>,
											 <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid null name in object %u/%u/%d"</literal></expr></argument>,
							 <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>, <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>objname</name> <operator>=</operator> <call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><call><name>DatumGetName</name><argument_list>(<argument><expr><name>nameDatum</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* object type */</comment>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><call><name>getObjectTypeDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* schema name */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>schema_oid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema</name> <init>= <expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><name>schema_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* object name */</comment>
	<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* object identity */</comment>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><call><name>getObjectIdentity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>htup</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>htup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SQL-level callable function to obtain object type + identity
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_identify_object_as_address</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>classid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>objid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>objsubid</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>identity</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>htup</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>classid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>objid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>objsubid</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Construct a tuple descriptor for the result row.  This must match this
	 * function's pg_proc entry!
	 */</comment>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>,
					   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"object_names"</literal></expr></argument>,
					   <argument><expr><name>TEXTARRAYOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"object_args"</literal></expr></argument>,
					   <argument><expr><name>TEXTARRAYOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* object type */</comment>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><call><name>getObjectTypeDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* object identity */</comment>
	<expr_stmt><expr><name>identity</name> <operator>=</operator> <call><name>getObjectIdentityParts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>names</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* object_names */</comment>
	<if_stmt><if>if <condition>(<expr><name>names</name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>strlist_to_textarray</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>construct_empty_array</name><argument_list>(<argument><expr><name>TEXTOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* object_args */</comment>
	<if_stmt><if>if <condition>(<expr><name>args</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>strlist_to_textarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>construct_empty_array</name><argument_list>(<argument><expr><name>TEXTOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>htup</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>htup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return a palloc'ed string that describes the type of object that the
 * passed address is for.
 *
 * Keep ObjectTypeMap in sync with this.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>getObjectTypeDescription</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buffer</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>getObjectClass</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OCLASS_CLASS</name></expr>:</case>
			<expr_stmt><expr><call><name>getRelationTypeDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>,
									   <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectSubId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_PROC</name></expr>:</case>
			<expr_stmt><expr><call><name>getProcedureTypeDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_TYPE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_CAST</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"cast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_COLLATION</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"collation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_CONSTRAINT</name></expr>:</case>
			<expr_stmt><expr><call><name>getConstraintTypeDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_CONVERSION</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"conversion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_DEFAULT</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"default value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_LANGUAGE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_LARGEOBJECT</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"large object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_OPERATOR</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"operator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_OPCLASS</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"operator class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_OPFAMILY</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"operator family"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_AM</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"access method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_AMOP</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"operator of access method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_AMPROC</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"function of access method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_REWRITE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"rule"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_TRIGGER</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"trigger"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_SCHEMA</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"schema"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_STATISTIC_EXT</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"statistics object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_TSPARSER</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"text search parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_TSDICT</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"text search dictionary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_TSTEMPLATE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"text search template"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_TSCONFIG</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"text search configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_ROLE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"role"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_DATABASE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_TBLSPACE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"tablespace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_FDW</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"foreign-data wrapper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_FOREIGN_SERVER</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_USER_MAPPING</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"user mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_DEFACL</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"default acl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_EXTENSION</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_EVENT_TRIGGER</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"event trigger"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_POLICY</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"policy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_PUBLICATION</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"publication"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_PUBLICATION_REL</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"publication relation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_SUBSCRIPTION</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"subscription"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_TRANSFORM</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"transform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

			<comment type="block">/*
			 * There's intentionally no default: case here; we want the
			 * compiler to warn if a new OCLASS hasn't been handled above.
			 */</comment>
	</block_content>}</block></switch>

	<return>return <expr><name><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * subroutine for getObjectTypeDescription: describe a relation type
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>getRelationTypeDescription</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>objectSubId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>relTup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_class</name></type> <name>relForm</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>relTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>,
							 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>relTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for relation %u"</literal></expr></argument>, <argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>relForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>relTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>relForm</name><operator>-&gt;</operator><name>relkind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RELKIND_RELATION</name></expr>:</case>
		<case>case <expr><name>RELKIND_PARTITIONED_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_INDEX</name></expr>:</case>
		<case>case <expr><name>RELKIND_PARTITIONED_INDEX</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_SEQUENCE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_TOASTVALUE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"toast table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_VIEW</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"view"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_MATVIEW</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"materialized view"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_COMPOSITE_TYPE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"composite type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_FOREIGN_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"foreign table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* shouldn't get here */</comment>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"relation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>objectSubId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">" column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>relTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * subroutine for getObjectTypeDescription: describe a constraint type
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>getConstraintTypeDescription</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>constroid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>constrRel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>constrTup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_constraint</name></type> <name>constrForm</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>constrRel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>ConstraintRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>constrTup</name> <operator>=</operator> <call><name>get_catalog_object_by_oid</name><argument_list>(<argument><expr><name>constrRel</name></expr></argument>, <argument><expr><name>constroid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>constrTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for constraint %u"</literal></expr></argument>, <argument><expr><name>constroid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>constrForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_constraint</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>constrTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>constrForm</name><operator>-&gt;</operator><name>conrelid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"table constraint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>constrForm</name><operator>-&gt;</operator><name>contypid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"domain constraint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid constraint %u"</literal></expr></argument>, <argument><expr><call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>constrTup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>constrRel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * subroutine for getObjectTypeDescription: describe a procedure type
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>getProcedureTypeDescription</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>procid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>procTup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_proc</name></type> <name>procForm</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>procTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>PROCOID</name></expr></argument>,
							  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>procid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>procTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for procedure %u"</literal></expr></argument>, <argument><expr><name>procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>procForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_proc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>procTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>procForm</name><operator>-&gt;</operator><name>prokind</name></name> <operator>==</operator> <name>PROKIND_AGGREGATE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"aggregate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>procForm</name><operator>-&gt;</operator><name>prokind</name></name> <operator>==</operator> <name>PROKIND_PROCEDURE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"procedure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>						<comment type="block">/* function or window function */</comment>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>procTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Obtain a given object's identity, as a palloc'ed string.
 *
 * This is for machine consumption, so it's not translated.  All elements are
 * schema-qualified when appropriate.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>getObjectIdentity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>getObjectIdentityParts</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * As above, but more detailed.
 *
 * There are two sets of return values: the identity itself as a palloc'd
 * string is returned.  objname and objargs, if not NULL, are output parameters
 * that receive lists of C-strings that are useful to give back to
 * get_object_address() to reconstruct the ObjectAddress.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>getObjectIdentityParts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
					   <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>objname</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>objargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buffer</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Make sure that both objname and objargs were passed, or none was; and
	 * initialize them to empty lists.  For objname this is useless because it
	 * will be initialized in all cases inside the switch; but we do it anyway
	 * so that we can test below that no branch leaves it unset.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>PointerIsValid</name><argument_list>(<argument><expr><name>objname</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>PointerIsValid</name><argument_list>(<argument><expr><name>objargs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>objargs</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>getObjectClass</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OCLASS_CLASS</name></expr>:</case>
			<expr_stmt><expr><call><name>getRelationIdentity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>objectSubId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>get_attname</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectSubId</name></name></expr></argument>,
								   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">".%s"</literal></expr></argument>, <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>objname</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_PROC</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
								   <argument><expr><call><name>format_procedure_qualified</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>format_procedure_parts</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>objname</name></expr></argument>, <argument><expr><name>objargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_TYPE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>typeout</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>typeout</name> <operator>=</operator> <call><name>format_type_be_qualified</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>typeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>typeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>OCLASS_CAST</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>castRel</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_cast</name></type> <name>castForm</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>castRel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>CastRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>get_catalog_object_by_oid</name><argument_list>(<argument><expr><name>castRel</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for cast %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>castForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_cast</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"(%s AS %s)"</literal></expr></argument>,
								 <argument><expr><call><name>format_type_be_qualified</name><argument_list>(<argument><expr><name><name>castForm</name><operator>-&gt;</operator><name>castsource</name></name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>format_type_be_qualified</name><argument_list>(<argument><expr><name><name>castForm</name><operator>-&gt;</operator><name>casttarget</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>format_type_be_qualified</name><argument_list>(<argument><expr><name><name>castForm</name><operator>-&gt;</operator><name>castsource</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>objargs</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>format_type_be_qualified</name><argument_list>(<argument><expr><name><name>castForm</name><operator>-&gt;</operator><name>casttarget</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>castRel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_COLLATION</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>collTup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_collation</name></type> <name>coll</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>collTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>COLLOID</name></expr></argument>,
										  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>collTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for collation %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>coll</name> <operator>=</operator> <operator>(</operator><name>Form_pg_collation</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>collTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>get_namespace_name_or_temp</name><argument_list>(<argument><expr><name><name>coll</name><operator>-&gt;</operator><name>collnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
																  <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>coll</name><operator>-&gt;</operator><name>collname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
										  <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>coll</name><operator>-&gt;</operator><name>collname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>collTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_CONSTRAINT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>conTup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_constraint</name></type> <name>con</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>conTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>CONSTROID</name></expr></argument>,
										 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>conTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for constraint %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>con</name> <operator>=</operator> <operator>(</operator><name>Form_pg_constraint</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>conTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>conrelid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s on "</literal></expr></argument>,
									 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>conname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>getRelationIdentity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>conrelid</name></name></expr></argument>, <argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>objname</name></expr></argument>, <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>conname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>domain</name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>contypid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>domain</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>TypeRelationId</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>domain</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>contypid</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>domain</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s on %s"</literal></expr></argument>,
									 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>conname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><call><name>getObjectIdentityParts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>domain</name></expr></argument>, <argument><expr><name>objname</name></expr></argument>, <argument><expr><name>objargs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>objargs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>objargs</name></expr></argument>, <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>conname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></else></if_stmt>

				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>conTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_CONVERSION</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>conTup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_conversion</name></type> <name>conForm</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>conTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>CONVOID</name></expr></argument>,
										 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>conTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for conversion %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>conForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_conversion</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>conTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>get_namespace_name_or_temp</name><argument_list>(<argument><expr><name><name>conForm</name><operator>-&gt;</operator><name>connamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
																  <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>conForm</name><operator>-&gt;</operator><name>conname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
										  <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>conForm</name><operator>-&gt;</operator><name>conname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>conTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_DEFAULT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>attrdefDesc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>adscan</name></decl>;</decl_stmt>

				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_attrdef</name></type> <name>attrdef</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>colobject</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>attrdefDesc</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>AttrDefaultRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
							<argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
							<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
							<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>adscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>attrdefDesc</name></expr></argument>, <argument><expr><name>AttrDefaultOidIndexId</name></expr></argument>,
											<argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>adscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for attrdef %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>attrdef</name> <operator>=</operator> <operator>(</operator><name>Form_pg_attrdef</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>colobject</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>colobject</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name><name>attrdef</name><operator>-&gt;</operator><name>adrelid</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>colobject</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name><name>attrdef</name><operator>-&gt;</operator><name>adnum</name></name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"for %s"</literal></expr></argument>,
								 <argument><expr><call><name>getObjectIdentityParts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>colobject</name></expr></argument>,
														<argument><expr><name>objname</name></expr></argument>, <argument><expr><name>objargs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>adscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>attrdefDesc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_LANGUAGE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>langTup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_language</name></type> <name>langForm</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>langTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>LANGOID</name></expr></argument>,
										  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>langTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for language %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>langForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_language</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>langTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>langForm</name><operator>-&gt;</operator><name>lanname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>langForm</name><operator>-&gt;</operator><name>lanname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>langTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
		<case>case <expr><name>OCLASS_LARGEOBJECT</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>,
							 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_OPERATOR</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
								   <argument><expr><call><name>format_operator_qualified</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>format_operator_parts</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>objname</name></expr></argument>, <argument><expr><name>objargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_OPCLASS</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>opcTup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_opclass</name></type> <name>opcForm</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>amTup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_am</name></type>	<name>amForm</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>opcTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>CLAOID</name></expr></argument>,
										 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>opcTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for opclass %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>opcForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_opclass</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>opcTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>get_namespace_name_or_temp</name><argument_list>(<argument><expr><name><name>opcForm</name><operator>-&gt;</operator><name>opcnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>amTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>AMOID</name></expr></argument>,
										<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>opcForm</name><operator>-&gt;</operator><name>opcmethod</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>amTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for access method %u"</literal></expr></argument>,
						 <argument><expr><name><name>opcForm</name><operator>-&gt;</operator><name>opcmethod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>amForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_am</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>amTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s USING %s"</literal></expr></argument>,
								 <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
															<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>opcForm</name><operator>-&gt;</operator><name>opcname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>amForm</name><operator>-&gt;</operator><name>amname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make3</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>amForm</name><operator>-&gt;</operator><name>amname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><name>schema</name></expr></argument>,
										  <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>opcForm</name><operator>-&gt;</operator><name>opcname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>amTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>opcTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_OPFAMILY</name></expr>:</case>
			<expr_stmt><expr><call><name>getOpFamilyIdentity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>OCLASS_AM</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>amname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>amname</name> <operator>=</operator> <call><name>get_am_name</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>amname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for access method %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>amname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>amname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>OCLASS_AMOP</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>amopDesc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>amscan</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_amop</name></type> <name>amopForm</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>StringInfoData</name></type> <name>opfam</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ltype</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rtype</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>amopDesc</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>AccessMethodOperatorRelationId</name></expr></argument>,
									 <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
							<argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
							<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
							<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>amscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>amopDesc</name></expr></argument>, <argument><expr><name>AccessMethodOperatorOidIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
											<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>amscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for amop entry %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>amopForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_amop</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opfam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getOpFamilyIdentity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opfam</name></expr></argument>, <argument><expr><name><name>amopForm</name><operator>-&gt;</operator><name>amopfamily</name></name></expr></argument>, <argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>ltype</name> <operator>=</operator> <call><name>format_type_be_qualified</name><argument_list>(<argument><expr><name><name>amopForm</name><operator>-&gt;</operator><name>amoplefttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>rtype</name> <operator>=</operator> <call><name>format_type_be_qualified</name><argument_list>(<argument><expr><name><name>amopForm</name><operator>-&gt;</operator><name>amoprighttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>objname</name></expr></argument>,
									   <argument><expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>amopForm</name><operator>-&gt;</operator><name>amopstrategy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>objargs</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>ltype</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"operator %d (%s, %s) of %s"</literal></expr></argument>,
								 <argument><expr><name><name>amopForm</name><operator>-&gt;</operator><name>amopstrategy</name></name></expr></argument>,
								 <argument><expr><name>ltype</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>, <argument><expr><name><name>opfam</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>opfam</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>amscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>amopDesc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_AMPROC</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>amprocDesc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>amscan</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_amproc</name></type> <name>amprocForm</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>StringInfoData</name></type> <name>opfam</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ltype</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rtype</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>amprocDesc</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>AccessMethodProcedureRelationId</name></expr></argument>,
									   <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
							<argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
							<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
							<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>amscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>amprocDesc</name></expr></argument>, <argument><expr><name>AccessMethodProcedureOidIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
											<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>amscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for amproc entry %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>amprocForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_amproc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opfam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getOpFamilyIdentity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opfam</name></expr></argument>, <argument><expr><name><name>amprocForm</name><operator>-&gt;</operator><name>amprocfamily</name></name></expr></argument>, <argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>ltype</name> <operator>=</operator> <call><name>format_type_be_qualified</name><argument_list>(<argument><expr><name><name>amprocForm</name><operator>-&gt;</operator><name>amproclefttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>rtype</name> <operator>=</operator> <call><name>format_type_be_qualified</name><argument_list>(<argument><expr><name><name>amprocForm</name><operator>-&gt;</operator><name>amprocrighttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>objname</name></expr></argument>,
									   <argument><expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>amprocForm</name><operator>-&gt;</operator><name>amprocnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>objargs</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>ltype</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"function %d (%s, %s) of %s"</literal></expr></argument>,
								 <argument><expr><name><name>amprocForm</name><operator>-&gt;</operator><name>amprocnum</name></name></expr></argument>,
								 <argument><expr><name>ltype</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>, <argument><expr><name><name>opfam</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>opfam</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>amscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>amprocDesc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_REWRITE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>ruleDesc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_rewrite</name></type> <name>rule</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>ruleDesc</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>RewriteRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>get_catalog_object_by_oid</name><argument_list>(<argument><expr><name>ruleDesc</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for rule %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>rule</name> <operator>=</operator> <operator>(</operator><name>Form_pg_rewrite</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s on "</literal></expr></argument>,
								 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>rulename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getRelationIdentity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>rule</name><operator>-&gt;</operator><name>ev_class</name></name></expr></argument>, <argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>objname</name></expr></argument>, <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>rulename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>ruleDesc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_TRIGGER</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>trigDesc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_trigger</name></type> <name>trig</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>trigDesc</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>TriggerRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>get_catalog_object_by_oid</name><argument_list>(<argument><expr><name>trigDesc</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for trigger %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>trig</name> <operator>=</operator> <operator>(</operator><name>Form_pg_trigger</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s on "</literal></expr></argument>,
								 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>trig</name><operator>-&gt;</operator><name>tgname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getRelationIdentity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>trig</name><operator>-&gt;</operator><name>tgrelid</name></name></expr></argument>, <argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>objname</name></expr></argument>, <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>trig</name><operator>-&gt;</operator><name>tgname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>trigDesc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_SCHEMA</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>nspname</name> <operator>=</operator> <call><name>get_namespace_name_or_temp</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nspname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for namespace %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_STATISTIC_EXT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_statistic_ext</name></type> <name>formStatistic</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>STATEXTOID</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for statistics object %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>formStatistic</name> <operator>=</operator> <operator>(</operator><name>Form_pg_statistic_ext</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>get_namespace_name_or_temp</name><argument_list>(<argument><expr><name><name>formStatistic</name><operator>-&gt;</operator><name>stxnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
																  <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>formStatistic</name><operator>-&gt;</operator><name>stxname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
										  <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>formStatistic</name><operator>-&gt;</operator><name>stxname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>OCLASS_TSPARSER</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_ts_parser</name></type> <name>formParser</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TSPARSEROID</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for text search parser %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>formParser</name> <operator>=</operator> <operator>(</operator><name>Form_pg_ts_parser</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>get_namespace_name_or_temp</name><argument_list>(<argument><expr><name><name>formParser</name><operator>-&gt;</operator><name>prsnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
																  <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>formParser</name><operator>-&gt;</operator><name>prsname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
										  <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>formParser</name><operator>-&gt;</operator><name>prsname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_TSDICT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_ts_dict</name></type> <name>formDict</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TSDICTOID</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for text search dictionary %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>formDict</name> <operator>=</operator> <operator>(</operator><name>Form_pg_ts_dict</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>get_namespace_name_or_temp</name><argument_list>(<argument><expr><name><name>formDict</name><operator>-&gt;</operator><name>dictnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
																  <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>formDict</name><operator>-&gt;</operator><name>dictname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
										  <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>formDict</name><operator>-&gt;</operator><name>dictname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_TSTEMPLATE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_ts_template</name></type> <name>formTmpl</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TSTEMPLATEOID</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for text search template %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>formTmpl</name> <operator>=</operator> <operator>(</operator><name>Form_pg_ts_template</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>get_namespace_name_or_temp</name><argument_list>(<argument><expr><name><name>formTmpl</name><operator>-&gt;</operator><name>tmplnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
																  <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>formTmpl</name><operator>-&gt;</operator><name>tmplname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
										  <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>formTmpl</name><operator>-&gt;</operator><name>tmplname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_TSCONFIG</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_ts_config</name></type> <name>formCfg</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TSCONFIGOID</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for text search configuration %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>formCfg</name> <operator>=</operator> <operator>(</operator><name>Form_pg_ts_config</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>get_namespace_name_or_temp</name><argument_list>(<argument><expr><name><name>formCfg</name><operator>-&gt;</operator><name>cfgnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
																  <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>formCfg</name><operator>-&gt;</operator><name>cfgname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
										  <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>formCfg</name><operator>-&gt;</operator><name>cfgname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_ROLE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>username</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>username</name> <operator>=</operator> <call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_DATABASE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>datname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>datname</name> <operator>=</operator> <call><name>get_database_name</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>datname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for database %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>datname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>datname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_TBLSPACE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tblspace</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tblspace</name> <operator>=</operator> <call><name>get_tablespace_name</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tblspace</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for tablespace %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>tblspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>tblspace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_FDW</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ForeignDataWrapper</name> <modifier>*</modifier></type><name>fdw</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>fdw</name> <operator>=</operator> <call><name>GetForeignDataWrapper</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name><name>fdw</name><operator>-&gt;</operator><name>fdwname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name><name>fdw</name><operator>-&gt;</operator><name>fdwname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_FOREIGN_SERVER</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ForeignServer</name> <modifier>*</modifier></type><name>srv</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>srv</name> <operator>=</operator> <call><name>GetForeignServer</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>servername</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>servername</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_USER_MAPPING</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>useid</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_user_mapping</name></type> <name>umform</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ForeignServer</name> <modifier>*</modifier></type><name>srv</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>usename</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>USERMAPPINGOID</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for user mapping %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>umform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_user_mapping</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>useid</name> <operator>=</operator> <name><name>umform</name><operator>-&gt;</operator><name>umuser</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>srv</name> <operator>=</operator> <call><name>GetForeignServer</name><argument_list>(<argument><expr><name><name>umform</name><operator>-&gt;</operator><name>umserver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>useid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>usename</name> <operator>=</operator> <call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name>useid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>usename</name> <operator>=</operator> <literal type="string">"public"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>usename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>objargs</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>servername</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s on server %s"</literal></expr></argument>,
								 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>usename</name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>servername</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_DEFACL</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>defaclrel</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>rcscan</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_default_acl</name></type> <name>defacl</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>username</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>defaclrel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>DefaultAclRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
							<argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
							<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
							<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>rcscan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>defaclrel</name></expr></argument>, <argument><expr><name>DefaultAclOidIndexId</name></expr></argument>,
											<argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>rcscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for default ACL %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>defacl</name> <operator>=</operator> <operator>(</operator><name>Form_pg_default_acl</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>username</name> <operator>=</operator> <call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name><name>defacl</name><operator>-&gt;</operator><name>defaclrole</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
								 <argument><expr><literal type="string">"for role %s"</literal></expr></argument>,
								 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>defacl</name><operator>-&gt;</operator><name>defaclnamespace</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>get_namespace_name_or_temp</name><argument_list>(<argument><expr><name><name>defacl</name><operator>-&gt;</operator><name>defaclnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									 <argument><expr><literal type="string">" in schema %s"</literal></expr></argument>,
									 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>schema</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<switch>switch <condition>(<expr><name><name>defacl</name><operator>-&gt;</operator><name>defaclobjtype</name></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>DEFACLOBJ_RELATION</name></expr>:</case>
						<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											   <argument><expr><literal type="string">" on tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>DEFACLOBJ_SEQUENCE</name></expr>:</case>
						<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											   <argument><expr><literal type="string">" on sequences"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>DEFACLOBJ_FUNCTION</name></expr>:</case>
						<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											   <argument><expr><literal type="string">" on functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>DEFACLOBJ_TYPE</name></expr>:</case>
						<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											   <argument><expr><literal type="string">" on types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>DEFACLOBJ_NAMESPACE</name></expr>:</case>
						<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
											   <argument><expr><literal type="string">" on schemas"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>

				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>schema</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>objname</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><operator>*</operator><name>objargs</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>defacl</name><operator>-&gt;</operator><name>defaclobjtype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>rcscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>defaclrel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_EXTENSION</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>extname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>extname</name> <operator>=</operator> <call><name>get_extension_name</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>extname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for extension %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>extname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>extname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_EVENT_TRIGGER</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_event_trigger</name></type> <name>trigForm</name></decl>;</decl_stmt>

				<comment type="block">/* no objname support here */</comment>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>EVENTTRIGGEROID</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for event trigger %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>trigForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_event_trigger</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>trigForm</name><operator>-&gt;</operator><name>evtname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_POLICY</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>polDesc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_policy</name></type> <name>policy</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>polDesc</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>PolicyRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>get_catalog_object_by_oid</name><argument_list>(<argument><expr><name>polDesc</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for policy %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>policy</name> <operator>=</operator> <operator>(</operator><name>Form_pg_policy</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s on "</literal></expr></argument>,
								 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>policy</name><operator>-&gt;</operator><name>polname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getRelationIdentity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>policy</name><operator>-&gt;</operator><name>polrelid</name></name></expr></argument>, <argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>objname</name></expr></argument>, <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>policy</name><operator>-&gt;</operator><name>polname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>polDesc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_PUBLICATION</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pubname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>pubname</name> <operator>=</operator> <call><name>get_publication_name</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>pubname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>pubname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_PUBLICATION_REL</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pubname</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_publication_rel</name></type> <name>prform</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>PUBLICATIONREL</name></expr></argument>,
									  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for publication table %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>prform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_publication_rel</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>pubname</name> <operator>=</operator> <call><name>get_publication_name</name><argument_list>(<argument><expr><name><name>prform</name><operator>-&gt;</operator><name>prpubid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>getRelationIdentity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>prform</name><operator>-&gt;</operator><name>prrelid</name></name></expr></argument>, <argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">" in publication %s"</literal></expr></argument>, <argument><expr><name>pubname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>objargs</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objargs</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>pubname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_SUBSCRIPTION</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>subname</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>subname</name> <operator>=</operator> <call><name>get_subscription_name</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>,
									   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><name>OCLASS_TRANSFORM</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>transformDesc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_transform</name></type> <name>transform</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>transformLang</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>transformType</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>transformDesc</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>TransformRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>get_catalog_object_by_oid</name><argument_list>(<argument><expr><name>transformDesc</name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find tuple for transform %u"</literal></expr></argument>,
						 <argument><expr><name><name>object</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>transform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_transform</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>transformType</name> <operator>=</operator> <call><name>format_type_be_qualified</name><argument_list>(<argument><expr><name><name>transform</name><operator>-&gt;</operator><name>trftype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>transformLang</name> <operator>=</operator> <call><name>get_language_name</name><argument_list>(<argument><expr><name><name>transform</name><operator>-&gt;</operator><name>trflang</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"for %s on language %s"</literal></expr></argument>,
								 <argument><expr><name>transformType</name></expr></argument>,
								 <argument><expr><name>transformLang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objname</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>objname</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>transformType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>objargs</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>transformLang</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>transformDesc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>

			<comment type="block">/*
			 * There's intentionally no default: case here; we want the
			 * compiler to warn if a new OCLASS hasn't been handled above.
			 */</comment>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * If a get_object_address representation was requested, make sure we are
	 * providing one.  We don't check objargs, because many of the cases above
	 * leave it as NIL.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>objname</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>objname</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"requested object address for unsupported object class %d: text result \"%s\""</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>getObjectClass</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name><name>buffer</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getOpFamilyIdentity</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>opfid</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>opfTup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_opfamily</name></type> <name>opfForm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>amTup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_am</name></type>	<name>amForm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>opfTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>OPFAMILYOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opfid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>opfTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for opfamily %u"</literal></expr></argument>, <argument><expr><name>opfid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>opfForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_opfamily</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>opfTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>amTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>AMOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>opfForm</name><operator>-&gt;</operator><name>opfmethod</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>amTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for access method %u"</literal></expr></argument>,
			 <argument><expr><name><name>opfForm</name><operator>-&gt;</operator><name>opfmethod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>amForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_am</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>amTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>get_namespace_name_or_temp</name><argument_list>(<argument><expr><name><name>opfForm</name><operator>-&gt;</operator><name>opfnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s USING %s"</literal></expr></argument>,
					 <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
												<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>opfForm</name><operator>-&gt;</operator><name>opfname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>amForm</name><operator>-&gt;</operator><name>amname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>object</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>object</name> <operator>=</operator> <call><name>list_make3</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>amForm</name><operator>-&gt;</operator><name>amname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>opfForm</name><operator>-&gt;</operator><name>opfname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>amTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>opfTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Append the relation identity (quoted qualified name) to the given
 * StringInfo.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>getRelationIdentity</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>relTup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_class</name></type> <name>relForm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>relTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>,
							 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>relTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for relation %u"</literal></expr></argument>, <argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>relForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>relTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>get_namespace_name_or_temp</name><argument_list>(<argument><expr><name><name>relForm</name><operator>-&gt;</operator><name>relnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
						   <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>schema</name></expr></argument>,
													  <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>relForm</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>object</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>object</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>relForm</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>relTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Auxiliary function to build a TEXT array out of a list of C-strings.
 */</comment>
<function><type><name>ArrayType</name> <modifier>*</modifier></type>
<name>strlist_to_textarray</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>arr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>datums</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>memcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name><name>lb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* Work in a temp context; easier than individually pfree'ing the Datums */</comment>
	<expr_stmt><expr><name>memcxt</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
								   <argument><expr><literal type="string">"strlist to array"</literal></expr></argument>,
								   <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>memcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>datums</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nulls</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>list</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>datums</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>lb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>arr</name> <operator>=</operator> <call><name>construct_md_array</name><argument_list>(<argument><expr><name>datums</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>,
							 <argument><expr><name>lb</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>memcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>arr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get_relkind_objtype
 *
 * Return the object type for the relkind given by the caller.
 *
 * If an unexpected relkind is passed, we say OBJECT_TABLE rather than
 * failing.  That's because this is mostly used for generating error messages
 * for failed ACL checks on relations, and we'd rather produce a generic
 * message saying "table" than fail entirely.
 */</comment>
<function><type><name>ObjectType</name></type>
<name>get_relkind_objtype</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>relkind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>relkind</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RELKIND_RELATION</name></expr>:</case>
		<case>case <expr><name>RELKIND_PARTITIONED_TABLE</name></expr>:</case>
			<return>return <expr><name>OBJECT_TABLE</name></expr>;</return>
		<case>case <expr><name>RELKIND_INDEX</name></expr>:</case>
		<case>case <expr><name>RELKIND_PARTITIONED_INDEX</name></expr>:</case>
			<return>return <expr><name>OBJECT_INDEX</name></expr>;</return>
		<case>case <expr><name>RELKIND_SEQUENCE</name></expr>:</case>
			<return>return <expr><name>OBJECT_SEQUENCE</name></expr>;</return>
		<case>case <expr><name>RELKIND_VIEW</name></expr>:</case>
			<return>return <expr><name>OBJECT_VIEW</name></expr>;</return>
		<case>case <expr><name>RELKIND_MATVIEW</name></expr>:</case>
			<return>return <expr><name>OBJECT_MATVIEW</name></expr>;</return>
		<case>case <expr><name>RELKIND_FOREIGN_TABLE</name></expr>:</case>
			<return>return <expr><name>OBJECT_FOREIGN_TABLE</name></expr>;</return>
		<case>case <expr><name>RELKIND_TOASTVALUE</name></expr>:</case>
			<return>return <expr><name>OBJECT_TABLE</name></expr>;</return>
		<default>default:</default>
			<comment type="block">/* Per above, don't raise an error */</comment>
			<return>return <expr><name>OBJECT_TABLE</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
