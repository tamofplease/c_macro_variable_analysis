<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/tsearch/ts_parse.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ts_parse.c
 *		main parse functions for tsearch
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/tsearch/ts_parse.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_utils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNORE_LONGLEXEME</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>

<comment type="block">/*
 * Lexize subsystem
 */</comment>

<typedef>typedef <type><struct>struct <name>ParsedLex</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>lemm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lenlemm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ParsedLex</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>ParsedLex</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ListParsedLex</name>
<block>{
	<decl_stmt><decl><type><name>ParsedLex</name>  <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ParsedLex</name>  <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
}</block></struct></type> <name>ListParsedLex</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>TSConfigCacheEntry</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>curDictId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>posDict</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DictSubState</name></type> <name>dictState</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ParsedLex</name>  <modifier>*</modifier></type><name>curSub</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListParsedLex</name></type> <name>towork</name></decl>;</decl_stmt>		<comment type="block">/* current list to work */</comment>
	<decl_stmt><decl><type><name>ListParsedLex</name></type> <name>waste</name></decl>;</decl_stmt>		<comment type="block">/* list of lexemes that already lexized */</comment>

	<comment type="block">/*
	 * fields to store last variant to lexize (basically, thesaurus or similar
	 * to, which wants	several lexemes
	 */</comment>

	<decl_stmt><decl><type><name>ParsedLex</name>  <modifier>*</modifier></type><name>lastRes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>tmpRes</name></decl>;</decl_stmt>
}</block></struct></type> <name>LexizeData</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>LexizeInit</name><parameter_list>(<parameter><decl><type><name>LexizeData</name> <modifier>*</modifier></type><name>ld</name></decl></parameter>, <parameter><decl><type><name>TSConfigCacheEntry</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>curDictId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>posDict</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>towork</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>towork</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>curSub</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>waste</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>waste</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>lastRes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>tmpRes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>LPLAddTail</name><parameter_list>(<parameter><decl><type><name>ListParsedLex</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>ParsedLex</name> <modifier>*</modifier></type><name>newpl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>tail</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newpl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>newpl</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>newpl</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>newpl</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ParsedLex</name> <modifier>*</modifier></type>
<name>LPLRemoveHead</name><parameter_list>(<parameter><decl><type><name>ListParsedLex</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ParsedLex</name>  <modifier>*</modifier></type><name>res</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>LexizeAddLemm</name><parameter_list>(<parameter><decl><type><name>LexizeData</name> <modifier>*</modifier></type><name>ld</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lemm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenlemm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ParsedLex</name>  <modifier>*</modifier></type><name>newpl</name> <init>= <expr><operator>(</operator><name>ParsedLex</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParsedLex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>newpl</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newpl</name><operator>-&gt;</operator><name>lemm</name></name> <operator>=</operator> <name>lemm</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newpl</name><operator>-&gt;</operator><name>lenlemm</name></name> <operator>=</operator> <name>lenlemm</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LPLAddTail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ld</name><operator>-&gt;</operator><name>towork</name></name></expr></argument>, <argument><expr><name>newpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>curSub</name></name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>towork</name><operator>.</operator><name>tail</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>RemoveHead</name><parameter_list>(<parameter><decl><type><name>LexizeData</name> <modifier>*</modifier></type><name>ld</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LPLAddTail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ld</name><operator>-&gt;</operator><name>waste</name></name></expr></argument>, <argument><expr><call><name>LPLRemoveHead</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ld</name><operator>-&gt;</operator><name>towork</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>posDict</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setCorrLex</name><parameter_list>(<parameter><decl><type><name>LexizeData</name> <modifier>*</modifier></type><name>ld</name></decl></parameter>, <parameter><decl><type><name>ParsedLex</name> <modifier>*</modifier><modifier>*</modifier></type><name>correspondLexem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>correspondLexem</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>correspondLexem</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>waste</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>ParsedLex</name>  <modifier>*</modifier></type><name>tmp</name></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>ld</name><operator>-&gt;</operator><name>waste</name><operator>.</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><name>ptr</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>waste</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>waste</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>moveToWaste</name><parameter_list>(<parameter><decl><type><name>LexizeData</name> <modifier>*</modifier></type><name>ld</name></decl></parameter>, <parameter><decl><type><name>ParsedLex</name> <modifier>*</modifier></type><name>stop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>go</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name><name>ld</name><operator>-&gt;</operator><name>towork</name><operator>.</operator><name>head</name></name> <operator>&amp;&amp;</operator> <name>go</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ld</name><operator>-&gt;</operator><name>towork</name><operator>.</operator><name>head</name></name> <operator>==</operator> <name>stop</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>curSub</name></name> <operator>=</operator> <name><name>stop</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>go</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RemoveHead</name><argument_list>(<argument><expr><name>ld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setNewTmpRes</name><parameter_list>(<parameter><decl><type><name>LexizeData</name> <modifier>*</modifier></type><name>ld</name></decl></parameter>, <parameter><decl><type><name>ParsedLex</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>TSLexeme</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ld</name><operator>-&gt;</operator><name>tmpRes</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>tmpRes</name></name></expr>;</init> <condition><expr><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ld</name><operator>-&gt;</operator><name>tmpRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>tmpRes</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>lastRes</name></name> <operator>=</operator> <name>lex</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TSLexeme</name> <modifier>*</modifier></type>
<name>LexizeExec</name><parameter_list>(<parameter><decl><type><name>LexizeData</name> <modifier>*</modifier></type><name>ld</name></decl></parameter>, <parameter><decl><type><name>ParsedLex</name> <modifier>*</modifier><modifier>*</modifier></type><name>correspondLexem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListDictionary</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSDictionaryCacheEntry</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ld</name><operator>-&gt;</operator><name>curDictId</name></name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * usual mode: dictionary wants only one word, but we should keep in
		 * mind that we should go through all stack
		 */</comment>

		<while>while <condition>(<expr><name><name>ld</name><operator>-&gt;</operator><name>towork</name><operator>.</operator><name>head</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ParsedLex</name>  <modifier>*</modifier></type><name>curVal</name> <init>= <expr><name><name>ld</name><operator>-&gt;</operator><name>towork</name><operator>.</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>curValLemm</name> <init>= <expr><name><name>curVal</name><operator>-&gt;</operator><name>lemm</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>curValLenLemm</name> <init>= <expr><name><name>curVal</name><operator>-&gt;</operator><name>lenlemm</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>map</name></name> <operator>+</operator> <name><name>curVal</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>curVal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>curVal</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name><name>ld</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>lenmap</name></name> <operator>||</operator> <name><name>map</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* skip this type of lexeme */</comment>
				<expr_stmt><expr><call><name>RemoveHead</name><argument_list>(<argument><expr><name>ld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>posDict</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>lookup_ts_dictionary_cache</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>dictIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>dictState</name><operator>.</operator><name>isend</name></name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>dictState</name><operator>.</operator><name>getnext</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>dictState</name><operator>.</operator><name>private_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>TSLexeme</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><call><name>FunctionCall4</name><argument_list>(
																 <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>lexize</name></name><operator>)</operator></expr></argument>,
																 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>dictData</name></name></expr></argument>)</argument_list></call></expr></argument>,
																 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>curValLemm</name></expr></argument>)</argument_list></call></expr></argument>,
																 <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>curValLenLemm</name></expr></argument>)</argument_list></call></expr></argument>,
																 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ld</name><operator>-&gt;</operator><name>dictState</name></name></expr></argument>)</argument_list></call></expr></argument>
																 )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>ld</name><operator>-&gt;</operator><name>dictState</name><operator>.</operator><name>getnext</name></name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * dictionary wants next word, so setup and store current
					 * position and go to multiword mode
					 */</comment>

					<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>curDictId</name></name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>dictIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>posDict</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>curSub</name></name> <operator>=</operator> <name><name>curVal</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>setNewTmpRes</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>curVal</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<return>return <expr><call><name>LexizeExec</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>correspondLexem</name></expr></argument>)</argument_list></call></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>		<comment type="block">/* dictionary doesn't know this lexeme */</comment>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TSL_FILTER</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>curValLemm</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>curValLenLemm</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>RemoveHead</name><argument_list>(<argument><expr><name>ld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>setCorrLex</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>correspondLexem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>res</name></expr>;</return>
			</block_content>}</block></for>

			<expr_stmt><expr><call><name>RemoveHead</name><argument_list>(<argument><expr><name>ld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>							<comment type="block">/* curDictId is valid */</comment>
		<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>lookup_ts_dictionary_cache</name><argument_list>(<argument><expr><name><name>ld</name><operator>-&gt;</operator><name>curDictId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Dictionary ld-&gt;curDictId asks  us about following words
		 */</comment>

		<while>while <condition>(<expr><name><name>ld</name><operator>-&gt;</operator><name>curSub</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ParsedLex</name>  <modifier>*</modifier></type><name>curVal</name> <init>= <expr><name><name>ld</name><operator>-&gt;</operator><name>curSub</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>map</name></name> <operator>+</operator> <name><name>curVal</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>curVal</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>bool</name></type>		<name>dictExists</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>curVal</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name><name>ld</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>lenmap</name></name> <operator>||</operator> <name><name>map</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* skip this type of lexeme */</comment>
					<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>curSub</name></name> <operator>=</operator> <name><name>curVal</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/*
				 * We should be sure that current type of lexeme is recognized
				 * by our dictionary: we just check is it exist in list of
				 * dictionaries ?
				 */</comment>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dictExists</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<if_stmt><if>if <condition>(<expr><name><name>ld</name><operator>-&gt;</operator><name>curDictId</name></name> <operator>==</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>dictIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>dictExists</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dictExists</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * Dictionary can't work with current tpe of lexeme,
					 * return to basic mode and redo all stored lexemes
					 */</comment>
					<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>curDictId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
					<return>return <expr><call><name>LexizeExec</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>correspondLexem</name></expr></argument>)</argument_list></call></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>dictState</name><operator>.</operator><name>isend</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>curVal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>dictState</name><operator>.</operator><name>getnext</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>TSLexeme</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><call><name>FunctionCall4</name><argument_list>(
															 <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>lexize</name></name><operator>)</operator></expr></argument>,
															 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>dictData</name></name></expr></argument>)</argument_list></call></expr></argument>,
															 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>curVal</name><operator>-&gt;</operator><name>lemm</name></name></expr></argument>)</argument_list></call></expr></argument>,
															 <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>curVal</name><operator>-&gt;</operator><name>lenlemm</name></name></expr></argument>)</argument_list></call></expr></argument>,
															 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ld</name><operator>-&gt;</operator><name>dictState</name></name></expr></argument>)</argument_list></call></expr></argument>
															 )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>ld</name><operator>-&gt;</operator><name>dictState</name><operator>.</operator><name>getnext</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Dictionary wants one more */</comment>
				<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>curSub</name></name> <operator>=</operator> <name><name>curVal</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>setNewTmpRes</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>curVal</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>||</operator> <name><name>ld</name><operator>-&gt;</operator><name>tmpRes</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Dictionary normalizes lexemes, so we remove from stack all
				 * used lexemes, return to basic mode and redo end of stack
				 * (if it exists)
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>moveToWaste</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name><name>ld</name><operator>-&gt;</operator><name>curSub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>tmpRes</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>moveToWaste</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name><name>ld</name><operator>-&gt;</operator><name>lastRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<comment type="block">/* reset to initial state */</comment>
				<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>curDictId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>posDict</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>lastRes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>tmpRes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>setCorrLex</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>correspondLexem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>res</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * Dict don't want next lexem and didn't recognize anything, redo
			 * from ld-&gt;towork.head
			 */</comment>
			<expr_stmt><expr><name><name>ld</name><operator>-&gt;</operator><name>curDictId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
			<return>return <expr><call><name>LexizeExec</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>correspondLexem</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>setCorrLex</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>correspondLexem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse string and lexize words.
 *
 * prs will be filled in.
 */</comment>
<function><type><name>void</name></type>
<name>parsetext</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>cfgId</name></decl></parameter>, <parameter><decl><type><name>ParsedText</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>type</name></decl>,
				<decl><type ref="prev"/><name>lenlemm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>lemm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LexizeData</name></type>	<name>ldata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>norms</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSConfigCacheEntry</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSParserCacheEntry</name> <modifier>*</modifier></type><name>prsobj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>prsdata</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cfg</name> <operator>=</operator> <call><name>lookup_ts_config_cache</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>prsobj</name> <operator>=</operator> <call><name>lookup_ts_parser_cache</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>prsId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>prsdata</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><call><name>FunctionCall2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prsobj</name><operator>-&gt;</operator><name>prsstart</name></name></expr></argument>,
													 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
													 <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LexizeInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ldata</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>FunctionCall3</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>prsobj</name><operator>-&gt;</operator><name>prstoken</name></name><operator>)</operator></expr></argument>,
										   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>prsdata</name></expr></argument>)</argument_list></call></expr></argument>,
										   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lemm</name></expr></argument>)</argument_list></call></expr></argument>,
										   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lenlemm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>lenlemm</name> <operator>&gt;=</operator> <name>MAXSTRLEN</name></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IGNORE_LONGLEXEME</name></cpp:ifdef>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"word is too long to be indexed"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Words longer than %d characters are ignored."</literal></expr></argument>,
							   <argument><expr><name>MAXSTRLEN</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"word is too long to be indexed"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Words longer than %d characters are ignored."</literal></expr></argument>,
							   <argument><expr><name>MAXSTRLEN</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>LexizeAddLemm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ldata</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>lemm</name></expr></argument>, <argument><expr><name>lenlemm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><operator>(</operator><name>norms</name> <operator>=</operator> <call><name>LexizeExec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ldata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>norms</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>			<comment type="block">/* set pos */</comment>

			<while>while <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name> <operator>==</operator> <name><name>prs</name><operator>-&gt;</operator><name>lenwords</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>lenwords</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name></name> <operator>=</operator> <operator>(</operator><name>ParsedWord</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name></name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>lenwords</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ParsedWord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TSL_ADDPOS</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>]</index></name><operator>.</operator><name>word</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>]</index></name><operator>.</operator><name>nvariant</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>nvariant</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TSL_PREFIX</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>]</index></name><operator>.</operator><name>alen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <call><name>LIMITPOS</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>norms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block> while <condition>(<expr><name>type</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>FunctionCall1</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>prsobj</name><operator>-&gt;</operator><name>prsend</name></name><operator>)</operator></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>prsdata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Headline framework
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>hladdword</name><parameter_list>(<parameter><decl><type><name>HeadlineParsedText</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name> <operator>&gt;=</operator> <name><name>prs</name><operator>-&gt;</operator><name>lenwords</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>lenwords</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name></name> <operator>=</operator> <operator>(</operator><name>HeadlineWordEntry</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name></name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>lenwords</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HeadlineWordEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HeadlineWordEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>uint8</name><operator>)</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>buflen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>]</index></name><operator>.</operator><name>word</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>]</index></name><operator>.</operator><name>word</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hlfinditem</name><parameter_list>(<parameter><decl><type><name>HeadlineParsedText</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>, <parameter><decl><type><name>TSQuery</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryItem</name>  <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeadlineWordEntry</name> <modifier>*</modifier></type><name>word</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name> <operator>+</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>prs</name><operator>-&gt;</operator><name>lenwords</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>lenwords</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name></name> <operator>=</operator> <operator>(</operator><name>HeadlineWordEntry</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name></name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>lenwords</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HeadlineWordEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>word</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>word</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>LIMITPOS</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_VAL</name> <operator>&amp;&amp;</operator>
			<call><name>tsCompareString</name><argument_list>(<argument><expr><call><name>GETOPERAND</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>qoperand</name><operator>.</operator><name>distance</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>qoperand</name><operator>.</operator><name>length</name></name></expr></argument>,
							<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>qoperand</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>word</name><operator>-&gt;</operator><name>item</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HeadlineWordEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>]</index></name><operator>.</operator><name>item</name> <operator>=</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>qoperand</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>]</index></name><operator>.</operator><name>repeated</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>word</name><operator>-&gt;</operator><name>item</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>qoperand</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>item</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>addHLParsedLex</name><parameter_list>(<parameter><decl><type><name>HeadlineParsedText</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>, <parameter><decl><type><name>TSQuery</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>ParsedLex</name> <modifier>*</modifier></type><name>lexs</name></decl></parameter>, <parameter><decl><type><name>TSLexeme</name> <modifier>*</modifier></type><name>norms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ParsedLex</name>  <modifier>*</modifier></type><name>tmplexs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>savedpos</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>lexs</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>lexs</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>hladdword</name><argument_list>(<argument><expr><name>prs</name></expr></argument>, <argument><expr><name><name>lexs</name><operator>-&gt;</operator><name>lemm</name></name></expr></argument>, <argument><expr><name><name>lexs</name><operator>-&gt;</operator><name>lenlemm</name></name></expr></argument>, <argument><expr><name><name>lexs</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>norms</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>savedpos</name> <operator>=</operator> <name><name>prs</name><operator>-&gt;</operator><name>vectorpos</name></name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TSL_ADDPOS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>savedpos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>hlfinditem</name><argument_list>(<argument><expr><name>prs</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>savedpos</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><name>tmplexs</name> <operator>=</operator> <name><name>lexs</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>lexs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lexs</name> <operator>=</operator> <name>tmplexs</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>norms</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>norms</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TSL_ADDPOS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>vectorpos</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>norms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hlparsetext</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>cfgId</name></decl></parameter>, <parameter><decl><type><name>HeadlineParsedText</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>, <parameter><decl><type><name>TSQuery</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>type</name></decl>,
				<decl><type ref="prev"/><name>lenlemm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>lemm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LexizeData</name></type>	<name>ldata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>norms</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ParsedLex</name>  <modifier>*</modifier></type><name>lexs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSConfigCacheEntry</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSParserCacheEntry</name> <modifier>*</modifier></type><name>prsobj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>prsdata</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cfg</name> <operator>=</operator> <call><name>lookup_ts_config_cache</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>prsobj</name> <operator>=</operator> <call><name>lookup_ts_parser_cache</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>prsId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>prsdata</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><call><name>FunctionCall2</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>prsobj</name><operator>-&gt;</operator><name>prsstart</name></name><operator>)</operator></expr></argument>,
													 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
													 <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LexizeInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ldata</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>FunctionCall3</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>prsobj</name><operator>-&gt;</operator><name>prstoken</name></name><operator>)</operator></expr></argument>,
										   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>prsdata</name></expr></argument>)</argument_list></call></expr></argument>,
										   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lemm</name></expr></argument>)</argument_list></call></expr></argument>,
										   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lenlemm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>lenlemm</name> <operator>&gt;=</operator> <name>MAXSTRLEN</name></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IGNORE_LONGLEXEME</name></cpp:ifdef>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"word is too long to be indexed"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Words longer than %d characters are ignored."</literal></expr></argument>,
							   <argument><expr><name>MAXSTRLEN</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"word is too long to be indexed"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Words longer than %d characters are ignored."</literal></expr></argument>,
							   <argument><expr><name>MAXSTRLEN</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>LexizeAddLemm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ldata</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>lemm</name></expr></argument>, <argument><expr><name>lenlemm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<do>do
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>norms</name> <operator>=</operator> <call><name>LexizeExec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ldata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lexs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>vectorpos</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>addHLParsedLex</name><argument_list>(<argument><expr><name>prs</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>lexs</name></expr></argument>, <argument><expr><name>norms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>addHLParsedLex</name><argument_list>(<argument><expr><name>prs</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>lexs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block> while <condition>(<expr><name>norms</name></expr>)</condition>;</do>

	</block_content>}</block> while <condition>(<expr><name>type</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>FunctionCall1</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>prsobj</name><operator>-&gt;</operator><name>prsend</name></name><operator>)</operator></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>prsdata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>text</name> <modifier>*</modifier></type>
<name>generateHeadline</name><parameter_list>(<parameter><decl><type><name>HeadlineParsedText</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numfragments</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type>		<name>infrag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HeadlineWordEntry</name> <modifier>*</modifier></type><name>wrd</name> <init>= <expr><name><name>prs</name><operator>-&gt;</operator><name>words</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>out</name><operator>)</operator> <operator>+</operator> <name>VARHDRSZ</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>wrd</name> <operator>-</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name></name> <operator>&lt;</operator> <name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>)</condition>
	<block>{<block_content>
		<while>while <condition>(<expr><name><name>wrd</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name><name>prs</name><operator>-&gt;</operator><name>stopsellen</name></name> <operator>+</operator> <name><name>prs</name><operator>-&gt;</operator><name>startsellen</name></name> <operator>+</operator> <name><name>prs</name><operator>-&gt;</operator><name>fragdelimlen</name></name> <operator>+</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>out</name><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <name>len</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>dist</name> <init>= <expr><name>ptr</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>out</name><operator>)</operator></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>len</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>out</name><operator>)</operator> <operator>+</operator> <name>dist</name></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><name><name>wrd</name><operator>-&gt;</operator><name>in</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wrd</name><operator>-&gt;</operator><name>repeated</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>infrag</name></expr>)</condition>
			<block>{<block_content>

				<comment type="block">/* start of a new fragment */</comment>
				<expr_stmt><expr><name>infrag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>numfragments</name><operator>++</operator></expr>;</expr_stmt>
				<comment type="block">/* add a fragment delimiter if this is after the first one */</comment>
				<if_stmt><if>if <condition>(<expr><name>numfragments</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>fragdelim</name></name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>fragdelimlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>prs</name><operator>-&gt;</operator><name>fragdelimlen</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>wrd</name><operator>-&gt;</operator><name>replace</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>wrd</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>wrd</name><operator>-&gt;</operator><name>selected</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>startsel</name></name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>startsellen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>prs</name><operator>-&gt;</operator><name>startsellen</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>wrd</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>wrd</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>wrd</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>wrd</name><operator>-&gt;</operator><name>selected</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>stopsel</name></name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>stopsellen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>prs</name><operator>-&gt;</operator><name>stopsellen</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>wrd</name><operator>-&gt;</operator><name>repeated</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>infrag</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>infrag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>wrd</name><operator>-&gt;</operator><name>word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>wrd</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>out</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>
</unit>
