<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/nodes/value.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * value.c
 *	  implementation of Value nodes
 *
 *
 * Copyright (c) 2003-2018, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/nodes/value.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/parsenodes.h"</cpp:file></cpp:include>

<comment type="block">/*
 *	makeInteger
 */</comment>
<function><type><name>Value</name> <modifier>*</modifier></type>
<name>makeInteger</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Value</name>	   <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>T_Integer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>ival</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *	makeFloat
 *
 * Caller is responsible for passing a palloc'd string.
 */</comment>
<function><type><name>Value</name> <modifier>*</modifier></type>
<name>makeFloat</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>numericStr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Value</name>	   <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>T_Float</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>numericStr</name></expr>;</expr_stmt>
	<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *	makeString
 *
 * Caller is responsible for passing a palloc'd string.
 */</comment>
<function><type><name>Value</name> <modifier>*</modifier></type>
<name>makeString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Value</name>	   <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>T_String</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
	<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *	makeBitString
 *
 * Caller is responsible for passing a palloc'd string.
 */</comment>
<function><type><name>Value</name> <modifier>*</modifier></type>
<name>makeBitString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Value</name>	   <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>T_BitString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
	<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>
</unit>
