<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/postmaster/polar_wal_pipeliner.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_wal_pipeliner.c
 *		Wal pipeline implementation.
 *
 * Copyright (c) 2021, Alibaba Group Holding Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *      src/backend/postmaster/polar_wal_pipeliner.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqsignal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/polar_wal_pipeliner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/s_lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/spin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/smgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/pmsignal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hsearch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/polar_coredump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resowner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>

<comment type="block">/* POLAR wal pipeline */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
<comment type="block">/* Use platform-dependent pthread capability */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* POLAR wal pipeline */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_THREAD</name></cpp:macro>								<cpp:value>((pthread_t) 0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>pthread_t</name></type>	<name><name>worker_handles</name><index>[<expr><name>POLAR_WAL_PIPELINE_MAX_THREAD_NUM</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>worker_args</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>thread_no</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ident</name></decl>;</decl_stmt>
	<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>fp</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name>int</name></type> <name>spin_delay</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_wait_object_t</name> <modifier>*</modifier></type><name>wait_obj</name></decl>;</decl_stmt>
}</block></struct></type> <name>worker_args</name>;</typedef>

<decl_stmt><decl><type><name>worker_args</name></type> <name><name>args</name><index>[<expr><name>POLAR_WAL_PIPELINE_MAX_THREAD_NUM</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/* 
 * postgres elog is not thread safe,
 * and wal pipeline is multi thread,
 * need special process
 */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>multi_thread_elog</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* 
 * polar vfs is not thread safe,
 * and wal pipeline is multi thread,
 * need special process
 */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>multi_thread_vfs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>slock_t</name></type> <name>polar_wal_pipeline_vfs_lck</name></decl>;</decl_stmt>

<comment type="block">/*
 * Flags set by interrupt handlers for later service in the main loop.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>shutdown_requested</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Signal handlers */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_wal_pipeliner_quickdie</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_wal_pipeliner_shutdown_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_wal_pipeliner_create_advance_worker</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_wal_pipeliner_create_flush_worker</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_wal_pipeliner_create_notify_worker</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_wal_pipeliner_main_mode_1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ident</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_wal_pipeliner_main_mode_2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ident</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_wal_pipeliner_main_mode_3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ident</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_wal_pipeliner_main_mode_4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ident</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_wal_pipeliner_main_mode_5</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ident</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_wal_pipeliner_init_mode_1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_wal_pipeliner_init_mode_2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_wal_pipeliner_init_mode_3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_wal_pipeliner_init_mode_4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_wal_pipeliner_init_mode_5</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* POLAR wal pipeline */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>polar_wal_pipeliner_worker</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_wal_pipeliner_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>polar_wal_pipeline_stats_t</name><modifier>*</modifier></type> <name>polar_wal_pipeline_get_stats</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>polar_wait_object_t</name><modifier>*</modifier></type> <name>polar_wal_pipeline_get_worker_wait_obj</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>thread_no</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Main entry point for wal pipeline process
 *
 * This is invoked from AuxiliaryProcessMain, which has already created the
 * basic execution environment, but not enabled signals yet.
 */</comment>
<function><type><name>void</name></type>
<name>polar_wal_pipeliner_main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_spin_delay_status_t</name></type> <name>status</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Properly accept or ignore signals the postmaster might send us
	 *
	 * We have no particular use for SIGINT at the moment, but seems
	 * reasonable to treat like SIGTERM.
	 */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* ignore */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* ignore */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* ignore */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>polar_wal_pipeliner_quickdie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* hard crash time */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGUSR2</name></expr></argument>, <argument><expr><name>polar_wal_pipeliner_shutdown_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

	<comment type="block">/*
	 * Reset some signals that are accepted by postmaster but not here
	 */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTTIN</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTTOU</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGCONT</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGWINCH</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* POLAR : register for coredump print */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGILL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGILL</name></expr></argument>, <argument><expr><name>polar_program_error_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGSEGV</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGSEGV</name></expr></argument>, <argument><expr><name>polar_program_error_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGBUS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGBUS</name></expr></argument>, <argument><expr><name>polar_program_error_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	<comment type="block">/* _WIN32 */</comment>
	<comment type="block">/* POLAR: end */</comment>

	<comment type="block">/* We allow SIGQUIT (quickdie) at all times */</comment>
	<expr_stmt><expr><call><name>sigdelset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BlockSig</name></expr></argument>, <argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Unblock signals (they were blocked when the postmaster forked us)
	 */</comment>
	<expr_stmt><expr><call><name>PG_SETMASK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>UnBlockSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_wal_pipeliner_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Advertise our latch that backends can use to wake us up while we're
	 * sleeping.
	 */</comment>
	<expr_stmt><expr><name><name>ProcGlobal</name><operator>-&gt;</operator><name>polar_wal_pipeliner_latch</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_init_spin_delay_mt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><call><name>polar_wal_pipeline_get_worker_wait_obj</name><argument_list>(<argument><expr><name>WRITE_WORKER_THREAD_NO</name></expr></argument>)</argument_list></call></expr></argument>, 
							 <argument><expr><name>polar_wal_pipeline_write_worker_spin_delay</name></expr></argument>, <argument><expr><name>polar_wal_pipeline_write_worker_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Loop forever
	 */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Process any requests or signals received recently.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>shutdown_requested</name> <operator>||</operator> <operator>!</operator><call><name>PostmasterIsAlive</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>POLAR_WAL_PIPELINE_MAX_THREAD_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><name><name>worker_handles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>INVALID_THREAD</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>worker_handles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

			<comment type="block">/* 
			 * Only when all wal pipeline thread have exited, we
			 * can set polar_wal_pipeliner_latch to tell others that wal
			 * pipeliner has exited.
			 */</comment>
			<expr_stmt><expr><name><name>ProcGlobal</name><operator>-&gt;</operator><name>polar_wal_pipeliner_latch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

			<comment type="block">/* Exit as a process */</comment>
			<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
		</block_content>}</block></if></if_stmt>

		<switch>switch <condition>(<expr><name>polar_wal_pipeline_mode</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>polar_wal_pipeliner_main_mode_1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>polar_wal_pipeliner_main_mode_2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>polar_wal_pipeliner_main_mode_3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>polar_wal_pipeliner_main_mode_4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>polar_wal_pipeliner_main_mode_5</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"polar wal pipeline in wrong mode %d"</literal></expr></argument>, <argument><expr><name>polar_wal_pipeline_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_reset_spin_delay_mt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_perform_spin_delay_mt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *		signal handler routines
 * --------------------------------
 */</comment>

<comment type="block">/*
 * wal_quickdie() occurs when signalled SIGQUIT by the postmaster.
 *
 * Some backend has bought the farm,
 * so we need to stop what we're doing and exit.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_wal_pipeliner_quickdie</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We DO NOT want to run proc_exit() or atexit() callbacks -- we're here
	 * because shared memory may be corrupted, so we don't want to try to
	 * clean up our transaction.  Just nail the windows shut and get out of
	 * town.  The callbacks wouldn't be safe to run from a signal handler,
	 * anyway.
	 *
	 * Note we do _exit(2) not _exit(0).  This is to force the postmaster into
	 * a system reset cycle if someone sends a manual SIGQUIT to a random
	 * backend.  This is necessary precisely because we don't clean up our
	 * shared memory state.  (The "dead man switch" mechanism in pmsignal.c
	 * should ensure the postmaster sees this as a crash, too, but no harm in
	 * being doubly sure.)
	 */</comment>
	<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* SIGTERM: set flag to exit normally */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_wal_pipeliner_shutdown_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>shutdown_requested</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>polar_wal_pipeliner_create_advance_worker</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>thread_no</name> <init>= <expr><name>ADVANCE_WORKER_THREAD_NO</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>thread_no</name> <operator>=</operator> <name>thread_no</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>ident</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>fp</name> <operator>=</operator> <name>polar_wal_pipeline_advance</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>spin_delay</name> <operator>=</operator> <name>polar_wal_pipeline_advance_worker_spin_delay</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>timeout</name> <operator>=</operator> <name>polar_wal_pipeline_advance_worker_timeout</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>wait_obj</name> <operator>=</operator> <call><name>polar_wal_pipeline_get_worker_wait_obj</name><argument_list>(<argument><expr><name>thread_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker_handles</name><index>[<expr><name>thread_no</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>polar_wal_pipeliner_worker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>worker_handles</name><index>[<expr><name>thread_no</name></expr>]</index></name> <operator>==</operator> <name>INVALID_THREAD</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"create wal pipeline advance worker failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>polar_wal_pipeliner_create_flush_worker</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>thread_no</name> <init>= <expr><name>FLUSH_WORKER_THREAD_NO</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>thread_no</name> <operator>=</operator> <name>thread_no</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>ident</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>fp</name> <operator>=</operator> <name>polar_wal_pipeline_flush</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>spin_delay</name> <operator>=</operator> <name>polar_wal_pipeline_flush_worker_spin_delay</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>timeout</name> <operator>=</operator> <name>polar_wal_pipeline_flush_worker_timeout</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>wait_obj</name> <operator>=</operator> <call><name>polar_wal_pipeline_get_worker_wait_obj</name><argument_list>(<argument><expr><name>thread_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker_handles</name><index>[<expr><name>thread_no</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>polar_wal_pipeliner_worker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>worker_handles</name><index>[<expr><name>thread_no</name></expr>]</index></name> <operator>==</operator> <name>INVALID_THREAD</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"create wal pipeline flush worker failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>polar_wal_pipeliner_create_notify_worker</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>thread_no</name> <init>= <expr><name>NOTIFY_WORKER_THREAD_NO</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>polar_wal_pipeline_notify_worker_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_wal_pipeline_set_last_notify_lsn</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>GetFlushRecPtr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>thread_no</name> <operator>=</operator> <name>thread_no</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>ident</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>fp</name> <operator>=</operator> <name>polar_wal_pipeline_notify</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>spin_delay</name> <operator>=</operator> <name>polar_wal_pipeline_notify_worker_spin_delay</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>timeout</name> <operator>=</operator> <name>polar_wal_pipeline_notify_worker_timeout</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name><operator>.</operator><name>wait_obj</name> <operator>=</operator> <call><name>polar_wal_pipeline_get_worker_wait_obj</name><argument_list>(<argument><expr><name>thread_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker_handles</name><index>[<expr><name>thread_no</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>polar_wal_pipeliner_worker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><name>thread_no</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>worker_handles</name><index>[<expr><name>thread_no</name></expr>]</index></name> <operator>==</operator> <name>INVALID_THREAD</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"create wal pipeline notify worker failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><name>thread_no</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_wal_pipeliner_main_mode_1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ident</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>res1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>res2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>res3</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>polar_wal_pipeline_advance</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Disable pipeline mode to use original postgres write/flush logic */</comment>
	<expr_stmt><expr><name>polar_wal_pipeline_enable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res2</name> <operator>=</operator> <call><name>polar_wal_pipeline_write</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res3</name> <operator>=</operator> <call><name>polar_wal_pipeline_notify</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>res1</name> <operator>||</operator> <name>res2</name> <operator>||</operator> <name>res3</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_wal_pipeliner_init_mode_1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_wal_pipeliner_main_mode_2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ident</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>res1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>res2</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>polar_wal_pipeline_advance</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Disable pipeline mode to use original postgres write/flush logic */</comment>
	<expr_stmt><expr><name>polar_wal_pipeline_enable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res2</name> <operator>=</operator> <call><name>polar_wal_pipeline_write</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>res1</name> <operator>||</operator> <name>res2</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_wal_pipeliner_init_mode_2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>polar_wal_pipeliner_create_notify_worker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_wal_pipeliner_main_mode_3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ident</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Disable pipeline mode to use original postgres write/flush logic */</comment>
	<expr_stmt><expr><name>polar_wal_pipeline_enable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<return>return <expr><call><name>polar_wal_pipeline_write</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_wal_pipeliner_init_mode_3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>polar_wal_pipeliner_create_advance_worker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_wal_pipeliner_create_notify_worker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_wal_pipeliner_main_mode_4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ident</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>res1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>res2</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>polar_wal_pipeline_advance</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res2</name> <operator>=</operator> <call><name>polar_wal_pipeline_write</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>res1</name> <operator>||</operator> <name>res2</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_wal_pipeliner_init_mode_4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>polar_wal_pipeliner_create_flush_worker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_wal_pipeliner_create_notify_worker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_wal_pipeliner_main_mode_5</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ident</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>polar_wal_pipeline_write</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_wal_pipeliner_init_mode_5</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>polar_wal_pipeliner_create_advance_worker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_wal_pipeliner_create_flush_worker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_wal_pipeliner_create_notify_worker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_wal_pipeliner_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>POLAR_WAL_PIPELINE_MAX_THREAD_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>worker_handles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INVALID_THREAD</name></expr>;</expr_stmt></block_content></block></for>

	<if_stmt><if>if <condition>(<expr><name>polar_wal_pipeline_mode</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* 
		* Should disable wait stat, wait stat in polar vfs is not thread-safe;
		* Or else maybe crash
		*/</comment>
		<expr_stmt><expr><name>polar_enable_stat_wait_info</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		
		<comment type="block">/* ELOG is not thread safe */</comment>
		<expr_stmt><expr><name>multi_thread_elog</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<comment type="block">/* vfs is not thread safe */</comment>
		<expr_stmt><expr><name>multi_thread_vfs</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>polar_wal_pipeline_vfs_lck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* we need to work in critical section */</comment>
	<expr_stmt><expr><call><name>START_CRIT_SECTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Must set before advance thread */</comment>
	<expr_stmt><expr><call><name>polar_wal_pipeline_set_ready_write_lsn</name><argument_list>(<argument><expr><call><name>polar_wal_pipeline_get_current_insert_lsn</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>polar_wal_pipeline_mode</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<expr_stmt><expr><call><name>polar_wal_pipeliner_init_mode_1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">2</literal></expr>:</case>
			<expr_stmt><expr><call><name>polar_wal_pipeliner_init_mode_2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">3</literal></expr>:</case>
			<expr_stmt><expr><call><name>polar_wal_pipeliner_init_mode_3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">4</literal></expr>:</case>
			<expr_stmt><expr><call><name>polar_wal_pipeliner_init_mode_4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">5</literal></expr>:</case>
			<expr_stmt><expr><call><name>polar_wal_pipeliner_init_mode_5</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"polar wal pipeline in wrong mode %d"</literal></expr></argument>, <argument><expr><name>polar_wal_pipeline_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>polar_wal_pipeliner_worker</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
	<decl_stmt><decl><type><name>worker_args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator><name>worker_args</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_spin_delay_status_t</name></type> <name>status</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>polar_init_spin_delay_mt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>wait_obj</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>spin_delay</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>shutdown_requested</name> <operator>||</operator> <operator>!</operator><call><name>PostmasterIsAlive</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pthread_exit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>args</name><operator>-&gt;</operator><name>fp</name></name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>ident</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>	
			<expr_stmt><expr><call><name>polar_reset_spin_delay_mt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_perform_spin_delay_mt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_wal_pipeliner_wakeup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_wait_object_t</name> <modifier>*</modifier></type><name>flush_worker_wait_obj</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>polar_wal_pipeline_mode</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
		<case>case <expr><literal type="number">2</literal></expr>:</case>
		<case>case <expr><literal type="number">3</literal></expr>:</case>
			<expr_stmt><expr><name>flush_worker_wait_obj</name> <operator>=</operator> <call><name>polar_wal_pipeline_get_worker_wait_obj</name><argument_list>(<argument><expr><name>WRITE_WORKER_THREAD_NO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">4</literal></expr>:</case>
		<case>case <expr><literal type="number">5</literal></expr>:</case>
			<expr_stmt><expr><name>flush_worker_wait_obj</name> <operator>=</operator> <call><name>polar_wal_pipeline_get_worker_wait_obj</name><argument_list>(<argument><expr><name>FLUSH_WORKER_THREAD_NO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"polar wal pipeline in wrong mode %d"</literal></expr></argument>, <argument><expr><name>polar_wal_pipeline_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch> 

	<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>flush_worker_wait_obj</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_wal_pipeline_wakeup_notifier</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>polar_wal_pipeline_notify_worker_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>polar_wait_object_t</name> <modifier>*</modifier></type><name>notify_worker_wait_obj</name> <init>= <expr><call><name>polar_wal_pipeline_get_worker_wait_obj</name><argument_list>(<argument><expr><name>NOTIFY_WORKER_THREAD_NO</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>notify_worker_wait_obj</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* POLAR wal pipeline END */</comment>
</unit>
