<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_flashback/polar_flashback_drop.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_flashback_drop.c
 *
 *
 * Copyright (c) 2020-2021, Alibaba-inc PolarDB Group
 *
 * IDENTIFICATION
 *    src/backend/polar_flashback/polar_flashback_drop.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/dependency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_depend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/schemacmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablecmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_drop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/tqual.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLSD_LENGTH</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_grant_recyclebin</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>trashcan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RoleSpec</name> <modifier>*</modifier></type><name>spec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrantStmt</name> <modifier>*</modifier></type><name>grantStmt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>spec</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>RoleSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>grantStmt</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>GrantStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>roletype</name></name> <operator>=</operator> <name>ROLESPEC_PUBLIC</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>grantStmt</name><operator>-&gt;</operator><name>is_grant</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>grantStmt</name><operator>-&gt;</operator><name>targtype</name></name> <operator>=</operator> <name>ACL_TARGET_OBJECT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>grantStmt</name><operator>-&gt;</operator><name>objtype</name></name> <operator>=</operator> <name>OBJECT_SCHEMA</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>grantStmt</name><operator>-&gt;</operator><name>objects</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name>trashcan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>grantStmt</name><operator>-&gt;</operator><name>grantees</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>grantStmt</name><operator>-&gt;</operator><name>grant_option</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>grantStmt</name><operator>-&gt;</operator><name>behavior</name></name> <operator>=</operator> <name>DROP_RESTRICT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecuteGrantStmt</name><argument_list>(<argument><expr><name>grantStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>grantStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ObjectAddresses</name> <modifier>*</modifier></type>
<name>polar_get_ObjectAddresses</name><parameter_list>(<parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>relOid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>rel_oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddresses</name> <modifier>*</modifier></type><name>objects</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>obj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>objects</name> <operator>=</operator> <call><name>new_object_addresses</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>rel_oid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_exact_object_address</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name><name>relOid</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>obj</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>add_exact_object_address</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>objects</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_drop_table</name><parameter_list>(<parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>relOid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>rel_oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddresses</name> <modifier>*</modifier></type><name>objects</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>objects</name> <operator>=</operator> <call><name>polar_get_ObjectAddresses</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>rel_oid</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>performMultipleDeletions</name><argument_list>(<argument><expr><name>objects</name></expr></argument>, <argument><expr><name>DROP_CASCADE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_object_addresses</name><argument_list>(<argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_report_dependency</name><parameter_list>(<parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>relOid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddresses</name> <modifier>*</modifier></type><name>objects</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>objects</name> <operator>=</operator> <call><name>polar_get_ObjectAddresses</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_find_report_dependentobjects</name><argument_list>(<argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_object_addresses</name><argument_list>(<argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_rename_table</name><parameter_list>(<parameter><decl><type><name>RangeVar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>new_table_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RenameStmt</name>  <modifier>*</modifier></type><name>newRenameStmt</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>newRenameStmt</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>RenameStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newRenameStmt</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>T_RenameStmt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newRenameStmt</name><operator>-&gt;</operator><name>renameType</name></name> <operator>=</operator> <name>OBJECT_TABLE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newRenameStmt</name><operator>-&gt;</operator><name>relation</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newRenameStmt</name><operator>-&gt;</operator><name>newname</name></name> <operator>=</operator> <name>new_table_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RenameRelation</name><argument_list>(<argument><expr><name>newRenameStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>newRenameStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *POLAR: rename the table which will be drop to the recyclebin. 
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_construct_newname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>new_table_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbl_name</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>nspOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>        <name><name>schema_oidstr</name><index>[<expr><name>FLSD_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>        <name><name>time_str</name><index>[<expr><name>FLSD_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>newtable_len</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>tz</name> <init>= <expr><call><name>GetCurrentTransactionStartTimestamp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_lltoa</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name>time_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_lltoa</name><argument_list>(<argument><expr><name>nspOid</name></expr></argument>, <argument><expr><name>schema_oidstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>newtable_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>schema_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tbl_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>time_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>new_table_name</name></expr></argument>, <argument><expr><name>newtable_len</name></expr></argument>, <argument><expr><literal type="string">"%s$%s$%s"</literal></expr></argument>, <argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>tbl_name</name></expr></argument>, <argument><expr><name>time_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *POLAR: Get the table according to the order of putting it in the recyclebin.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>polar_get_table_according_time</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flashback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexScanDesc</name></type>   <name>scandesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>       <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_class</name></type>   <name>pg_class_tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>           <name>time</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>key_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>key_2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>relname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Relation</name></type>        <name>currentRelation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>        <name>RelationDesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKey</name></type>         <name>scan_keys</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>scan_keys</name> <operator>=</operator> <operator>(</operator><name>ScanKey</name><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ScanKeyData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>key_1</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s$%s$"</literal></expr></argument>, <argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>rel_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>key_2</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s$%s%c"</literal></expr></argument>, <argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>rel_name</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScanKeyEntryInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scan_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>BTGreaterEqualStrategyNumber</name></expr></argument>,
						   <argument><expr><name>NAMEOID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>F_NAMEGE</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>key_1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyEntryInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scan_keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>BTLessStrategyNumber</name></expr></argument>,
						   <argument><expr><name>NAMEOID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>F_NAMELT</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>key_2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>currentRelation</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>RelationRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>RelationDesc</name> <operator>=</operator> <call><name>index_open</name><argument_list>(<argument><expr><name>ClassNameNspIndexId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>scandesc</name> <operator>=</operator> <call><name>index_beginscan</name><argument_list>(<argument><expr><name>currentRelation</name></expr></argument>,
							   <argument><expr><name>RelationDesc</name></expr></argument>,
							   <argument><expr><name>SnapshotSelf</name></expr></argument>,<comment type="line">//SnapshotAny</comment>
							   <argument><expr><literal type="number">2</literal></expr></argument>,
							   <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>index_rescan</name><argument_list>(<argument><expr><name>scandesc</name></expr></argument>, <argument><expr><name>scan_keys</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>tuple</name> <operator>=</operator> <call><name>index_getnext</name><argument_list>(<argument><expr><name>scandesc</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int64</name></type>  <name>temp_time</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>temp_relname</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>int64_str</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>pg_class_tuple</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>temp_relname</name> <operator>=</operator> <name><name>pg_class_tuple</name><operator>-&gt;</operator><name>relname</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>int64_str</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>temp_relname</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pg_class_tuple</name><operator>-&gt;</operator><name>relowner</name></name> <operator>!=</operator> <call><name>GetUserId</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>superuser</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>polar_superuser</name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><name>int64_str</name> <operator>||</operator> <name><name>int64_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>int64_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>temp_time</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>int64_str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>relname</name> <operator>||</operator> <operator>(</operator><name>flashback</name> <operator>&amp;&amp;</operator> <call><name>timestamp_cmp_internal</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>temp_time</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator>
				<operator>(</operator><operator>!</operator><name>flashback</name> <operator>&amp;&amp;</operator> <call><name>timestamp_cmp_internal</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>temp_time</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>relname</name> <operator>=</operator> <name>temp_relname</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>time</name> <operator>=</operator> <name>temp_time</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></while>

	<expr_stmt><expr><call><name>index_endscan</name><argument_list>(<argument><expr><name>scandesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>currentRelation</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>index_close</name><argument_list>(<argument><expr><name>RelationDesc</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>scan_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>key_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>key_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>relname</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *POLAR: Delete the table in the recyclebin
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_purge_table</name><parameter_list>(<parameter><decl><type><name>DropStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>trashcan_nspname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>    <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RangeVar</name>    <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>         <name>relOid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>         <name>nspOid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>schema_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>new_table_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DUPLICATE_TABLE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"purge do not support multi table"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cell</name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>makeRangeVarFromNameList</name><argument_list>(<argument><expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>schemaname</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>nspOid</name>  <operator>=</operator> <call><name>RangeVarGetAndCheckCreationNamespace</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>schema_name</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name>nspOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>schema_name</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>schemaname</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>new_table_name</name> <operator>=</operator> <call><name>polar_get_table_according_time</name><argument_list>(<argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_table_name</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DUPLICATE_TABLE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"relation \"%s\" do not exist in recyclebin "</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>nspOid</name> <operator>=</operator> <call><name>get_namespace_oid</name><argument_list>(<argument><expr><name>trashcan_nspname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>relOid</name> <operator>=</operator> <call><name>get_relname_relid</name><argument_list>(<argument><expr><name>new_table_name</name></expr></argument>, <argument><expr><name>nspOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_drop_table</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>relOid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>


<comment type="block">/*
 * POLAR: Get partition table and invalid table
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_find_partitionAndInvalidOid</name><parameter_list>(<parameter><decl><type><name>DropStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>,
								  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>number_object_p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>number_object</name></decl></parameter>,
								  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isInvalid</name></decl></parameter>, <parameter><decl><type><name>RangeVar</name> <modifier>*</modifier><modifier>*</modifier></type><name>arr_r</name></decl></parameter>,
								  <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>arr_reloid_p</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>arr_reloid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>         <name>namespaceId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>         <name>relid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>    <name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RangeVar</name>    <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>cell</argument>, <argument>stmt-&gt;objects</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>makeRangeVarFromNameList</name><argument_list>(<argument><expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>schemaname</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>namespaceId</name> <operator>=</operator> <call><name>LookupExplicitNamespace</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>schemaname</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>namespaceId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>relid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>relid</name> <operator>=</operator> <call><name>get_relname_relid</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>, <argument><expr><name>namespaceId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>relid</name> <operator>=</operator> <call><name>RelnameGetRelid</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>isInvalid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>number_object</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>number_object_p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return ;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>RelationIdGetRelation</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <literal type="char">'p'</literal> <operator>||</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relispartition</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>arr_reloid_p</name><index>[<expr><operator>*</operator><name>number_object_p</name></expr>]</index></name> <operator>=</operator> <name>relid</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>number_object_p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>arr_reloid</name><index>[<expr><operator>*</operator><name>number_object</name></expr>]</index></name> <operator>=</operator> <name>relid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>arr_r</name><index>[<expr><operator>*</operator><name>number_object</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>number_object</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>RelationClose</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_create_grant_recyclebin</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>trashcan_nspname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateSchemaStmt</name>    <modifier>*</modifier></type><name>newcreateStmt</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>newcreateStmt</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>CreateSchemaStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newcreateStmt</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>T_CreateSchemaStmt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newcreateStmt</name><operator>-&gt;</operator><name>schemaname</name></name> <operator>=</operator> <name>trashcan_nspname</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CreateSchemaCommand</name><argument_list>(<argument><expr><name>newcreateStmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_grant_recyclebin</name><argument_list>(<argument><expr><name>trashcan_nspname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>newcreateStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_deal_tempAndRecyclebin_table</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>,
								   <parameter><decl><type><name>ProcessUtilityContext</name></type> <name>context</name></decl></parameter>,
								   <parameter><decl><type><name>ParamListInfo</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>QueryEnvironment</name> <modifier>*</modifier></type><name>queryEnv</name></decl></parameter>,
								   <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>completionTag</name></decl></parameter>,
								   <parameter><decl><type><name>DropStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>RangeVar</name> <modifier>*</modifier><modifier>*</modifier></type><name>arr_r</name></decl></parameter>,
								   <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>arr_reloid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>out_NspOid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>isAnyTempNamespace</name><argument_list>(<argument><expr><name>out_NspOid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_drop_table</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>arr_reloid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>objects</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>arr_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>schemaname</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>objects</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>lcons</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name><name>arr_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>schemaname</name></expr></argument>)</argument_list></call></expr></argument>,
									   <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name><name>arr_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>relname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>objects</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name><name>arr_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>relname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>objects</name></name> <operator>=</operator> <name>objects</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>stmt</name></expr> ;</expr_stmt>
		<expr_stmt><expr><call><name>standard_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
								<argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
								<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_drop_to_recyclebin</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>,
						 <parameter><decl><type><name>ProcessUtilityContext</name></type> <name>context</name></decl></parameter>,
						 <parameter><decl><type><name>ParamListInfo</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>QueryEnvironment</name> <modifier>*</modifier></type><name>queryEnv</name></decl></parameter>,
						 <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>completionTag</name></decl></parameter>,
						 <parameter><decl><type><name>DropStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>RangeVar</name> <modifier>*</modifier><modifier>*</modifier></type><name>arr_r</name></decl></parameter>,
						 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>out_NspOid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RangeVar</name>    <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>new_maxlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>schema_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>arr_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>relname</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>FLSD_LENGTH</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>        <name><name>new_table_name</name><index>[<expr><name>new_maxlen</name></expr>]</index></name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>AlterObjectSchemaStmt</name> <modifier>*</modifier></type><name>newstmt</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterObjectSchemaStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>new_table_name</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>new_maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_construct_newname</name><argument_list>(<argument><expr><name>new_table_name</name></expr></argument>, <argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name><name>arr_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>relname</name></expr></argument>, <argument><expr><name>out_NspOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>newstmt</name><operator>-&gt;</operator><name>objectType</name></name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>removeType</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newstmt</name><operator>-&gt;</operator><name>newschema</name></name> <operator>=</operator> <name>RECYCLEBINNAME</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newstmt</name><operator>-&gt;</operator><name>missing_ok</name></name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr>;</expr_stmt>

	<comment type="block">/*If there is no recyclebin schema, create the recyclebin schema*/</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SearchSysCacheExists1</name><argument_list>(<argument><expr><name>NAMESPACENAME</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>RECYCLEBINNAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_create_grant_recyclebin</name><argument_list>(<argument><expr><name>RECYCLEBINNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>polar_rename_table</name><argument_list>(<argument><expr><name><name>arr_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>new_table_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>makeRangeVar</name><argument_list>(<argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>new_table_name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newstmt</name><operator>-&gt;</operator><name>relation</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>newstmt</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>standard_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
							<argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
							<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>newstmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *POLAR: drop table, put the table in the recyclebin
 */</comment>
<function><type><name>void</name></type>
<name>polar_flashback_drop</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>,
					 <parameter><decl><type><name>ProcessUtilityContext</name></type> <name>context</name></decl></parameter>,
					 <parameter><decl><type><name>ParamListInfo</name></type> <name>params</name></decl></parameter>,
					 <parameter><decl><type><name>QueryEnvironment</name> <modifier>*</modifier></type><name>queryEnv</name></decl></parameter>,
					 <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
					 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>completionTag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>    <name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>         <name>out_NspOid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RangeVar</name>    <modifier>*</modifier></type><name><name>arr_r</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>         <name><name>arr_reloid_p</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>         <name><name>arr_reloid</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>trashcan_nspname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>schema_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DropStmt</name>    <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>trashcan_nspname</name> <operator>=</operator> <name>RECYCLEBINNAME</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>stmt</name> <operator>=</operator> <operator>(</operator><name>DropStmt</name> <operator>*</operator><operator>)</operator> <name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>removeType</name></name> <operator>==</operator> <name>OBJECT_TABLE</name> <operator>&amp;&amp;</operator> <name><name>stmt</name><operator>-&gt;</operator><name>behavior</name></name> <operator>==</operator> <name>DROP_RESTRICT</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>purge_drop</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_purge_table</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>trashcan_nspname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>number_object_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>number_object</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>isInvalid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>polar_find_partitionAndInvalidOid</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>number_object_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>number_object</name></expr></argument>,
											  <argument><expr><operator>&amp;</operator><name>isInvalid</name></expr></argument>, <argument><expr><name>arr_r</name></expr></argument>, <argument><expr><name>arr_reloid_p</name></expr></argument>, <argument><expr><name>arr_reloid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>isInvalid</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>standard_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
										<argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
										<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>number_object</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>polar_report_dependency</name><argument_list>(<argument><expr><name>arr_reloid</name></expr></argument>, <argument><expr><name>number_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>number_object_p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>polar_drop_table</name><argument_list>(<argument><expr><name>arr_reloid_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>number_object_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number_object</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>RelationIdGetRelation</name><argument_list>(<argument><expr><name><name>arr_reloid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>rel</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>out_NspOid</name> <operator>=</operator> <call><name>RelationGetNamespace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>schema_name</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name>out_NspOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>RelationClose</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<comment type="block">/*two case: 1.temp table ;2.drop table in recyclebin */</comment>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isAnyTempNamespace</name><argument_list>(<argument><expr><name>out_NspOid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>trashcan_nspname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>polar_drop_to_recyclebin</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
													 <argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
													 <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>,
													 <argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>arr_r</name></expr></argument>,
													 <argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>out_NspOid</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>polar_deal_tempAndRecyclebin_table</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>, <argument><expr><name>context</name></expr></argument>,
															   <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
															   <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>,
															   <argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>arr_r</name></expr></argument>,
															   <argument><expr><name>arr_reloid</name></expr></argument>, <argument><expr><name>out_NspOid</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>standard_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
								<argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
								<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *POLAR: recovery table, recovery the table from the recyclebin
 */</comment>
<function><type><name>void</name></type>
<name>polar_flashback_recover_table</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>,
					  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>,
					  <parameter><decl><type><name>ProcessUtilityContext</name></type> <name>context</name></decl></parameter>,
					  <parameter><decl><type><name>ParamListInfo</name></type> <name>params</name></decl></parameter>,
					  <parameter><decl><type><name>QueryEnvironment</name> <modifier>*</modifier></type><name>queryEnv</name></decl></parameter>,
					  <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
					  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>completionTag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>table_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>new_table_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>schema_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RangeVar</name>    <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>         <name>nspOid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RangeVar</name>    <modifier>*</modifier></type><name>currentrv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>trashcan_nspname</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>AlterObjectSchemaStmt</name>   <modifier>*</modifier></type><name>newstmt</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>AlterObjectSchemaStmt</name>   <modifier>*</modifier></type><name>stmt</name></decl> ;</decl_stmt>

	<expr_stmt><expr><name>trashcan_nspname</name> <operator>=</operator> <name>RECYCLEBINNAME</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>newstmt</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>AlterObjectSchemaStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>stmt</name> <operator>=</operator> <operator>(</operator><name>AlterObjectSchemaStmt</name> <operator>*</operator><operator>)</operator> <name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>newstmt</name><operator>-&gt;</operator><name>objectType</name></name> <operator>=</operator> <name>OBJECT_TABLE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newstmt</name><operator>-&gt;</operator><name>missing_ok</name></name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stmt</name><operator>-&gt;</operator><name>relation</name><operator>-&gt;</operator><name>schemaname</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*Get the current schema name*/</comment>
		<expr_stmt><expr><name>currentrv</name> <operator>=</operator> <call><name>makeRangeVar</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nspOid</name> <operator>=</operator> <call><name>RangeVarGetAndCheckCreationNamespace</name><argument_list>(<argument><expr><name>currentrv</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>schema_name</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name>nspOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name><operator>-&gt;</operator><name>schemaname</name></name></expr></argument>, <argument><expr><name>trashcan_nspname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DUPLICATE_TABLE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"can not flashback table in recyclebin"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>schema_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>relation</name><operator>-&gt;</operator><name>schemaname</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>table_name</name> <operator>=</operator> <call><name>polar_get_table_according_time</name><argument_list>(<argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>table_name</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DUPLICATE_TABLE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"relation \"%s\" do not exist in recyclebin "</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>newtablename</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>new_table_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>newtablename</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>new_table_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>relation</name><operator>-&gt;</operator><name>relname</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name><operator>-&gt;</operator><name>relname</name></name> <operator>=</operator> <name>table_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name><operator>-&gt;</operator><name>schemaname</name></name> <operator>=</operator> <name>trashcan_nspname</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_rename_table</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>new_table_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>makeRangeVar</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name><operator>-&gt;</operator><name>schemaname</name></name></expr></argument>, <argument><expr><name>new_table_name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newstmt</name><operator>-&gt;</operator><name>relation</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>newstmt</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>standard_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
							<argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
							<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>newstmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *POLAR: when polar_enable_flashback_drop = off,report error
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_check_stmt_flashback_opt</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_DropStmt</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>DropStmt</name> <operator>*</operator><operator>)</operator><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>removeType</name> <operator>==</operator> <name>OBJECT_TABLE</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>DropStmt</name> <operator>*</operator><operator>)</operator><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>opt_flashback</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"flashback_table function is not turned on"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_AlterObjectSchemaStmt</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>AlterObjectSchemaStmt</name> <operator>*</operator><operator>)</operator><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>is_flashback</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"flashback_table function is not turned on"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *POLAR: when polar_enable_flashback_drop = on,execute
 */</comment>
<function><type><name>bool</name></type>
<name>polar_flashback_drop_process_utility</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>,
										<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>,
										<parameter><decl><type><name>ProcessUtilityContext</name></type> <name>context</name></decl></parameter>,
										<parameter><decl><type><name>ParamListInfo</name></type> <name>params</name></decl></parameter>,
										<parameter><decl><type><name>QueryEnvironment</name> <modifier>*</modifier></type><name>queryEnv</name></decl></parameter>,
										<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
										<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>completionTag</name></decl></parameter>,
										<parameter><decl><type><name>bool</name></type> <name>ishook</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>polar_enable_flashback_drop</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_DropStmt</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>DropStmt</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>ispurge</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>DropStmt</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>clean_up</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>ishook</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
				       <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"flashback_table function is turned on, drop will follow flashback_drop logic"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					   
			<expr_stmt><expr><call><name>polar_flashback_drop</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
								 <argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
								 <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_AlterObjectSchemaStmt</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>AlterObjectSchemaStmt</name> <operator>*</operator><operator>)</operator><name>node</name><operator>)</operator><operator>-&gt;</operator><name>is_flashback</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>polar_flashback_recover_table</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
								  <argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
								  <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_DropStmt</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>DropStmt</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>clean_up</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>superuser</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>polar_superuser</name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>standard_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
										<argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
										<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>polar_create_grant_recyclebin</name><argument_list>(<argument><expr><name>RECYCLEBINNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"only superuser can purge recyclebin"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>polar_check_stmt_flashback_opt</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function></unit>
