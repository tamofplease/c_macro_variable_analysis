<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_flashback/polar_flashback_log_list.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_flashback_log_list.c
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2021, Alibaba Group Holding limited
 *
 * IDENTIFICATION
 *    src/backend/polar_flashback/polar_flashback_log_list.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_logindex_redo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_insert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_point.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/startup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/buf_internals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>

<comment type="block">/* GUCs */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>polar_flashback_log_sync_buf_timeout</name></decl>;</decl_stmt>

<comment type="block">/*
 * POLAR: Clean the origin buffer bit.
 *
 * Please make sure that the origin buffer index is valid.
 */</comment>
<function><type><name>void</name></type>
<name>polar_clean_origin_buf_bit</name><parameter_list>(<parameter><decl><type><name>flog_list_ctl_t</name></type> <name>ctl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_id</name></decl></parameter>, <parameter><decl><type><name>int8</name></type> <name>origin_buf_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>array_id</name> <init>= <expr><call><name>get_origin_buf_array_id</name><argument_list>(<argument><expr><name>origin_buf_index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Clean the buffer and release */</comment>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>origin_buf</name></name> <operator>+</operator> <name>origin_buf_index</name> <operator>*</operator> <name>BLCKSZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLEAR_BUFFERTAG</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>buf_tag</name><index>[<expr><name>origin_buf_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>get_origin_buf_bit</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>origin_buf_index</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_fetch_and_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>origin_buf_bitmap</name><index>[<expr><name>array_id</name></expr>]</index></name></expr></argument>, <argument><expr><operator>~</operator><operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>origin_buf_index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>get_origin_buf_bit</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>origin_buf_index</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>origin_buf_index</name> <operator>!=</operator> <name>INVAILD_ORIGIN_BUF_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>origin_buf_index</name> <operator>=</operator> <name>INVAILD_ORIGIN_BUF_INDEX</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Add one buffer to flashback log list.
 *
 * NB: The caller must guarantee only one can insert the same buffer once.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_buf_to_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>buf_id</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>flog_list_ctl_t</name></type> <name>list_ctl</name></decl></parameter>, <parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name></type> <name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int8</name></type> <name>origin_buf_index</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>buf_id</name> <operator>&lt;</operator> <name>NBuffers</name> <operator>&amp;&amp;</operator> <name>buf_id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>info</name> <operator>==</operator> <name>FLOG_LIST_SLOT_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>lsn</name> <operator>=</operator> <call><name>polar_get_prior_fbpoint_lsn</name><argument_list>(<argument><expr><name>buf_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>redo_lsn</name> <operator>=</operator> <name>lsn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>fbpoint_lsn</name> <operator>=</operator> <call><name>polar_get_local_fbpoint_lsn</name><argument_list>(<argument><expr><name>buf_ctl</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>info</name> <operator>|=</operator> <name>info</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>origin_buf_index</name> <operator>=</operator> <name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>origin_buf_index</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>origin_buf_index</name> <operator>!=</operator> <name>INVAILD_ORIGIN_BUF_INDEX</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_hdr</name> <init>= <expr><call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BUFFERTAGS_EQUAL</name><argument_list>(<argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>buf_tag</name><index>[<expr><name>origin_buf_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>polar_clean_origin_buf_bit</name><argument_list>(<argument><expr><name>list_ctl</name></expr></argument>, <argument><expr><name>buf_id</name></expr></argument>, <argument><expr><name>origin_buf_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>list_ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>prev_buf</name> <operator>=</operator> <name>prev</name> <operator>=</operator> <name><name>list_ctl</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>next_buf</name> <operator>=</operator> <name>NOT_IN_FLOG_LIST</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NOT_IN_FLOG_LIST</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>buf_id</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>prev</name></expr>]</index></name><operator>.</operator><name>next_buf</name> <operator>=</operator> <name>buf_id</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>buf_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>list_ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>list_ctl</name><operator>-&gt;</operator><name>insert_total_num</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_hdr</name> <init>= <expr><call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Insert the page [%u, %u, %u], %u, %u in buffer %d into flashback log async list, "</literal>
			 <literal type="string">"its prev is %d, its redo lsn is %ld"</literal></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>,
			 <argument><expr><name>buf_id</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_buf_from_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>buf_id</name></decl></parameter>, <parameter><decl><type><name>flog_list_ctl_t</name></type> <name>ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>next</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>buf_id</name> <operator>&lt;</operator> <name>NBuffers</name> <operator>&amp;&amp;</operator> <name>buf_id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>info</name> <operator>=</operator> <name>FLOG_LIST_SLOT_EMPTY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>redo_lsn</name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>prev_buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>next_buf</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctl</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>buf_id</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>prev</name> <operator>!=</operator> <name>NOT_IN_FLOG_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>prev</name></expr>]</index></name><operator>.</operator><name>next_buf</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctl</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name>buf_id</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>next</name> <operator>!=</operator> <name>NOT_IN_FLOG_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>next</name></expr>]</index></name><operator>.</operator><name>prev_buf</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>prev_buf</name> <operator>=</operator> <name>NOT_IN_FLOG_LIST</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>next_buf</name> <operator>=</operator> <name>NOT_IN_FLOG_LIST</name></expr>;</expr_stmt>

	<comment type="block">/* Make sure the insert of the slot becomes visible to others. */</comment>
	<expr_stmt><expr><call><name>pg_write_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>remove_total_num</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Remove the buffer(%d) from flashback log list, "</literal>
			 <literal type="string">"its prev is %d, its next is %d. "</literal>
			 <literal type="string">"Now the head of the list is %d, the tail of the list is %d "</literal></expr></argument>,
			 <argument><expr><name>buf_id</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>next</name></expr></argument>,
			 <argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Set the buffer in the list while the buffer
 * is not in the list.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>set_buf_in_list</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>   <name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>polar_lock_redo_state</name><argument_list>(<argument><expr><name>buf_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>POLAR_BUF_IN_FLOG_LIST</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>state</name> <operator>|=</operator> <name>POLAR_BUF_IN_FLOG_LIST</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>polar_unlock_redo_state</name><argument_list>(<argument><expr><name>buf_hdr</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>set_buf_inserting_log</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_hdr</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>inserting_already</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>   <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>polar_lock_redo_state</name><argument_list>(<argument><expr><name>buf_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>POLAR_BUF_INSERTING_FLOG</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>inserting_already</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>POLAR_BUF_IN_FLOG_LIST</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>state</name> <operator>|=</operator> <name>POLAR_BUF_INSERTING_FLOG</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>polar_unlock_redo_state</name><argument_list>(<argument><expr><name>buf_hdr</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_flog_insert_interrupts</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>AmStartupProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_startup_interrupt_with_pinned_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>InterruptPending</name> <operator>&amp;&amp;</operator> <name>ProcDiePending</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_unpin_buffer_proc_exit</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_wait_buf_flog_rec_insert</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>start</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Wait for the flashback log inserting by background */</comment>
	<do>do
	<block>{<block_content>
		<comment type="block">/* Handle interrupt signals of startup process to avoid hang */</comment>
		<expr_stmt><expr><call><name>process_flog_insert_interrupts</name><argument_list>(<argument><expr><call><name>BufferDescriptorGetBuffer</name><argument_list>(<argument><expr><name>buf_hdr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* NB: A IO will take 100us? So we just wait 1000us */</comment>
		<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>polar_flashback_log_sync_buf_timeout</name> <operator>&amp;&amp;</operator> <call><name>TimestampDifferenceExceeds</name><argument_list>(<argument><expr><name>start</name></expr></argument>,
																			   <argument><expr><call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>polar_flashback_log_sync_buf_timeout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>
	while <condition>(<expr><call><name>is_buf_in_flog_list</name><argument_list>(<argument><expr><name>buf_hdr</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_flog_list_head_with_lock</name><parameter_list>(<parameter><decl><type><name>flog_list_ctl_t</name></type> <name>ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>buf_id</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf_id</name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>buf_id</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read origin page from file.
 */</comment>
<function><type><name>void</name></type>
<name>read_origin_page_from_file</name><parameter_list>(<parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>origin_page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SMgrRelation</name></type> <name>smgr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RelFileNode</name></type> <name>rnode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ForkNumber</name></type>  <name>fork_num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>blkno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>nblocks</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rnode</name> <operator>=</operator> <name><name>tag</name><operator>-&gt;</operator><name>rnode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>fork_num</name> <operator>=</operator> <name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>blkno</name> <operator>=</operator> <name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>origin_page</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Find smgr relation for buffer */</comment>
	<expr_stmt><expr><name>smgr</name> <operator>=</operator> <call><name>smgropen</name><argument_list>(<argument><expr><name>rnode</name></expr></argument>, <argument><expr><name>InvalidBackendId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nblocks</name> <operator>=</operator> <call><name>smgrnblocks</name><argument_list>(<argument><expr><name>smgr</name></expr></argument>, <argument><expr><name>fork_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>blkno</name> <operator>&gt;=</operator> <name>nblocks</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"The origin page of [%u, %u, %u], %u, %u is a empty page"</literal></expr></argument>,
					<argument><expr><name><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
					<argument><expr><name><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
					<argument><expr><name><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
					<argument><expr><name>fork_num</name></expr></argument>,
					<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>smgrread</name><argument_list>(<argument><expr><name>smgr</name></expr></argument>, <argument><expr><name>fork_num</name></expr></argument>, <argument><expr><name>blkno</name></expr></argument>, <argument><expr><name>origin_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Not check the checksum here but check it in decode the flashback log
	 * record.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Read the origin page [%u, %u, %u], %u, %u from file"</literal></expr></argument>,
			 <argument><expr><name><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
			 <argument><expr><name><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
			 <argument><expr><name><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
			 <argument><expr><name>fork_num</name></expr></argument>,
			 <argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Insert a flashback log record of buffer from list.
 *
 * NB: Just one process to insert record from one flashback async list.
 * Maybe the flashback async list can be many.
 *
 * The background worker will insert the flashback log record of async list
 * head buffer, but the buffer can be removed by backend in very small cases.
 * And in very small cases, the normal backend check the buffer is
 * in the list by is_buf_in_flog_list, but it may remove by the background.
 *
 * The background worker will report the error when the result is false.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>insert_buf_flog_rec_from_list</name><parameter_list>(<parameter><decl><type><name>flog_list_ctl_t</name></type> <name>list_ctl</name></decl></parameter>, <parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>,
							  <parameter><decl><type><name>flog_index_queue_ctl_t</name></type> <name>queue_ctl</name></decl></parameter>, <parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_hdr</name></decl></parameter>,
							  <parameter><decl><type><name>bool</name></type> <name>is_background</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_validate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>redo_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>fbpoint_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>inserting_already</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type> <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>buf_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_flog_rec_ptr</name></type> <name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int8</name></type> <name>origin_buf_index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGAlignedBlock</name></type>  <name>origin_page</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf_id</name> <operator>=</operator> <name><name>buf_hdr</name><operator>-&gt;</operator><name>buf_id</name></name></expr>;</expr_stmt>
	<comment type="block">/* Wait the buffer inserting flashback log finished */</comment>
	<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>WAIT_EVENT_FLASHBACK_LOG_INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Only one can insert the flashback log */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>set_buf_inserting_log</name><argument_list>(<argument><expr><name>buf_hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inserting_already</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>redo_lsn</name> <operator>=</operator> <name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>redo_lsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fbpoint_lsn</name> <operator>=</operator> <name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>fbpoint_lsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>info</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>origin_buf_index</name> <operator>=</operator> <name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>origin_buf_index</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>info</name> <operator>&amp;</operator> <name>FLOG_LIST_SLOT_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Remove the buffer to let others go */</comment>
		<expr_stmt><expr><call><name>remove_buf_from_list</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>, <argument><expr><name>list_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* When the buffer is validate, just clean everything */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_validate</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type> <name>from_origin_buf</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

			<comment type="block">/* Read the origin page. */</comment>
			<if_stmt><if>if <condition>(<expr><name>origin_buf_index</name> <operator>!=</operator> <name>INVAILD_ORIGIN_BUF_INDEX</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>BUFFERTAGS_EQUAL</name><argument_list>(<argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>buf_tag</name><index>[<expr><name>origin_buf_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>origin_page</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>origin_buf</name></name> <operator>+</operator> <name>origin_buf_index</name> <operator>*</operator> <name>BLCKSZ</name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>from_origin_buf</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>read_origin_page_from_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name><name>origin_page</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<comment type="block">/* Insert the flashback log for the buffer */</comment>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>polar_insert_buf_flog_rec</name><argument_list>(<argument><expr><name>buf_ctl</name></expr></argument>, <argument><expr><name>queue_ctl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>redo_lsn</name></expr></argument>,
					<argument><expr><name>fbpoint_lsn</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>origin_page</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>from_origin_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>buf_id</name></expr>]</index></name><operator>.</operator><name>flashback_ptr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>origin_buf_index</name> <operator>!=</operator> <name>INVAILD_ORIGIN_BUF_INDEX</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_clean_origin_buf_bit</name><argument_list>(<argument><expr><name>list_ctl</name></expr></argument>, <argument><expr><name>buf_id</name></expr></argument>, <argument><expr><name>origin_buf_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>clean_buf_flog_state</name><argument_list>(<argument><expr><name>buf_hdr</name></expr></argument>,
				<argument><expr><operator>(</operator><name>POLAR_BUF_IN_FLOG_LIST</name> <operator>|</operator> <name>POLAR_BUF_INSERTING_FLOG</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>is_background</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>bg_remove_num</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Insert flashback log record from async list: "</literal>
				 <literal type="string">"page [%u, %u, %u], %u, %u buffer(%d) by %s."</literal></expr></argument>,
				 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
				 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
				 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
				 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>,
				 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>, <argument><expr><name>buf_id</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_background</name></expr> ?</condition><then> <expr><literal type="string">"background worker"</literal></expr> </then><else>: <expr><literal type="string">"backend"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>inserting_already</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Wait to insert the page [%u, %u, %u], %u, %u flashback log record "</literal>
				 <literal type="string">"by %s."</literal></expr></argument>,
				 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
				 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
				 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
				 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>,
				 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_background</name></expr> ?</condition><then> <expr><literal type="string">"backend"</literal></expr> </then><else>: <expr><literal type="string">"background worker"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* The background worker just return */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_background</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>polar_wait_buf_flog_rec_insert</name><argument_list>(<argument><expr><name>buf_hdr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cancel the process due to wait the flashback log of the page "</literal>
				 <literal type="string">"([%u, %u, %u]), %u, %u inserting timeout. Please enlarge the "</literal>
				 <literal type="string">"guc polar_flashback_log_sync_buf_timeout"</literal></expr></argument>,
				 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
				 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>, <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>,
				 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int8</name></type>
<name>get_a_free_origin_buf</name><parameter_list>(<parameter><decl><type><name>flog_list_ctl_t</name></type> <name>ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>array_id</name> <init>= <expr><name>INVAILD_ORIGIN_BUF_ARRAY</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>array_id</name> <operator>==</operator> <name>INVAILD_ORIGIN_BUF_ARRAY</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>array_id</name> <operator>=</operator> <name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name> <operator>%</operator> <name>POLAR_ORIGIN_PAGE_BUF_ARRAY_NUM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>POLAR_ORIGIN_PAGE_BUF_ARRAY_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
	    <decl_stmt><decl><type><name>int8</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>uint32</name></type> <name>buf_bitmap_curr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>uint32</name></type> <name>buf_bitmap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	    <expr_stmt><expr><name>buf_bitmap_curr</name> <operator>=</operator> <name>buf_bitmap</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>origin_buf_bitmap</name><index>[<expr><name>array_id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt><if>if <condition>(<expr><name>buf_bitmap_curr</name> <operator>==</operator> <literal type="number">0xFFFFFFFF</literal></expr>)</condition>
	    <block>{<block_content>
	    	<expr_stmt><expr><name>array_id</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>array_id</name> <operator>==</operator> <name>POLAR_ORIGIN_PAGE_BUF_ARRAY_NUM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>array_id</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	    	<continue>continue;</continue>
	    </block_content>}</block></if></if_stmt>

	    <do>do
	    <block>{<block_content>
	        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf_bitmap</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>pg_atomic_compare_exchange_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>origin_buf_bitmap</name><index>[<expr><name>array_id</name></expr>]</index></name></expr></argument>,
	        		<argument><expr><operator>&amp;</operator><name>buf_bitmap_curr</name></expr></argument>, <argument><expr><name>buf_bitmap_curr</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
	        <block>{<block_content>
	        	<return>return <expr><name>array_id</name> <operator>*</operator> <name>POLAR_ORIGIN_PAGE_BUF_NUM_PER_ARRAY</name> <operator>+</operator> <name>n</name></expr>;</return>
	        </block_content>}</block></if></if_stmt>

	        <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	        <expr_stmt><expr><name>buf_bitmap_curr</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>origin_buf_bitmap</name><index>[<expr><name>array_id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name>buf_bitmap</name> <operator>=</operator> <name>buf_bitmap_curr</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	    </block_content>}</block> while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>POLAR_ORIGIN_PAGE_BUF_NUM_PER_ARRAY</name></expr>)</condition>;</do>

	    <expr_stmt><expr><name>array_id</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>array_id</name> <operator>==</operator> <name>POLAR_ORIGIN_PAGE_BUF_ARRAY_NUM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>array_id</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>INVAILD_ORIGIN_BUF_INDEX</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Add one buffer to flashback log list.
 *
 * buf: 		 The buffer.
 * is_candidate: Is a candidate.
 *
 * NB: The caller must guarantee only one can insert the same buffer once.
 */</comment>
<function><type><name>void</name></type>
<name>polar_push_buf_to_flog_list</name><parameter_list>(<parameter><decl><type><name>flog_list_ctl_t</name></type> <name>ctl</name></decl></parameter>, <parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>, <parameter><decl><type><name>Buffer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_candidate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_hdr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type> <name>info</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>buf_id</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>buf</name> <operator>&lt;=</operator> <name>NBuffers</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf_id</name> <operator>=</operator> <name>buf</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf_hdr</name> <operator>=</operator> <call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>set_buf_in_list</name><argument_list>(<argument><expr><name>buf_hdr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We are here means that the replay of the buffer has been done,
		 * clean the POLAR_BUF_FLOG_DISABLE state and go on.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>polar_check_buf_flog_state</name><argument_list>(<argument><expr><name>buf_hdr</name></expr></argument>, <argument><expr><name>POLAR_BUF_FLOG_DISABLE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>clean_buf_flog_state</name><argument_list>(<argument><expr><name>buf_hdr</name></expr></argument>, <argument><expr><name>POLAR_BUF_FLOG_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>info</name> <operator>=</operator> <name>FLOG_LIST_SLOT_READY</name></expr>;</expr_stmt>

		<comment type="block">/* It is a candidate */</comment>
		<if_stmt><if>if <condition>(<expr><name>is_candidate</name> <operator>||</operator>
				<call><name>BufferGetLSN</name><argument_list>(<argument><expr><name>buf_hdr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>info</name> <operator>|=</operator> <name>FLOG_LIST_SLOT_CANDIDATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>add_buf_to_list</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>buf_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"The page [%u, %u, %u], %u, %u buffer %d "</literal>
			 <literal type="string">"is in flashback log list already."</literal></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>,
			 <argument><expr><name>buf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Insert a flashback log record from list head.
 *
 * NB: Just one process to insert record from one flashback ring.
 * Maybe the flashback ring can be many.
 */</comment>
<function><type><name>void</name></type>
<name>polar_insert_flog_rec_from_list_bg</name><parameter_list>(<parameter><decl><type><name>flog_list_ctl_t</name></type> <name>list_ctl</name></decl></parameter>, <parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>,
								   <parameter><decl><type><name>flog_index_queue_ctl_t</name></type> <name>queue_ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_hdr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>buf</name></decl>;</decl_stmt>

	<comment type="block">/* Get the head with spin lock */</comment>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>get_flog_list_head_with_lock</name><argument_list>(<argument><expr><name>list_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>buf</name> <operator>&lt;</operator> <name>NBuffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NOT_IN_FLOG_LIST</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>buf_hdr</name> <operator>=</operator> <call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*no cover begin*/</comment>
	<comment type="block">/*
	 * Insert the flashback log record of the head buffer.
	 * If it is failed, we check whether someone else has inserted it.
	 * If not, just report a PANIC.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>insert_buf_flog_rec_from_list</name><argument_list>(<argument><expr><name>list_ctl</name></expr></argument>, <argument><expr><name>buf_ctl</name></expr></argument>, <argument><expr><name>queue_ctl</name></expr></argument>,
			<argument><expr><name>buf_hdr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>buf</name> <operator>==</operator> <call><name>get_flog_list_head_with_lock</name><argument_list>(<argument><expr><name>list_ctl</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Check someone remove it or a memory PANIC */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"The page [%u, %u, %u], %u, %u buffer(%d) is list head but not in list"</literal></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>,
			 <argument><expr><name><name>buf_hdr</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/*no cover end*/</comment>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Insert the flashback log record of the buffer by myself or
 * wait the background to insert it.
 */</comment>
<function><type><name>void</name></type>
<name>polar_insert_buf_flog_rec_sync</name><parameter_list>(<parameter><decl><type><name>flog_list_ctl_t</name></type> <name>list_ctl</name></decl></parameter>, <parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>,
		<parameter><decl><type><name>flog_index_queue_ctl_t</name></type> <name>queue_ctl</name></decl></parameter>, <parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_hdr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_validate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>is_buf_in_flog_list</name><argument_list>(<argument><expr><name>buf_hdr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>insert_buf_flog_rec_from_list</name><argument_list>(<argument><expr><name>list_ctl</name></expr></argument>, <argument><expr><name>buf_ctl</name></expr></argument>, <argument><expr><name>queue_ctl</name></expr></argument>, <argument><expr><name>buf_hdr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>is_validate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>Size</name></type>
<name>polar_flog_async_list_shmem_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>        <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* flashback log control */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>flog_list_ctl_data_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<comment type="block">/* flashback log list */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flog_list_slot</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NBuffers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* add the origin page buffer */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>BLCKSZ</name></expr></argument>, <argument><expr><name>POLAR_ORIGIN_PAGE_BUF_NUM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferTag</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>POLAR_ORIGIN_PAGE_BUF_NUM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_atomic_uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>POLAR_ORIGIN_PAGE_BUF_ARRAY_NUM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Init the flashback log async list data.
 */</comment>
<function><type><name>void</name></type>
<name>polar_flog_list_init_data</name><parameter_list>(<parameter><decl><type><name>flog_list_ctl_t</name></type> <name>ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>allocptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flog_list_ctl_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>allocptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ctl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NOT_IN_FLOG_LIST</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>insert_total_num</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>remove_total_num</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>bg_remove_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>allocptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>flog_list_ctl_data_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name></name> <operator>=</operator> <operator>(</operator><name>flog_list_slot</name> <operator>*</operator><operator>)</operator><name>allocptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>allocptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flog_list_slot</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NBuffers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>allocptr</name> <operator>+=</operator> <call><name>mul_size</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flog_list_slot</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NBuffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBuffers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next_buf</name> <operator>=</operator> <name>NOT_IN_FLOG_LIST</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prev_buf</name> <operator>=</operator> <name>NOT_IN_FLOG_LIST</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>origin_buf_index</name> <operator>=</operator> <name>INVAILD_ORIGIN_BUF_INDEX</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>allocptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>TYPEALIGN</name><argument_list>(<argument><expr><name>BLCKSZ</name></expr></argument>, <argument><expr><name>allocptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>origin_buf</name></name> <operator>=</operator> <name>allocptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>origin_buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		   <argument><expr><operator>(</operator><name>Size</name><operator>)</operator> <name>BLCKSZ</name> <operator>*</operator> <name>POLAR_ORIGIN_PAGE_BUF_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>allocptr</name> <operator>+=</operator> <call><name>mul_size</name><argument_list>(<argument><expr><name>BLCKSZ</name></expr></argument>, <argument><expr><name>POLAR_ORIGIN_PAGE_BUF_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>buf_tag</name></name> <operator>=</operator> <operator>(</operator><name>BufferTag</name> <operator>*</operator><operator>)</operator><name>allocptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>buf_tag</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferTag</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>POLAR_ORIGIN_PAGE_BUF_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>allocptr</name> <operator>+=</operator> <call><name>mul_size</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferTag</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>POLAR_ORIGIN_PAGE_BUF_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>origin_buf_bitmap</name></name> <operator>=</operator> <operator>(</operator><name>pg_atomic_uint32</name> <operator>*</operator><operator>)</operator><name>allocptr</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>POLAR_ORIGIN_PAGE_BUF_ARRAY_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>origin_buf_bitmap</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize the flashback log list
 */</comment>
<function><type><name>flog_list_ctl_t</name></type>
<name>polar_flog_async_list_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_CTL_SUFFIX</name></cpp:macro> <cpp:value>" List Control"</cpp:value></cpp:define>

	<decl_stmt><decl><type><name>flog_list_ctl_t</name></type> <name>list_ctl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>flog_list_name</name><index>[<expr><name>FL_OBJ_MAX_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* Get or create the shared memory for flashback log list control block */</comment>
	<expr_stmt><expr><call><name>FLOG_GET_OBJ_NAME</name><argument_list>(<argument><expr><name>flog_list_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>LIST_CTL_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>list_ctl</name> <operator>=</operator> <operator>(</operator><name>flog_list_ctl_t</name><operator>)</operator>
			   <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>flog_list_name</name></expr></argument>,
							   <argument><expr><call><name>polar_flog_async_list_shmem_size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_flog_list_init_data</name><argument_list>(<argument><expr><name>list_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>list_ctl</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get the list head and tail without lock */</comment>
<function><type><name>void</name></type>
<name>polar_flog_get_async_list_info</name><parameter_list>(<parameter><decl><type><name>flog_list_ctl_t</name></type> <name>ctl</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>head</name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* POLAR: flush the flashback log record of the buffer */</comment>
<function><type><name>void</name></type>
<name>polar_flush_buf_flog</name><parameter_list>(<parameter><decl><type><name>flog_list_ctl_t</name></type> <name>list_ctl</name></decl></parameter>, <parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>, <parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_invalidate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_flog_rec_ptr</name></type> <name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name></expr>]</index></name><operator>.</operator><name>flashback_ptr</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FLOG_REC_PTR_IS_INVAILD</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* When the buffer is invalidate, ignore to flush the flashback log record */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_invalidate</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_flog_flush</name><argument_list>(<argument><expr><name>buf_ctl</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>list_ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name></expr>]</index></name><operator>.</operator><name>flashback_ptr</name> <operator>=</operator> <name>POLAR_INVALID_FLOG_REC_PTR</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*no cover begin*/</comment>
<function><type><name>void</name></type>
<name>polar_get_flog_list_stat</name><parameter_list>(<parameter><decl><type><name>flog_list_ctl_t</name></type> <name>ctl</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>insert_total_num</name></decl></parameter>,
						 <parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>remove_total_num</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>bg_remove_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>insert_total_num</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>insert_total_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>remove_total_num</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>remove_total_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>bg_remove_num</name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>bg_remove_num</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*no cover end*/</comment>

<function><type><name>int8</name></type>
<name>polar_add_origin_buf</name><parameter_list>(<parameter><decl><type><name>flog_list_ctl_t</name></type> <name>ctl</name></decl></parameter>, <parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int8</name></type> <name>buf_index</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>BufHdrGetBlock</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf_index</name> <operator>=</operator> <call><name>get_a_free_origin_buf</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf_index</name> <operator>!=</operator> <name>INVAILD_ORIGIN_BUF_INDEX</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * In some cases, like the buffer not flushed, keep the old one.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>is_buf_in_flog_list</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/*no cover line*/</comment>
			<return>return <expr><name>INVAILD_ORIGIN_BUF_INDEX</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>origin_buf</name></name> <operator>+</operator> <name>buf_index</name> <operator>*</operator> <name>BLCKSZ</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INIT_BUFFERTAG</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>buf_tag</name><index>[<expr><name>buf_index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf_desc</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name></name></expr></argument>,
				<argument><expr><name><name>buf_desc</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>, <argument><expr><name><name>buf_desc</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>flashback_list</name><index>[<expr><name><name>buf_desc</name><operator>-&gt;</operator><name>buf_id</name></name></expr>]</index></name><operator>.</operator><name>origin_buf_index</name> <operator>=</operator> <name>buf_index</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Add page [%u, %u, %u], %u, %u buffer(%d) in the origin buffer %d"</literal></expr></argument>,
					<argument><expr><name><name>buf_desc</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>buf_desc</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
					<argument><expr><name><name>buf_desc</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>, <argument><expr><name><name>buf_desc</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>,
					<argument><expr><name><name>buf_desc</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>, <argument><expr><name><name>buf_desc</name><operator>-&gt;</operator><name>buf_id</name></name></expr></argument>, <argument><expr><name>buf_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>buf_index</name></expr>;</return>
</block_content>}</block></function>
</unit>
