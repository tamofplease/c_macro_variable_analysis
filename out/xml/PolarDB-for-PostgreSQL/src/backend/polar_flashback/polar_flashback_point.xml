<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_flashback/polar_flashback_point.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_flashback_point.c
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2021, Alibaba Group Holding limited
 *
 * IDENTIFICATION
 *    src/backend/polar_flashback/polar_flashback_point.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_point.h"</cpp:file></cpp:include>

<comment type="block">/* GUCs */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>polar_flashback_point_segments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>polar_flashback_point_timeout</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>polar_set_fbpoint_wal_info</name><parameter_list>(<parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>fbpoint_lsn</name></decl></parameter>,
						   <parameter><decl><type><name>pg_time_t</name></type> <name>fbpoint_time</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>bg_replayed_lsn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_restart_point</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>prior_fbpoint_lsn</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf_ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>prior_fbpoint_lsn</name> <operator>=</operator> <name><name>buf_ctl</name><operator>-&gt;</operator><name>wal_info</name><operator>.</operator><name>fbpoint_lsn</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * There are some ignored cases to update WAL information:
	 * 1. The flashback point WAL lsn is unchanged.
	 * 2. The current flashback point lsn less than
	 * prior flashback point lsn in the standby.
	 * 3. Max sequential background replay lsn less than
	 * prior flashback point lsn in the standby.
	 *
	 * NB: But it don't means that there are no flashback log record.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>fbpoint_lsn</name> <operator>!=</operator> <name>prior_fbpoint_lsn</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fbpoint_lsn</name> <operator>&gt;</operator> <name>prior_fbpoint_lsn</name><operator>)</operator> <operator>&amp;&amp;</operator>
				<operator>(</operator><operator>!</operator><name>is_restart_point</name> <operator>||</operator> <operator>(</operator><name>bg_replayed_lsn</name> <operator>&gt;=</operator> <name>prior_fbpoint_lsn</name><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>buf_ctl</name><operator>-&gt;</operator><name>keep_wal_lsn</name></name> <operator>=</operator> <name><name>buf_ctl</name><operator>-&gt;</operator><name>wal_info</name><operator>.</operator><name>prior_fbpoint_lsn</name></name> <operator>=</operator> <name>prior_fbpoint_lsn</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf_ctl</name><operator>-&gt;</operator><name>wal_info</name><operator>.</operator><name>fbpoint_lsn</name></name> <operator>=</operator> <name>fbpoint_lsn</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf_ctl</name><operator>-&gt;</operator><name>wal_info</name><operator>.</operator><name>fbpoint_time</name></name> <operator>=</operator> <name>fbpoint_time</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<comment type="block">/*no cover begin*/</comment>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><name>is_restart_point</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"The previous flashback point WAL lsn %X/%X is larger than "</literal>
				 <literal type="string">"the current flashback point WAL lsn %X/%X in the RW node"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>prior_fbpoint_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>prior_fbpoint_lsn</name></expr></argument>,
				 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>fbpoint_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>fbpoint_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf_ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"The previous flashback point WAL lsn now is %X/%X, "</literal>
			 <literal type="string">"the current flashback point WAL lsn now is %X/%X"</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>prior_fbpoint_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>prior_fbpoint_lsn</name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>fbpoint_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>fbpoint_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>XLogRecPtr</name></type>
<name>polar_get_curr_fbpoint_lsn</name><parameter_list>(<parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>curr_fbpoint_lsn</name> <init>= <expr><name>InvalidXLogRecPtr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf_ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>curr_fbpoint_lsn</name> <operator>=</operator> <name><name>buf_ctl</name><operator>-&gt;</operator><name>wal_info</name><operator>.</operator><name>fbpoint_lsn</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf_ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>curr_fbpoint_lsn</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Get the local flashback point lsn without spinlock.
 *
 * NB: Must call the function before call polar_flog_insert because the
 * add_buf_to_list will use the local flashback point lsn.
 */</comment>
<function><type><name>XLogRecPtr</name></type>
<name>polar_get_local_fbpoint_lsn</name><parameter_list>(<parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>page_lsn</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>redo_lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>XLogRecPtr</name></type> <name>local_fbpoint_lsn</name> <init>= <expr><name>InvalidXLogRecPtr</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>redo_lsn</name> <operator>!=</operator> <name>InvalidXLogRecPtr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>local_fbpoint_lsn</name> <operator>=</operator> <name>redo_lsn</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>local_fbpoint_lsn</name> <operator>==</operator> <name>InvalidXLogRecPtr</name> <operator>||</operator> <name>page_lsn</name> <operator>&gt;</operator> <name>local_fbpoint_lsn</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>local_fbpoint_lsn</name> <operator>=</operator> <call><name>polar_get_curr_fbpoint_lsn</name><argument_list>(<argument><expr><name>buf_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>local_fbpoint_lsn</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* POLAR: Is the page first modified after the redo_lsn (or flashback point lsn) */</comment>
<function><type><name>bool</name></type>
<name>polar_is_page_first_modified</name><parameter_list>(<parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>page_lsn</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>redo_lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_first_modified</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>curr_fbpoint_lsn</name> <init>= <expr><name>InvalidXLogRecPtr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>curr_fbpoint_lsn</name> <operator>=</operator> <call><name>polar_get_local_fbpoint_lsn</name><argument_list>(<argument><expr><name>buf_ctl</name></expr></argument>, <argument><expr><name>page_lsn</name></expr></argument>, <argument><expr><name>redo_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>is_first_modified</name> <operator>=</operator> <operator>(</operator><name>page_lsn</name> <operator>&lt;=</operator> <name>curr_fbpoint_lsn</name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name> <operator>&amp;&amp;</operator> <name>is_first_modified</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"The page lsn %X/%X is the first modify after the current flashback point lsn %X/%X"</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>page_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>page_lsn</name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>curr_fbpoint_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>curr_fbpoint_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>is_first_modified</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>XLogRecPtr</name></type>
<name>polar_get_prior_fbpoint_lsn</name><parameter_list>(<parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>fbpoint_lsn</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf_ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fbpoint_lsn</name> <operator>=</operator> <name><name>buf_ctl</name><operator>-&gt;</operator><name>wal_info</name><operator>.</operator><name>prior_fbpoint_lsn</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * The prior_fbpoint_lsn is 0 before the first flashback point.
	 * We can't set the flashback log record redo lsn is 0, just set
	 * to wal_info.fbpoint_lsn;
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name>fbpoint_lsn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fbpoint_lsn</name> <operator>=</operator> <name><name>buf_ctl</name><operator>-&gt;</operator><name>wal_info</name><operator>.</operator><name>fbpoint_lsn</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf_ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>fbpoint_lsn</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the flashback point start pointer.
 * The flog_start_ptr will be updated by flashback point.
 */</comment>
<function><type><name>polar_flog_rec_ptr</name></type>
<name>polar_get_fbpoint_start_ptr</name><parameter_list>(<parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_flog_rec_ptr</name></type> <name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>ctl_file_lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>fbpoint_info</name><operator>.</operator><name>flog_start_ptr</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>ctl_file_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Check whether we've consumed enough xlog space or time that
 * a flashback point is needed.
 */</comment>
<function><type><name>bool</name></type>
<name>polar_is_flashback_point</name><parameter_list>(<parameter><decl><type><name>flog_ctl_t</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>checkpoint_lsn</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>bg_replayed_lsn</name></decl></parameter>,
						 <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_restart_point</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>  <name>fbpoint_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_time_t</name></type>   <name>fbpoint_time</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_time_t</name></type>   <name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>  <name>prior_fbpoint_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogSegNo</name></type>   <name>old_segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogSegNo</name></type>   <name>new_segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_shutdown</name> <init>= <expr><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>CHECKPOINT_IS_SHUTDOWN</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_is_flog_enabled</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>buf_ctl</name> <operator>=</operator> <name><name>instance</name><operator>-&gt;</operator><name>buf_ctl</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_is_flog_buf_ready</name><argument_list>(<argument><expr><name>buf_ctl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf_ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fbpoint_lsn</name> <operator>=</operator> <name><name>buf_ctl</name><operator>-&gt;</operator><name>wal_info</name><operator>.</operator><name>fbpoint_lsn</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>fbpoint_time</name> <operator>=</operator>  <name><name>buf_ctl</name><operator>-&gt;</operator><name>wal_info</name><operator>.</operator><name>fbpoint_time</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prior_fbpoint_lsn</name> <operator>=</operator> <name><name>buf_ctl</name><operator>-&gt;</operator><name>wal_info</name><operator>.</operator><name>prior_fbpoint_lsn</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf_ctl</name><operator>-&gt;</operator><name>info_lck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* First checkpoint after flashback log enable is a flashback point */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>prior_fbpoint_lsn</name> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"It is a first checkpoint after flashback log enable, treat it as a flashback point."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If it is a shutdown checkpoint, it will be treated as a flashback point */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>is_shutdown</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"It is a shutdown checkpoint, treat it as a flashback point."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Process the parallel standby mode */</comment>
	<if_stmt><if>if <condition>(<expr><name>bg_replayed_lsn</name> <operator>&gt;</operator> <name>InvalidXLogRecPtr</name> <operator>&amp;&amp;</operator> <name>bg_replayed_lsn</name> <operator>&lt;</operator> <name>prior_fbpoint_lsn</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>prior_fbpoint_lsn</name> <operator>&gt;</operator> <name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Ugh, it is a end of recovery checkpoint or lazy checkpoint,
	 * it cann't get a right snapshot, so return false.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>CHECKPOINT_END_OF_RECOVERY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>CHECKPOINT_LAZY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* There are nothing to do */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>checkpoint_lsn</name> <operator>==</operator> <name>fbpoint_lsn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * In some cases, the checkpoint lsn is less than
	 * the previous lsn in the standby mode.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>checkpoint_lsn</name> <operator>&lt;</operator> <name>fbpoint_lsn</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>is_restart_point</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<comment type="block">/*no cover line*/</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"The WAL lsn %X/%X is less than last flashback point lsn %X/%X, "</literal>
				 <literal type="string">"something is wrong."</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>checkpoint_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>checkpoint_lsn</name><operator>)</operator></expr></argument>,
				 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>fbpoint_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>fbpoint_lsn</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Check the timeout */</comment>
	<expr_stmt><expr><name>now</name> <operator>=</operator> <operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>now</name> <operator>-</operator> <name>fbpoint_time</name> <operator>&gt;=</operator> <name>polar_flashback_point_timeout</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"The checkpoint is treated as a flashback point cause to timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Check the WAL segments */</comment>
	<expr_stmt><expr><call><name>XLByteToSeg</name><argument_list>(<argument><expr><name>fbpoint_lsn</name></expr></argument>, <argument><expr><name>old_segno</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XLByteToSeg</name><argument_list>(<argument><expr><name>checkpoint_lsn</name></expr></argument>, <argument><expr><name>new_segno</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>new_segno</name> <operator>-</operator> <name>old_segno</name><operator>)</operator> <operator>&gt;=</operator> <name>polar_flashback_point_segments</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"The checkpoint is treated as a flashback point cause to WAL distance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <operator>*</operator><name>flags</name> <operator>|</operator> <name>CHECKPOINT_FLASHBACK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
