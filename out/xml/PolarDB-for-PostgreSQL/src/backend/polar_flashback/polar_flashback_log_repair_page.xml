<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_flashback/polar_flashback_log_repair_page.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_flashback_log_repair_page.c
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2021, Alibaba Group Holding limited
 *
 * IDENTIFICATION
 *    src/backend/polar_flashback/polar_flashback_log_repair_page.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_logindex_redo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_decoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_repair_page.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_point.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/startup.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>bool</name></type> <name>polar_has_partial_write</name></decl>;</decl_stmt>
<comment type="block">/* POLAR: Just crash will cause partial write */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>may_be_partial_write</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>AmStartupProcess</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>reachedConsistency</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Write the repaired buffer.
 *
 * NB: The buffer must be invaild, so write it without
 * any lock is safe.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_repaired_buf</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SMgrRelation</name></type> <name>reln</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Block</name></type>       <name>buf_block</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>buf_write</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>polar_redo_state</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>POLAR_BUF_FLOG_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>buf_block</name> <operator>=</operator> <call><name>BufHdrGetBlock</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf_write</name> <operator>=</operator> <call><name>PageEncryptCopy</name><argument_list>(<argument><expr><operator>(</operator><name>Page</name><operator>)</operator> <name>buf_block</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>,
								<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf_write</name> <operator>=</operator> <call><name>PageSetChecksumCopy</name><argument_list>(<argument><expr><operator>(</operator><name>Page</name><operator>)</operator> <name>buf_write</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>reln</name> <operator>=</operator> <call><name>smgropen</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name></name></expr></argument>, <argument><expr><name>InvalidBackendId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>smgrwrite</name><argument_list>(<argument><expr><name>reln</name></expr></argument>,
			  <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>,
			  <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>,
			  <argument><expr><name>buf_write</name></expr></argument>,
			  <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Get origin page to solve partial write problem.
 *
 * tag: The buffer tag.
 * page: The origin page.
 * replay_start_lsn: The replay start LSN.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>get_origin_page_for_partial_write</name><parameter_list>(<parameter><decl><type><name>flog_ctl_t</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_flog_rec_ptr</name></type> <name>start_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_flog_rec_ptr</name></type> <name>end_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>start_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>end_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name> <init>= <expr><name><name>instance</name><operator>-&gt;</operator><name>buf_ctl</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>start_ptr</name> <operator>=</operator> <call><name>polar_get_fbpoint_start_ptr</name><argument_list>(<argument><expr><name>buf_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>end_ptr</name> <operator>=</operator> <call><name>polar_get_flog_write_result</name><argument_list>(<argument><expr><name>buf_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>end_ptr</name> <operator>&gt;=</operator> <name>start_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* There is no flashback log */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>FLOG_REC_PTR_IS_INVAILD</name><argument_list>(<argument><expr><name>end_ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>start_lsn</name> <operator>=</operator> <call><name>polar_get_curr_fbpoint_lsn</name><argument_list>(<argument><expr><name>buf_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>end_lsn</name> <operator>=</operator> <call><name>GetRedoRecPtr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>polar_flashback_buffer</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>start_ptr</name></expr></argument>, <argument><expr><name>end_ptr</name></expr></argument>, <argument><expr><name>start_lsn</name></expr></argument>, <argument><expr><name>end_lsn</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: The flashback log can repair the PERMANENT buffer
 * when it meet a partial write.
 */</comment>
<function><type><name>bool</name></type>
<name>polar_can_flog_repair</name><parameter_list>(<parameter><decl><type><name>flog_ctl_t</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_hdr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>has_redo_action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>  <name>buf_state</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_is_flog_enabled</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>may_be_partial_write</name><argument_list>()</argument_list></call> <operator>||</operator> <name>has_redo_action</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>buf_state</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf_hdr</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>buf_state</name> <operator>&amp;</operator> <name>BM_PERMANENT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * To repair the partial write problem.
 * Partial write problem will occur in three scenarios:
 * 1. RW crash recovery.
 * 2. Standby crash recovery.
 * 3. RO to RW online promote.
 */</comment>
<function><type><name>void</name></type>
<name>polar_repair_partial_write</name><parameter_list>(<parameter><decl><type><name>flog_ctl_t</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>bufHdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><operator>&amp;</operator><name><name>bufHdr</name><operator>-&gt;</operator><name>tag</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name></type> <name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bufHdr</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>BM_VALID</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>bufHdr</name><operator>-&gt;</operator><name>buf_id</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* Wait for the flashback logindex ready */</comment>
	<while>while <condition>(<expr><operator>!</operator><call><name>polar_is_flog_ready</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Handle interrupt signals of startup process to avoid hang */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>AmStartupProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>HandleStartupProcInterrupts</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_origin_page_for_partial_write</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't find a valid origin page for ([%u, %u, %u]), %u, %u from flashback log"</literal></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Flush the buffer to protect the next first modify after checkpoint. */</comment>
		<expr_stmt><expr><call><name>write_repaired_buf</name><argument_list>(<argument><expr><name>bufHdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"The page ([%u, %u, %u]), %u, %u has been repaired by flashback log"</literal></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
