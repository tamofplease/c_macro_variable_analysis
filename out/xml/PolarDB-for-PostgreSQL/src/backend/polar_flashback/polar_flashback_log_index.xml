<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_flashback/polar_flashback_log_index.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_flashback_log_index.c
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2021, Alibaba Group Holding limited
 *
 * IDENTIFICATION
 *    src/backend/polar_flashback/polar_flashback_log_index.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_queue_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_decoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_reader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_record.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/startup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>flog_index_dir_full_path</name><parameter_list>(<parameter><type><name>path</name></type></parameter>, <parameter><type><name>snapshot</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>polar_make_file_path_level2(path, get_flog_index_dir(snapshot))</cpp:value></cpp:define>

<comment type="block">/*
 * Get the flashback log index directory.
 *
 * NB: When the flashback log is unenable, we will
 * return the default one which will be used by remove
 * the flashback logindex dir.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_flog_index_dir</name><parameter_list>(<parameter><decl><type><name>logindex_snapshot_t</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>snapshot</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>snapshot</name><operator>-&gt;</operator><name>dir</name></name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>POLAR_FL_INDEX_DEFAULT_DIR</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Insert one flashback logindex lsn_info.
 * NB: The caller must hold a EXCLUSIVE lock or just one process
 * and ensure flashback_logindex_snapshot is not NULL.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_flog_index_add_lsn</name><parameter_list>(<parameter><decl><type><name>logindex_snapshot_t</name></type> <name>snapshot</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>prev</name></decl></parameter>,
						 <parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>polar_logindex_add_lsn</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><operator>(</operator><name>XLogRecPtr</name><operator>)</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Add flashback logindex: tag is '[%u, %u, %u], %d, %u', "</literal>
			 <literal type="string">"lsn is %X/%X, previous lsn is %X/%X"</literal></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>prev</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>prev</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read lsn info &lt;tag, lsn, prev_lsn&gt; from flashback log files and insert into
 * the logindex.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>insert_flog_index_from_file</name><parameter_list>(<parameter><decl><type><name>logindex_snapshot_t</name></type> <name>snapshot</name></decl></parameter>, <parameter><decl><type><name>flog_reader_state</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>polar_flog_rec_ptr</name> <modifier>*</modifier></type><name>ptr_expected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errormsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>flog_record</name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>

	<comment type="block">/* Read the flashback log record */</comment>
	<expr_stmt><expr><name>record</name> <operator>=</operator> <call><name>polar_read_flog_record</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr_expected</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>record</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Now just insert the origin page record */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>xl_rmid</name></name> <operator>==</operator> <name>ORIGIN_PAGE_ID</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>fl_origin_page_rec_data</name> <modifier>*</modifier></type><name>rec_data</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>rec_data</name> <operator>=</operator> <call><name>FL_GET_ORIGIN_PAGE_REC_DATA</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"We found the flashback log record at %X/%X from file, "</literal>
					 <literal type="string">"total length is %u, the tag is '[%u, %u, %u], %d, %u'"</literal></expr></argument>,
					 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><operator>*</operator><name>ptr_expected</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><operator>*</operator><name>ptr_expected</name><operator>)</operator></expr></argument>, <argument><expr><name><name>record</name><operator>-&gt;</operator><name>xl_tot_len</name></name></expr></argument>,
					 <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
					 <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>, <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* The add lsn can ignore the first insert which is inserted already */</comment>
			<expr_stmt><expr><call><name>polar_flog_index_add_lsn</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name></name><operator>)</operator></expr></argument>, <argument><expr><name>POLAR_INVALID_FLOG_REC_PTR</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>read_rec_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>ptr_expected</name> <operator>=</operator> <call><name>convert_to_first_valid_ptr</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>end_rec_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<comment type="block">/*
	 * Ignore the switch point invalid flashback log and skip to next ptr.
	 *
	 * NB: Change the lsn_info-&gt;lsn to zero to flag it is success without
	 * insert to logidnex.
	 */</comment>
	<if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>in_switch_region</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr_expected</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>end_rec_ptr</name></name></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<comment type="block">/* Ignore the error when read the record which is over the write result. */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>errormsg</name></expr></argument>, <argument><expr><name>REC_UNFLUSHED_ERROR_MSG</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>REC_UNFLUSHED_ERROR_MSG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Failed to read record %X/%08X from flashback log file with error: %s"</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><operator>*</operator><name>ptr_expected</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>*</operator><name>ptr_expected</name></expr></argument>, <argument><expr><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>insert_flog_index_from_queue</name><parameter_list>(<parameter><decl><type><name>logindex_snapshot_t</name></type> <name>snapshot</name></decl></parameter>, <parameter><decl><type><name>polar_ringbuf_ref_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>polar_flog_rec_ptr</name> <modifier>*</modifier></type><name>ptr_expected</name></decl></parameter>, <parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>max_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferTag</name></type> <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>log_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CLEAR_BUFFERTAG</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_flog_read_info_from_queue</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr_expected</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_len</name></expr></argument>, <argument><expr><name>max_ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_flog_index_add_lsn</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>POLAR_INVALID_FLOG_REC_PTR</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr_expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>ptr_expected</name> <operator>=</operator> <call><name>polar_get_next_flog_ptr</name><argument_list>(<argument><expr><operator>*</operator><name>ptr_expected</name></expr></argument>, <argument><expr><name>log_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Size</name></type>
<name>polar_flog_index_shmem_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>logindex_mem_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>logindex_bloom_blocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>shmem_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>polar_flashback_logindex_mem_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>shmem_size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>shmem_size</name></expr></argument>,
						  <argument><expr><call><name>polar_logindex_shmem_size</name><argument_list>(<argument><expr><call><name>polar_logindex_convert_mem_tbl_size</name><argument_list>(<argument><expr><name>logindex_mem_size</name></expr></argument>)</argument_list></call></expr></argument>,
													<argument><expr><name>logindex_bloom_blocks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>shmem_size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * The the lsn in the flashback logindex larger than write result
 * of flashback log can be flushed.
 */</comment>
<function><type><name>bool</name></type>
<name>polar_flog_index_table_flushable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>log_mem_table_t</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>polar_get_flog_write_result</name><argument_list>(<argument><expr><operator>(</operator><name>flog_buf_ctl_t</name><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>polar_flog_rec_ptr</name><operator>)</operator><operator>(</operator><call><name>polar_logindex_mem_table_max_lsn</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>logindex_snapshot_t</name></type>
<name>polar_flog_index_shmem_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>logindex_mem_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>logindex_bloom_blocks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>logindex_snapshot_t</name></type> <name>snapshot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>logindex_name</name><index>[<expr><name>FL_OBJ_MAX_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>polar_flashback_logindex_mem_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Memory init for flashback logindex snapshot. */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logindex_name</name></expr></argument>, <argument><expr><name>FL_OBJ_MAX_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>FL_LOGINDEX_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>snapshot</name> <operator>=</operator> <call><name>polar_logindex_snapshot_shmem_init</name><argument_list>(<argument><expr><name>logindex_name</name></expr></argument>,
												  <argument><expr><call><name>polar_logindex_convert_mem_tbl_size</name><argument_list>(<argument><expr><name>logindex_mem_size</name></expr></argument>)</argument_list></call></expr></argument>,
												  <argument><expr><name>logindex_bloom_blocks</name></expr></argument>, <argument><expr><name>LWTRANCHE_FLOG_LOGINDEX_BEGIN</name></expr></argument>,
												  <argument><expr><name>LWTRANCHE_FLOG_LOGINDEX_END</name></expr></argument>, <argument><expr><name>polar_flog_index_table_flushable</name></expr></argument>, <argument><expr><name>extra_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>snapshot</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* validate the flashback logindex dir */</comment>
<function><type><name>void</name></type>
<name>polar_validate_flog_index_dir</name><parameter_list>(<parameter><decl><type><name>logindex_snapshot_t</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>flog_index_dir_full_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_validate_dir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* POLAR: Remove all the flashback logindex files and keep the flashback logindex dir. */</comment>
<function><type><name>void</name></type>
<name>polar_flog_index_remove_all</name><parameter_list>(<parameter><decl><type><name>logindex_snapshot_t</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>        <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>flog_index_dir_full_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_flog_clean_dir_internal</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Startup the flashback logindex.
 *
 * NB: Must get the flashback log buffer checkpoint location first.
 */</comment>
<function><type><name>void</name></type>
<name>polar_startup_flog_index</name><parameter_list>(<parameter><decl><type><name>logindex_snapshot_t</name></type> <name>snapshot</name></decl></parameter>, <parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>checkpoint_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_index_meta_t</name> <modifier>*</modifier></type><name>meta</name></decl>;</decl_stmt>

	<comment type="block">/* Create a new logindex meta file when there is no one. */</comment>
	<expr_stmt><expr><name>meta</name> <operator>=</operator> <operator>&amp;</operator><name><name>snapshot</name><operator>-&gt;</operator><name>meta</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>log_index_get_meta</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_log_index_write_meta</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_logindex_check_state</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>POLAR_LOGINDEX_STATE_INITIALIZED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_logindex_snapshot_init</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>checkpoint_ptr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>polar_flog_rec_ptr</name></type>
<name>polar_get_flog_index_max_ptr</name><parameter_list>(<parameter><decl><type><name>logindex_snapshot_t</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>polar_flog_rec_ptr</name><operator>)</operator><call><name>polar_get_logindex_snapshot_max_lsn</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Insert the flashback logindex to the max_ptr.
 * Read the flashback logindex info from logindex queue or
 * flashback log file and insert it into flashback logindex.
 *
 * max_ptr: the max pointer of flashback log index can be inserted.
 * source : LOG_FILE or LOGINDEX_QUEUE or ANY, ANY will use LOGINDEX_QUEUE
 * first and then LOG_FILE if failed.
 * flog_dir : the directory of the flashback log.
 *
 * NB: the max_ptr must be a multiple of POLAR_FLOG_BLCKSZ, when is_background is true
 * while the reader will cache the block in the reader_buf.
 */</comment>
<function><type><name>void</name></type>
<name>polar_flog_index_insert</name><parameter_list>(<parameter><decl><type><name>logindex_snapshot_t</name></type> <name>snapshot</name></decl></parameter>, <parameter><decl><type><name>flog_index_queue_ctl_t</name></type> <name>queue_ctl</name></decl></parameter>,
		<parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>, <parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>max_ptr</name></decl></parameter>, <parameter><decl><type><name>flashback_log_source</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_REF_NAME</name></cpp:macro> <cpp:value>"flog_index_insert_bg"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_READER</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(s == LOG_FILE || s == ANY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_QUEUE_REF</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(s == LOGINDEX_QUEUE || s == ANY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_REFRESH</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(s == NONE)</cpp:value></cpp:define>

	<decl_stmt><decl><type><specifier>static</specifier> <name>flog_reader_state</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>polar_ringbuf_ref_t</name></type> <name>ref</name> <init>= <expr><block>{ <expr><operator>.</operator><name>slot</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<comment type="block">/* The start pointer of next flashback log record. */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <name>polar_flog_rec_ptr</name></type> <name>insert_ptr</name> <init>= <expr><name>POLAR_INVALID_FLOG_REC_PTR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>inserted</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>insert_something</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>        <name>read_from_queue_rec_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>        <name>read_from_file_rec_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Need to refresh the queue, now just for test */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>NEED_REFRESH</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>state</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ref</name><operator>.</operator><name>slot</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>insert_ptr</name> <operator>=</operator> <name>POLAR_INVALID_FLOG_REC_PTR</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If the logindex is empty, the next ptr is FLOG_LONG_PHD_SIZE*/</comment>
	<if_stmt><if>if <condition>(<expr><call><name>FLOG_REC_PTR_IS_INVAILD</name><argument_list>(<argument><expr><name>insert_ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>insert_ptr</name> <operator>=</operator> <call><name>VALID_FLOG_PTR</name><argument_list>(<argument><expr><call><name>polar_get_flog_index_max_ptr</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* There is nothing to do, just return */</comment>
	<if_stmt><if>if <condition>(<expr><name>insert_ptr</name> <operator>&gt;=</operator> <name>max_ptr</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>queue_ctl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>source</name> <operator>=</operator> <name>LOG_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>NEED_QUEUE_REF</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Init the reference for logindex queue */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>ref</name><operator>.</operator><name>slot</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>POLAR_XLOG_QUEUE_NEW_REF</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><name><name>queue_ctl</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>QUEUE_REF_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * 1. If it's weak reference, try to promote to strong reference.
		 * 2. If reference is evicted, then create a new weak reference
		 *    and promote new weak reference to strong reference.
		 */</comment>
		<while>while <condition>(<expr><operator>!</operator><name><name>ref</name><operator>.</operator><name>strong</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>polar_ringbuf_get_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/*no cover line*/</comment>
			<expr_stmt><expr><call><name>POLAR_XLOG_QUEUE_NEW_REF</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><name><name>queue_ctl</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>ref</name><operator>.</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>NEED_READER</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>polar_flog_reader_allocate</name><argument_list>(<argument><expr><name>POLAR_FLOG_SEG_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>polar_flog_page_read</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/*no cover line*/</comment>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Can not allocate the flashback log reader memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Pop the flashback log lsn_info from logindex queue or read it from log files */</comment>
	<while>while <condition>(<expr><name>insert_ptr</name> <operator>&lt;</operator> <name>max_ptr</name> <operator>&amp;&amp;</operator> <name>inserted</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"The flashback log will be insert into logindex is record at "</literal>
				 <literal type="string">"%X/%X"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>insert_ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
				 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><name>insert_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<switch>switch <condition>(<expr><name>source</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>LOGINDEX_QUEUE</name></expr>:</case>
				<expr_stmt><expr><name>inserted</name> <operator>=</operator> <call><name>insert_flog_index_from_queue</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>insert_ptr</name></expr></argument>, <argument><expr><name>max_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>inserted</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>read_from_queue_rec_num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<break>break;</break>

			<case>case <expr><name>LOG_FILE</name></expr>:</case>
				<expr_stmt><expr><name>inserted</name> <operator>=</operator> <call><name>insert_flog_index_from_file</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>insert_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>inserted</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>read_from_file_rec_num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<break>break;</break>

			<case>case <expr><name>ANY</name></expr>:</case>
				<expr_stmt><expr><name>inserted</name> <operator>=</operator> <call><name>insert_flog_index_from_queue</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>insert_ptr</name></expr></argument>, <argument><expr><name>max_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inserted</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>inserted</name> <operator>=</operator> <call><name>insert_flog_index_from_file</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>insert_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if<condition>(<expr><name>inserted</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>read_from_file_rec_num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>read_from_queue_rec_num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<break>break;</break>

			<default>default:</default>
				<comment type="block">/*no cover begin*/</comment>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"The source of flashback log is unknown."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				<comment type="block">/*no cover end*/</comment>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>insert_something</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>queue_ctl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_update_flog_index_queue_stat</name><argument_list>(<argument><expr><name><name>queue_ctl</name><operator>-&gt;</operator><name>queue_stat</name></name></expr></argument>, <argument><expr><name>read_from_file_rec_num</name></expr></argument>, <argument><expr><name>read_from_queue_rec_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <name>LOGINDEX_QUEUE</name> <operator>||</operator> <name>source</name> <operator>==</operator> <name>ANY</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_ringbuf_clear_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/*no cover line*/</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Failed to clear flashback logindex queue reference"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name> <operator>&amp;&amp;</operator> <name>insert_something</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"The flashback log have been inserted into logindex at %X/%X expected location at "</literal>
			 <literal type="string">"%X/%X, read from queue %lu times, read from file %lu times"</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>insert_ptr</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><name>insert_ptr</name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>max_ptr</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><name>max_ptr</name></expr></argument>,
			 <argument><expr><name>read_from_queue_rec_num</name></expr></argument>, <argument><expr><name>read_from_file_rec_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Don't need to release the reader */</comment>
</block_content>}</block></function>

<function><type><name>polar_flog_rec_ptr</name></type>
<name>polar_get_flog_index_meta_max_ptr</name><parameter_list>(<parameter><decl><type><name>logindex_snapshot_t</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>polar_flog_rec_ptr</name><operator>)</operator><operator>(</operator><name><name>snapshot</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>max_lsn</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Recovery the flashback logindex */</comment>
<function><type><name>void</name></type>
<name>polar_recover_flog_index</name><parameter_list>(<parameter><decl><type><name>logindex_snapshot_t</name></type> <name>snapshot</name></decl></parameter>, <parameter><decl><type><name>flog_index_queue_ctl_t</name></type> <name>queue_ctl</name></decl></parameter>, <parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_flog_rec_ptr</name></type> <name>min_recover_lsn</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>min_recover_lsn</name> <operator>=</operator> <call><name>polar_get_flog_min_recover_lsn</name><argument_list>(<argument><expr><name>buf_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_flog_index_insert</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>queue_ctl</name></expr></argument>, <argument><expr><name>buf_ctl</name></expr></argument>, <argument><expr><name>min_recover_lsn</name></expr></argument>, <argument><expr><name>LOG_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Recover the flashback logindex to %X/%X"</literal></expr></argument>,
		 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>min_recover_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>min_recover_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
