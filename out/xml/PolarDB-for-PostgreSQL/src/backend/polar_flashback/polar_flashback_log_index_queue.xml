<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_flashback/polar_flashback_log_index_queue.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_flashback_log_index_queue.c
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2021, Alibaba Group Holding limited
 *
 * IDENTIFICATION
 *    src/backend/polar_flashback/polar_flashback_log_index_queue.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_queue_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_index_queue.h"</cpp:file></cpp:include>

<comment type="block">/*
 * The packet content type.
 * The invaild packet content type is POLAR_RINGBUF_PKT_INVALID_TYPE.
 * The packet content type mask is POLAR_RINGBUF_PKT_TYPE_MASK.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKT_TYPE_BUFFER_TAG</name></cpp:macro> <cpp:value>(0x10)</cpp:value></cpp:define> <comment type="block">/* The packet content is a buffertag */</comment>

<comment type="block">/*
 * Pop the buffer tag with the flashback logindex reference.
 * Return the length of the packet length.
 */</comment>
<function><type><name>bool</name></type>
<name>polar_flog_index_queue_ref_pop</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_ref_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>flog_index_queue_lsn_info</name> <modifier>*</modifier></type><name>lsn_info</name></decl></parameter>, <parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>max_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>pktlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>  <name>pkt_type</name> <init>= <expr><name>POLAR_RINGBUF_PKT_INVALID_TYPE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>data_len</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_ringbuf_avail</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pkt_type</name> <operator>=</operator> <call><name>polar_ringbuf_next_ready_pkt</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pktlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

	<comment type="block">/* Check the next ready packet type, may be the buffer is not ready. */</comment>
	<if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>==</operator> <name>POLAR_RINGBUF_PKT_INVALID_TYPE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>pkt_type</name> <operator>!=</operator> <name>PKT_TYPE_BUFFER_TAG</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Invalid flashback log queue pkt type %d from ref %s at %lu"</literal></expr></argument>,
			 <argument><expr><name>pkt_type</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name>pread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>POLAR_COPY_QUEUE_CONTENT</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>lsn_info</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_flog_rec_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We get a invalid flashback log point from logindex queue */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>FLOG_REC_PTR_IS_INVAILD</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"We get a invalid flashback log record point from ref %s at %lu"</literal></expr></argument>,
			 <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name>pread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>POLAR_COPY_QUEUE_CONTENT</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>lsn_info</name><operator>-&gt;</operator><name>log_len</name></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>lsn_info</name><operator>-&gt;</operator><name>log_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"We get a invalid flashback log record length from ref %s at %lu"</literal></expr></argument>,
			 <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name>pread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>polar_get_next_flog_ptr</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>log_len</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>max_ptr</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>data_len</name> <operator>=</operator> <name>pktlen</name> <operator>-</operator> <name>FLOG_INDEX_QUEUE_HEAD_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_COPY_QUEUE_CONTENT</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>lsn_info</name><operator>-&gt;</operator><name>tag</name></name><operator>)</operator></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_ringbuf_update_ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"%s ptr: %x/%x, total length: %u, the tag: '[%u, %u, %u], %d, %u'"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name><name>lsn_info</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><name><name>lsn_info</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>log_len</name></name></expr></argument>,
			 <argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
			 <argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>, <argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Keep data to update the ring buffer pread when the queue
 * is full.
 *
 * NB: It is a callback, so we don't use the polar_ringbuf_t as a parameter.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>flog_index_queue_keep_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_ringbuf_ref_t</name></type> <name>ref</name> <init>= <expr><block>{ <expr><operator>.</operator><name>slot</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_ringbuf_t</name></type> <name>queue</name> <init>= <expr><name><name>flog_instance</name><operator>-&gt;</operator><name>queue_ctl</name><operator>-&gt;</operator><name>queue</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_ringbuf_new_ref</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>,
							   <argument><expr><literal type="string">"flashback_logindex_queue_data_keep"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Failed to create flashback queue reference for flashback_logindex_queue_data_keep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ref</name><operator>.</operator><name>rbuf</name></name> <operator>==</operator> <name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_ringbuf_ref_keep_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><name>FLOG_INDEX_QUEUE_KEEP_RATIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_ringbuf_release_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Size</name></type>
<name>polar_flog_index_queue_shmem_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>queue_buffers_MB</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>shmem_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>queue_buffers_MB</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>shmem_size</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>shmem_size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>shmem_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flog_index_queue_ctl_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>shmem_size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>shmem_size</name></expr></argument>, <argument><expr><name>queue_buffers_MB</name> <operator>*</operator> <literal type="number">1024L</literal> <operator>*</operator> <literal type="number">1024L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>shmem_size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>shmem_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flog_index_queue_stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>shmem_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_flog_index_queue_init_data</name><parameter_list>(<parameter><decl><type><name>flog_index_queue_ctl_t</name></type> <name>ctl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queue_buffers_MB</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGINDEX_QUEUE_SUFFIX</name></cpp:macro> <cpp:value>"_index_queue"</cpp:value></cpp:define>

	<decl_stmt><decl><type><name>char</name></type> <name><name>queue_name</name><index>[<expr><name>FL_OBJ_MAX_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name> <modifier>*</modifier></type><name>queue_data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>queue_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>total_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>total_size</name> <operator>=</operator> <call><name>polar_flog_index_queue_shmem_size</name><argument_list>(<argument><expr><name>queue_buffers_MB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>queue_data</name> <operator>=</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator><name>ctl</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>flog_index_queue_ctl_data_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>queue_size</name> <operator>=</operator> <name>queue_buffers_MB</name> <operator>*</operator> <literal type="number">1024L</literal> <operator>*</operator> <literal type="number">1024L</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FLOG_GET_OBJ_NAME</name><argument_list>(<argument><expr><name>queue_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>LOGINDEX_QUEUE_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <call><name>polar_ringbuf_init</name><argument_list>(<argument><expr><name>queue_data</name></expr></argument>, <argument><expr><name>queue_size</name></expr></argument>, <argument><expr><name>LWTRANCHE_POLAR_FLASHBACK_LOG_QUEUE</name></expr></argument>, <argument><expr><name>queue_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>queue_stat</name></name> <operator>=</operator> <operator>(</operator><name>flog_index_queue_stat</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>queue_data</name> <operator>+</operator> <name>queue_size</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>flog_index_queue_ctl_t</name></type>
<name>polar_flog_index_queue_shmem_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queue_buffers_MB</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGINDEX_QUEUE_CTL_SUFFIX</name></cpp:macro> <cpp:value>" index queue ctl"</cpp:value></cpp:define>

	<decl_stmt><decl><type><name>flog_index_queue_ctl_t</name></type> <name>ctl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>queue_ctl_name</name><index>[<expr><name>FL_OBJ_MAX_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>


	<if_stmt><if>if <condition>(<expr><name>queue_buffers_MB</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<return>return <expr><name>ctl</name></expr>;</return></block_content></block></if></if_stmt>


	<expr_stmt><expr><call><name>FLOG_GET_OBJ_NAME</name><argument_list>(<argument><expr><name>queue_ctl_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>LOGINDEX_QUEUE_CTL_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>queue_ctl_name</name></expr></argument>, <argument><expr><call><name>polar_flog_index_queue_shmem_size</name><argument_list>(<argument><expr><name>queue_buffers_MB</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_flog_index_queue_init_data</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>queue_buffers_MB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>ctl</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Free the flashback logidnex queue to enlarge
 * The len is the data length in the queue not contain
 * flag and length and head info.
 *
 * NB: There is only one process to reference the ring buffer weakly,
 * free up itself when it is full.
 */</comment>
<function><type><name>void</name></type>
<name>polar_flog_index_queue_free_up</name><parameter_list>(<parameter><decl><type><name>flog_index_queue_ctl_t</name></type> <name>ctl</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>polar_ringbuf_free_up</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>,
						  <argument><expr><call><name>FLOG_INDEX_QUEUE_PKT_SIZE</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><name>flog_index_queue_keep_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ctl</name><operator>-&gt;</operator><name>queue_stat</name><operator>-&gt;</operator><name>free_up_total_times</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_flog_index_queue_free</name><parameter_list>(<parameter><decl><type><name>flog_index_queue_ctl_t</name></type> <name>ctl</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>polar_ringbuf_free_size</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>FLOG_INDEX_QUEUE_PKT_SIZE</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reserve the space for flashback logindex queue.
 * The size is the data size in the queue, the packet real
 * total size is 1 byte flag and 4 bytes packet length and
 * 8 bytes flashback log point and 4 bytes flashback log
 * length.
 *
 * NB: That function caller must be hold a exclusive lock.
 */</comment>
<function><type><name>size_t</name></type>
<name>polar_flog_index_queue_reserve</name><parameter_list>(<parameter><decl><type><name>flog_index_queue_ctl_t</name></type> <name>ctl</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>polar_ringbuf_pkt_reserve</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>,
									 <argument><expr><call><name>FLOG_INDEX_QUEUE_PKT_SIZE</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_flog_index_queue_set_pkt_len</name><parameter_list>(<parameter><decl><type><name>flog_index_queue_ctl_t</name></type> <name>ctl</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>polar_ringbuf_set_pkt_length</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>FLOG_INDEX_QUEUE_HEAD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_flog_index_queue_push</name><parameter_list>(<parameter><decl><type><name>flog_index_queue_ctl_t</name></type> <name>ctl</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>rbuf_pos</name></decl></parameter>, <parameter><decl><type><name>flog_record</name> <modifier>*</modifier></type><name>record</name></decl></parameter>,
							<parameter><decl><type><name>int</name></type> <name>copy_len</name></decl></parameter>, <parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>start_lsn</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>log_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>copy_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_ringbuf_t</name></type> <name>ringbuf</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>queue</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rbuf_pos</name> <operator>&gt;=</operator> <name><name>ringbuf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"rbuf_pos=%ld is incorrect for flashback logindex queue, "</literal>
							   <literal type="string">"queue_size=%ld"</literal></expr></argument>, <argument><expr><name>rbuf_pos</name></expr></argument>, <argument><expr><name><name>ringbuf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>polar_ringbuf_pkt_write</name><argument_list>(<argument><expr><name>ringbuf</name></expr></argument>, <argument><expr><name>rbuf_pos</name></expr></argument>,
									  <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>start_lsn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>start_lsn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>polar_ringbuf_pkt_write</name><argument_list>(<argument><expr><name>ringbuf</name></expr></argument>, <argument><expr><name>rbuf_pos</name></expr></argument>,
									  <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>log_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>copy_size</name> <operator>=</operator> <call><name>polar_ringbuf_pkt_write</name><argument_list>(<argument><expr><name>ringbuf</name></expr></argument>, <argument><expr><name>rbuf_pos</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
										<argument><expr><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><call><name>FL_GET_ORIGIN_PAGE_REC_DATA</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tag</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>copy_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>copy_size</name> <operator>!=</operator> <name>copy_len</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Failed to write packet to ringbuf, rbuf_pos=%lu, offset=%d, copy_size=%ld"</literal></expr></argument>,
			 <argument><expr><name>rbuf_pos</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>polar_ringbuf_set_pkt_flag</name><argument_list>(<argument><expr><name>ringbuf</name></expr></argument>, <argument><expr><name>rbuf_pos</name></expr></argument>,
							   <argument><expr><name>PKT_TYPE_BUFFER_TAG</name> <operator>|</operator> <name>POLAR_RINGBUF_PKT_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Put flashback log %x/%x lsn info (log total length is %u) "</literal>
			 <literal type="string">"into flashback logindex queue"</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>start_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>start_lsn</name><operator>)</operator></expr></argument>, <argument><expr><name>log_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read info from the queue with reference ref.
 * Return the log length and it is zero when
 * cann't read the expected flashback log lsn.
 * true when it is sucessful. And the lsn_info is
 * the target lsn info, the ptr_expected wiil be changed to
 * next flashback log record.
 *
 * NB: The ptr_expected must be a valid flashback log record.
 */</comment>
<function><type><name>bool</name></type>
<name>polar_flog_read_info_from_queue</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_ref_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>ptr_expected</name></decl></parameter>,
		<parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>log_len</name></decl></parameter>, <parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>max_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_flog_rec_ptr</name></type> <name>ptr</name> <init>= <expr><name>POLAR_INVALID_FLOG_REC_PTR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_flog_rec_ptr</name></type> <name>prev_ptr</name> <init>= <expr><name>POLAR_INVALID_FLOG_REC_PTR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>flog_index_queue_lsn_info</name></type> <name>lsn_info</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>FLOG_REC_PTR_IS_INVAILD</name><argument_list>(<argument><expr><name>ptr_expected</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lsn_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flog_index_queue_lsn_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>polar_flog_index_queue_ref_pop</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_info</name></expr></argument>, <argument><expr><name>max_ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>lsn_info</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;</operator> <name>ptr_expected</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* The expected flashback log is not in queue, return false. */</comment>
			<if_stmt><if>if <condition>(<expr><name>prev_ptr</name> <operator>==</operator> <name>POLAR_INVALID_FLOG_REC_PTR</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/*no cover line*/</comment>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"The flashback logindex queue is sequential, but we get %X/%X after "</literal>
					 <literal type="string">"%X/%X, but expected point is %X/%X"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
					 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>prev_ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><name>prev_ptr</name></expr></argument>,
					 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>ptr_expected</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>ptr_expected</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>prev_ptr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
	</block_content>}</block>
	while <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name>ptr_expected</name></expr>)</condition>;</do>

	<comment type="block">/* Next point must be point expected */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>ptr_expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>log_len</name> <operator>=</operator> <name><name>lsn_info</name><operator>.</operator><name>log_len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT_BUFFERTAG</name><argument_list>(<argument><expr><operator>*</operator><name>tag</name></expr></argument>, <argument><expr><name><name>lsn_info</name><operator>.</operator><name>tag</name><operator>.</operator><name>rnode</name></name></expr></argument>, <argument><expr><name><name>lsn_info</name><operator>.</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>, <argument><expr><name><name>lsn_info</name><operator>.</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"We found the flashback log record at %X/%X from logindex queue, "</literal>
			 <literal type="string">"total length is %u, the tag is '[%u, %u, %u], %d, %u'"</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>*</operator><name>log_len</name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_get_flog_index_queue_stat</name><parameter_list>(<parameter><decl><type><name>flog_index_queue_stat</name> <modifier>*</modifier></type><name>queue_stat</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>free_up_times</name></decl></parameter>,
								<parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>read_from_file_rec_nums</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>read_from_queue_rec_nums</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>free_up_times</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue_stat</name><operator>-&gt;</operator><name>free_up_total_times</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>read_from_file_rec_nums</name> <operator>=</operator> <name><name>queue_stat</name><operator>-&gt;</operator><name>read_from_file_rec_nums</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>read_from_queue_rec_nums</name> <operator>=</operator> <name><name>queue_stat</name><operator>-&gt;</operator><name>read_from_queue_rec_nums</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_update_flog_index_queue_stat</name><parameter_list>(<parameter><decl><type><name>flog_index_queue_stat</name> <modifier>*</modifier></type><name>queue_stat</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>read_from_file_added</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>read_from_queue_added</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>queue_stat</name><operator>-&gt;</operator><name>read_from_file_rec_nums</name></name> <operator>+=</operator> <name>read_from_file_added</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>queue_stat</name><operator>-&gt;</operator><name>read_from_queue_rec_nums</name></name> <operator>+=</operator> <name>read_from_queue_added</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
