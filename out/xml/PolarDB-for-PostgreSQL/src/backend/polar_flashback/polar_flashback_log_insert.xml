<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_flashback/polar_flashback_log_insert.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_flashback_log_insert.c
 *
 *
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2021, Alibaba Group Holding limited
=======
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
&gt;&gt;&gt;&gt;&gt;&gt;&gt; logindex_flashback_datamax_opensource
 *
 * IDENTIFICATION
 *    src/backend/polar_flashback/polar_flashback_log_insert.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xloginsert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/pg_lzcompress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_insert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_point.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/buf_internals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufpage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/checksum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<comment type="block">/* Buffer size required to store a compressed version of backup block image */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGLZ_MAX_BLCKSZ</name></cpp:macro> <cpp:value>PGLZ_MAX_OUTPUT(BLCKSZ)</cpp:value></cpp:define>

<comment type="block">/* GUCs */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>polar_flashback_log_debug</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_flog_rec</name><parameter_list>(<parameter><decl><type><name>flog_record</name> <modifier>*</modifier></type><name>record</name></decl></parameter>, <parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EXTRA_INFO_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

	<decl_stmt><decl><type><name>char</name></type> <name><name>extra_info</name><index>[<expr><name>MAX_EXTRA_INFO_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fl_origin_page_rec_data</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>xl_rmid</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ORIGIN_PAGE_ID</name></expr>:</case>
			<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>FL_GET_ORIGIN_PAGE_REC_DATA</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>extra_info</name></expr></argument>, <argument><expr><name>MAX_EXTRA_INFO_SIZE</name></expr></argument>, <argument><expr><literal type="string">"It is a origin page record, "</literal>
					 <literal type="string">"the origin page is %s page. The redo lsn of the origin page is %X/%X, "</literal>
					 <literal type="string">"the page tag is [%u, %u, %u], %d, %u"</literal></expr></argument>,
					 <argument><expr><operator>(</operator><ternary><condition><expr><name><name>record</name><operator>-&gt;</operator><name>xl_info</name></name> <operator>==</operator> <name>ORIGIN_PAGE_EMPTY</name></expr> ?</condition><then> <expr><literal type="string">"empty"</literal></expr> </then><else>: <expr><literal type="string">"not empty"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
					 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>redo_lsn</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>redo_lsn</name></name><operator>)</operator></expr></argument>,
					 <argument><expr><name><name>info</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
					 <argument><expr><name><name>info</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<comment type="block">/*no cover begin*/</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"The type of the record %X/%08X is wrong\n"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
			<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Insert a flashback log record at %X/%X: total length is %u, "</literal>
		 <literal type="string">"the previous pointer is %X/%X. %s"</literal></expr></argument>,
		 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>record</name><operator>-&gt;</operator><name>xl_tot_len</name></name></expr></argument>,
		 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>xl_prev</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>xl_prev</name></name><operator>)</operator></expr></argument>, <argument><expr><name>extra_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Assemble a flashback log record from the buffers into an
 * polar_flashback_log_record, ready for insertion with
 * polar_flashback_log_insert_record().
 *
 * tag is the buffer tag of buffer which is a origin page.
 * redo_ptr is the last checkpoint XLOG record pointer.
 *
 * Return the flashback log record which palloc in this function.
 * The caller can switch the memory context and pfree.
 *
 * The record will be contain the (compressed) block data.
 * The record header fields are filled in, except for the CRC field and
 * previous pointer.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>flog_record</name> <modifier>*</modifier></type>
<name>flog_rec_assemble</name><parameter_list>(<parameter><decl><type><name>flog_insert_context</name></type> <name>insert_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>   <name>include_origin_page</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>   <name>page</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fl_rec_img_header</name></type> <name>b_img</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fl_rec_img_comp_header</name></type> <name>cb_img</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>flog_record</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><name>PGLZ_MAX_BLCKSZ</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type> <name>data_len</name> <init>= <expr><name>BLCKSZ</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>xl_tot_len</name> <init>= <expr><name>FLOG_REC_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_empty_page</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_compressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>from_origin_buf</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>insert_context</name><operator>.</operator><name>rmgr</name></name> <operator>==</operator> <name>ORIGIN_PAGE_ID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>include_origin_page</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>include_origin_page</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>need_checksum_again</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>need_checksum_again</name> <operator>=</operator> <name>from_origin_buf</name> <operator>=</operator> <name><name>insert_context</name><operator>.</operator><name>info</name></name> <operator>&amp;</operator> <name>FROM_ORIGIN_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>insert_context</name><operator>.</operator><name>buf_tag</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>insert_context</name><operator>.</operator><name>origin_page</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>xl_tot_len</name> <operator>+=</operator> <name>FL_ORIGIN_PAGE_REC_INFO_SIZE</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PageIsNew</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>polar_page_is_just_inited</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint16</name></type>      <name>lower</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint16</name></type>      <name>upper</name></decl>;</decl_stmt>

			<comment type="block">/* Assume we can omit data between pd_lower and pd_upper */</comment>
			<expr_stmt><expr><name>lower</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>page</name><operator>)</operator><operator>-&gt;</operator><name>pd_lower</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>upper</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>page</name><operator>)</operator><operator>-&gt;</operator><name>pd_upper</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>lower</name> <operator>&gt;=</operator> <name>SizeOfPageHeaderData</name> <operator>&amp;&amp;</operator>
					<name>upper</name> <operator>&gt;</operator> <name>lower</name> <operator>&amp;&amp;</operator>
					<name>upper</name> <operator>&lt;=</operator> <name>BLCKSZ</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>b_img</name><operator>.</operator><name>hole_offset</name></name> <operator>=</operator> <name>lower</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>b_img</name><operator>.</operator><name>bimg_info</name></name> <operator>|=</operator> <name>IMAGE_HAS_HOLE</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>cb_img</name><operator>.</operator><name>hole_length</name></name> <operator>=</operator> <name>upper</name> <operator>-</operator> <name>lower</name></expr>;</expr_stmt>
				<comment type="block">/*
				 * Check the checksum before compute it again, so we will
				 * not change the rightness of checksum.
				 *
				 * When it is from origin buffer, the checksum may be wrong,
				 * so we don't check the pages from origin page buffer.
				 *
				 * We do nothing while the checksum is wrong here, but
				 * the decoder will verify the page.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>from_origin_buf</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>need_checksum_again</name> <operator>=</operator>
						<operator>(</operator><call><name>pg_checksum_page</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>page</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>page</name><operator>)</operator><operator>-&gt;</operator><name>pd_checksum</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* No "hole" to compress out */</comment>
				<expr_stmt><expr><name><name>b_img</name><operator>.</operator><name>hole_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>cb_img</name><operator>.</operator><name>hole_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<comment type="block">/* Compute checksum again */</comment>
			<if_stmt><if>if <condition>(<expr><name>need_checksum_again</name> <operator>&amp;&amp;</operator> <call><name>DataChecksumsEnabled</name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>page</name> <operator>+</operator> <name><name>b_img</name><operator>.</operator><name>hole_offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cb_img</name><operator>.</operator><name>hole_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>page</name><operator>)</operator><operator>-&gt;</operator><name>pd_checksum</name> <operator>=</operator> <call><name>pg_checksum_page</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>page</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Try to compress flashback log */</comment>
			<expr_stmt><expr><name>is_compressed</name> <operator>=</operator> <call><name>polar_compress_block_in_log</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name><name>b_img</name><operator>.</operator><name>hole_offset</name></name></expr></argument>, <argument><expr><name><name>cb_img</name><operator>.</operator><name>hole_length</name></name></expr></argument>,
														<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_len</name></expr></argument>, <argument><expr><name>FL_REC_IMG_COMP_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>is_compressed</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>b_img</name><operator>.</operator><name>bimg_info</name></name> <operator>|=</operator> <name>IMAGE_IS_COMPRESSED</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>b_img</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>data_len</name></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>cb_img</name><operator>.</operator><name>hole_length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>xl_tot_len</name> <operator>+=</operator> <name>FL_REC_IMG_COMP_HEADER_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>b_img</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>BLCKSZ</name> <operator>-</operator> <name><name>cb_img</name><operator>.</operator><name>hole_length</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name>xl_tot_len</name> <operator>+=</operator> <name>FL_REC_IMG_HEADER_SIZE</name> <operator>+</operator> <name><name>b_img</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>is_empty_page</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Construct the flashback log record */</comment>
	<expr_stmt><expr><name>rec</name> <operator>=</operator> <call><name>polar_palloc_in_crit</name><argument_list>(<argument><expr><name>xl_tot_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>xl_tot_len</name></name> <operator>=</operator> <name>xl_tot_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>xl_prev</name></name> <operator>=</operator> <name>POLAR_INVALID_FLOG_REC_PTR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>xl_rmid</name></name> <operator>=</operator> <name><name>insert_context</name><operator>.</operator><name>rmgr</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>xl_info</name></name> <operator>=</operator> <name><name>insert_context</name><operator>.</operator><name>info</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>xl_xid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>include_origin_page</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>fl_origin_page_rec_data</name></type> <name>rec_data</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>scratch</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>rec</name> <operator>+</operator> <name>FLOG_REC_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Copy the record data for the origin page. */</comment>
		<expr_stmt><expr><name><name>rec_data</name><operator>.</operator><name>redo_lsn</name></name> <operator>=</operator> <name><name>insert_context</name><operator>.</operator><name>redo_lsn</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INIT_BUFFERTAG</name><argument_list>(<argument><expr><name><name>rec_data</name><operator>.</operator><name>tag</name></name></expr></argument>, <argument><expr><name><name>insert_context</name><operator>.</operator><name>buf_tag</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>,
				<argument><expr><name><name>insert_context</name><operator>.</operator><name>buf_tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>, <argument><expr><name><name>insert_context</name><operator>.</operator><name>buf_tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rec_data</name></expr></argument>, <argument><expr><name>FL_ORIGIN_PAGE_REC_INFO_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>scratch</name> <operator>+=</operator> <name>FL_ORIGIN_PAGE_REC_INFO_SIZE</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>is_empty_page</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>xl_tot_len</name> <operator>==</operator> <operator>(</operator><name>FLOG_REC_HEADER_SIZE</name> <operator>+</operator> <name>FL_ORIGIN_PAGE_REC_INFO_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>xl_info</name></name> <operator>=</operator> <name>ORIGIN_PAGE_EMPTY</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>xl_tot_len</name> <operator>&gt;=</operator> <name>FLOG_REC_HEADER_SIZE</name> <operator>+</operator> <name>FL_ORIGIN_PAGE_REC_INFO_SIZE</name> <operator>+</operator>
				   <name>FL_REC_IMG_HEADER_SIZE</name> <operator>+</operator> <name><name>b_img</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>xl_info</name></name> <operator>=</operator> <name>ORIGIN_PAGE_FULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_img</name></expr></argument>, <argument><expr><name>FL_REC_IMG_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>scratch</name> <operator>+=</operator> <name>FL_REC_IMG_HEADER_SIZE</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>is_compressed</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>cb_img</name><operator>.</operator><name>hole_length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_img</name></expr></argument>, <argument><expr><name>FL_REC_IMG_COMP_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>scratch</name> <operator>+=</operator> <name>FL_REC_IMG_COMP_HEADER_SIZE</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>xl_tot_len</name> <operator>==</operator> <name>FLOG_REC_HEADER_SIZE</name> <operator>+</operator> <name>FL_ORIGIN_PAGE_REC_INFO_SIZE</name> <operator>+</operator>
						   <name>FL_REC_IMG_HEADER_SIZE</name> <operator>+</operator> <name>FL_REC_IMG_COMP_HEADER_SIZE</name> <operator>+</operator> <name><name>b_img</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>b_img</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>xl_tot_len</name> <operator>==</operator> <name>FLOG_REC_HEADER_SIZE</name> <operator>+</operator> <name>FL_ORIGIN_PAGE_REC_INFO_SIZE</name> <operator>+</operator>
					   <name>FL_REC_IMG_HEADER_SIZE</name> <operator>+</operator> <name><name>b_img</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>cb_img</name><operator>.</operator><name>hole_length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>b_img</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>b_img</name><operator>.</operator><name>hole_offset</name></name> <operator>&gt;=</operator> <name>SizeOfPageHeaderData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>page</name></expr></argument>, <argument><expr><name><name>b_img</name><operator>.</operator><name>hole_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>scratch</name> <operator>+=</operator> <name><name>b_img</name><operator>.</operator><name>hole_offset</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>page</name> <operator>+</operator> <name><name>b_img</name><operator>.</operator><name>hole_offset</name></name> <operator>+</operator> <name><name>cb_img</name><operator>.</operator><name>hole_length</name></name></expr></argument>,
						   <argument><expr><name><name>b_img</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>b_img</name><operator>.</operator><name>hole_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>b_img</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>page</name></expr></argument>, <argument><expr><name><name>b_img</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* Record the page come from origin buffer */</comment>
		<if_stmt><if>if <condition>(<expr><name>from_origin_buf</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>xl_info</name></name> <operator>|=</operator> <name>FROM_ORIGIN_BUF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>rec</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Insert a flashback log record to flashback log shared buffer.
 *
 * insert_context: Everything about the insertion.
 */</comment>
<function><type><name>polar_flog_rec_ptr</name></type>
<name>polar_flog_insert_into_buffer</name><parameter_list>(<parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>, <parameter><decl><type><name>flog_index_queue_ctl_t</name></type> <name>queue_ctl</name></decl></parameter>,
							  <parameter><decl><type><name>flog_insert_context</name></type> <name>insert_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_flog_rec_ptr</name></type> <name>start_ptr</name> <init>= <expr><name>POLAR_INVALID_FLOG_REC_PTR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_flog_rec_ptr</name></type> <name>end_ptr</name> <init>= <expr><name>POLAR_INVALID_FLOG_REC_PTR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>flog_record</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Assemble the flashback log record without the previous pointer and the CRC field */</comment>
	<expr_stmt><expr><name>rec</name> <operator>=</operator> <call><name>flog_rec_assemble</name><argument_list>(<argument><expr><name>insert_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Fill the previous pointer and the CRC field and insert the flashback log record to flashback log
	 * shared buffers.
	 */</comment>
	<expr_stmt><expr><name>end_ptr</name> <operator>=</operator> <call><name>polar_flog_rec_insert</name><argument_list>(<argument><expr><name>buf_ctl</name></expr></argument>, <argument><expr><name>queue_ctl</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>log_flog_rec</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>start_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>end_ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>polar_flog_rec_ptr</name></type>
<name>polar_insert_buf_flog_rec</name><parameter_list>(<parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>, <parameter><decl><type><name>flog_index_queue_ctl_t</name></type> <name>queue_ctl</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>,
		<parameter><decl><type><name>XLogRecPtr</name></type> <name>redo_lsn</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>fbpoint_lsn</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>Page</name></type> <name>origin_page</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>from_origin_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>flog_insert_context</name></type> <name>insert_context</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * It is candidate, check it in here.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>FLOG_LIST_SLOT_CANDIDATE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>PageGetLSN</name><argument_list>(<argument><expr><name>origin_page</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>fbpoint_lsn</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLAR_INVALID_FLOG_REC_PTR</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>PageGetLSN</name><argument_list>(<argument><expr><name>origin_page</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>fbpoint_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Construct the insert context */</comment>
	<expr_stmt><expr><name><name>insert_context</name><operator>.</operator><name>buf_tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>insert_context</name><operator>.</operator><name>origin_page</name></name> <operator>=</operator> <operator>(</operator><name>Page</name><operator>)</operator><name>origin_page</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>insert_context</name><operator>.</operator><name>redo_lsn</name></name> <operator>=</operator> <name>redo_lsn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>insert_context</name><operator>.</operator><name>rmgr</name></name> <operator>=</operator> <name>ORIGIN_PAGE_ID</name></expr>;</expr_stmt>
	<comment type="block">/* This will be update in the flashback log record */</comment>
	<expr_stmt><expr><name><name>insert_context</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name>ORIGIN_PAGE_FULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>from_origin_buf</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>insert_context</name><operator>.</operator><name>info</name></name> <operator>|=</operator> <name>FROM_ORIGIN_BUF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>polar_flog_insert_into_buffer</name><argument_list>(<argument><expr><name>buf_ctl</name></expr></argument>, <argument><expr><name>queue_ctl</name></expr></argument>, <argument><expr><name>insert_context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
