<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_flashback/polar_flashback_log_decoder.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_flashback_log_decoder.c
 *    Implementation of flashback log decoder
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2021, Alibaba Group Holding limited
 *
 * IDENTIFICATION
 *    src/backend/polar_flashback/polar_flashback_log_decoder.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_logindex_redo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/pg_lzcompress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_decoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_reader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_record.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufpage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/checksum.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>fl_decode_unempty_origin_page</name><parameter_list>(<parameter><decl><type><name>flog_record</name> <modifier>*</modifier></type><name>rec</name></decl></parameter>,
							  <parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>fl_origin_page_rec_data</name> <modifier>*</modifier></type><name>rec_data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fl_rec_img_header</name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fl_rec_img_comp_header</name> <modifier>*</modifier></type><name>c_img</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>origin_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>record_data_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGAlignedBlock</name></type> <name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type> <name>hole_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>rec_data</name> <operator>=</operator> <call><name>FL_GET_ORIGIN_PAGE_REC_DATA</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>img</name> <operator>=</operator> <call><name>FL_GET_ORIGIN_PAGE_IMG_HEADER</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>origin_page</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>img</name> <operator>+</operator> <name>FL_REC_IMG_HEADER_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>record_data_len</name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>bimg_info</name></name> <operator>&amp;</operator> <name>IMAGE_IS_COMPRESSED</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>bimg_info</name></name> <operator>&amp;</operator> <name>IMAGE_HAS_HOLE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>c_img</name> <operator>=</operator> <operator>(</operator><name>fl_rec_img_comp_header</name> <operator>*</operator><operator>)</operator> <name>origin_page</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>origin_page</name> <operator>+=</operator> <name>FL_REC_IMG_COMP_HEADER_SIZE</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>hole_length</name> <operator>=</operator> <name><name>c_img</name><operator>-&gt;</operator><name>hole_length</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>pglz_decompress</name><argument_list>(<argument><expr><name>origin_page</name></expr></argument>, <argument><expr><name>record_data_len</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>data</name></name></expr></argument>,
							<argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>hole_length</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*no cover line*/</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid compressed origin page ([%u, %u, %u]), %u, %u, "</literal>
				 <literal type="string">"from flashback log at %X/%X"</literal></expr></argument>,
				 <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
				 <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
				 <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
				 <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>,
				 <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>,
				 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
				 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>origin_page</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>bimg_info</name></name> <operator>&amp;</operator> <name>IMAGE_HAS_HOLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>hole_length</name> <operator>=</operator> <name>BLCKSZ</name> <operator>-</operator> <name><name>img</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* generate page, taking into account hole if necessary */</comment>
	<if_stmt><if>if <condition>(<expr><name>hole_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>page</name></expr></argument>, <argument><expr><name>origin_page</name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>page</name></expr></argument>, <argument><expr><name>origin_page</name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>hole_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* must zero-fill the hole */</comment>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>page</name> <operator>+</operator> <name><name>img</name><operator>-&gt;</operator><name>hole_offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hole_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>page</name> <operator>+</operator> <operator>(</operator><name><name>img</name><operator>-&gt;</operator><name>hole_offset</name></name> <operator>+</operator> <name>hole_length</name><operator>)</operator></expr></argument>,
			   <argument><expr><name>origin_page</name> <operator>+</operator> <name><name>img</name><operator>-&gt;</operator><name>hole_offset</name></name></expr></argument>,
			   <argument><expr><name>BLCKSZ</name> <operator>-</operator> <operator>(</operator><name><name>img</name><operator>-&gt;</operator><name>hole_offset</name></name> <operator>+</operator> <name>hole_length</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Checksum again */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PageIsVerified</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>, <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"The checksum of origin page ([%u, %u, %u]), %u, %u, "</literal>
			 <literal type="string">"from flashback log at %X/%X is wrong"</literal></expr></argument>,
			 <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
			 <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
			 <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
			 <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name></expr></argument>,
			 <argument><expr><name><name>rec_data</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>blockNum</name></name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Decode the origin page flashback log record.
 * Check the checkpoint lsn and crc field.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>decode_origin_page_rec</name><parameter_list>(<parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>checkpoint_lsn</name></decl></parameter>,
		<parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>flog_buf_ctl_t</name></type> <name>buf_ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>       <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>is_valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>flog_record</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>flog_reader_state</name> <modifier>*</modifier></type><name>reader</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>errormsg</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>polar_flog_reader_allocate</name><argument_list>(<argument><expr><name>POLAR_FLOG_SEG_SIZE</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>polar_flog_page_read</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>reader</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Can not allocate the flashback log reader memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Read the flashback log record until the flashback log is invalid */</comment>
	<expr_stmt><expr><name>rec</name> <operator>=</operator> <call><name>polar_read_flog_record</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>rec</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>rec</name><operator>-&gt;</operator><name>xl_rmid</name></name> <operator>==</operator> <name>ORIGIN_PAGE_ID</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BufferTag</name></type> <name>tag_in_rec</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>tag_in_rec</name> <operator>=</operator> <call><name>FL_GET_ORIGIN_PAGE_REC_DATA</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tag</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BUFFERTAGS_EQUAL</name><argument_list>(<argument><expr><name>tag_in_rec</name></expr></argument>, <argument><expr><operator>*</operator><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/*no cover line*/</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"The buffer tag flashback log record at %X/%X is "</literal>
				 <literal type="string">"([%u, %u, %u]), %u, %u not ([%u, %u, %u]), %u, %u"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>ptr</name></expr></argument>,
				 <argument><expr><name><name>tag_in_rec</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>tag_in_rec</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
				 <argument><expr><name><name>tag_in_rec</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>, <argument><expr><name><name>tag_in_rec</name><operator>.</operator><name>forkNum</name></name></expr></argument>,
				 <argument><expr><name><name>tag_in_rec</name><operator>.</operator><name>blockNum</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
				 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>xl_info</name></name></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>info</name> <operator>&amp;</operator> <name>ORIGIN_PAGE_TYPE_MASK</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>ORIGIN_PAGE_EMPTY</name></expr>:</case>
				<expr_stmt><expr><name>is_valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PageInit</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ORIGIN_PAGE_FULL</name></expr>:</case>
				<expr_stmt><expr><name>is_valid</name> <operator>=</operator> <call><name>fl_decode_unempty_origin_page</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<default>default:</default>
				<comment type="block">/*no cover line*/</comment>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Parse flashback log rec: unknown op code %u"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>rec</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"The flashback log record at %X/%X is invaid with error: %s"</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"The flashback log record at %X/%X not a origin page record, its rmid is "</literal>
			 <literal type="string">"%d"</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>xl_rmid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>is_valid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>checkpoint_lsn</name> <operator>=</operator> <call><name>FL_GET_ORIGIN_PAGE_REC_DATA</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>redo_lsn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>polar_flog_reader_free</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>is_valid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Get the origin page in the time of checkpoint_lsn to page.
 *
 * tag: The bufferTag of the target page.
 * Page: The target page.
 * start_ptr: The start pointer of the flashback logindex to search.
 * end_ptr: The end pointer of the flashback logindex to search.
 * replay_start_lsn: The replay start WAL lsn.
 *
 * Return true when we get a right origin page.
 *
 * When is_partial_write is true, we will get the origin page whose checkpoint_lsn
 * is equal to the checkpoint_lsn. It means that the origin page is the origin version
 * before the partial write. So it can be used to repair the partial written page.
 *
 * When is_partial_write is false, we will get the origin page whose checkpoint_lsn
 * is larger than the checkpoint_lsn. It means that the origin page is the origin version
 * before the checkpoint_lsn. So it can be used to get a certain version at a certain time.
 *
 * The two scenarios above are not the same. Partial write is a known issue, we can repair it.
 * And now we don't like to repair issue unknown which may cause something unexpected.
 *
 * Please make true the end_ptr larger than start_ptr.
 *
 */</comment>
<function><type><name>bool</name></type>
<name>polar_get_origin_page</name><parameter_list>(<parameter><decl><type><name>flog_ctl_t</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>start_ptr</name></decl></parameter>,
					  <parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>end_ptr</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>replay_start_lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<decl_stmt><decl><type><name>log_index_page_iter_t</name></type> <name>originpage_iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_lsn_t</name> <modifier>*</modifier></type><name>lsn_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_flog_rec_ptr</name></type> <name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>logindex_snapshot_t</name></type> <name>snapshot</name> <init>= <expr><name><name>instance</name><operator>-&gt;</operator><name>logindex_snapshot</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>start_ptr</name> <operator>&lt;</operator> <name>end_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>originpage_iter</name> <operator>=</operator>
		<call><name>polar_logindex_create_page_iterator</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>start_ptr</name></expr></argument>, <argument><expr><name>end_ptr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_logindex_page_iterator_state</name><argument_list>(<argument><expr><name>originpage_iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ITERATE_STATE_FINISHED</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover begin*/</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to iterate data for ([%u, %u, %u]), %u, %u flashback log, "</literal>
			 <literal type="string">"which start pointer =%X/%X and end pointer =%X/%X"</literal></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>start_ptr</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><name>start_ptr</name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>end_ptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>end_ptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
		<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lsn_info</name> <operator>=</operator> <call><name>polar_logindex_page_iterator_next</name><argument_list>(<argument><expr><name>originpage_iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>polar_flog_rec_ptr</name><operator>)</operator> <name><name>lsn_info</name><operator>-&gt;</operator><name>lsn</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>BUFFERTAGS_EQUAL</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>lsn_info</name><operator>-&gt;</operator><name>tag</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>decode_origin_page_rec</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>replay_start_lsn</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>instance</name><operator>-&gt;</operator><name>buf_ctl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>polar_logindex_release_page_iterator</name><argument_list>(<argument><expr><name>originpage_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Can't find a valid origin page for page ([%u, %u, %u]), %u, %u "</literal>
			 <literal type="string">"with flashback log start location %X/%X and end location %X/%X"</literal></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>start_ptr</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><name>start_ptr</name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>end_ptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>end_ptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>replay_start_lsn</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><operator>*</operator><name>replay_start_lsn</name></expr></argument>, <argument><expr><call><name>PageGetLSN</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"We find a valid origin page for page ([%u, %u, %u]), %u, %u "</literal>
			 <literal type="string">"with flashback log start location %X/%X and end location %X/%X, its "</literal>
			 <literal type="string">"WAL replay start lsn is %X/%X"</literal></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>start_ptr</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><name>start_ptr</name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>end_ptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>end_ptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><operator>*</operator><name>replay_start_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><operator>*</operator><name>replay_start_lsn</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Flashback the buffer.
 * instance: flashback log instance.
 * buf: The buffer to flashback.
 * tag: The origin page buffer tag.
 * start_ptr: The flashback log start point to search origin page.
 * end_ptr: The flashback log end point to search origin page.
 * start_lsn: The WAL start lsn to replay.
 * end_lsn: The WAL end lsn to replay.
 * elevel: Log level.
 * apply_fpi: apply full page image or not.
 *
 * NB: Please make sure end_ptr &gt;= start_ptr.
 */</comment>
<function><type><name>bool</name></type>
<name>polar_flashback_buffer</name><parameter_list>(<parameter><decl><type><name>flog_ctl_t</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>,
		<parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>start_ptr</name></decl></parameter>, <parameter><decl><type><name>polar_flog_rec_ptr</name></type> <name>end_ptr</name></decl></parameter>,
		<parameter><decl><type><name>XLogRecPtr</name></type> <name>start_lsn</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>end_lsn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elevel</name></decl></parameter>,
		<parameter><decl><type><name>bool</name></type> <name>apply_fpi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type> <name>page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>lsn</name> <init>= <expr><name>InvalidXLogRecPtr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_desc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>start_ptr</name> <operator>==</operator> <name>end_ptr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"The page ([%u, %u, %u]), %u, %u has no origin page between flashback log "</literal>
				<literal type="string">"%X/%X and %X/%X"</literal></expr></argument>,
				<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>,
				<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>start_ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>start_ptr</name></expr></argument>,
				<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>end_ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>end_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>start_ptr</name> <operator>&gt;</operator> <name>end_ptr</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover begin*/</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"The range to flashback page ([%u, %u, %u]), %u, %u is wrong, "</literal>
				<literal type="string">"the flashback log start pointer %X/%X, the flashback log end pointer %X/%X"</literal></expr></argument>,
				<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>,
				<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>start_ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>start_ptr</name></expr></argument>,
				<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>end_ptr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>end_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Disable the flashback log for the buffer in the flashback. */</comment>
	<expr_stmt><expr><name>buf_desc</name> <operator>=</operator> <call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_buf_flog_state</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>, <argument><expr><name>POLAR_BUF_FLOG_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_get_origin_page</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>start_ptr</name></expr></argument>, <argument><expr><name>end_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* If not found, check its first modify is a XLOG_FPI_MULTI/XLOG_FPI/XLOG_FPI_FOR_HINT record? */</comment>
		<expr_stmt><expr><name>lsn</name> <operator>=</operator> <call><name>polar_logindex_find_first_fpi</name><argument_list>(<argument><expr><name>polar_logindex_redo_instance</name></expr></argument>,
						<argument><expr><name>start_lsn</name></expr></argument>, <argument><expr><name>end_lsn</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>apply_fpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"The first modify of ([%u, %u, %u]), %u, %u after %X/%X "</literal>
					<literal type="string">"is a new full page image, its origin page is a empty page or the image"</literal></expr></argument>,
					 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
					 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
					 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
					 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>,
					 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>,
					 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name>start_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>start_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>apply_fpi</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>lsn</name> <operator>=</operator> <call><name>PageGetLSN</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>elevel</name></expr></argument>, <argument><expr><literal type="string">"Can't find a valid origin page for ([%u, %u, %u]), %u, %u from flashback log"</literal></expr></argument>,
				 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
				 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
				 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
				 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>,
				 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_flashback_log_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"The origin page ([%u, %u, %u]), %u, %u need to replay from %X/%X to %X/%X"</literal></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>,
			 <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>lsn</name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>end_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>end_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* The lsn can be larger than or equal to end_lsn, it means no WAL record to replay */</comment>
	<expr_stmt><expr><call><name>polar_logindex_apply_page</name><argument_list>(<argument><expr><name>polar_logindex_redo_instance</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>end_lsn</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
