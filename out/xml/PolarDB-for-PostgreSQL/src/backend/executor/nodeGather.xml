<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/executor/nodeGather.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * nodeGather.c
 *	  Support routines for scanning a plan via multiple workers.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * A Gather executor launches parallel workers to run multiple copies of a
 * plan.  It can also run the plan itself, if the workers are not available
 * or have not started up yet.  It then merges all of the results it produces
 * and the results from the workers into a single output stream.  Therefore,
 * it will normally be used with a plan where running multiple copies of the
 * same plan does not produce duplicate output, such as parallel-aware
 * SeqScan.
 *
 * Alternatively, a Gather node can be configured to use just one worker
 * and the single-copy flag can be set.  In this case, the Gather node will
 * run the plan in one worker and will not execute the plan itself.  In
 * this case, it simply returns whatever tuples were returned by the worker.
 * If a worker cannot be obtained, then it will run the plan itself and
 * return the results.  Therefore, a plan used with a single-copy Gather
 * node need not be parallel-aware.
 *
 * IDENTIFICATION
 *	  src/backend/executor/nodeGather.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/relscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execdebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execParallel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeGather.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeSubplan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tqueue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/planmain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type><name>ExecGather</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type><name>gather_getnext</name><parameter_list>(<parameter><decl><type><name>GatherState</name> <modifier>*</modifier></type><name>gatherstate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HeapTuple</name></type> <name>gather_readnext</name><parameter_list>(<parameter><decl><type><name>GatherState</name> <modifier>*</modifier></type><name>gatherstate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ExecShutdownGatherWorkers</name><parameter_list>(<parameter><decl><type><name>GatherState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* ----------------------------------------------------------------
 *		ExecInitGather
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>GatherState</name> <modifier>*</modifier></type>
<name>ExecInitGather</name><parameter_list>(<parameter><decl><type><name>Gather</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GatherState</name> <modifier>*</modifier></type><name>gatherstate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Plan</name>	   <modifier>*</modifier></type><name>outerNode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupDesc</name></decl>;</decl_stmt>

	<comment type="block">/* Gather node doesn't have innerPlan node. */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>innerPlan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * create state structure
	 */</comment>
	<expr_stmt><expr><name>gatherstate</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>GatherState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gatherstate</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>plan</name></name> <operator>=</operator> <operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gatherstate</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>estate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gatherstate</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>ExecProcNode</name></name> <operator>=</operator> <name>ExecGather</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>gatherstate</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gatherstate</name><operator>-&gt;</operator><name>need_to_scan_locally</name></name> <operator>=</operator>
		<operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>single_copy</name></name> <operator>&amp;&amp;</operator> <name>parallel_leader_participation</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gatherstate</name><operator>-&gt;</operator><name>tuples_needed</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Miscellaneous initialization
	 *
	 * create expression context for node
	 */</comment>
	<expr_stmt><expr><call><name>ExecAssignExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gatherstate</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * now initialize outer plan
	 */</comment>
	<expr_stmt><expr><name>outerNode</name> <operator>=</operator> <call><name>outerPlan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>gatherstate</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ExecInitNode</name><argument_list>(<argument><expr><name>outerNode</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupDesc</name> <operator>=</operator> <call><name>ExecGetResultType</name><argument_list>(<argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>gatherstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Initialize result slot, type and projection.
	 */</comment>
	<expr_stmt><expr><call><name>ExecInitResultTupleSlotTL</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gatherstate</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecConditionalAssignProjectionInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gatherstate</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>, <argument><expr><name>tupDesc</name></expr></argument>, <argument><expr><name>OUTER_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Initialize funnel slot to same tuple descriptor as outer plan.
	 */</comment>
	<expr_stmt><expr><name><name>gatherstate</name><operator>-&gt;</operator><name>funnel_slot</name></name> <operator>=</operator> <call><name>ExecInitExtraTupleSlot</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><name>tupDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Gather doesn't support checking a qual (it's always more efficient to
	 * do it in the child node).
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>plan</name><operator>.</operator><name>qual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>gatherstate</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		ExecGather(node)
 *
 *		Scans the relation via multiple workers and returns
 *		the next qualifying tuple.
 * ----------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>ExecGather</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GatherState</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>GatherState</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Initialize the parallel context and workers on first execution. We do
	 * this on first execution rather than during node initialization, as it
	 * needs to allocate a large dynamic segment, so it is better to do it
	 * only if it is really needed.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>EState</name>	   <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Gather</name>	   <modifier>*</modifier></type><name>gather</name> <init>= <expr><operator>(</operator><name>Gather</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * Sometimes we might have to run without parallelism; but if parallel
		 * mode is active then we can try to fire up some workers.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>gather</name><operator>-&gt;</operator><name>num_workers</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>estate</name><operator>-&gt;</operator><name>es_use_parallel_mode</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ParallelContext</name> <modifier>*</modifier></type><name>pcxt</name></decl>;</decl_stmt>

			<comment type="block">/* Initialize, or re-initialize, shared state needed by workers. */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>pei</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pei</name></name> <operator>=</operator> <call><name>ExecInitParallelPlan</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr></argument>,
												 <argument><expr><name>estate</name></expr></argument>,
												 <argument><expr><name><name>gather</name><operator>-&gt;</operator><name>initParam</name></name></expr></argument>,
												 <argument><expr><name><name>gather</name><operator>-&gt;</operator><name>num_workers</name></name></expr></argument>,
												 <argument><expr><name><name>node</name><operator>-&gt;</operator><name>tuples_needed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ExecParallelReinitialize</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr></argument>,
										 <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pei</name></name></expr></argument>,
										 <argument><expr><name><name>gather</name><operator>-&gt;</operator><name>initParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<comment type="block">/*
			 * Register backend workers. We might not get as many as we
			 * requested, or indeed any at all.
			 */</comment>
			<expr_stmt><expr><name>pcxt</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>pei</name><operator>-&gt;</operator><name>pcxt</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LaunchParallelWorkers</name><argument_list>(<argument><expr><name>pcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* We save # workers launched for the benefit of EXPLAIN */</comment>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nworkers_launched</name></name> <operator>=</operator> <name><name>pcxt</name><operator>-&gt;</operator><name>nworkers_launched</name></name></expr>;</expr_stmt>

			<comment type="block">/* Set up tuple queue readers to read the results. */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>pcxt</name><operator>-&gt;</operator><name>nworkers_launched</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ExecParallelCreateReaders</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pei</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Make a working array showing the active readers */</comment>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nreaders</name></name> <operator>=</operator> <name><name>pcxt</name><operator>-&gt;</operator><name>nworkers_launched</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>reader</name></name> <operator>=</operator> <operator>(</operator><name>TupleQueueReader</name> <operator>*</operator><operator>*</operator><operator>)</operator>
					<call><name>palloc</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nreaders</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TupleQueueReader</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>reader</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>pei</name><operator>-&gt;</operator><name>reader</name></name></expr></argument>,
					   <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nreaders</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TupleQueueReader</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* No workers?	Then never mind. */</comment>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nreaders</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>reader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nextreader</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Run plan locally if no workers or enabled and not single-copy. */</comment>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>need_to_scan_locally</name></name> <operator>=</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>nreaders</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
			<operator>||</operator> <operator>(</operator><operator>!</operator><name><name>gather</name><operator>-&gt;</operator><name>single_copy</name></name> <operator>&amp;&amp;</operator> <name>parallel_leader_participation</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Reset per-tuple memory context to free any expression evaluation
	 * storage allocated in the previous tuple cycle.
	 */</comment>
	<expr_stmt><expr><name>econtext</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ResetExprContext</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Get next tuple, either from one of our workers, or by running the plan
	 * ourselves.
	 */</comment>
	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>gather_getnext</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* If no projection is required, we're done. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>slot</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Form the result tuple using ExecProject(), and return it.
	 */</comment>
	<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_outertuple</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
	<return>return <expr><call><name>ExecProject</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		ExecEndGather
 *
 *		frees any storage allocated through C routines.
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>ExecEndGather</name><parameter_list>(<parameter><decl><type><name>GatherState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ExecEndNode</name><argument_list>(<argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* let children clean up first */</comment>
	<expr_stmt><expr><call><name>ExecShutdownGather</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecFreeExprContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>ps_ResultTupleSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read the next tuple.  We might fetch a tuple from one of the tuple queues
 * using gather_readnext, or if no tuple queue contains a tuple and the
 * single_copy flag is not set, we might generate one locally instead.
 */</comment>
<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>gather_getnext</name><parameter_list>(<parameter><decl><type><name>GatherState</name> <modifier>*</modifier></type><name>gatherstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>outerPlan</name> <init>= <expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>gatherstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>outerTupleSlot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>fslot</name> <init>= <expr><name><name>gatherstate</name><operator>-&gt;</operator><name>funnel_slot</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name><name>gatherstate</name><operator>-&gt;</operator><name>nreaders</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>gatherstate</name><operator>-&gt;</operator><name>need_to_scan_locally</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>gatherstate</name><operator>-&gt;</operator><name>nreaders</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>gather_readnext</name><argument_list>(<argument><expr><name>gatherstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ExecStoreTuple</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <comment type="block">/* tuple to store */</comment>
							   <argument><expr><name>fslot</name></expr></argument>,	<comment type="block">/* slot in which to store the tuple */</comment>
							   <argument><expr><name>InvalidBuffer</name></expr></argument>,	<comment type="block">/* buffer associated with this
												 * tuple */</comment>
							   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* pfree tuple when done with it */</comment>
				<return>return <expr><name>fslot</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>gatherstate</name><operator>-&gt;</operator><name>need_to_scan_locally</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>EState</name>	   <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>gatherstate</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

			<comment type="block">/* Install our DSA area while executing the plan. */</comment>
			<expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_query_dsa</name></name> <operator>=</operator>
				<ternary><condition><expr><name><name>gatherstate</name><operator>-&gt;</operator><name>pei</name></name></expr> ?</condition><then> <expr><name><name>gatherstate</name><operator>-&gt;</operator><name>pei</name><operator>-&gt;</operator><name>area</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name>outerTupleSlot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name>outerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_query_dsa</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TupIsNull</name><argument_list>(<argument><expr><name>outerTupleSlot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>outerTupleSlot</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>gatherstate</name><operator>-&gt;</operator><name>need_to_scan_locally</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name>fslot</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Attempt to read a tuple from one of our parallel workers.
 */</comment>
<function><type><specifier>static</specifier> <name>HeapTuple</name></type>
<name>gather_readnext</name><parameter_list>(<parameter><decl><type><name>GatherState</name> <modifier>*</modifier></type><name>gatherstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>nvisited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TupleQueueReader</name> <modifier>*</modifier></type><name>reader</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>readerdone</name></decl>;</decl_stmt>

		<comment type="block">/* Check for async events, particularly messages from workers. */</comment>
		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Attempt to read a tuple, but don't block if none is available.
		 *
		 * Note that TupleQueueReaderNext will just return NULL for a worker
		 * which fails to initialize.  We'll treat that worker as having
		 * produced no tuples; WaitForParallelWorkersToFinish will error out
		 * when we get there.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>gatherstate</name><operator>-&gt;</operator><name>nextreader</name></name> <operator>&lt;</operator> <name><name>gatherstate</name><operator>-&gt;</operator><name>nreaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>reader</name> <operator>=</operator> <name><name>gatherstate</name><operator>-&gt;</operator><name>reader</name><index>[<expr><name><name>gatherstate</name><operator>-&gt;</operator><name>nextreader</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>TupleQueueReaderNext</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readerdone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If this reader is done, remove it from our working array of active
		 * readers.  If all readers are done, we're outta here.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>readerdone</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>--</operator><name><name>gatherstate</name><operator>-&gt;</operator><name>nreaders</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>gatherstate</name><operator>-&gt;</operator><name>nreaders</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ExecShutdownGatherWorkers</name><argument_list>(<argument><expr><name>gatherstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>NULL</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gatherstate</name><operator>-&gt;</operator><name>reader</name><index>[<expr><name><name>gatherstate</name><operator>-&gt;</operator><name>nextreader</name></name></expr>]</index></name></expr></argument>,
					<argument><expr><operator>&amp;</operator><name><name>gatherstate</name><operator>-&gt;</operator><name>reader</name><index>[<expr><name><name>gatherstate</name><operator>-&gt;</operator><name>nextreader</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
					<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleQueueReader</name> <operator>*</operator></expr></argument>)</argument_list></sizeof>
					<operator>*</operator> <operator>(</operator><name><name>gatherstate</name><operator>-&gt;</operator><name>nreaders</name></name> <operator>-</operator> <name><name>gatherstate</name><operator>-&gt;</operator><name>nextreader</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>gatherstate</name><operator>-&gt;</operator><name>nextreader</name></name> <operator>&gt;=</operator> <name><name>gatherstate</name><operator>-&gt;</operator><name>nreaders</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>gatherstate</name><operator>-&gt;</operator><name>nextreader</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* If we got a tuple, return it. */</comment>
		<if_stmt><if>if <condition>(<expr><name>tup</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>tup</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Advance nextreader pointer in round-robin fashion.  Note that we
		 * only reach this code if we weren't able to get a tuple from the
		 * current worker.  We used to advance the nextreader pointer after
		 * every tuple, but it turns out to be much more efficient to keep
		 * reading from the same queue until that would require blocking.
		 */</comment>
		<expr_stmt><expr><name><name>gatherstate</name><operator>-&gt;</operator><name>nextreader</name></name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>gatherstate</name><operator>-&gt;</operator><name>nextreader</name></name> <operator>&gt;=</operator> <name><name>gatherstate</name><operator>-&gt;</operator><name>nreaders</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>gatherstate</name><operator>-&gt;</operator><name>nextreader</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Have we visited every (surviving) TupleQueueReader? */</comment>
		<expr_stmt><expr><name>nvisited</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>nvisited</name> <operator>&gt;=</operator> <name><name>gatherstate</name><operator>-&gt;</operator><name>nreaders</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * If (still) running plan locally, return NULL so caller can
			 * generate another tuple from the local copy of the plan.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>gatherstate</name><operator>-&gt;</operator><name>need_to_scan_locally</name></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

			<comment type="block">/* Nothing to do except wait for developments. */</comment>
			<expr_stmt><expr><call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>, <argument><expr><name>WL_LATCH_SET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WAIT_EVENT_EXECUTE_GATHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nvisited</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		ExecShutdownGatherWorkers
 *
 *		Stop all the parallel workers.
 * ----------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExecShutdownGatherWorkers</name><parameter_list>(<parameter><decl><type><name>GatherState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>pei</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ExecParallelFinish</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pei</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Flush local copy of reader array */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>reader</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>reader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		ExecShutdownGather
 *
 *		Destroy the setup for parallel workers including parallel context.
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>ExecShutdownGather</name><parameter_list>(<parameter><decl><type><name>GatherState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ExecShutdownGatherWorkers</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Now destroy the parallel context. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>pei</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ExecParallelCleanup</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>pei</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>pei</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *						Join Support
 * ----------------------------------------------------------------
 */</comment>

<comment type="block">/* ----------------------------------------------------------------
 *		ExecReScanGather
 *
 *		Prepare to re-scan the result of a Gather.
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>ExecReScanGather</name><parameter_list>(<parameter><decl><type><name>GatherState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Gather</name>	   <modifier>*</modifier></type><name>gather</name> <init>= <expr><operator>(</operator><name>Gather</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>outerPlan</name> <init>= <expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Make sure any existing workers are gracefully shut down */</comment>
	<expr_stmt><expr><call><name>ExecShutdownGatherWorkers</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Mark node so that shared state will be rebuilt at next call */</comment>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set child node's chgParam to tell it that the next scan might deliver a
	 * different set of rows within the leader process.  (The overall rowset
	 * shouldn't change, but the leader process's subset might; hence nodes
	 * between here and the parallel table scan node mustn't optimize on the
	 * assumption of an unchanging rowset.)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>gather</name><operator>-&gt;</operator><name>rescan_param</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>outerPlan</name><operator>-&gt;</operator><name>chgParam</name></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>outerPlan</name><operator>-&gt;</operator><name>chgParam</name></name></expr></argument>,
											 <argument><expr><name><name>gather</name><operator>-&gt;</operator><name>rescan_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If chgParam of subnode is not null then plan will be re-scanned by
	 * first ExecProcNode.  Note: because this does nothing if we have a
	 * rescan_param, it's currently guaranteed that parallel-aware child nodes
	 * will not see a ReScan call until after they get a ReInitializeDSM call.
	 * That ordering might not be something to rely on, though.  A good rule
	 * of thumb is that ReInitializeDSM should reset only shared state, ReScan
	 * should reset only local state, and anything that depends on both of
	 * those steps being finished must wait until the first ExecProcNode call.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>outerPlan</name><operator>-&gt;</operator><name>chgParam</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ExecReScan</name><argument_list>(<argument><expr><name>outerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
