<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/executor/execAmi_px.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * execAmi_px.c
 *	  Miscellaneous executor access method routines for PX.
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *	  src/backend/executor/execAmi_px.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeAgg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeHash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeMaterial.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeMotion_px.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeModifyTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodePartitionSelector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeSequence.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeShareInputScan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeSort.h"</cpp:file></cpp:include>

<comment type="block">/* nodeWindowAgg */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExecSquelchWindowAgg</name><parameter_list>(<parameter><decl><type><name>WindowAggState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ExecSquelchNode</name><argument_list>(<argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* nodeRecursiveunion */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExecSquelchRecursiveUnion</name><parameter_list>(<parameter><decl><type><name>RecursiveUnionState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tuplestore_clear</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>working_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tuplestore_clear</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>intermediate_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExecSquelchNode</name><argument_list>(<argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecSquelchNode</name><argument_list>(<argument><expr><call><name>innerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* nodeHashjoin.c */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExecEagerFreeHashJoin</name><parameter_list>(<parameter><decl><type><name>HashJoinState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>hj_HashTable</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ExecHashTableDestroy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>hj_HashTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>hj_HashTable</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExecSquelchHashJoin</name><parameter_list>(<parameter><decl><type><name>HashJoinState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ExecEagerFreeHashJoin</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecSquelchNode</name><argument_list>(<argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecSquelchNode</name><argument_list>(<argument><expr><call><name>innerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* nodeFunctionscan */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExecEagerFreeFunctionScan</name><parameter_list>(<parameter><decl><type><name>FunctionScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	 <comment type="block">/*
	for (i = 0; i &lt; node-&gt;nfuncs; i++)
	{
		FunctionScanPerFuncState *fs = &amp;node-&gt;funcstates[i];

		if (fs-&gt;func_slot)
			ExecClearTuple(fs-&gt;func_slot);

		if (fs-&gt;tstore != NULL)
		{
			tuplestore_end(node-&gt;funcstates[i].tstore);
			fs-&gt;tstore = NULL;
		}
	}
	*/</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExecSquelchFunctionScan</name><parameter_list>(<parameter><decl><type><name>FunctionScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ExecEagerFreeFunctionScan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* nodeBitmapHeapscan */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>freeBitmapState</name><parameter_list>(<parameter><decl><type><name>BitmapHeapScanState</name> <modifier>*</modifier></type><name>scanstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* BitmapIndexScan is the owner of the bitmap memory. Don't free it here */</comment>
	<expr_stmt><expr><name><name>scanstate</name><operator>-&gt;</operator><name>tbm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<comment type="block">/* Likewise, the tbmres member is owned by the iterator. It'll be freed
	 * during end_iterate. */</comment>

	<expr_stmt><expr><name><name>scanstate</name><operator>-&gt;</operator><name>tbmres</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExecEagerFreeBitmapHeapScan</name><parameter_list>(<parameter><decl><type><name>BitmapHeapScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* freeFetchDesc(node); */</comment>
	<expr_stmt><expr><call><name>freeBitmapState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExecSquelchBitmapHeapScan</name><parameter_list>(<parameter><decl><type><name>BitmapHeapScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ExecEagerFreeBitmapHeapScan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* nodeagg */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExecEagerFreeAgg</name><parameter_list>(<parameter><decl><type><name>AggState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>transno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>numGroupingSets</name> <init>= <expr><call><name>Max</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>maxsets</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>setno</name></decl>;</decl_stmt>

	<comment type="block">/* Make sure we have closed any open tuplesorts */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>sort_in</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>tuplesort_end</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>sort_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>sort_in</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>sort_out</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>tuplesort_end</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>sort_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>sort_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>transno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>transno</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>numtrans</name></name></expr>;</condition> <incr><expr><name>transno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>setno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>setno</name> <operator>&lt;</operator> <name>numGroupingSets</name></expr>;</condition> <incr><expr><name>setno</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>AggStatePerTrans</name></type> <name>pertrans</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>pertrans</name><index>[<expr><name>transno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>pertrans</name><operator>-&gt;</operator><name>sortstates</name><index>[<expr><name>setno</name></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>tuplesort_end</name><argument_list>(<argument><expr><name><name>pertrans</name><operator>-&gt;</operator><name>sortstates</name><index>[<expr><name>setno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pertrans</name><operator>-&gt;</operator><name>sortstates</name><index>[<expr><name>setno</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>

	<comment type="block">/*
	 * We don't need to ReScanExprContext the output tuple context here;
	 * ExecReScan already did it. But we do need to reset our per-grouping-set
	 * contexts, which may have transvalues stored in them. (We use rescan
	 * rather than just reset because transfns may have registered callbacks
	 * that need to be run now.)
	 *
	 * Note that with AGG_HASHED, the hash table is allocated in a sub-context
	 * of the aggcontext. This used to be an issue, but now, resetting a
	 * context automatically deletes sub-contexts too.
	 */</comment>

	<for>for <control>(<init><expr><name>setno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>setno</name> <operator>&lt;</operator> <name>numGroupingSets</name></expr>;</condition> <incr><expr><name>setno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ReScanExprContext</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>aggcontexts</name><index>[<expr><name>setno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Release first tuple of group, if we have made a copy. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>grp_firstTuple</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>grp_firstTuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>grp_firstTuple</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* nodeAgg */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExecSquelchAgg</name><parameter_list>(<parameter><decl><type><name>AggState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ExecEagerFreeAgg</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecSquelchNode</name><argument_list>(<argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* nodeSubplan */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExecSquelchSubqueryScan</name><parameter_list>(<parameter><decl><type><name>SubqueryScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Recurse to subquery */</comment>
	<expr_stmt><expr><call><name>ExecSquelchNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>subplan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* nodeAppend */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExecSquelchAppend</name><parameter_list>(<parameter><decl><type><name>AppendState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>as_nplans</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ExecSquelchNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>appendplans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR px
 * ExecSquelchNode
 *
 * When a node decides that it will not consume any more input tuples from a
 * subtree that has not yet returned end-of-data, it must call
 * ExecSquelchNode() on the subtree.
 *
 * This is necessary, to avoid deadlock with Motion nodes. There might be a
 * receiving Motion node in the subtree, and it needs to let the sender side
 * of the Motion know that we will not be reading any more tuples. We might
 * have sibling PX processes in other segments that are still waiting for
 * tuples from the sender Motion, but if the sender's send queue is full, it
 * will never send them. By explicitly telling the sender that we will not be
 * reading any more tuples, it knows to not wait for us, and can skip over,
 * and send tuples to the other PXs that might be waiting.
 *
 * This also gives memory-hungry nodes a chance to release memory earlier, so
 * that other nodes higher up in the plan can make use of it. The Squelch
 * function for many node call a separate node-specific ExecEagerFree*()
 * function to do that.
 *
 * After a node has been squelched, you mustn't try to read more tuples from
 * it. However, ReScanning the node will "un-squelch" it, allowing to read
 * again. Squelching a node is roughly equivalent to fetching and discarding
 * all tuples from it.
 */</comment>
<function><type><name>void</name></type>
<name>ExecSquelchNode</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>squelched</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_MotionState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchMotion</name><argument_list>(<argument><expr><operator>(</operator><name>MotionState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AppendState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchAppend</name><argument_list>(<argument><expr><operator>(</operator><name>AppendState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>T_ModifyTableState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchModifyTable</name><argument_list>(<argument><expr><operator>(</operator><name>ModifyTableState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// ModifyTable and Reture</comment>
			<return>return;</return>

		<comment type="block">/* POLAR px */</comment>
		<case>case <expr><name>T_SequenceState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchSequence</name><argument_list>(<argument><expr><operator>(</operator><name>SequenceState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>T_SubqueryScanState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchSubqueryScan</name><argument_list>(<argument><expr><operator>(</operator><name>SubqueryScanState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<comment type="block">/*
		 * Node types that need no special handling, just recurse to
		 * children.
		 */</comment>
		<comment type="block">/* POLAR px */</comment>
		<case>case <expr><name>T_AssertOpState</name></expr>:</case>
		<comment type="block">/* POLAR end */</comment>
		<case>case <expr><name>T_BitmapAndState</name></expr>:</case>
		<case>case <expr><name>T_BitmapOrState</name></expr>:</case>
		<case>case <expr><name>T_LimitState</name></expr>:</case>
		<case>case <expr><name>T_LockRowsState</name></expr>:</case>
		<case>case <expr><name>T_NestLoopState</name></expr>:</case>
		<case>case <expr><name>T_MergeJoinState</name></expr>:</case>
		<case>case <expr><name>T_SetOpState</name></expr>:</case>
		<case>case <expr><name>T_UniqueState</name></expr>:</case>
		<case>case <expr><name>T_HashState</name></expr>:</case>
		<case>case <expr><name>T_WorkTableScanState</name></expr>:</case>
		<case>case <expr><name>T_ResultState</name></expr>:</case>
		<case>case <expr><name>T_ProjectSetState</name></expr>:</case>
		<case>case <expr><name>T_PartitionSelectorState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchNode</name><argument_list>(<argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExecSquelchNode</name><argument_list>(<argument><expr><call><name>innerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<comment type="block">/*
		 * These node types have nothing to do, and have no children.
		 */</comment>
		<case>case <expr><name>T_SeqScanState</name></expr>:</case>
		<case>case <expr><name>T_IndexScanState</name></expr>:</case>
		<case>case <expr><name>T_IndexOnlyScanState</name></expr>:</case>
		<case>case <expr><name>T_BitmapIndexScanState</name></expr>:</case>
		<case>case <expr><name>T_ValuesScanState</name></expr>:</case>
		<case>case <expr><name>T_TidScanState</name></expr>:</case>
		<case>case <expr><name>T_SampleScanState</name></expr>:</case>
			<break>break;</break>

		<comment type="block">/*
		 * Node types that consume resources that we want to free eagerly,
		 * as soon as possible.
		 */</comment>
		<case>case <expr><name>T_RecursiveUnionState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchRecursiveUnion</name><argument_list>(<argument><expr><operator>(</operator><name>RecursiveUnionState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>T_BitmapHeapScanState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchBitmapHeapScan</name><argument_list>(<argument><expr><operator>(</operator><name>BitmapHeapScanState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>T_FunctionScanState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchFunctionScan</name><argument_list>(<argument><expr><operator>(</operator><name>FunctionScanState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>T_HashJoinState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchHashJoin</name><argument_list>(<argument><expr><operator>(</operator><name>HashJoinState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>T_MaterialState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchMaterial</name><argument_list>(<argument><expr><operator>(</operator><name>MaterialState</name><operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>T_SortState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchSort</name><argument_list>(<argument><expr><operator>(</operator><name>SortState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>T_AggState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchAgg</name><argument_list>(<argument><expr><operator>(</operator><name>AggState</name><operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>T_WindowAggState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchWindowAgg</name><argument_list>(<argument><expr><operator>(</operator><name>WindowAggState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<comment type="block">/* POLAR px */</comment>
		<case>case <expr><name>T_ShareInputScanState</name></expr>:</case>
			<expr_stmt><expr><call><name>ExecSquelchShareInputScan</name><argument_list>(<argument><expr><operator>(</operator><name>ShareInputScanState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized node type: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Also recurse into subplans, if any. (InitPlans are handled as a separate step,
	 * at executor startup, and don't need squelching.)
	 */</comment>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>node-&gt;subPlan</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SubPlanState</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><operator>(</operator><name>SubPlanState</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>ips</name> <init>= <expr><name><name>sps</name><operator>-&gt;</operator><name>planstate</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ips</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"subplan has no planstate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ExecSquelchNode</name><argument_list>(<argument><expr><name>ips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>squelched</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
