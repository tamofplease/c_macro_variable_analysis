<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/executor/instrument.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * instrument.c
 *	 functions for instrumentation of plan execution
 *
 *
 * Copyright (c) 2001-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/executor/instrument.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/instrument.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>BufferUsage</name></type> <name>pgBufferUsage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>BufferUsage</name></type> <name>save_pgBufferUsage</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BufferUsageAdd</name><parameter_list>(<parameter><decl><type><name>BufferUsage</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BufferUsage</name> <modifier>*</modifier></type><name>add</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BufferUsageAccumDiff</name><parameter_list>(<parameter><decl><type><name>BufferUsage</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>BufferUsage</name> <modifier>*</modifier></type><name>add</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BufferUsage</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* Allocate new instrumentation structure(s) */</comment>
<function><type><name>Instrumentation</name> <modifier>*</modifier></type>
<name>InstrAlloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>instrument_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name></decl>;</decl_stmt>

	<comment type="block">/* initialize all fields to zeroes, then modify as needed */</comment>
	<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Instrumentation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>instrument_options</name> <operator>&amp;</operator> <operator>(</operator><name>INSTRUMENT_BUFFERS</name> <operator>|</operator> <name>INSTRUMENT_TIMER</name> 
								<operator>|</operator> <name>INSTRUMENT_OPERATION</name><comment type="block">/* POLAR px */</comment><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>need_buffers</name> <init>= <expr><operator>(</operator><name>instrument_options</name> <operator>&amp;</operator> <name>INSTRUMENT_BUFFERS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>need_timer</name> <init>= <expr><operator>(</operator><name>instrument_options</name> <operator>&amp;</operator> <name>INSTRUMENT_TIMER</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<comment type="block">/* POLAR px */</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>need_operation</name> <init>= <expr><operator>(</operator><name>instrument_options</name> <operator>&amp;</operator> <name>INSTRUMENT_OPERATION</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>instr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>need_bufusage</name> <operator>=</operator> <name>need_buffers</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>instr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>need_timer</name> <operator>=</operator> <name>need_timer</name></expr>;</expr_stmt>

			<comment type="block">/* POLAR px */</comment>
			<expr_stmt><expr><name><name>instr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>need_operation</name> <operator>=</operator> <name>need_operation</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* POLAR px */</comment>
		<if_stmt><if>if <condition>(<expr><name>need_operation</name></expr>)</condition> 
		<block>{<block_content>
			<decl_stmt><decl><type><name>instr_time</name></type>	<name>curr_time</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>double</name></type> <name>double_curr_time</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>curr_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>double_curr_time</name> <operator>=</operator> <call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name>curr_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>instr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>open_time</name> <operator>=</operator> <name>double_curr_time</name></expr>;</expr_stmt></block_content></block></for>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* POLAR end*/</comment>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>instr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Initialize a pre-allocated instrumentation structure. */</comment>
<function><type><name>void</name></type>
<name>InstrInit</name><parameter_list>(<parameter><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>instrument_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Instrumentation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>need_bufusage</name></name> <operator>=</operator> <operator>(</operator><name>instrument_options</name> <operator>&amp;</operator> <name>INSTRUMENT_BUFFERS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>need_timer</name></name> <operator>=</operator> <operator>(</operator><name>instrument_options</name> <operator>&amp;</operator> <name>INSTRUMENT_TIMER</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* POLAR px */</comment>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>need_operation</name></name> <operator>=</operator> <operator>(</operator><name>instrument_options</name> <operator>&amp;</operator> <name>INSTRUMENT_OPERATION</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>need_operation</name></name></expr>)</condition> 
	<block>{<block_content>
		<decl_stmt><decl><type><name>instr_time</name></type>	<name>curr_time</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>curr_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>open_time</name></name> <operator>=</operator> <call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name>curr_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* POLAR end */</comment>
</block_content>}</block></function>

<comment type="block">/* Entry to a plan node */</comment>
<function><type><name>void</name></type>
<name>InstrStartNode</name><parameter_list>(<parameter><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>need_timer</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>INSTR_TIME_IS_ZERO</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"InstrStartNode called twice in a row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* save buffer usage totals at node entry, if needed */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>need_bufusage</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name></name> <operator>=</operator> <name>pgBufferUsage</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Exit from a plan node */</comment>
<function><type><name>void</name></type>
<name>InstrStopNode</name><parameter_list>(<parameter><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>nTuples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>instr_time</name></type>	<name>endtime</name></decl>;</decl_stmt>

	<comment type="block">/* count the returned tuples */</comment>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>tuplecount</name></name> <operator>+=</operator> <name>nTuples</name></expr>;</expr_stmt>

	<comment type="block">/* let's update the time only if the timer was requested */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>need_timer</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>INSTR_TIME_IS_ZERO</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"InstrStopNode called without start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>endtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_ACCUM_DIFF</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* POLAR px */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>need_operation</name></name> 
		<operator>&amp;&amp;</operator> <name>nTuples</name> <operator>&gt;</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <operator>(</operator><name>NULL</name><operator>==</operator> <name><name>instr</name><operator>-&gt;</operator><name>sampling_period</name></name> 
			<operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name>int64</name><operator>)</operator><name><name>instr</name><operator>-&gt;</operator><name>tuplecount</name></name> <operator>%</operator> <operator>*</operator><name><name>instr</name><operator>-&gt;</operator><name>sampling_period</name></name><operator>)</operator></expr>)</condition> 
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>instr</name><operator>-&gt;</operator><name>need_timer</name></name></expr>)</condition><block type="pseudo"><block_content> 
			<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>endtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition> 
		<block>{<block_content>
			<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>last_change_time</name></name> <operator>=</operator> <call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name>endtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else 
		<block>{<block_content>
			<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>rescan_calls</name></name> <operator>+=</operator> <operator>(</operator><name><name>instr</name><operator>-&gt;</operator><name>last_change_time</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>first_change_time</name></name> <operator>=</operator> <call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name>endtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
			<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>last_change_time</name></name> <operator>=</operator> <name><name>instr</name><operator>-&gt;</operator><name>first_change_time</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* POLAR end */</comment>

	<comment type="block">/* Add delta of buffer usage since entry to node's totals */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>need_bufusage</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BufferUsageAccumDiff</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name></name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>pgBufferUsage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Is this the first tuple of this cycle? */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>instr</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>firsttuple</name></name> <operator>=</operator> <call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* POLAR px : save this start time as the first start */</comment>
		<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>firststart</name></name> <operator>=</operator> <name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr>;</expr_stmt>
		<comment type="block">/* POLAR end */</comment>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* POLAR px: Finish a run cycle for a plan node */</comment>
<function><type><name>void</name></type>
<name>InstrEndNode</name><parameter_list>(<parameter><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>need_operation</name></name></expr>)</condition> 
	<block>{<block_content>
		<decl_stmt><decl><type><name>instr_time</name></type>	<name>curr_time</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>curr_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>close_time</name></name> <operator>=</operator> <call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name>curr_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<comment type="block">/* POLAR end */</comment>

<comment type="block">/* Finish a run cycle for a plan node */</comment>
<function><type><name>void</name></type>
<name>InstrEndLoop</name><parameter_list>(<parameter><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>totaltime</name></decl>;</decl_stmt>

	<comment type="block">/* Skip if nothing has happened, or already shut down */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>instr</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>INSTR_TIME_IS_ZERO</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"InstrEndLoop called on running node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Accumulate per-cycle statistics into totals */</comment>
	<expr_stmt><expr><name>totaltime</name> <operator>=</operator> <call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>startup</name></name> <operator>+=</operator> <name><name>instr</name><operator>-&gt;</operator><name>firsttuple</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>total</name></name> <operator>+=</operator> <name>totaltime</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>ntuples</name></name> <operator>+=</operator> <name><name>instr</name><operator>-&gt;</operator><name>tuplecount</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>nloops</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* Reset for next cycle (if any) */</comment>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>firsttuple</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>tuplecount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* aggregate instrumentation information */</comment>
<function><type><name>void</name></type>
<name>InstrAggNode</name><parameter_list>(<parameter><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>running</name></name> <operator>&amp;&amp;</operator> <name><name>add</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>firsttuple</name></name> <operator>=</operator> <name><name>add</name><operator>-&gt;</operator><name>firsttuple</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>running</name></name> <operator>&amp;&amp;</operator> <name><name>add</name><operator>-&gt;</operator><name>running</name></name> <operator>&amp;&amp;</operator> <name><name>dst</name><operator>-&gt;</operator><name>firsttuple</name></name> <operator>&gt;</operator> <name><name>add</name><operator>-&gt;</operator><name>firsttuple</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>firsttuple</name></name> <operator>=</operator> <name><name>add</name><operator>-&gt;</operator><name>firsttuple</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>, <argument><expr><name><name>add</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>tuplecount</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>tuplecount</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>startup</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>startup</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>total</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>total</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ntuples</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>ntuples</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ntuples2</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>ntuples2</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>nloops</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>nloops</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>nfiltered1</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>nfiltered1</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>nfiltered2</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>nfiltered2</name></name></expr>;</expr_stmt>

	<comment type="block">/* Add delta of buffer usage since entry to node's totals */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>need_bufusage</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BufferUsageAdd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>bufusage</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>add</name><operator>-&gt;</operator><name>bufusage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* note current values during parallel executor startup */</comment>
<function><type><name>void</name></type>
<name>InstrStartParallelQuery</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>save_pgBufferUsage</name> <operator>=</operator> <name>pgBufferUsage</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* report usage after parallel executor shutdown */</comment>
<function><type><name>void</name></type>
<name>InstrEndParallelQuery</name><parameter_list>(<parameter><decl><type><name>BufferUsage</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferUsage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BufferUsageAccumDiff</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgBufferUsage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_pgBufferUsage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* accumulate work done by workers in leader's stats */</comment>
<function><type><name>void</name></type>
<name>InstrAccumParallelQuery</name><parameter_list>(<parameter><decl><type><name>BufferUsage</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>BufferUsageAdd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgBufferUsage</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dst += add */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufferUsageAdd</name><parameter_list>(<parameter><decl><type><name>BufferUsage</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BufferUsage</name> <modifier>*</modifier></type><name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_hit</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_hit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_read</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_read</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_dirtied</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_dirtied</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_written</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_written</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_hit</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_hit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_read</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_read</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_dirtied</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_dirtied</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_written</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_written</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>temp_blks_read</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>temp_blks_read</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>temp_blks_written</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>temp_blks_written</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>blk_read_time</name></name></expr></argument>, <argument><expr><name><name>add</name><operator>-&gt;</operator><name>blk_read_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>blk_write_time</name></name></expr></argument>, <argument><expr><name><name>add</name><operator>-&gt;</operator><name>blk_write_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dst += add - sub */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufferUsageAccumDiff</name><parameter_list>(<parameter><decl><type><name>BufferUsage</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>BufferUsage</name> <modifier>*</modifier></type><name>add</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>BufferUsage</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_hit</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_hit</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>shared_blks_hit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_read</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_read</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>shared_blks_read</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_dirtied</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_dirtied</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>shared_blks_dirtied</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared_blks_written</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>shared_blks_written</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>shared_blks_written</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_hit</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_hit</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>local_blks_hit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_read</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_read</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>local_blks_read</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_dirtied</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_dirtied</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>local_blks_dirtied</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>local_blks_written</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>local_blks_written</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>local_blks_written</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>temp_blks_read</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>temp_blks_read</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>temp_blks_read</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>temp_blks_written</name></name> <operator>+=</operator> <name><name>add</name><operator>-&gt;</operator><name>temp_blks_written</name></name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>temp_blks_written</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_ACCUM_DIFF</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>blk_read_time</name></name></expr></argument>,
						  <argument><expr><name><name>add</name><operator>-&gt;</operator><name>blk_read_time</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>blk_read_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_ACCUM_DIFF</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>blk_write_time</name></name></expr></argument>,
						  <argument><expr><name><name>add</name><operator>-&gt;</operator><name>blk_write_time</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>blk_write_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
