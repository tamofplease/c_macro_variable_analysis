<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/libpq/crypt.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * crypt.c
 *	  Functions for dealing with encrypted passwords stored in
 *	  pg_authid.rolpassword.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/backend/libpq/crypt.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CRYPT_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypt.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_authid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/scram-common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/crypt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/scram.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>

<comment type="block">/* POLAR */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Fetch stored password for a user, for authentication.
 *
 * On error, returns NULL, and stores a palloc'd string describing the reason,
 * for the postmaster log, in *logdetail.  The error reason should *not* be
 * sent to the client, to avoid giving away user information!
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>get_role_password</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>role</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>logdetail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>vuntil</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>roleTup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>datum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>shadow_pass</name></decl>;</decl_stmt>

	<comment type="block">/* Get role info from pg_authid */</comment>
	<expr_stmt><expr><name>roleTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>AUTHNAME</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>roleTup</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>logdetail</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Role \"%s\" does not exist."</literal></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>			<comment type="block">/* no such user */</comment>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>AUTHNAME</name></expr></argument>, <argument><expr><name>roleTup</name></expr></argument>,
							<argument><expr><name>Anum_pg_authid_rolpassword</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>roleTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>logdetail</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"User \"%s\" has no password assigned."</literal></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>			<comment type="block">/* user has no password */</comment>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>shadow_pass</name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>AUTHNAME</name></expr></argument>, <argument><expr><name>roleTup</name></expr></argument>,
							<argument><expr><name>Anum_pg_authid_rolvaliduntil</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>vuntil</name> <operator>=</operator> <call><name>DatumGetTimestampTz</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>roleTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Password OK, but check to be sure we are not past rolvaliduntil
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name> <operator>&amp;&amp;</operator> <name>vuntil</name> <operator>&lt;</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>logdetail</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"User \"%s\" has an expired password."</literal></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>shadow_pass</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * What kind of a password verifier is 'shadow_pass'?
 */</comment>
<function><type><name>PasswordType</name></type>
<name>get_password_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shadow_pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>encoded_salt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>iterations</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>stored_key</name><index>[<expr><name>SCRAM_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>server_key</name><index>[<expr><name>SCRAM_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>shadow_pass</name></expr></argument>, <argument><expr><literal type="string">"md5"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>strlen</name><argument_list>(<argument><expr><name>shadow_pass</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MD5_PASSWD_LEN</name> <operator>&amp;&amp;</operator>
		<call><name>strspn</name><argument_list>(<argument><expr><name>shadow_pass</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>MD5_PASSWD_CHARSET</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MD5_PASSWD_LEN</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator>
		<name>false</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PASSWORD_TYPE_MD5</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>parse_scram_verifier</name><argument_list>(<argument><expr><name>shadow_pass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterations</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoded_salt</name></expr></argument>,
							 <argument><expr><name>stored_key</name></expr></argument>, <argument><expr><name>server_key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PASSWORD_TYPE_SCRAM_SHA_256</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>PASSWORD_TYPE_PLAINTEXT</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Given a user-supplied password, convert it into a verifier of
 * 'target_type' kind.
 *
 * If the password is already in encrypted form, we cannot reverse the
 * hash, so it is stored as it is regardless of the requested type.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>encrypt_password</name><parameter_list>(<parameter><decl><type><name>PasswordType</name></type> <name>target_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>role</name></decl></parameter>,
				 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>polar_role_is_super</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PasswordType</name></type> <name>guessed_type</name> <init>= <expr><call><name>get_password_type</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>encrypted_password</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>guessed_type</name> <operator>!=</operator> <name>PASSWORD_TYPE_PLAINTEXT</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Cannot convert an already-encrypted password from one format to
		 * another, so return it as it is.
		 */</comment>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name>target_type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PASSWORD_TYPE_MD5</name></expr>:</case>
			<expr_stmt><expr><name>encrypted_password</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>MD5_PASSWD_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_md5_encrypt</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>role</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name>encrypted_password</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"password encryption failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><name>encrypted_password</name></expr>;</return>

		<case>case <expr><name>PASSWORD_TYPE_SCRAM_SHA_256</name></expr>:</case>
			<return>return <expr><call><name>pg_be_scram_build_verifier</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>PASSWORD_TYPE_PLAINTEXT</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot encrypt password with 'plaintext'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * This shouldn't happen, because the above switch statements should
	 * handle every combination of source and target password types.
	 */</comment>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot encrypt password to requested type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>				<comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Check MD5 authentication response, and return STATUS_OK or STATUS_ERROR.
 *
 * 'shadow_pass' is the user's correct password or password hash, as stored
 * in pg_authid.rolpassword.
 * 'client_pass' is the response given by the remote user to the MD5 challenge.
 * 'md5_salt' is the salt used in the MD5 authentication challenge.
 *
 * In the error case, optionally store a palloc'd string at *logdetail
 * that will be sent to the postmaster log (but not the client).
 */</comment>
<function><type><name>int</name></type>
<name>md5_crypt_verify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>role</name></decl></parameter>,
				 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>polar_shadow_pass</name></decl></parameter>,
				 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_pass</name></decl></parameter>,
				 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>md5_salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>md5_salt_len</name></decl></parameter>,
				 <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>logdetail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>crypt_pwd</name><index>[<expr><name>MD5_PASSWD_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>md5_salt_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>get_password_type</name><argument_list>(<argument><expr><name>polar_shadow_pass</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PASSWORD_TYPE_MD5</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* incompatible password hash format. */</comment>
		<expr_stmt><expr><operator>*</operator><name>logdetail</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"User \"%s\" has a password that cannot be used with MD5 authentication."</literal></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>STATUS_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Compute the correct answer for the MD5 challenge.
	 *
	 * We do not bother setting logdetail for any pg_md5_encrypt failure
	 * below: the only possible error is out-of-memory, which is unlikely, and
	 * if it did happen adding a psprintf call would only make things worse.
	 */</comment>
	<comment type="block">/* stored password already encrypted, only do salt */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_md5_encrypt</name><argument_list>(<argument><expr><name>polar_shadow_pass</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"md5"</literal></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name>md5_salt</name></expr></argument>, <argument><expr><name>md5_salt_len</name></expr></argument>,
						<argument><expr><name>crypt_pwd</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>STATUS_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>client_pass</name></expr></argument>, <argument><expr><name>crypt_pwd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>STATUS_OK</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>logdetail</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Password does not match for user \"%s\"."</literal></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>STATUS_ERROR</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check given password for given user, and return STATUS_OK or STATUS_ERROR.
 *
 * 'shadow_pass' is the user's correct password hash, as stored in
 * pg_authid.rolpassword.
 * 'client_pass' is the password given by the remote user.
 *
 * In the error case, optionally store a palloc'd string at *logdetail
 * that will be sent to the postmaster log (but not the client).
 */</comment>
<function><type><name>int</name></type>
<name>plain_crypt_verify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>role</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shadow_pass</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_pass</name></decl></parameter>,
				   <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>logdetail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>crypt_client_pass</name><index>[<expr><name>MD5_PASSWD_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Client sent password in plaintext.  If we have an MD5 hash stored, hash
	 * the password the client sent, and compare the hashes.  Otherwise
	 * compare the plaintext passwords directly.
	 */</comment>
	<switch>switch <condition>(<expr><call><name>get_password_type</name><argument_list>(<argument><expr><name>shadow_pass</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PASSWORD_TYPE_SCRAM_SHA_256</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>scram_verify_plain_password</name><argument_list>(<argument><expr><name>role</name></expr></argument>,
											<argument><expr><name>client_pass</name></expr></argument>,
											<argument><expr><name>shadow_pass</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>STATUS_OK</name></expr>;</return>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>logdetail</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Password does not match for user \"%s\"."</literal></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>STATUS_ERROR</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>PASSWORD_TYPE_MD5</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_md5_encrypt</name><argument_list>(<argument><expr><name>client_pass</name></expr></argument>,
								<argument><expr><name>role</name></expr></argument>,
								<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name>crypt_client_pass</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * We do not bother setting logdetail for pg_md5_encrypt
				 * failure: the only possible error is out-of-memory, which is
				 * unlikely, and if it did happen adding a psprintf call would
				 * only make things worse.
				 */</comment>
				<return>return <expr><name>STATUS_ERROR</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>crypt_client_pass</name></expr></argument>, <argument><expr><name>shadow_pass</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>STATUS_OK</name></expr>;</return></block_content></block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>logdetail</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Password does not match for user \"%s\"."</literal></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>STATUS_ERROR</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>PASSWORD_TYPE_PLAINTEXT</name></expr>:</case>

			<comment type="block">/*
			 * We never store passwords in plaintext, so this shouldn't
			 * happen.
			 */</comment>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * This shouldn't happen.  Plain "password" authentication is possible
	 * with any kind of stored password hash.
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>logdetail</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Password of user \"%s\" is in unrecognized format."</literal></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>STATUS_ERROR</name></expr>;</return>
</block_content>}</block></function>
</unit>
