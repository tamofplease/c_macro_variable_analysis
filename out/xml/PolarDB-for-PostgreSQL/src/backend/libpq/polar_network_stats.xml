<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/libpq/polar_network_stats.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_network_stats.c
 *       network stat
 *
 * Copyright (c) 2021, Alibaba Group Holding Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *    src/backend/libpq/polar_network_stats.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/sockios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/polar_network_stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq-be.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/backendid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timeout.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>polar_net_stat</name> <modifier>*</modifier></type><name>polar_network_stat_array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_network_tcpinfo_update_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_local_network_stat_init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_NETWORK_STAT_INTERVAL_IN_MS</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_NETWORK_STAT_INTERVAL_IN_S</name></cpp:macro> <cpp:value>(POLAR_NETWORK_STAT_INTERVAL_IN_MS / 1000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MYBACKEND_ID_VALID</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>(MyBackendId != InvalidBackendId &amp;&amp; MyBackendId &gt;= 1 &amp;&amp; MyBackendId &lt;= MaxBackends)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MYAUX_PROC_TYPE_VALID</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(MyAuxProcType != NotAnAuxProcess)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_NET_STAT_BACKEND_INDEX</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>(IS_MYBACKEND_ID_VALID() ? MyBackendId - 1 : \
		(IS_MYAUX_PROC_TYPE_VALID() ? MaxBackends + MyAuxProcType : -1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_POLAR_NET_STAT_OP_VALID</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(op &gt;= 0 &amp;&amp; op &lt; POLAR_NETWORK_STAT_MAX)</cpp:value></cpp:define>

<comment type="block">/*
 * POLAR: get network info for timer
 */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_network_stat_timer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_network_get_tcpinfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_network_get_qlen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>polar_network_stat_timerid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_last_enable_track_network_flag</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>instr_time</name></type> <name>block_start_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64</name></type> <name>block_seq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64</name></type> <name>block_stat_seq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NETWORK_STAT_TIMER_ID_VALID</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>(polar_network_stat_timerid &gt;= USER_TIMEOUT &amp;&amp; polar_network_stat_timerid &lt; MAX_TIMEOUTS)</cpp:value></cpp:define>

<comment type="block">/*
 * POLAR: network send/recv start record
 */</comment>
<function><type><name>void</name></type>
<name>polar_local_network_stat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>polar_enable_track_network_stat</name> <operator>&amp;&amp;</operator> 
		<name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name>last_local_network_stat_init</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>*</operator> <name>POLAR_NETWORK_STAT_INTERVAL_IN_S</name> <operator>&amp;&amp;</operator> 
		<name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name>last_network_tcpinfo_update_time</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>POLAR_NETWORK_STAT_INTERVAL_IN_S</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NETWORK_STAT_TIMER_ID_VALID</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>polar_network_stat_timerid</name> <operator>=</operator> <call><name>RegisterTimeout</name><argument_list>(<argument><expr><name>USER_TIMEOUT</name></expr></argument>, <argument><expr><name>polar_network_stat_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>disable_timeout</name><argument_list>(<argument><expr><name>polar_network_stat_timerid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>enable_timeout_after</name><argument_list>(<argument><expr><name>polar_network_stat_timerid</name></expr></argument>, <argument><expr><name>POLAR_NETWORK_STAT_INTERVAL_IN_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>polar_last_enable_track_network_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>last_local_network_stat_init</name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: network send/recv end record
 */</comment>
<function><type><name>void</name></type>
<name>polar_network_sendrecv_stat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>n_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_enable_track_network_stat</name> <operator>||</operator> <operator>!</operator><name>polar_network_stat_array</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>POLAR_NET_STAT_BACKEND_INDEX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_POLAR_NET_STAT_OP_VALID</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>polar_network_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>opstat</name><index>[<expr><name>op</name></expr>]</index></name><operator>.</operator><name>count</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_network_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>opstat</name><index>[<expr><name>op</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>+=</operator> <name>n_bytes</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: network block start record
 */</comment>
<function><type><name>void</name></type>
<name>polar_network_block_start</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>block_seq</name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>polar_enable_track_network_stat</name> <operator>&amp;&amp;</operator> <name>polar_network_stat_array</name> <operator>&amp;&amp;</operator> <name>polar_enable_track_network_timing</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>POLAR_NET_STAT_BACKEND_INDEX</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_POLAR_NET_STAT_OP_VALID</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>block_start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_network_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>opstat</name><index>[<expr><name>op</name></expr>]</index></name><operator>.</operator><name>last_block_time</name> <operator>=</operator> <call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name>block_start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>block_stat_seq</name> <operator>=</operator> <name>block_seq</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: network block end record
 */</comment>
<function><type><name>void</name></type>
<name>polar_network_block_end</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>polar_enable_track_network_stat</name> <operator>&amp;&amp;</operator> <name>polar_network_stat_array</name> <operator>&amp;&amp;</operator> <name>polar_enable_track_network_timing</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>instr_time</name></type> <name>end</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type> <name>diff</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>POLAR_NET_STAT_BACKEND_INDEX</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_POLAR_NET_STAT_OP_VALID</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>block_seq</name> <operator>!=</operator> <name>block_stat_seq</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name>block_start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>polar_network_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>opstat</name><index>[<expr><name>op</name></expr>]</index></name><operator>.</operator><name>block_time</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_network_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>opstat</name><index>[<expr><name>op</name></expr>]</index></name><operator>.</operator><name>last_block_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* 
 * POLAR: util function for block time.
 */</comment>
<function><type><name>uint64</name></type>
<name>polar_network_real_block_time</name><parameter_list>(<parameter><decl><type><name>polar_network_op_stat</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>block_time</name> <init>= <expr><name><name>stat</name><operator>-&gt;</operator><name>block_time</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stat</name><operator>-&gt;</operator><name>last_block_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>instr_time</name></type> <name>end</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>block_time</name> <operator>+=</operator> <operator>(</operator><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>stat</name><operator>-&gt;</operator><name>last_block_time</name></name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>block_time</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: timer handler for network stat
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_network_stat_timer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>polar_network_get_tcpinfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_network_get_qlen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		

	<if_stmt><if>if <condition>(<expr><name>polar_enable_track_network_stat</name> <operator>&amp;&amp;</operator> <call><name>IS_NETWORK_STAT_TIMER_ID_VALID</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>enable_timeout_after</name><argument_list>(<argument><expr><name>polar_network_stat_timerid</name></expr></argument>, <argument><expr><name>POLAR_NETWORK_STAT_INTERVAL_IN_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: tcpinfo
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_network_get_tcpinfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tcp_info</name></name></type> <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tcp_info</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_network_stat_array</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>MyProcPort</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><name><name>MyProcPort</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>SOL_TCP</name></expr></argument>, <argument><expr><name>TCP_INFO</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>POLAR_NET_STAT_BACKEND_INDEX</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>polar_network_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>cwnd</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>tcpi_snd_cwnd</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_network_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>rtt</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>tcpi_rtt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_network_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>rttvar</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>tcpi_rttvar</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_network_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>total_retrans</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>tcpi_total_retrans</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_network_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>tcpinfo_update_time</name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>last_network_tcpinfo_update_time</name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: socket send-Q/recv-Q length
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_network_get_qlen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>queue_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_network_stat_array</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>MyProcPort</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>POLAR_NET_STAT_BACKEND_INDEX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>MyProcPort</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>SIOCOUTQ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>queue_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>polar_network_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>sendq</name> <operator>=</operator> <name>queue_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>MyProcPort</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>SIOCINQ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>queue_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>polar_network_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>recvq</name> <operator>=</operator> <name>queue_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function></unit>
