<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/lib/ilist.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ilist.c
 *	  support for integrated/inline doubly- and singly- linked lists
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/lib/ilist.c
 *
 * NOTES
 *	  This file only contains functions that are too big to be considered
 *	  for inlining.  See ilist.h for most of the goodies.
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/ilist.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Delete 'node' from list.
 *
 * It is not allowed to delete a 'node' which is not in the list 'head'
 *
 * Caution: this is O(n); consider using slist_delete_current() instead.
 */</comment>
<function><type><name>void</name></type>
<name>slist_delete</name><parameter_list>(<parameter><decl><type><name>slist_head</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>slist_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>slist_node</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><operator>&amp;</operator><name><name>head</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>slist_node</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>		<name>found</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>node</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>last</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>slist_check</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ILIST_DEBUG</name></cpp:ifdef>
<comment type="block">/*
 * Verify integrity of a doubly linked list
 */</comment>
<function><type><name>void</name></type>
<name>dlist_check</name><parameter_list>(<parameter><decl><type><name>dlist_head</name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dlist_node</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"doubly linked list head address is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>head</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>head</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>					<comment type="block">/* OK, initialized as zeroes */</comment>

	<comment type="block">/* iterate in forward direction */</comment>
	<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>next</name></name></expr>;</init> <condition><expr><name>cur</name> <operator>!=</operator> <operator>&amp;</operator><name><name>head</name><operator>-&gt;</operator><name>head</name></name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
			<name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
			<name><name>cur</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
			<name><name>cur</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>cur</name> <operator>||</operator>
			<name><name>cur</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>cur</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"doubly linked list is corrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* iterate in backward direction */</comment>
	<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>prev</name></name></expr>;</init> <condition><expr><name>cur</name> <operator>!=</operator> <operator>&amp;</operator><name><name>head</name><operator>-&gt;</operator><name>head</name></name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
			<name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
			<name><name>cur</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
			<name><name>cur</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>cur</name> <operator>||</operator>
			<name><name>cur</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>cur</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"doubly linked list is corrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Verify integrity of a singly linked list
 */</comment>
<function><type><name>void</name></type>
<name>slist_check</name><parameter_list>(<parameter><decl><type><name>slist_head</name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>slist_node</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"singly linked list head address is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * there isn't much we can test in a singly linked list except that it
	 * actually ends sometime, i.e. hasn't introduced a cycle or similar
	 */</comment>
	<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>next</name></name></expr>;</init> <condition><expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* ILIST_DEBUG */</comment>
</unit>
