<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/storage/freespace/fsmpage.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * fsmpage.c
 *	  routines to search and manipulate one FSM page.
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/storage/freespace/fsmpage.c
 *
 * NOTES:
 *
 *	The public functions in this file form an API that hides the internal
 *	structure of a FSM page. This allows freespace.c to treat each FSM page
 *	as a black box with SlotsPerPage "slots". fsm_set_avail() and
 *	fsm_get_avail() let you get/set the value of a slot, and
 *	fsm_search_avail() lets you search for a slot with value &gt;= X.
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fsm_internals.h"</cpp:file></cpp:include>

<comment type="block">/* Macros to navigate the tree within a page. Root has index zero. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>leftchild</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(2 * (x) + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rightchild</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(2 * (x) + 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>parentof</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(((x) - 1) / 2)</cpp:value></cpp:define>

<comment type="block">/*
 * Find right neighbor of x, wrapping around within the level
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>rightneighbor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Move right. This might wrap around, stepping to the leftmost node at
	 * the next level.
	 */</comment>
	<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check if we stepped to the leftmost node at next level, and correct if
	 * so. The leftmost nodes at each level are numbered x = 2^level - 1, so
	 * check if (x + 1) is a power of two, using a standard
	 * twos-complement-arithmetic trick.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>x</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>parentof</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Sets the value of a slot on page. Returns true if the page was modified.
 *
 * The caller must hold an exclusive lock on the page.
 */</comment>
<function><type><name>bool</name></type>
<name>fsm_set_avail</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>nodeno</name> <init>= <expr><name>NonLeafNodesPerPage</name> <operator>+</operator> <name>slot</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSMPage</name></type>		<name>fsmpage</name> <init>= <expr><operator>(</operator><name>FSMPage</name><operator>)</operator> <call><name>PageGetContents</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>oldvalue</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>slot</name> <operator>&lt;</operator> <name>LeafNodesPerPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldvalue</name> <operator>=</operator> <name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>nodeno</name></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/* If the value hasn't changed, we don't need to do anything */</comment>
	<if_stmt><if>if <condition>(<expr><name>oldvalue</name> <operator>==</operator> <name>value</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>nodeno</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Propagate up, until we hit the root or a node that doesn't need to be
	 * updated.
	 */</comment>
	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint8</name></type>		<name>newvalue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>lchild</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>rchild</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>nodeno</name> <operator>=</operator> <call><name>parentof</name><argument_list>(<argument><expr><name>nodeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lchild</name> <operator>=</operator> <call><name>leftchild</name><argument_list>(<argument><expr><name>nodeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rchild</name> <operator>=</operator> <name>lchild</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>newvalue</name> <operator>=</operator> <name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>lchild</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rchild</name> <operator>&lt;</operator> <name>NodesPerPage</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>newvalue</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name>newvalue</name></expr></argument>,
						   <argument><expr><name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>rchild</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>oldvalue</name> <operator>=</operator> <name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>nodeno</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>oldvalue</name> <operator>==</operator> <name>newvalue</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>nodeno</name></expr>]</index></name> <operator>=</operator> <name>newvalue</name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>nodeno</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

	<comment type="block">/*
	 * sanity check: if the new value is (still) higher than the value at the
	 * top, the tree is corrupt.  If so, rebuild.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fsm_rebuild_page</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns the value of given slot on page.
 *
 * Since this is just a read-only access of a single byte, the page doesn't
 * need to be locked.
 */</comment>
<function><type><name>uint8</name></type>
<name>fsm_get_avail</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FSMPage</name></type>		<name>fsmpage</name> <init>= <expr><operator>(</operator><name>FSMPage</name><operator>)</operator> <call><name>PageGetContents</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>slot</name> <operator>&lt;</operator> <name>LeafNodesPerPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>NonLeafNodesPerPage</name> <operator>+</operator> <name>slot</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns the value at the root of a page.
 *
 * Since this is just a read-only access of a single byte, the page doesn't
 * need to be locked.
 */</comment>
<function><type><name>uint8</name></type>
<name>fsm_get_max_avail</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FSMPage</name></type>		<name>fsmpage</name> <init>= <expr><operator>(</operator><name>FSMPage</name><operator>)</operator> <call><name>PageGetContents</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Searches for a slot with category at least minvalue.
 * Returns slot number, or -1 if none found.
 *
 * The caller must hold at least a shared lock on the page, and this
 * function can unlock and lock the page again in exclusive mode if it
 * needs to be updated. exclusive_lock_held should be set to true if the
 * caller is already holding an exclusive lock, to avoid extra work.
 *
 * If advancenext is false, fp_next_slot is set to point to the returned
 * slot, and if it's true, to the slot after the returned slot.
 */</comment>
<function><type><name>int</name></type>
<name>fsm_search_avail</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>minvalue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>advancenext</name></decl></parameter>,
				 <parameter><decl><type><name>bool</name></type> <name>exclusive_lock_held</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>page</name> <init>= <expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FSMPage</name></type>		<name>fsmpage</name> <init>= <expr><operator>(</operator><name>FSMPage</name><operator>)</operator> <call><name>PageGetContents</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nodeno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>target</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>slot</name></decl>;</decl_stmt>

<label><name>restart</name>:</label>

	<comment type="block">/*
	 * Check the root first, and exit quickly if there's no leaf with enough
	 * free space
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>minvalue</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Start search using fp_next_slot.  It's just a hint, so check that it's
	 * sane.  (This also handles wrapping around when the prior call returned
	 * the last slot on the page.)
	 */</comment>
	<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>fsmpage</name><operator>-&gt;</operator><name>fp_next_slot</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>target</name> <operator>&gt;=</operator> <name>LeafNodesPerPage</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>target</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>target</name> <operator>+=</operator> <name>NonLeafNodesPerPage</name></expr>;</expr_stmt>

	<comment type="block">/*----------
	 * Start the search from the target slot.  At every step, move one
	 * node to the right, then climb up to the parent.  Stop when we reach
	 * a node with enough free space (as we must, since the root has enough
	 * space).
	 *
	 * The idea is to gradually expand our "search triangle", that is, all
	 * nodes covered by the current node, and to be sure we search to the
	 * right from the start point.  At the first step, only the target slot
	 * is examined.  When we move up from a left child to its parent, we are
	 * adding the right-hand subtree of that parent to the search triangle.
	 * When we move right then up from a right child, we are dropping the
	 * current search triangle (which we know doesn't contain any suitable
	 * page) and instead looking at the next-larger-size triangle to its
	 * right.  So we never look left from our original start point, and at
	 * each step the size of the search triangle doubles, ensuring it takes
	 * only log2(N) work to search N pages.
	 *
	 * The "move right" operation will wrap around if it hits the right edge
	 * of the tree, so the behavior is still good if we start near the right.
	 * Note also that the move-and-climb behavior ensures that we can't end
	 * up on one of the missing nodes at the right of the leaf level.
	 *
	 * For example, consider this tree:
	 *
	 *		   7
	 *	   7	   6
	 *	 5	 7	 6	 5
	 *	4 5 5 7 2 6 5 2
	 *				T
	 *
	 * Assume that the target node is the node indicated by the letter T,
	 * and we're searching for a node with value of 6 or higher. The search
	 * begins at T. At the first iteration, we move to the right, then to the
	 * parent, arriving at the rightmost 5. At the second iteration, we move
	 * to the right, wrapping around, then climb up, arriving at the 7 on the
	 * third level.  7 satisfies our search, so we descend down to the bottom,
	 * following the path of sevens.  This is in fact the first suitable page
	 * to the right of (allowing for wraparound) our start point.
	 *----------
	 */</comment>
	<expr_stmt><expr><name>nodeno</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>nodeno</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>nodeno</name></expr>]</index></name> <operator>&gt;=</operator> <name>minvalue</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Move to the right, wrapping around on same level if necessary, then
		 * climb up.
		 */</comment>
		<expr_stmt><expr><name>nodeno</name> <operator>=</operator> <call><name>parentof</name><argument_list>(<argument><expr><call><name>rightneighbor</name><argument_list>(<argument><expr><name>nodeno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * We're now at a node with enough free space, somewhere in the middle of
	 * the tree. Descend to the bottom, following a path with enough free
	 * space, preferring to move left if there's a choice.
	 */</comment>
	<while>while <condition>(<expr><name>nodeno</name> <operator>&lt;</operator> <name>NonLeafNodesPerPage</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>childnodeno</name> <init>= <expr><call><name>leftchild</name><argument_list>(<argument><expr><name>nodeno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>childnodeno</name> <operator>&lt;</operator> <name>NodesPerPage</name> <operator>&amp;&amp;</operator>
			<name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>childnodeno</name></expr>]</index></name> <operator>&gt;=</operator> <name>minvalue</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>nodeno</name> <operator>=</operator> <name>childnodeno</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>childnodeno</name><operator>++</operator></expr>;</expr_stmt>			<comment type="block">/* point to right child */</comment>
		<if_stmt><if>if <condition>(<expr><name>childnodeno</name> <operator>&lt;</operator> <name>NodesPerPage</name> <operator>&amp;&amp;</operator>
			<name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>childnodeno</name></expr>]</index></name> <operator>&gt;=</operator> <name>minvalue</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>nodeno</name> <operator>=</operator> <name>childnodeno</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * Oops. The parent node promised that either left or right child
			 * has enough space, but neither actually did. This can happen in
			 * case of a "torn page", IOW if we crashed earlier while writing
			 * the page to disk, and only part of the page made it to disk.
			 *
			 * Fix the corruption and restart.
			 */</comment>
			<decl_stmt><decl><type><name>RelFileNode</name></type> <name>rnode</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ForkNumber</name></type>	<name>forknum</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>BlockNumber</name></type> <name>blknum</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>BufferGetTag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>forknum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blknum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"fixing corrupt FSM block %u, relation %u/%u/%u"</literal></expr></argument>,
				 <argument><expr><name>blknum</name></expr></argument>, <argument><expr><name><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* make sure we hold an exclusive lock */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exclusive_lock_held</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_UNLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>exclusive_lock_held</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>fsm_rebuild_page</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MarkBufferDirtyHint</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>restart</name>;</goto>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/* We're now at the bottom level, at a node with enough space. */</comment>
	<expr_stmt><expr><name>slot</name> <operator>=</operator> <name>nodeno</name> <operator>-</operator> <name>NonLeafNodesPerPage</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Update the next-target pointer. Note that we do this even if we're only
	 * holding a shared lock, on the grounds that it's better to use a shared
	 * lock and get a garbled next pointer every now and then, than take the
	 * concurrency hit of an exclusive lock.
	 *
	 * Wrap-around is handled at the beginning of this function.
	 */</comment>
	<expr_stmt><expr><name><name>fsmpage</name><operator>-&gt;</operator><name>fp_next_slot</name></name> <operator>=</operator> <name>slot</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>advancenext</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><name>slot</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Sets the available space to zero for all slots numbered &gt;= nslots.
 * Returns true if the page was modified.
 */</comment>
<function><type><name>bool</name></type>
<name>fsm_truncate_avail</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nslots</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FSMPage</name></type>		<name>fsmpage</name> <init>= <expr><operator>(</operator><name>FSMPage</name><operator>)</operator> <call><name>PageGetContents</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nslots</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nslots</name> <operator>&lt;</operator> <name>LeafNodesPerPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Clear all truncated leaf nodes */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>NonLeafNodesPerPage</name> <operator>+</operator> <name>nslots</name></expr>]</index></name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>ptr</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>NodesPerPage</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Fix upper nodes. */</comment>
	<if_stmt><if>if <condition>(<expr><name>changed</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fsm_rebuild_page</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>changed</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reconstructs the upper levels of a page. Returns true if the page
 * was modified.
 */</comment>
<function><type><name>bool</name></type>
<name>fsm_rebuild_page</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FSMPage</name></type>		<name>fsmpage</name> <init>= <expr><operator>(</operator><name>FSMPage</name><operator>)</operator> <call><name>PageGetContents</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nodeno</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Start from the lowest non-leaf level, at last node, working our way
	 * backwards, through all non-leaf nodes at all levels, up to the root.
	 */</comment>
	<for>for <control>(<init><expr><name>nodeno</name> <operator>=</operator> <name>NonLeafNodesPerPage</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>nodeno</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>nodeno</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>lchild</name> <init>= <expr><call><name>leftchild</name><argument_list>(<argument><expr><name>nodeno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>rchild</name> <init>= <expr><name>lchild</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint8</name></type>		<name>newvalue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* The first few nodes we examine might have zero or one child. */</comment>
		<if_stmt><if>if <condition>(<expr><name>lchild</name> <operator>&lt;</operator> <name>NodesPerPage</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>newvalue</name> <operator>=</operator> <name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>lchild</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>rchild</name> <operator>&lt;</operator> <name>NodesPerPage</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>newvalue</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name>newvalue</name></expr></argument>,
						   <argument><expr><name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>rchild</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>nodeno</name></expr>]</index></name> <operator>!=</operator> <name>newvalue</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>fsmpage</name><operator>-&gt;</operator><name>fp_nodes</name><index>[<expr><name>nodeno</name></expr>]</index></name> <operator>=</operator> <name>newvalue</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>changed</name></expr>;</return>
</block_content>}</block></function>
</unit>
