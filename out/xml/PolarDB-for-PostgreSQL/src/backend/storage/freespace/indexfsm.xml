<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/storage/freespace/indexfsm.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * indexfsm.c
 *	  POSTGRES free space map for quickly finding free pages in relations
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/storage/freespace/indexfsm.c
 *
 *
 * NOTES:
 *
 *	This is similar to the FSM used for heap, in freespace.c, but instead
 *	of tracking the amount of free space on pages, we only track whether
 *	pages are completely free or in-use. We use the same FSM implementation
 *	as for heaps, using BLCKSZ - 1 to denote used pages, and 0 for unused.
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/freespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/indexfsm.h"</cpp:file></cpp:include>

<comment type="block">/* POLAR */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Exported routines
 */</comment>

<comment type="block">/*
 * GetFreeIndexPage - return a free page from the FSM
 *
 * As a side effect, the page is marked as used in the FSM.
 */</comment>
<function><type><name>BlockNumber</name></type>
<name>GetFreeIndexPage</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>blkno</name> <init>= <expr><call><name>GetPageWithFreeSpace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>blkno</name> <operator>!=</operator> <name>InvalidBlockNumber</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RecordUsedIndexPage</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>blkno</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * RecordFreeIndexPage - mark a page as free in the FSM
 */</comment>
<function><type><name>void</name></type>
<name>RecordFreeIndexPage</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>BlockNumber</name></type> <name>freeBlock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>RecordPageWithFreeSpace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>freeBlock</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * RecordUsedIndexPage - mark a page as used in the FSM
 */</comment>
<function><type><name>void</name></type>
<name>RecordUsedIndexPage</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>BlockNumber</name></type> <name>usedBlock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>RecordPageWithFreeSpace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>usedBlock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * IndexFreeSpaceMapVacuum - scan and fix any inconsistencies in the FSM
 */</comment>
<function><type><name>void</name></type>
<name>IndexFreeSpaceMapVacuum</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>FreeSpaceMapVacuum</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: index insert bulk extend. If we can not find free pages in index relation while
 * doing index insert, we will do index bulk extend. The free blocks will be registered
 * in FSM.
 */</comment>
<function><type><name>Buffer</name></type>
<name>polar_index_add_extra_blocks_and_return_last_buffer</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>reln</name></decl></parameter>, <parameter><decl><type><name>BlockNumber</name></type> <name>blockNum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>first_block_num_extended</name> <init>= <expr><name>InvalidBlockNumber</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>block_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name></type> <name>last_buffer</name> <init>= <expr><name>InvalidBuffer</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bulk_buf_block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Open it at the smgr level if not already done */</comment>
	<expr_stmt><expr><call><name>RelationOpenSmgr</name><argument_list>(<argument><expr><name>reln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<comment type="block">/* init bulk extend backend-local-variable */</comment>
		<expr_stmt><expr><call><name>polar_smgr_init_bulk_extend</name><argument_list>(<argument><expr><name><name>reln</name><operator>-&gt;</operator><name>rd_smgr</name></name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>first_block_num_extended</name> <operator>=</operator> <name><name>reln</name><operator>-&gt;</operator><name>rd_smgr</name><operator>-&gt;</operator><name>polar_nblocks_faked_for_bulk_extend</name><index>[<expr><name>MAIN_FORKNUM</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>block_count</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>polar_index_bulk_extend_size</name></expr></argument>, <argument><expr><operator>(</operator><name>BlockNumber</name><operator>)</operator> <name>RELSEG_SIZE</name> <operator>-</operator> <operator>(</operator><name>first_block_num_extended</name> <operator>%</operator> <operator>(</operator><operator>(</operator><name>BlockNumber</name><operator>)</operator> <name>RELSEG_SIZE</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>block_count</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*no cover line*/</comment>
			<expr_stmt><expr><name>block_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* avoid small table bloat */</comment>
		<if_stmt><if>if <condition>(<expr><name>first_block_num_extended</name> <operator>&lt;</operator> <name>polar_min_bulk_extend_table_size</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>block_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>bulk_buf_block</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>block_count</name> <operator>*</operator> <name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buffers</name> <operator>=</operator> <operator>(</operator><name>Buffer</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>block_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="block">/*
			 * Extend by one page.  This should generally match the main-line
			 * extension code in RelationGetBufferForTuple, except that we hold
			 * the relation extension lock throughout.
			 */</comment>
			<expr_stmt><expr><name><name>buffers</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <call><name>ReadBufferExtended</name><argument_list>(<argument><expr><name>reln</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>, <argument><expr><name>P_NEW</name></expr></argument>, <argument><expr><name>RBM_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block>
	<comment type="block">/*no cover begin*/</comment>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<comment type="block">/* error recovery, very important, reset bulk extend backend-local-variable */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>reln</name><operator>-&gt;</operator><name>rd_smgr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_smgr_clear_bulk_extend</name><argument_list>(<argument><expr><name><name>reln</name><operator>-&gt;</operator><name>rd_smgr</name></name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*no cover end*/</comment>

	<comment type="block">/* reset bulk extend backend-local-variable */</comment>
	<expr_stmt><expr><call><name>polar_smgr_clear_bulk_extend</name><argument_list>(<argument><expr><name><name>reln</name><operator>-&gt;</operator><name>rd_smgr</name></name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* bulk extend polar store */</comment>
	<expr_stmt><expr><call><name>smgrextendbatch</name><argument_list>(<argument><expr><name><name>reln</name><operator>-&gt;</operator><name>rd_smgr</name></name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>, <argument><expr><name>first_block_num_extended</name></expr></argument>, <argument><expr><name>block_count</name></expr></argument>, <argument><expr><name>bulk_buf_block</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>bulk_buf_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* process left (block_count-1) blocks, skip last block*/</comment>
	<expr_stmt><expr><name>block_count</name><operator>--</operator></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Buffer</name></type> <name>buffer</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Page</name></type> <name>page</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name><name>buffers</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PageIsNew</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*no cover line*/</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"index bulk extend page %u of relation \"%s\" should be empty but is not"</literal></expr></argument>,
				<argument><expr><call><name>BufferGetBlockNumber</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>reln</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>first_block_num_extended</name> <operator>+</operator> <name>index</name><operator>)</operator> <operator>==</operator> <call><name>BufferGetBlockNumber</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>UnlockReleaseBuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* We just register the free pages into FSM, no need to mark all the new buffers dirty */</comment>
		<expr_stmt><expr><call><name>RecordFreeIndexPage</name><argument_list>(<argument><expr><name>reln</name></expr></argument>, <argument><expr><name>first_block_num_extended</name> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Finally, vacuum the FSM. Update the upper-level FSM pages to ensure that
	 * searchers can find them.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>block_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>IndexFreeSpaceMapVacuum</name><argument_list>(<argument><expr><name>reln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* last block */</comment>
	<expr_stmt><expr><name>last_buffer</name> <operator>=</operator> <name><name>buffers</name><index>[<expr><name>block_count</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>last_buffer</name></expr>;</return>
</block_content>}</block></function>
</unit>
