<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/storage/encryption/kmgr.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * kmgr.c
 *	 Encryption key management module.
 *
 * Portions Copyright (c) 2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 2020, Alibaba Group Holding Limited
 *
 * IDENTIFICATION
 *	  src/backend/storage/encryption/kmgr.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/sha2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/encryption.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/kmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hsearch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Key encryption key. This variable is set during verification
 * of user given passphrase. After verified, the plain key data
 * is set to this variable.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>keydata_t</name></type> <name><name>keyEncKey</name><index>[<expr><name>TDE_KEK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/*
 * Relation encryption key and WAL encryption key.  Similar to
 * key encryption key, these variables store the plain key data.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>keydata_t</name></type> <name><name>relEncKey</name><index>[<expr><name>TDE_MAX_DEK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>keydata_t</name></type> <name><name>walEncKey</name><index>[<expr><name>TDE_MAX_DEK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>tde_key_types</name><index>[<expr><name>TDE_MAX_DEK</name></expr>]</index></name> <init>=<expr><block>{
		<expr><literal type="string">"relation"</literal></expr>,
		<expr><literal type="string">"wal"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* GUC variable */</comment>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>polar_cluster_passphrase_command</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>verify_passphrase</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>passphrase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passlen</name></decl></parameter>,
							  <parameter><decl><type><name>WrappedEncKeyWithHmac</name> <modifier>*</modifier></type><name>rdek</name></decl></parameter>,
							  <parameter><decl><type><name>WrappedEncKeyWithHmac</name> <modifier>*</modifier></type><name>wdek</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>generate_key_and_hmac</name><parameter_list>(<parameter><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>hmackey</name></decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>enc_key</name></decl></parameter>, <parameter><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>hmac</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * This func must be called ONCE on system install. we derive KEK,
 * generate MDEK and salt, compute hmac, write kmgr file etc.
 */</comment>
<function><type><name>void</name></type>
<name>BootStrapKmgr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bootstrap_data_encryption_cipher</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>KmgrFileData</name> <modifier>*</modifier></type><name>kmgrfile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>passphrase</name><index>[<expr><name>TDE_MAX_PASSPHRASE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name></type> <name><name>hmackey</name><index>[<expr><name>TDE_HMAC_KEY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>rdek_enc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>wdek_enc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>rdek_hmac</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>wdek_hmac</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>len</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>bootstrap_data_encryption_cipher</name> <operator>==</operator> <name>TDE_ENCRYPTION_OFF</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_OPENSSL</name></cpp:ifndef>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cluster encryption is not supported because OpenSSL is not supported by this build"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			  <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Compile with --with-openssl to use cluster encryption."</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Fill out the kmgr file contents */</comment>
	<expr_stmt><expr><name>kmgrfile</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>KmgrFileData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>kmgrfile</name><operator>-&gt;</operator><name>data_encryption_cipher</name></name> <operator>=</operator> <name>bootstrap_data_encryption_cipher</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdek_enc</name> <operator>=</operator> <name><name>kmgrfile</name><operator>-&gt;</operator><name>tde_rdek</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdek_hmac</name> <operator>=</operator> <name><name>kmgrfile</name><operator>-&gt;</operator><name>tde_rdek</name><operator>.</operator><name>hmac</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>wdek_enc</name> <operator>=</operator> <name><name>kmgrfile</name><operator>-&gt;</operator><name>tde_wdek</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>wdek_hmac</name> <operator>=</operator> <name><name>kmgrfile</name><operator>-&gt;</operator><name>tde_wdek</name><operator>.</operator><name>hmac</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set data encryption cipher so that subsequent bootstrapping process
	 * can proceed.
	 */</comment>
	<expr_stmt><expr><call><name>SetConfigOption</name><argument_list>(<argument><expr><literal type="string">"polar_data_encryption_cipher"</literal></expr></argument>,
					<argument><expr><call><name>EncryptionCipherString</name><argument_list>(<argument><expr><name>bootstrap_data_encryption_cipher</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>PGC_INTERNAL</name></expr></argument>, <argument><expr><name>PGC_S_OVERRIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	 <comment type="block">/* Get encryption key passphrase */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>run_cluster_passphrase_command</name><argument_list>(<argument><expr><name>KMGR_PROMPT_MSG</name></expr></argument>,
										 <argument><expr><name>passphrase</name></expr></argument>,
										 <argument><expr><name>TDE_MAX_PASSPHRASE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get key encryption key and HMAC key from passphrase */</comment>
	<expr_stmt><expr><call><name>get_kek_and_hmackey_from_passphrase</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>keyEncKey</name></expr></argument>, <argument><expr><name>hmackey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Generate relation encryption key and WAL encryption key.
	 * The generated two keys must be stored in relEncKey and
	 * walEncKey that can be used by other modules since even
	 * during bootstrapping we need to encrypt both systemcatalogs
	 * and WAL.
	 */</comment>

	<expr_stmt><expr><call><name>generate_key_and_hmac</name><argument_list>(<argument><expr><name>relEncKey</name></expr></argument>, <argument><expr><name>hmackey</name></expr></argument>, <argument><expr><name><name>tde_key_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rdek_enc</name></expr></argument>, <argument><expr><name>rdek_hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>generate_key_and_hmac</name><argument_list>(<argument><expr><name>walEncKey</name></expr></argument>, <argument><expr><name>hmackey</name></expr></argument>, <argument><expr><name><name>tde_key_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>wdek_enc</name></expr></argument>, <argument><expr><name>wdek_hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* write kmgr file to the disk */</comment>
	<expr_stmt><expr><call><name>write_kmgr_file</name><argument_list>(<argument><expr><name>kmgrfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>kmgrfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Run cluster_passphrase_command
 *
 * prompt will be substituted for %p.
 *
 * The result will be put in buffer buf, which is of size size.	 The return
 * value is the length of the actual result.
 */</comment>
<function><type><name>int</name></type>
<name>run_cluster_passphrase_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>command</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>fh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pclose_rc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>polar_cluster_passphrase_command</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>
		<block>{<block_content>
			<switch>switch <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><literal type="char">'p'</literal></expr>:</case>
					<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>command</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="char">'%'</literal></expr>:</case>
					<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>command</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>command</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></switch>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>command</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>



	<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>OpenPipeStream</name><argument_list>(<argument><expr><name><name>command</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fh</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover begin*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not execute command \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name><name>command</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>error</name>;</goto>
		<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*no cover begin*/</comment>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not read from command \"%s\": %m"</literal></expr></argument>,
							<argument><expr><name><name>command</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>error</name>;</goto>
			<comment type="block">/*no cover end*/</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>pclose_rc</name> <operator>=</operator> <call><name>ClosePipeStream</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pclose_rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover begin*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not close pipe to external command: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>error</name>;</goto>
		<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>pclose_rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover begin*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"command \"%s\" failed"</literal></expr></argument>,
						<argument><expr><name><name>command</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_internal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>wait_result_to_str</name><argument_list>(<argument><expr><name>pclose_rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>error</name>;</goto>
		<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* strip trailing newline */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>error</name>:</label>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>command</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get encryption key passphrase and verify it, then get the un-encrypted
 * RDEK and WDEK. This function is called by postmaster at startup time.
 */</comment>
<function><type><name>void</name></type>
<name>InitializeKmgr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>KmgrFileData</name> <modifier>*</modifier></type><name>kmgrfile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WrappedEncKeyWithHmac</name> <modifier>*</modifier></type><name>wrapped_rdek</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WrappedEncKeyWithHmac</name> <modifier>*</modifier></type><name>wrapped_wdek</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>passphrase</name><index>[<expr><name>TDE_MAX_PASSPHRASE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>wrapped_keysize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>unwrapped_size</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_kmgr_file_exist</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Get contents of kmgr file */</comment>
	<expr_stmt><expr><name>kmgrfile</name> <operator>=</operator> <call><name>polar_read_kmgr_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get cluster passphrase */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>run_cluster_passphrase_command</name><argument_list>(<argument><expr><name>KMGR_PROMPT_MSG</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>TDE_MAX_PASSPHRASE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get two wrapped keys stored in kmgr file */</comment>
	<expr_stmt><expr><name>wrapped_rdek</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>kmgrfile</name><operator>-&gt;</operator><name>tde_rdek</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>wrapped_wdek</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>kmgrfile</name><operator>-&gt;</operator><name>tde_wdek</name></name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>wrapped_keysize</name> <operator>=</operator> <name>EncryptionKeySize</name> <operator>+</operator> <name>TDE_DEK_WRAP_VALUE_SIZE</name></expr>;</expr_stmt>

	<comment type="block">/* Verify the correctness of given passphrase */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>verify_passphrase</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>wrapped_rdek</name></expr></argument>, <argument><expr><name>wrapped_wdek</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover begin*/</comment>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>kmgrfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cluster passphrase does not match expected passphrase"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* The passphrase is correct, unwrap both RDEK and WDEK */</comment>
	<expr_stmt><expr><call><name>pg_unwrap_key</name><argument_list>(<argument><expr><name>keyEncKey</name></expr></argument>, <argument><expr><name>TDE_KEK_SIZE</name></expr></argument>,
				  <argument><expr><name><name>wrapped_rdek</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>wrapped_keysize</name></expr></argument>,
				  <argument><expr><name>relEncKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unwrapped_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>unwrapped_size</name> <operator>!=</operator> <name>EncryptionKeySize</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover begin*/</comment>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>kmgrfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unwrapped relation encryption key size is invalid, got %d expected %d"</literal></expr></argument>,
			 <argument><expr><name>unwrapped_size</name></expr></argument>, <argument><expr><name>EncryptionKeySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_unwrap_key</name><argument_list>(<argument><expr><name>keyEncKey</name></expr></argument>, <argument><expr><name>TDE_KEK_SIZE</name></expr></argument>,
				  <argument><expr><name><name>wrapped_wdek</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>wrapped_keysize</name></expr></argument>,
				  <argument><expr><name>walEncKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unwrapped_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>kmgrfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>unwrapped_size</name> <operator>!=</operator> <name>EncryptionKeySize</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover begin*/</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unwrapped WAL encryptoin key size is invalid, got %d expected %d"</literal></expr></argument>,
			 <argument><expr><name>unwrapped_size</name></expr></argument>, <argument><expr><name>EncryptionKeySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Hash the given passphrase and extract it into KEK and HMAC
 * key.
 */</comment>
<function><type><name>void</name></type>
<name>get_kek_and_hmackey_from_passphrase</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>passphrase</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>passlen</name></decl></parameter>,
									<parameter><decl><type><name>keydata_t</name></type> <name><name>kek_out</name><index>[<expr><name>TDE_KEK_SIZE</name></expr>]</index></name></decl></parameter>,
									<parameter><decl><type><name>keydata_t</name></type> <name><name>hmackey_out</name><index>[<expr><name>TDE_HMAC_KEY_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>keydata_t</name></type> <name><name>enckey_and_hmackey</name><index>[<expr><name>PG_SHA512_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_sha512_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_sha512_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_sha512_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8</name> <operator>*</operator><operator>)</operator> <name>passphrase</name></expr></argument>, <argument><expr><name>passlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_sha512_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>enckey_and_hmackey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * SHA-512 results 64 bytes. We extract it into two keys for
	 * each 32 bytes: one for key encryption and another one for
	 * HMAC.
	 */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>kek_out</name></expr></argument>, <argument><expr><name>enckey_and_hmackey</name></expr></argument>, <argument><expr><name>TDE_KEK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hmackey_out</name></expr></argument>, <argument><expr><name>enckey_and_hmackey</name> <operator>+</operator> <name>TDE_KEK_SIZE</name></expr></argument>, <argument><expr><name>TDE_HMAC_KEY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Verify the correctness of the given passphrase. We compute HMACs of the
 * wrapped keys (RDEK and WDEK) using the HMAC key retrived from the user
 * provided passphrase. And then we compare it with the HMAC stored alongside
 * the controlfile. Return true if both HMACs are matched, meaning the given
 * passphrase is correct. Otherwise return false.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>verify_passphrase</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>passphrase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passlen</name></decl></parameter>,
				  <parameter><decl><type><name>WrappedEncKeyWithHmac</name> <modifier>*</modifier></type><name>rdek</name></decl></parameter>, <parameter><decl><type><name>WrappedEncKeyWithHmac</name> <modifier>*</modifier></type><name>wdek</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>keydata_t</name></type> <name><name>user_kek</name><index>[<expr><name>TDE_KEK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name></type> <name><name>user_hmackey</name><index>[<expr><name>TDE_HMAC_KEY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name></type> <name><name>result_hmac</name><index>[<expr><name>TDE_HMAC_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>wrapped_keysize</name> <init>= <expr><name>EncryptionKeySize</name> <operator>+</operator> <name>TDE_DEK_WRAP_VALUE_SIZE</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>get_kek_and_hmackey_from_passphrase</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>passlen</name></expr></argument>,
										<argument><expr><name>user_kek</name></expr></argument>, <argument><expr><name>user_hmackey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Verify both HMACs of RDEK and WDEK */</comment>
	<expr_stmt><expr><call><name>pg_compute_hmac</name><argument_list>(<argument><expr><name>user_hmackey</name></expr></argument>, <argument><expr><name>TDE_HMAC_KEY_SIZE</name></expr></argument>,
					<argument><expr><name><name>rdek</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>wrapped_keysize</name></expr></argument>,
					<argument><expr><name>result_hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>result_hmac</name></expr></argument>, <argument><expr><name><name>rdek</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>, <argument><expr><name>TDE_HMAC_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_compute_hmac</name><argument_list>(<argument><expr><name>user_hmackey</name></expr></argument>, <argument><expr><name>TDE_HMAC_KEY_SIZE</name></expr></argument>,
					<argument><expr><name><name>wdek</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>wrapped_keysize</name></expr></argument>,
					<argument><expr><name>result_hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>result_hmac</name></expr></argument>, <argument><expr><name><name>wdek</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>, <argument><expr><name>TDE_HMAC_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* The passphrase is verified. Save the key encryption key */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>keyEncKey</name></expr></argument>, <argument><expr><name>user_kek</name></expr></argument>, <argument><expr><name>TDE_KEK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return plain relation encryption key */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>KmgrGetRelationEncryptionKey</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DataEncryptionEnabled</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>relEncKey</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return plain WAL encryption key */</comment>
<comment type="block">/*no cover begin*/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>KmgrGetWALEncryptionKey</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DataEncryptionEnabled</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>walEncKey</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*no cover end*/</comment>

<comment type="block">/* Return plain key encryption key */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>KmgrGetKeyEncryptionKey</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DataEncryptionEnabled</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>keyEncKey</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read kmgr file, and return palloc'd file data.
 */</comment>
<function><type><name>KmgrFileData</name> <modifier>*</modifier></type>
<name>polar_read_kmgr_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>KmgrFileData</name> <modifier>*</modifier></type><name>kmgrfile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_crc32c</name></type>	<name>crc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>read_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>			<name><name>polar_kmgr_file</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/*
	 * When POLARDB read it in the postmaster,
	 * shared storage has not been mounted in the plugin,
	 * so please assert it.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>polar_enable_shared_storage_mode</name> <operator>&amp;&amp;</operator>
			<name>polar_vfs_switch</name> <operator>==</operator> <name>POLAR_VFS_SWITCH_PLUGIN</name><operator>)</operator>
			<operator>||</operator> <operator>(</operator><operator>!</operator><name>polar_enable_shared_storage_mode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_make_file_path_level2</name><argument_list>(<argument><expr><name>polar_kmgr_file</name></expr></argument>, <argument><expr><name>KMGR_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>BasicOpenFile</name><argument_list>(<argument><expr><name>polar_kmgr_file</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover begin*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>KMGR_FILENAME</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="block">/*no cover end*/</comment>

	<comment type="block">/* Read data */</comment>
	<expr_stmt><expr><name>kmgrfile</name> <operator>=</operator> <operator>(</operator><name>KmgrFileData</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>KmgrFileData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>WAIT_EVENT_KMGR_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>read_len</name> <operator>=</operator> <call><name>polar_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>kmgrfile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>KmgrFileData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>KmgrFileData</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover begin*/</comment>
		<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not read from file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>KMGR_FILENAME</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover begin*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not close file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>KMGR_FILENAME</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="block">/*no cover end*/</comment>

	<comment type="block">/* Verify CRC */</comment>
	<expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>kmgrfile</name></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>KmgrFileData</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EQ_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>kmgrfile</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATA_CORRUPTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"calculated CRC checksum does not match value stored in file \"%s\""</literal></expr></argument>,
						<argument><expr><name>KMGR_FILENAME</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


	<if_stmt><if>if <condition>(<expr><name>polar_enable_shared_storage_mode</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"polardb load kmgr file success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SetConfigOption</name><argument_list>(<argument><expr><literal type="string">"polar_data_encryption_cipher"</literal></expr></argument>,
					<argument><expr><call><name>EncryptionCipherString</name><argument_list>(<argument><expr><name><name>kmgrfile</name><operator>-&gt;</operator><name>data_encryption_cipher</name></name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>PGC_INTERNAL</name></expr></argument>, <argument><expr><name>PGC_S_OVERRIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>kmgrfile</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write kmgr file. This function is used only when bootstrapping.
 * NB: In the initdb, we will write it to local, and move to POLARSTORE with polar-initdb.sh.
 */</comment>
<function><type><name>void</name></type>
<name>write_kmgr_file</name><parameter_list>(<parameter><decl><type><name>KmgrFileData</name> <modifier>*</modifier></type><name>filedata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>				<name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>			<name><name>polar_kmgr_file</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>filedata</name><operator>-&gt;</operator><name>kmgr_version_no</name></name> <operator>=</operator> <name>KMGR_VERSION_NO</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name><name>filedata</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name><name>filedata</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><name>filedata</name></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>KmgrFileData</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name><name>filedata</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_make_file_path_level2</name><argument_list>(<argument><expr><name>polar_kmgr_file</name></expr></argument>, <argument><expr><name>KMGR_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>BasicOpenFile</name><argument_list>(<argument><expr><name>polar_kmgr_file</name></expr></argument>, <argument><expr><name>PG_BINARY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_RDWR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>KMGR_FILENAME</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>WAIT_EVENT_KMGR_FILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>filedata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>KmgrFileData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>KmgrFileData</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not write kmgr file \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>KMGR_FILENAME</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>WAIT_EVENT_KMGR_FILE_SYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_fsync</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not sync file \"%s\": %m"</literal></expr></argument>,
						 <argument><expr><name>KMGR_FILENAME</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not close file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>KMGR_FILENAME</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>is_kmgr_file_exist</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>			<name><name>polar_kmgr_file</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>polar_make_file_path_level2</name><argument_list>(<argument><expr><name>polar_kmgr_file</name></expr></argument>, <argument><expr><name>KMGR_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_stat</name><argument_list>(<argument><expr><name>polar_kmgr_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>generate_key_and_hmac</name><parameter_list>(<parameter><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>hmackey</name></decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>enc_key</name></decl></parameter>, <parameter><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>hmac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>wrapped_keysize</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_strong_random</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>EncryptionKeySize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to generate %s encryption key"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Wrap key by KEK */</comment>
	<expr_stmt><expr><name>wrapped_keysize</name> <operator>=</operator> <name>EncryptionKeySize</name> <operator>+</operator> <name>TDE_DEK_WRAP_VALUE_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_wrap_key</name><argument_list>(<argument><expr><name>keyEncKey</name></expr></argument>, <argument><expr><name>TDE_KEK_SIZE</name></expr></argument>,
				<argument><expr><name>key</name></expr></argument>, <argument><expr><name>EncryptionKeySize</name></expr></argument>,
				<argument><expr><name>enc_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>wrapped_keysize</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"wrapped %s encryption key size is invalid, got %d expected %d"</literal></expr></argument>,
			 <argument><expr><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>wrapped_keysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pg_compute_hmac</name><argument_list>(<argument><expr><name>hmackey</name></expr></argument>, <argument><expr><name>TDE_HMAC_KEY_SIZE</name></expr></argument>,
					<argument><expr><name>enc_key</name></expr></argument>, <argument><expr><name>wrapped_keysize</name></expr></argument>,
					<argument><expr><name>hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
