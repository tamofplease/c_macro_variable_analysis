<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/storage/encryption/enc_cipher.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * enc_cipher.c
 *	  This code handles encryption and decryption using OpenSSL
 *
 * Portions Copyright (c) 2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 2020, Alibaba Group Holding Limited
 *
 *
 * IDENTIFICATION
 *	  src/backend/storage/encryption/enc_cipher.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/enc_cipher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/enc_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/enc_internal.h"</cpp:file></cpp:include>

<comment type="block">/* GUC parameter */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>data_encryption_cipher</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>	<name>EncryptionKeySize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>    <name>polar_enable_tde_warning</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Data encryption */</comment>
<function><type><name>void</name></type>
<name>pg_tde_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
		   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_OPENSSL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>ossl_encrypt_data</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cluster encryption is not supported because OpenSSL is not supported by this build"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			  <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Compile with --with-openssl to use cluster encryption."</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Data decryption */</comment>
<function><type><name>void</name></type>
<name>pg_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
		   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_OPENSSL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>ossl_decrypt_data</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cluster encryption is not supported because OpenSSL is not supported by this build"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			  <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Compile with --with-openssl to use cluster encryption."</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* HMAC computation */</comment>
<function><type><name>void</name></type>
<name>pg_compute_hmac</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hmac_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
				<parameter><decl><type><name>int</name></type> <name>data_size</name></decl></parameter>,	<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hmac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_OPENSSL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>ossl_compute_hmac</name><argument_list>(<argument><expr><name>hmac_key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cluster encryption is not supported because OpenSSL is not supported by this build"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			  <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Compile with --with-openssl to use cluster encryption."</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Key wrap */</comment>
<function><type><name>void</name></type>
<name>pg_wrap_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_OPENSSL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>ossl_wrap_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cluster encryption is not supported because OpenSSL is not supported by this build"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			  <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Compile with --with-openssl to use cluster encryption."</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Key unwrap */</comment>
<function><type><name>void</name></type>
<name>pg_unwrap_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
			  <parameter><decl><type><name>int</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_OPENSSL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>ossl_unwrap_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cluster encryption is not supported because OpenSSL is not supported by this build"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			  <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Compile with --with-openssl to use cluster encryption."</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Convert cipher name string to integer value */</comment>
<function><type><name>int</name></type>
<name>EncryptionCipherValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"aes-128"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>TDE_ENCRYPTION_AES_128</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"aes-256"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>TDE_ENCRYPTION_AES_256</name></expr>;</return></block_content></block></if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OPENSSL_NO_SM4</name></cpp:ifndef>
	<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sm4"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>TDE_ENCRYPTION_SM4</name></expr>;</return></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<else>else<block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<return>return <expr><name>TDE_ENCRYPTION_OFF</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Convert integer value to cipher name string */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>EncryptionCipherString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>value</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TDE_ENCRYPTION_OFF</name></expr> :</case>
			<return>return <expr><literal type="string">"off"</literal></expr>;</return>
		<case>case <expr><name>TDE_ENCRYPTION_AES_128</name></expr>:</case>
			<return>return <expr><literal type="string">"aes-128"</literal></expr>;</return>
		<case>case <expr><name>TDE_ENCRYPTION_AES_256</name></expr>:</case>
			<return>return <expr><literal type="string">"aes-256"</literal></expr>;</return>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OPENSSL_NO_SM4</name></cpp:ifndef>
		<case>case <expr><name>TDE_ENCRYPTION_SM4</name></expr>:</case>
			<return>return <expr><literal type="string">"sm4"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<comment type="block">/*no cover begin*/</comment>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"the encryption_cipher is not in the data_encryption_cipher_options!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
		<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>assign_data_encryption_cipher</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>new_encryption_cipher</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>new_encryption_cipher</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TDE_ENCRYPTION_OFF</name></expr>:</case>
			<expr_stmt><expr><name>EncryptionKeySize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TDE_ENCRYPTION_AES_128</name></expr>:</case>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OPENSSL_NO_SM4</name></cpp:ifndef>
		<case>case <expr><name>TDE_ENCRYPTION_SM4</name></expr>:</case>
			<expr_stmt><expr><name>EncryptionKeySize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
			<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>TDE_ENCRYPTION_AES_256</name></expr>:</case>
			<expr_stmt><expr><name>EncryptionKeySize</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
			<break>break;</break>
		<comment type="block">/*no cover begin*/</comment>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"the encryption_cipher is not in the data_encryption_cipher_options!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
