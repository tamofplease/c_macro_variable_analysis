<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/storage/encryption/enc_openssl.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * enc_openssl.c
 *	  This code handles encryption and decryption using OpenSSL
 *
 * Portions Copyright (c) 2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 2020, Alibaba Group Holding Limited
 *
 *
 * IDENTIFICATION
 *	  src/backend/storage/encryption/enc_openssl.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/enc_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/enc_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/conf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/evp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/hmac.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL_KDF</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/kdf.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * prototype for the EVP functions that return an algorithm, e.g.
 * EVP_aes_128_cbc().
 */</comment>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>EVP_CIPHER</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>ossl_EVP_cipher_func</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<comment type="block">/*
 * Supported cipher function and its key size. The index of each cipher
 * is (data_encryption_cipher - 1).
 */</comment>
<decl_stmt><decl><type><name>ossl_EVP_cipher_func</name></type> <name><name>cipher_func_table</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><name>EVP_aes_128_ctr</name></expr>,	<comment type="block">/* TDE_ENCRYPTION_AES_128 */</comment>
	<expr><name>EVP_aes_256_ctr</name></expr>,	<comment type="block">/* TDE_ENCRYPTION_AES_256 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OPENSSL_NO_SM4</name></cpp:ifndef>
	<expr><name>EVP_sm4_ctr</name></expr> 		<comment type="block">/*polar support sm4 TDE_ENCRYPTION_SM4*/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>CipherCtx</name>
<block>{
	<comment type="block">/* Encryption context */</comment>
	<decl_stmt><decl><type><name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>enc_ctx</name></decl>;</decl_stmt>

	<comment type="block">/* Decryption context */</comment>
	<decl_stmt><decl><type><name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>dec_ctx</name></decl>;</decl_stmt>

	<comment type="block">/* Key wrap context */</comment>
	<decl_stmt><decl><type><name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>wrap_ctx</name></decl>;</decl_stmt>

	<comment type="block">/* Key unwrap context */</comment>
	<decl_stmt><decl><type><name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>unwrap_ctx</name></decl>;</decl_stmt>

	<comment type="block">/* Key derivation context */</comment>
	<decl_stmt><decl><type><name>EVP_PKEY_CTX</name>   <modifier>*</modifier></type><name>derive_ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>CipherCtx</name>;</typedef>

<decl_stmt><decl><type><name>CipherCtx</name>		<modifier>*</modifier></type><name>MyCipherCtx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MemoryContext</name></type>	<name>EncMemoryCtx</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>createCipherContext</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>create_ossl_encryption_ctx</name><parameter_list>(<parameter><decl><type><name>ossl_EVP_cipher_func</name></type> <name>func</name></decl></parameter>,
												  <parameter><decl><type><name>int</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isenc</name></decl></parameter>,
												  <parameter><decl><type><name>bool</name></type> <name>iswrap</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>EVP_PKEY_CTX</name> <modifier>*</modifier></type><name>create_ossl_derive_ctx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setup_encryption_ossl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setup_encryption</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> ;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>createCipherContext</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ossl_EVP_cipher_func</name></type> <name>cipherfunc</name> <init>= <expr><name><name>cipher_func_table</name><index>[<expr><name>data_encryption_cipher</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CipherCtx</name> <modifier>*</modifier></type><name>cctx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>MyCipherCtx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>EncMemoryCtx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>EncMemoryCtx</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
											 <argument><expr><literal type="string">"db encryption context"</literal></expr></argument>,
											 <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>old_ctx</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>EncMemoryCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cctx</name> <operator>=</operator> <operator>(</operator><name>CipherCtx</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CipherCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create encryption/decryption contexts */</comment>
	<expr_stmt><expr><name><name>cctx</name><operator>-&gt;</operator><name>enc_ctx</name></name> <operator>=</operator> <call><name>create_ossl_encryption_ctx</name><argument_list>(<argument><expr><name>cipherfunc</name></expr></argument>,
											   <argument><expr><name>EncryptionKeySize</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cctx</name><operator>-&gt;</operator><name>dec_ctx</name></name> <operator>=</operator> <call><name>create_ossl_encryption_ctx</name><argument_list>(<argument><expr><name>cipherfunc</name></expr></argument>,
											   <argument><expr><name>EncryptionKeySize</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create key wrap/unwrap contexts */</comment>
	<expr_stmt><expr><name><name>cctx</name><operator>-&gt;</operator><name>wrap_ctx</name></name> <operator>=</operator> <call><name>create_ossl_encryption_ctx</name><argument_list>(<argument><expr><name>EVP_aes_256_wrap</name></expr></argument>,
												<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cctx</name><operator>-&gt;</operator><name>unwrap_ctx</name></name> <operator>=</operator> <call><name>create_ossl_encryption_ctx</name><argument_list>(<argument><expr><name>EVP_aes_256_wrap</name></expr></argument>,
												  <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create key derivation context */</comment>
	<expr_stmt><expr><name><name>cctx</name><operator>-&gt;</operator><name>derive_ctx</name></name> <operator>=</operator> <call><name>create_ossl_derive_ctx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set my cipher context and key size */</comment>
	<expr_stmt><expr><name>MyCipherCtx</name> <operator>=</operator> <name>cctx</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Create openssl's key derivation context */</comment>
<function><type><specifier>static</specifier> <name>EVP_PKEY_CTX</name> <modifier>*</modifier></type>
<name>create_ossl_derive_ctx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
   <decl_stmt><decl><type><name>EVP_PKEY_CTX</name> <modifier>*</modifier></type><name>pctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL_KDF</name></cpp:ifdef>
   <expr_stmt><expr><name>pctx</name> <operator>=</operator> <call><name>EVP_PKEY_CTX_new_id</name><argument_list>(<argument><expr><name>EVP_PKEY_HKDF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <if_stmt><if>if <condition>(<expr><call><name>EVP_PKEY_derive_init</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	   <comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered error during initializing derive context"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

   <if_stmt><if>if <condition>(<expr><call><name>EVP_PKEY_CTX_set_hkdf_md</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>, <argument><expr><call><name>EVP_sha256</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	   <comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered error during setting HKDF context"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

   <return>return <expr><name>pctx</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Create openssl's encryption context */</comment>
<function><type><specifier>static</specifier> <name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type>
<name>create_ossl_encryption_ctx</name><parameter_list>(<parameter><decl><type><name>ossl_EVP_cipher_func</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isenc</name></decl></parameter>,
						   <parameter><decl><type><name>bool</name></type> <name>iswrap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* Create new openssl cipher context */</comment>
	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_CIPHER_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Enable key wrap algorithm */</comment>
	<if_stmt><if>if <condition>(<expr><name>iswrap</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>EVP_CIPHER_CTX_set_flags</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>EVP_CIPHER_CTX_FLAG_WRAP_ALLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered error during creating context"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>isenc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>EVP_EncryptInit_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>EVP_CIPHER</name> <operator>*</operator><operator>)</operator> <call><name>func</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
								 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>EVP_DecryptInit_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>EVP_CIPHER</name> <operator>*</operator><operator>)</operator> <call><name>func</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
								 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered error during initializing context"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_CIPHER_CTX_set_key_length</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered error during setting key length"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize encryption subsystem for use. Must be called before any
 * encryptable data is read from or written to data directory.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup_encryption</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup_encryption_ossl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>createCipherContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup_encryption_ossl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_OPENSSL_KDF</name></cpp:ifndef>
	<comment type="block">/*
	 * We can initialize openssl even with openssl is 1.0.0 or older, but
	 * since AES key wrap algorithms have introduced in openssl 1.1.0
	 * we require 1.1.0 or higher version for cluster encryption.
	 */</comment>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl 1.1.0 or higher is required for cluster encryption"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL_INIT_CRYPTO</name></cpp:ifdef>
	<comment type="block">/* Setup OpenSSL */</comment>
	<expr_stmt><expr><call><name>OPENSSL_init_crypto</name><argument_list>(<argument><expr><name>OPENSSL_INIT_LOAD_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl 1.1.0 or higher is required for cluster encryption"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ossl_encrypt_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>out_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<comment type="block">/* Ensure encryption has setup */</comment>
	<if_stmt><if>if <condition>(<expr><name>MyCipherCtx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>setup_encryption</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>MyCipherCtx</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>EVP_EncryptInit_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>,
						   <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>iv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered initialization error during encryption"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>EVP_EncryptUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>output</name></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name>out_size</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>input</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered error during encryption"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>out_size</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ossl_decrypt_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>out_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<comment type="block">/* Ensure encryption has setup */</comment>
	<if_stmt><if>if <condition>(<expr><name>MyCipherCtx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>setup_encryption</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>MyCipherCtx</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>EVP_DecryptInit_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>,
						   <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>iv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered initialization error during decryption"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>EVP_DecryptUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>output</name></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name>out_size</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>input</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered error during decryption"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>out_size</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*no cover begin*/</comment>
<function><type><name>void</name></type>
<name>ossl_derive_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>base_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
				<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>derived_key</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>derived_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL_KDF</name></cpp:ifdef>
   <decl_stmt><decl><type><name>EVP_PKEY_CTX</name> <modifier>*</modifier></type><name>pctx</name></decl>;</decl_stmt>

   <expr_stmt><expr><name>pctx</name> <operator>=</operator> <name><name>MyCipherCtx</name><operator>-&gt;</operator><name>derive_ctx</name></name></expr>;</expr_stmt>

   <if_stmt><if>if <condition>(<expr><call><name>EVP_PKEY_CTX_set1_hkdf_key</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>, <argument><expr><name>base_key</name></expr></argument>, <argument><expr><name>base_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	   <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			   <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered setting key error during key derivation"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				<operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
						   <argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

   <comment type="block">/*
	* we don't need to set salt since the input key is already present
	* as cryptographically strong.
	*/</comment>

   <if_stmt><if>if <condition>(<expr><call><name>EVP_PKEY_CTX_add1_hkdf_info</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>info</name></expr></argument>,
								   <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	   <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			   <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered setting info error during key derivation"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				<operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
						   <argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

   <comment type="block">/*
	* The 'derivedkey_size' should contain the length of the 'derivedkey'
	* buffer, if the call got successful the derived key is written to
	* 'derivedkey' and the amount of data written to 'derivedkey_size'
	*/</comment>
   <if_stmt><if>if <condition>(<expr><call><name>EVP_PKEY_derive</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>, <argument><expr><name>derived_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>derived_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	   <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			   <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered error during key derivation"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				<operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
						   <argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl 1.1.0 or higher is required for cluster encryption"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<comment type="block">/*no cover end*/</comment>

<function><type><name>void</name></type>
<name>ossl_compute_hmac</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hmac_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_size</name></decl></parameter>,
				  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hmac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>			<name>hmac_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>hmac</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>HMAC</name><argument_list>(<argument><expr><call><name>EVP_sha256</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hmac_key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>hmac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hmac_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not compute HMAC"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>hmac_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ossl_wrap_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
			  <parameter><decl><type><name>int</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<comment type="block">/* Ensure encryption has setup */</comment>
	<if_stmt><if>if <condition>(<expr><name>MyCipherCtx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>setup_encryption</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>MyCipherCtx</name><operator>-&gt;</operator><name>wrap_ctx</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>EVP_EncryptInit_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered initialization error during unwrapping key"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_CIPHER_CTX_set_key_length</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered setting key length error during wrapping key"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_EncryptUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered error during unwrapping key"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ossl_unwrap_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
				<parameter><decl><type><name>int</name></type> <name>in_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<comment type="block">/* Ensure encryption has setup */</comment>
	<if_stmt><if>if <condition>(<expr><name>MyCipherCtx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>setup_encryption</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>MyCipherCtx</name><operator>-&gt;</operator><name>unwrap_ctx</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>EVP_DecryptInit_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered initialization error during unwrapping key"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_CIPHER_CTX_set_key_length</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered setting key length error during unwrapping key"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>EVP_DecryptUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"openssl encountered error during unwrapping key"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"openssl error string: %s"</literal></expr></argument>,
							<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
