<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/storage/lmgr/polar_lock_stats.c"><comment type="block">/*----------------------------------------------------------------------------------------
 *
 * polar_lock_stats.c
 *
 *
 * Copyright (c) 2021, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *      src/backend/storage/lmgr/polar_lock_stats.c
 * ---------------------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/backendid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_lock_stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<comment type="block">/* lwlock stat summary for local backend */</comment>
<decl_stmt><decl><type><name>polar_lwlock_stat</name></type> <name>polar_lwlock_stat_local_summary</name></decl>;</decl_stmt>

<comment type="block">/* lwlock stat detail for all backends */</comment>
<decl_stmt><decl><type><name>polar_all_lwlocks_stat</name> <modifier>*</modifier></type><name>polar_lwlocks_stat_array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* regular lock stat summary for local backend */</comment>
<decl_stmt><decl><type><name>polar_regular_lock_stat</name></type> <name><name>polar_lock_stat_local_summary</name><index>[<expr><name>LOCKTAG_LAST_TYPE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/* regular lock detail for all backends */</comment>
<decl_stmt><decl><type><name>polar_all_locks_stat</name> <modifier>*</modifier></type><name>polar_locks_stat_array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_GET_LWLOCK_TRANCHE_ID</name><parameter_list>(<parameter><type><name>tranche</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(tranche &lt; POLAR_MAX_LWLOCK_TRANCHE ? tranche : 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MYBACKEND_ID_VALID</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>(MyBackendId != InvalidBackendId &amp;&amp; MyBackendId &gt;= 1 &amp;&amp; MyBackendId &lt;= MaxBackends)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MYAUX_PROC_TYPE_VALID</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(MyAuxProcType != NotAnAuxProcess)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_LOCK_STAT_BACKEND_INDEX</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>(IS_MYBACKEND_ID_VALID() ? MyBackendId - 1 : \
		(IS_MYAUX_PROC_TYPE_VALID() ? MaxBackends + MyAuxProcType : -1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_CHECK_LOCK_TYPE_AND_MODE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(type &lt;= LOCKTAG_LAST_TYPE &amp;&amp; mode &gt;= 0 &amp;&amp; mode &lt;= AccessExclusiveLock)</cpp:value></cpp:define>

<comment type="block">/*
 *  init lwlock local stat
 */</comment>
<function><type><name>void</name></type>
<name>polar_init_lwlock_local_stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>polar_lwlock_stat_local_summary</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_lwlock_stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *  init regular lock local stat
 */</comment>
<function><type><name>void</name></type>
<name>polar_init_lock_local_stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>polar_lock_stat_local_summary</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_lock_stat_local_summary</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * lwlock stat acquire count
 */</comment>
<function><type><name>void</name></type>
<name>polar_lwlock_stat_acquire</name><parameter_list>(<parameter><decl><type><name>LWLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><name>LWLockMode</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_enable_track_lock_stat</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LW_EXCLUSIVE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>polar_lwlock_stat_local_summary</name><operator>.</operator><name>ex_acquire_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> 
		<expr_stmt><expr><name><name>polar_lwlock_stat_local_summary</name><operator>.</operator><name>sh_acquire_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>polar_lwlocks_stat_array</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>trancheid</name> <init>= <expr><call><name>POLAR_GET_LWLOCK_TRANCHE_ID</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>tranche</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>POLAR_LOCK_STAT_BACKEND_INDEX</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LW_EXCLUSIVE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>polar_lwlocks_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>lwlocks</name><index>[<expr><name>trancheid</name></expr>]</index></name><operator>.</operator><name>ex_acquire_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>polar_lwlocks_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>lwlocks</name><index>[<expr><name>trancheid</name></expr>]</index></name><operator>.</operator><name>sh_acquire_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * lwlock stat block count
 */</comment>
<function><type><name>void</name></type>
<name>polar_lwlock_stat_block</name><parameter_list>(<parameter><decl><type><name>LWLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_enable_track_lock_stat</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>polar_lwlock_stat_local_summary</name><operator>.</operator><name>block_count</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>polar_lwlocks_stat_array</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>trancheid</name> <init>= <expr><call><name>POLAR_GET_LWLOCK_TRANCHE_ID</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>tranche</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>POLAR_LOCK_STAT_BACKEND_INDEX</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>polar_lwlocks_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>lwlocks</name><index>[<expr><name>trancheid</name></expr>]</index></name><operator>.</operator><name>block_count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * lwlock stat record time
 */</comment>
<function><type><name>void</name></type>
<name>polar_lwlock_stat_record_time</name><parameter_list>(<parameter><decl><type><name>LWLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><name>instr_time</name> <modifier>*</modifier></type><name>start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>polar_enable_track_lock_stat</name> <operator>&amp;&amp;</operator> <name>polar_enable_track_lock_timing</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>INSTR_TIME_IS_ZERO</name><argument_list>(<argument><expr><operator>*</operator><name>start</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
		<decl_stmt><decl><type><name>instr_time</name></type> <name>end</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type> <name>diff</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><operator>*</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>polar_lwlock_stat_local_summary</name><operator>.</operator><name>wait_time</name></name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>polar_lwlocks_stat_array</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>trancheid</name> <init>= <expr><call><name>POLAR_GET_LWLOCK_TRANCHE_ID</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>tranche</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>POLAR_LOCK_STAT_BACKEND_INDEX</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return;</return></block_content></block></if></if_stmt>
			
			<expr_stmt><expr><name><name>polar_lwlocks_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>lwlocks</name><index>[<expr><name>trancheid</name></expr>]</index></name><operator>.</operator><name>wait_time</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * regular lock stat lock count
 */</comment>
<function><type><name>void</name></type>
<name>polar_lock_stat_lock</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_enable_track_lock_stat</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>POLAR_CHECK_LOCK_TYPE_AND_MODE</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>polar_lock_stat_local_summary</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>lock_count</name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>polar_locks_stat_array</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>POLAR_LOCK_STAT_BACKEND_INDEX</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>polar_locks_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>detail</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>mode</name></expr>]</index></name><operator>.</operator><name>lock_count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * regular lock stat block count
 */</comment>
<function><type><name>void</name></type>
<name>polar_lock_stat_block</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_enable_track_lock_stat</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>POLAR_CHECK_LOCK_TYPE_AND_MODE</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>polar_lock_stat_local_summary</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>block_count</name><operator>++</operator></expr>;</expr_stmt>
		
	<if_stmt><if>if <condition>(<expr><name>polar_locks_stat_array</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>POLAR_LOCK_STAT_BACKEND_INDEX</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>polar_locks_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>detail</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>mode</name></expr>]</index></name><operator>.</operator><name>block_count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * regular lock stat fastpath count
 */</comment>
<function><type><name>void</name></type> 
<name>polar_lock_stat_fastpath</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_enable_track_lock_stat</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>POLAR_CHECK_LOCK_TYPE_AND_MODE</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>polar_lock_stat_local_summary</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>fastpath_count</name><operator>++</operator></expr>;</expr_stmt>
		
	<if_stmt><if>if <condition>(<expr><name>polar_locks_stat_array</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>POLAR_LOCK_STAT_BACKEND_INDEX</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>polar_locks_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>detail</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>mode</name></expr>]</index></name><operator>.</operator><name>fastpath_count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * regular lock stat record time
 */</comment>
<function><type><name>void</name></type>
<name>polar_lock_stat_record_time</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>instr_time</name> <modifier>*</modifier></type><name>start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>polar_enable_track_lock_stat</name> <operator>&amp;&amp;</operator> <name>polar_enable_track_lock_timing</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>POLAR_CHECK_LOCK_TYPE_AND_MODE</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>INSTR_TIME_IS_ZERO</name><argument_list>(<argument><expr><operator>*</operator><name>start</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>instr_time</name></type> <name>end</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type> <name>diff</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><operator>*</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>polar_lock_stat_local_summary</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>wait_time</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>polar_locks_stat_array</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>POLAR_LOCK_STAT_BACKEND_INDEX</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>polar_locks_stat_array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>detail</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>mode</name></expr>]</index></name><operator>.</operator><name>wait_time</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function></unit>
