<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/storage/buffer/polar_xlogbuf.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_xlogbuf.c
 *	  xlog buffer manager.
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * IDENTIFICATION
 *	  src/backend/storage/buffer/polar_xlogbuf.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_xlogbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>polar_xlog_page_buffers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>polar_xlog_buffer_ctl_t</name></type> <name>polar_xlog_buffer_ctl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>polar_init_xlog_buffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> 	<name>found</name></decl>,
			<decl><type ref="prev"/><name>foundDesc</name></decl>,
			<decl><type ref="prev"/><name>foundBlock</name></decl>,
			<decl><type ref="prev"/><name>foundLock</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Size</name></type>		<name>block_count</name> <init>= <expr><operator>(</operator><name>Size</name><operator>)</operator><operator>(</operator><name>polar_xlog_page_buffers</name> <operator>*</operator> <literal type="number">1024</literal> <operator>/</operator> <operator>(</operator><name>XLOG_BLCKSZ</name> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>polar_xlog_buffer_ctl</name> <operator>=</operator> <operator>(</operator><name>polar_xlog_buffer_ctl_t</name><operator>)</operator>
			<call><name>ShmemInitStruct</name><argument_list>(
					<argument><expr><literal type="string">"XLog Block Buffer ctl"</literal></expr></argument>, 
					<argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_xlog_buffer_ctl_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, 
					<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>polar_xlog_buffer_ctl</name><operator>-&gt;</operator><name>buffer_descriptors</name></name> <operator>=</operator> <operator>(</operator><name>polar_xlog_buffer_desc_padded</name><operator>*</operator><operator>)</operator>
			<call><name>ShmemInitStruct</name><argument_list>(
					<argument><expr><literal type="string">"XLog Block Buffer Descriptor"</literal></expr></argument>,
					<argument><expr><name>block_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_xlog_buffer_desc_padded</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					<argument><expr><operator>&amp;</operator><name>foundDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_xlog_buffer_ctl</name><operator>-&gt;</operator><name>buffers</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator>
			<call><name>ShmemInitStruct</name><argument_list>(
					<argument><expr><literal type="string">"XLog Block Buffer"</literal></expr></argument>,
					<argument><expr><name>block_count</name> <operator>*</operator> <name>XLOG_BLCKSZ</name></expr></argument>,
					<argument><expr><operator>&amp;</operator><name>foundBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><name><name>polar_xlog_buffer_ctl</name><operator>-&gt;</operator><name>buffer_lock_array</name></name> <operator>=</operator> <operator>(</operator><name>LWLockMinimallyPadded</name> <operator>*</operator><operator>)</operator>
			<call><name>ShmemInitStruct</name><argument_list>(
					<argument><expr><literal type="string">"XLog Block Buffer Lock"</literal></expr></argument>,
					<argument><expr><name>block_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LWLockMinimallyPadded</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					<argument><expr><operator>&amp;</operator><name>foundLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>foundDesc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>foundBlock</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>foundLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name>LWTRANCHE_XLOG_BUFFER_CONTENT</name></expr></argument>, <argument><expr><literal type="string">"xlog_buffer_content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>polar_xlog_buffer_desc</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>polar_get_xlog_buffer_desc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>end_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><call><name>polar_xlog_buffer_desc_get_lock</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LWTRANCHE_XLOG_BUFFER_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name> <operator>&amp;&amp;</operator> <name>foundDesc</name> <operator>&amp;&amp;</operator> <name>foundBlock</name> <operator>&amp;&amp;</operator> <name>foundLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Size</name></type>
<name>polar_xlog_buffer_shmem_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>	<name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>	<name>block_count</name> <init>= <expr><operator>(</operator><name>Size</name><operator>)</operator><operator>(</operator><name>polar_xlog_page_buffers</name> <operator>*</operator> <literal type="number">1024</literal> <operator>/</operator> <operator>(</operator><name>XLOG_BLCKSZ</name> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="block">/* size of xlog buffer ctl */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_xlog_buffer_ctl_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* size of xlog block buffer descriptor */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>block_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_xlog_buffer_desc_padded</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* to allow aligning the above */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>PG_CACHE_LINE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* size of xlog buffer blocks */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>block_count</name></expr></argument>, <argument><expr><name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* size of xlog buffer lock */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>block_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LWLockMinimallyPadded</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* to allow aligning the above */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>PG_CACHE_LINE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Lookup the buffer page using lsn.
 *
 * buf_id will be set when buffer matched or current buffer should be evicted.
 * When buffer should be evicted, buf_id will be set the id of evicted buffer, and because requested page
 * is not matched, so return false.
 *
 * If buffer is matched, return true, otherwise return false.
 */</comment>
<function><type><name>bool</name></type>
<name>polar_xlog_buffer_lookup</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>doEvict</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>doCount</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>buf_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>uint64</name></type> <name>total_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>uint64</name></type> <name>hit_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>uint64</name></type> <name>evict_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>uint64</name></type> <name>direct_io_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>polar_xlog_buffer_desc</name>  <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_xlog_offset_aligned</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Log hit ratio every 1000w page lookup */</comment>
	<if_stmt><if>if <condition>(<expr><name>total_count</name> <operator>%</operator> <literal type="number">10000000</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>total_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"XLog Buffer Hit Ratio: hit_count=%ld, evict=%ld, direct_io=%ld, total_count=%ld, "</literal>
					<literal type="string">"hit_ratio=%f, evict_ratio=%f, direct_io_ratio=%f"</literal></expr></argument>,
					<argument><expr><name>hit_count</name></expr></argument>, <argument><expr><name>evict_count</name></expr></argument>, <argument><expr><name>direct_io_count</name></expr></argument>, <argument><expr><name>total_count</name></expr></argument>,
					<argument><expr><name>hit_count</name> <operator>*</operator> <literal type="number">1.0</literal> <operator>/</operator><name>total_count</name></expr></argument>, <argument><expr><name>evict_count</name> <operator>*</operator> <literal type="number">1.0</literal> <operator>/</operator><name>total_count</name></expr></argument>, <argument><expr><name>direct_io_count</name> <operator>*</operator> <literal type="number">1.0</literal> <operator>/</operator><name>total_count</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>doCount</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>total_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>buf_id</name> <operator>=</operator> <call><name>polar_get_xlog_buffer_id</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>*</operator><name>buf_id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>polar_get_xlog_buffer_desc</name><argument_list>(<argument><expr><operator>*</operator><name>buf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Obtain shared lock to check meta info */</comment>
	<expr_stmt><expr><call><name>polar_xlog_buffer_lock</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>==</operator> <name>lsn</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>end_lsn</name></name> <operator>&gt;=</operator> <operator>(</operator><name>lsn</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>doCount</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>hit_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><name>doEvict</name> <operator>||</operator> <operator>!</operator><call><name>polar_xlog_buffer_should_evict</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_xlog_buffer_unlock</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf_id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>doCount</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>direct_io_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>polar_xlog_buffer_unlock</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_xlog_buffer_lock</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>=</operator> <name>lsn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>end_lsn</name></name> <operator>=</operator> <name>lsn</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>doCount</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>evict_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_xlog_buffer_lock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>buf_id</name></decl></parameter>, <parameter><decl><type><name>LWLockMode</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>polar_xlog_buffer_desc_get_lock</name><argument_list>(<argument><expr><call><name>polar_get_xlog_buffer_desc</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_xlog_buffer_unlock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>buf_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>polar_xlog_buffer_desc_get_lock</name><argument_list>(<argument><expr><call><name>polar_get_xlog_buffer_desc</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Update xlog buffer page meta.
 *
 * It will update the end_lsn of the page containing this lsn to lsn.
 */</comment>
<function><type><name>void</name></type>
<name>polar_xlog_buffer_update</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>		<name>page_off</name> <init>= <expr><name>lsn</name> <operator>-</operator> <operator>(</operator><name>lsn</name> <operator>%</operator> <name>XLOG_BLCKSZ</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>buf_id</name> <init>= <expr><call><name>polar_get_xlog_buffer_id</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_xlog_buffer_desc</name>		<modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>buf_id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>polar_get_xlog_buffer_desc</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_xlog_buffer_lock</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* 
	 * Ensure page buffer the expected one. 
	 * While stream replication broken, xlog page may be read by twophase
	 * related logic. After startup replay all xlog at local storage, it will
	 * invalidation xlog buffer data related to last record. In some situation,
	 * this invalidation operation may enlarge xlog buffer size at page without
	 * more data filled, so it may cause zero data being read by other twophase
	 * related operation which will print ERROR log when cannot read record.
	 * So we add the check here to ensure updated lsn not larger than original
	 * buffer meta info, because this update func is only used while meet invalid
	 * xlog record.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>==</operator> <name>page_off</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>end_lsn</name></name> <operator>&gt;</operator> <name>lsn</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>end_lsn</name></name> <operator>=</operator> <name>lsn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>polar_xlog_buffer_unlock</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Remove page from xlog buffer.
 *
 * If buffer is io-progress, it do nothing.
 */</comment>
<function><type><name>void</name></type>
<name>polar_xlog_buffer_remove</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>		<name>page_off</name> <init>= <expr><name>lsn</name> <operator>-</operator> <operator>(</operator><name>lsn</name> <operator>%</operator> <name>XLOG_BLCKSZ</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>buf_id</name> <init>= <expr><call><name>polar_get_xlog_buffer_id</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_xlog_buffer_desc</name>		<modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>buf_id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>polar_get_xlog_buffer_desc</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_xlog_buffer_lock</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ensure page buffer the expected one */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>==</operator> <name>page_off</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>end_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>polar_xlog_buffer_unlock</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Judge whether evict the buffer page from desc or not.
 *
 * Caller should hold the desc lock.
 *
 * For now, if requested page is older than buffed page, it won't evict buffer.
 */</comment>
<function><type><name>bool</name></type>
<name>polar_xlog_buffer_should_evict</name><parameter_list>(<parameter><decl><type><name>polar_xlog_buffer_desc</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If buffer valid size is smaller than current data, evict it.  */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>end_lsn</name></name> <operator>&gt;=</operator> <name>lsn</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Reset all xlog buffer.
 */</comment>
<function><type><name>void</name></type>
<name>polar_xlog_buffer_reset_all_buffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Size</name></type>    <name>block_count</name> <init>= <expr><operator>(</operator><name>Size</name><operator>)</operator><operator>(</operator><name>polar_xlog_page_buffers</name> <operator>*</operator> <literal type="number">1024</literal> <operator>/</operator> <operator>(</operator><name>XLOG_BLCKSZ</name> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>buf_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>polar_xlog_buffer_desc</name>  <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_enable_xlog_buffer</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>buf_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>buf_id</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>buf_id</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>polar_get_xlog_buffer_desc</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>polar_xlog_buffer_lock</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>end_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>polar_xlog_buffer_unlock</name><argument_list>(<argument><expr><name>buf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

</unit>
