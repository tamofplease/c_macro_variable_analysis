<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/storage/buffer/polar_flushlist.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_flushlist.c
 *	  routines for managing the buffer pool's flushlist.
 *
 * Copyright (c) 2021, Alibaba Group Holding Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * IDENTIFICATION
 *	  src/backend/storage/buffer/polar_flushlist.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_logindex_redo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_flushlist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>buffer_not_in_flush_list</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>(buf-&gt;flush_prev == POLAR_FLUSHNEXT_NOT_IN_LIST &amp;&amp; buf-&gt;flush_next == POLAR_FLUSHNEXT_NOT_IN_LIST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>current_pos_is_unavailable</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>(polar_flush_list_ctl-&gt;current_pos == POLAR_FLUSHNEXT_NOT_IN_LIST)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>FlushListControl</name> <modifier>*</modifier></type><name>polar_flush_list_ctl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>XLogRecPtr</name></type> <name>GetXLogInsertRecPtr</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>polar_in_replica_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>remove_one_buffer</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>append_one_buffer</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * polar_flush_list_ctl_shmem_size
 *
 * Estimate the size of shared memory used by the flushlist-related structure.
 */</comment>
<function><type><name>Size</name></type>
<name>polar_flush_list_ctl_shmem_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>        <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_flush_list_enabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Size of the shared flushlist control block */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FlushListControl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * polar_init_flush_list_ctl -- initialize the flushlist control
 */</comment>
<function><type><name>void</name></type>
<name>polar_init_flush_list_ctl</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>init</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_flush_list_enabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Get or create the shared memory for flushlist control block */</comment>
	<expr_stmt><expr><name>polar_flush_list_ctl</name> <operator>=</operator> <operator>(</operator><name>FlushListControl</name> <operator>*</operator><operator>)</operator>
						   <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"Flushlist Control Status"</literal></expr></argument>,
										   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FlushListControl</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Only done once, usually in postmaster */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>flushlist_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>first_flush_buffer</name></name> <operator>=</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>last_flush_buffer</name></name>  <operator>=</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>current_pos</name></name> <operator>=</operator> <name>POLAR_FLUSHNEXT_NOT_IN_LIST</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>latest_flush_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>insert</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>remove</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>find</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>batch_read</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>cbuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * polar_get_batch_flush_buffer
 *
 * Get a batch of buffers from flushlist and do not remove it, FlushBuffer will
 * remove them from flushlist.
 */</comment>
<function><type><name>int</name></type>
<name>polar_get_batch_flush_buffer</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>batch_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>         <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>buffer_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>flush_count</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_flush_list_enabled</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>flushlist_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_flush_list_is_empty</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>flushlist_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>i</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>flush_count</name> <operator>=</operator> <name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>latest_flush_count</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>current_pos_is_unavailable</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>current_pos</name></name> <operator>=</operator>
			<name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>first_flush_buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>buffer_id</name> <operator>=</operator> <name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>current_pos</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>polar_bgwriter_batch_size_flushlist</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>buffer_id</name> <operator>!=</operator> <name>POLAR_FLUSHNEXT_NOT_IN_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>buffer_id</name> <operator>==</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>batch_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>buffer_id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buffer_id</name> <operator>=</operator> <call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>buffer_id</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flush_next</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * If latest flush count greater than polar_bgwriter_max_batch_size,
	 * revert it to first buffer.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>buffer_id</name> <operator>==</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name> <operator>||</operator>
		<operator>(</operator><name>flush_count</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&gt;</operator> <name>polar_bgwriter_max_batch_size</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>current_pos</name></name> <operator>=</operator> <name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>first_flush_buffer</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>latest_flush_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>current_pos</name></name> <operator>=</operator> <name>buffer_id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>latest_flush_count</name></name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>flushlist_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>batch_read</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * polar_remove_buffer_from_flush_list
 *
 * If the buffer has been flushed, remove it from flushlist.
 */</comment>
<function><type><name>void</name></type>
<name>polar_remove_buffer_from_flush_list</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_flush_list_enabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>flushlist_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_buffer_set_oldest_lsn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remove_one_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>flushlist_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_atomic_fetch_sub_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>remove</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * polar_put_buffer_to_flush_list
 *
 * When buffer is modified for the first time, add it to flushlist. If lsn is
 * invalid, we will set a fake lsn. Caller should have required the buffer
 * content exclusive lock already.
 */</comment>
<function><type><name>void</name></type>
<name>polar_put_buffer_to_flush_list</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
							   <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>flushlist_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The buffer must be not in flushlist */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>buffer_not_in_flush_list</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Allocate the current insert lsn as a fake oldest lsn */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_buffer_set_fake_oldest_lsn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_buffer_set_oldest_lsn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>append_one_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>flushlist_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Outside the spin lock to update statistic info. */</comment>
	<expr_stmt><expr><call><name>pg_atomic_fetch_add_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>insert</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * polar_adjust_position_in_flush_list
 *
 * Adjust the position of buffer to keep the flushlist order, only set a fake
 * oldest lsn.
 */</comment>
<function><type><name>void</name></type>
<name>polar_adjust_position_in_flush_list</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>flushlist_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Buffer must be in flushlist */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>buffer_not_in_flush_list</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_buffer_set_fake_oldest_lsn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If it is the last one, its oldest lsn is the greatest, so do not need
	 * to adjust its position.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>flush_next</name></name> <operator>!=</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>flush_next</name></name> <operator>!=</operator> <name>POLAR_FLUSHNEXT_NOT_IN_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Not the tail, remove and append it into flushlist */</comment>
		<expr_stmt><expr><call><name>remove_one_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>append_one_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>flushlist_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>cbuf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Remove one buffer from flushlist, caller should already acquired the
 * flushlist lock.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_one_buffer</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>         <name>prev_flush_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>next_flush_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>prev_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>next_buf</name></decl>;</decl_stmt>

	<comment type="block">/* The buffer must be in flushlist */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>buffer_not_in_flush_list</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Flushlist must be not empty */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>polar_flush_list_is_empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>prev_flush_id</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>flush_prev</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>next_flush_id</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>flush_next</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>polar_enable_debug</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>POLAR_LOG_BUFFER_DESC_WITH_FLUSHLIST</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev_flush_id</name> <operator>==</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name> <operator>&amp;&amp;</operator>
		<name>next_flush_id</name> <operator>==</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Only this buffer in flushlist */</comment>
		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>first_flush_buffer</name></name> <operator>=</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>last_flush_buffer</name></name> <operator>=</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>prev_flush_id</name> <operator>==</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name> <operator>&amp;&amp;</operator>
		<name>next_flush_id</name> <operator>!=</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* First one, and has next buffer */</comment>
		<expr_stmt><expr><name>next_buf</name> <operator>=</operator> <call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>next_flush_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>next_buf</name><operator>-&gt;</operator><name>flush_prev</name></name> <operator>=</operator> <name>prev_flush_id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>first_flush_buffer</name></name> <operator>=</operator> <name>next_flush_id</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>prev_flush_id</name> <operator>!=</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name> <operator>&amp;&amp;</operator>
		<name>next_flush_id</name> <operator>==</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Last one, and has prev buffer */</comment>
		<expr_stmt><expr><name>prev_buf</name> <operator>=</operator> <call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>prev_flush_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prev_buf</name><operator>-&gt;</operator><name>flush_next</name></name> <operator>=</operator> <name>next_flush_id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>last_flush_buffer</name></name> <operator>=</operator> <name>prev_flush_id</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Middle */</comment>
		<expr_stmt><expr><name>next_buf</name> <operator>=</operator> <call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>next_flush_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev_buf</name> <operator>=</operator> <call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>prev_flush_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prev_buf</name><operator>-&gt;</operator><name>flush_next</name></name> <operator>=</operator> <name>next_flush_id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>next_buf</name><operator>-&gt;</operator><name>flush_prev</name></name> <operator>=</operator> <name>prev_flush_id</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name> <operator>==</operator> <name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>current_pos</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>next_flush_id</name> <operator>==</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>current_pos</name></name> <operator>=</operator> <name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>first_flush_buffer</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>current_pos</name></name> <operator>=</operator> <name>next_flush_id</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Remove buffer from flushlist */</comment>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flush_next</name></name> <operator>=</operator> <name>POLAR_FLUSHNEXT_NOT_IN_LIST</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flush_prev</name></name> <operator>=</operator> <name>POLAR_FLUSHNEXT_NOT_IN_LIST</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Append one buffer to flushlist, caller should already acquired the
 * flushlist lock.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_one_buffer</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_enable_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>POLAR_LOG_BUFFER_DESC_WITH_FLUSHLIST</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>polar_flush_list_is_empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flush_next</name></name> <operator>=</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flush_prev</name></name> <operator>=</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>first_flush_buffer</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>last_flush_buffer</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>last_flush_buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>tail</name><operator>-&gt;</operator><name>oldest_lsn</name></name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>oldest_lsn</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Append buffer with a small oldest lsn than last buffer in flush list."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tail</name><operator>-&gt;</operator><name>flush_next</name></name> <operator>==</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flush_prev</name></name> <operator>=</operator> <name><name>tail</name><operator>-&gt;</operator><name>buf_id</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flush_next</name></name> <operator>=</operator> <name><name>tail</name><operator>-&gt;</operator><name>flush_next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>flush_next</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name></expr>;</expr_stmt>

		<comment type="block">/* Append at the tail */</comment>
		<expr_stmt><expr><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>last_flush_buffer</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function></unit>
