<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/storage/buffer/polar_pbp.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_pbp.c
 *	  polardb persisted buffer pool(PBP) manager.
 *
 * Copyright (c) 2021, Alibaba Group Holding Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * IDENTIFICATION
 *	  src/backend/storage/buffer/polar_pbp.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash_xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_control.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_copybuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_flushlist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_pbp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_shmem.h"</cpp:file></cpp:include>

<comment type="block">/* used for separate buffer pool checking */</comment>
<decl_stmt><decl><type><name>polar_buffer_pool_ctl_t</name> <modifier>*</modifier></type><name>polar_buffer_pool_ctl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>	<name>polar_buffer_pool_is_inited</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XLogRecPtr</name> <modifier>*</modifier></type><name>polar_buffers_lsn_array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_need_reset_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_reuse_buffer_pool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_init_buffer_pool_ctl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_reset_buffer</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>	<name>polar_reuse_buffer</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>buf_state</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_dirty</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>	<name>should_check_buffer</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * try to reused shared buffer pool
 *
 * This is called once during polar_vfs process initialization (either in the
 * postmaster, or in a standalone backend).
 */</comment>
<function><type><name>void</name></type>
<name>polar_try_reuse_buffer_pool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>	<name>need_reset_all</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>IsUnderPostmaster</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>need_reset_all</name> <operator>=</operator> <call><name>polar_need_reset_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>need_reset_all</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			 <argument><expr><literal type="string">"server cannot reuse buffer pool, start to reset it, pid=%d"</literal></expr></argument>,
			 <argument><expr><name>MyProcPid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_reset_buffer_pool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_reuse_buffer_pool</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>polar_init_buffer_pool_ctl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make sure that buffer pool is inited when ReadBuffer_common */</comment>
	<expr_stmt><expr><name>polar_buffer_pool_is_inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_need_reset_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>need_reset_all</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* If it's first time to access this memory, reset buffer pool ctl */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_shmem_reused</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>polar_buffer_pool_ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_buffer_pool_ctl_padded</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			 <argument><expr><literal type="string">"server cannot reuse buffer pool due to polar_shmem_reused is false, start to reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>need_reset_all</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>polar_enable_shared_storage_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If verify buffer pool fail, just reset all buffer pool */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>polar_is_standby</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>polar_enable_standby_pbp</name><operator>)</operator>
		<operator>||</operator> <operator>(</operator><call><name>polar_is_master</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>polar_enable_master_pbp</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>need_reset_all</name> <operator>=</operator> <operator>!</operator><call><name>polar_verify_buffer_pool_ctl</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>need_reset_all</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_reuse_buffer_pool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>num_reused</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 	<name>num_reused_dirty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
		 <argument><expr><literal type="string">"server can reuse buffer pool, start to check it, pid=%d, flush_lsn:%ld, checkpoint_lsn:%ld"</literal></expr></argument>,
		 <argument><expr><name>MyProcPid</name></expr></argument>,
		 <argument><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>last_flush_lsn</name></name></expr></argument>,
		 <argument><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>last_checkpoint_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We need to rebuild StrategyControl */</comment>
	<expr_stmt><expr><call><name>polar_strategy_set_first_free_buffer</name><argument_list>(<argument><expr><name>FREENEXT_END_OF_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Loop all buffers, victim invalid buffer */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBuffers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>buf_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,
				 <argument><expr><literal type="string">"buf_id(%d) is invalid, expected(%d) when reuse buffer pool"</literal></expr></argument>,
				 <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * NOTES: don't use LockBufHdr to get buf_state, maybe
		 * buf_header is damaged
		 */</comment>
		<expr_stmt><expr><name>buf_state</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>polar_buffer_can_be_reused</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_state</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>polar_reuse_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_reused_dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>num_reused</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_reset_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* Reset lock anymore for safety */</comment>
		<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><call><name>BufferDescriptorGetContentLock</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><name>LWTRANCHE_BUFFER_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><call><name>BufferDescriptorGetIOLock</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><name>LWTRANCHE_BUFFER_IO_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
		 <argument><expr><literal type="string">"reuse buffer pool successfully, total_buffers: %d, reused: %d, reused ratio: %.2f, reused dirty: %d"</literal></expr></argument>,
		 <argument><expr><name>NBuffers</name></expr></argument>, <argument><expr><name>num_reused</name></expr></argument>, <argument><expr><operator>(</operator><name>num_reused</name> <operator>*</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>/</operator> <name>NBuffers</name></expr></argument>, <argument><expr><name>num_reused_dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: we cannot reuse buffer in the following cases:
 * 1. buffer with invalid latest lsn
 * 2. buffer has POLAR_BUF_UNRECOVERABLE flag
 * 3. buffer has unexpected flags, eg: IO_PROGRESS, IO_ERROR...
 * 4. buffer does not has BM_VALID and BM_TAG_VALID and BM_PERMANENT
 * 5. buffer lsn is ahead of flush_lsn, maybe xlog does not flush to disk
 */</comment>
<function><type><name>bool</name></type>
<name>polar_buffer_can_be_reused</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>buf_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>buf_lsn</name></decl>;</decl_stmt>

	<comment type="block">/* Only postmaster calls this function, so don't need to lock first */</comment>
	<expr_stmt><expr><name>buf_lsn</name> <operator>=</operator> <call><name>BufferGetLSN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name>buf_lsn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>polar_flags</name></name> <operator>&amp;</operator> <name>POLAR_BUF_UNRECOVERABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf_lsn</name> <operator>&gt;</operator> <name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>last_flush_lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf_state</name> <operator>&amp;</operator> <name>BUF_FLAG_MASK</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>BM_VALID</name> <operator>|</operator> <name>BM_TAG_VALID</name> <operator>|</operator> <name>BM_PERMANENT</name> <operator>|</operator>
		<name>BM_DIRTY</name> <operator>|</operator> <name>BM_JUST_DIRTIED</name> <operator>|</operator> <name>BM_CHECKPOINT_NEEDED</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_MUST_BE_SET</name></cpp:macro> <cpp:value>(BM_VALID | BM_TAG_VALID | BM_PERMANENT)</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf_state</name> <operator>&amp;</operator> <name>FLAGS_MUST_BE_SET</name><operator>)</operator> <operator>!=</operator> <name>FLAGS_MUST_BE_SET</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_reset_buffer</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLEAR_BUFFERTAG</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>polar_redo_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* POLAR */</comment>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flush_next</name></name> <operator>=</operator> <name>POLAR_FLUSHNEXT_NOT_IN_LIST</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flush_prev</name></name> <operator>=</operator> <name>POLAR_FLUSHNEXT_NOT_IN_LIST</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>oldest_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>copy_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>recently_modified_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>polar_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>wait_backend_pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>freeNext</name></name> <operator>=</operator> <name>FREENEXT_NOT_IN_LIST</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>StrategyFreeBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_reuse_buffer</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>buf_state</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_dirty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>	<name>new_hash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>				<comment type="block">/* hash value for new_tag */</comment>
	<decl_stmt><decl><type><name>int</name></type>		<name>buf_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ControlFileData</name> <modifier>*</modifier></type><name>control_file</name> <init>= <expr><call><name>polar_get_control_file</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>buf_state</name> <operator>&amp;</operator> <operator>(</operator><name>BM_VALID</name> <operator>|</operator> <name>BM_TAG_VALID</name> <operator>|</operator> <name>BM_PERMANENT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>freeNext</name></name> <operator>==</operator> <name>FREENEXT_NOT_IN_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Determine its hash code */</comment>
	<expr_stmt><expr><name>new_hash</name> <operator>=</operator> <call><name>BufTableHashCode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* It's no need to lock partition, only one postmaster can do it */</comment>
	<expr_stmt><expr><name>buf_id</name> <operator>=</operator> <call><name>BufTableInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>new_hash</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf_id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"BufTableInsert failed when reuse buffer pool, buffer is already in hashtable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flush_next</name></name> <operator>=</operator> <name>POLAR_FLUSHNEXT_NOT_IN_LIST</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flush_prev</name></name> <operator>=</operator> <name>POLAR_FLUSHNEXT_NOT_IN_LIST</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If buffer has oldest lsn(it maybe has copy buffer), we always
	 * use checkpoint_lsn as its oldest_lsn.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><call><name>polar_buffer_get_oldest_lsn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>buf_state</name> <operator>&amp;</operator> <name>BM_DIRTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name><name>control_file</name><operator>-&gt;</operator><name>checkPoint</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_put_buffer_to_flush_list</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>control_file</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>redo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>num_dirty</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>copy_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>recently_modified_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Mark buffer is reused */</comment>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>polar_flags</name></name> <operator>=</operator> <name>POLAR_BUF_REUSED</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>polar_redo_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>wait_backend_pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Clear BM_JUST_DIRTIED and BM_CHECKPOINT_NEEDED, unused anymore */</comment>
	<expr_stmt><expr><name>buf_state</name> <operator>&amp;=</operator> <operator>(</operator><name>BM_VALID</name> <operator>|</operator> <name>BM_TAG_VALID</name> <operator>|</operator> <name>BM_PERMANENT</name> <operator>|</operator> <name>BM_DIRTY</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* Just like UnlockBufHdr, but call UnlockBufHdr here is ugly */</comment>
	<expr_stmt><expr><call><name>pg_write_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_write_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>buf_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_init_buffer_pool_ctl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ControlFileData</name> <modifier>*</modifier></type><name>control_file</name> <init>= <expr><call><name>polar_get_control_file</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>POLAR_BUFFER_POOL_CTL_VERSION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>header_magic</name></name> <operator>=</operator> <name>POLAR_BUFFER_POOL_MAGIC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>system_identifier</name></name> <operator>=</operator> <name><name>control_file</name><operator>-&gt;</operator><name>system_identifier</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>last_checkpoint_lsn</name></name> <operator>=</operator> <name><name>control_file</name><operator>-&gt;</operator><name>checkPoint</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_buffer_pool_ctl_set_node_type</name><argument_list>(<argument><expr><call><name>polar_node_type</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set the error state to true, if we successfully reuse this buffer pool,
	 * reset it to false.
	 */</comment>
	<expr_stmt><expr><call><name>polar_buffer_pool_ctl_set_error_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>nbuffers</name></name> <operator>=</operator> <name>NBuffers</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>buf_desc_size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BufferDescPadded</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>buffer_pool_ctl_shmem_size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_buffer_pool_ctl_padded</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>buffer_pool_shmem_size</name></name> <operator>=</operator> <call><name>BufferShmemSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>copy_buffer_shmem_size</name></name> <operator>=</operator> <call><name>polar_copy_buffer_shmem_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>flush_list_ctl_shmem_size</name></name> <operator>=</operator> <call><name>polar_flush_list_ctl_shmem_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>strategy_shmem_size</name></name> <operator>=</operator> <call><name>StrategyShmemSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>tail_magic</name></name> <operator>=</operator> <name>POLAR_BUFFER_POOL_MAGIC</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Init structure for checking buffer pool whether there are unexpected
 * reused buffer or not.
 */</comment>
<function><type><name>void</name></type>
<name>polar_check_buffer_pool_consistency_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> 		<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_enable_persisted_buffer_pool</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Only check buffer for startup replay process */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AmStartupProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>reachedConsistency</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_in_replica_mode</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>polar_buffers_lsn_array</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>NBuffers</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XLogRecPtr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBuffers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>buf_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>buf_state</name> <operator>=</operator> <call><name>LockBufHdr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>polar_flags</name></name> <operator>&amp;</operator> <name>POLAR_BUF_REUSED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>polar_buffers_lsn_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>BufferGetLSN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>UnlockBufHdr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * check buffer pool has unexpected reused buffer or not,
 * we call this function just enter recovery consistency status
 */</comment>
<function><type><name>void</name></type>
<name>polar_check_buffer_pool_consistency</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> 		<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_enable_persisted_buffer_pool</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Only check buffer for startup replay process */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AmStartupProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>reachedConsistency</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_in_replica_mode</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBuffers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>buf_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>buf_state</name> <operator>=</operator> <call><name>LockBufHdr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*
		 * Maybe origin buffer has been evicted from this buffer id, but don't
		 * worry, POLAR_BUF_REUSED flag will clear, we cannot go to here
		 * we treat reused buffer is invalid as following cases:
		 * 1. is MAIN_FORK
		 * 2. has POLAR_BUF_REUSED flag
		 * 3. page lsn isn't equal to the reused lsn(maybe older or ahead)
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>polar_flags</name></name> <operator>&amp;</operator> <name>POLAR_BUF_REUSED</name><operator>)</operator> <operator>&amp;&amp;</operator>
			<name><name>polar_buffers_lsn_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <call><name>BufferGetLSN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<name><name>buf</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>forkNum</name></name> <operator>==</operator> <name>MAIN_FORKNUM</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>UnlockBufHdr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>POLAR_LOG_BUFFER_TAG_INFO</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"the reused buffer is unexpected left in buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Clear vm/fsm/dirty hint buffer flag */</comment>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>polar_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>POLAR_BUF_REUSED</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>UnlockBufHdr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>polar_buffers_lsn_array</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>polar_buffers_lsn_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>polar_buffers_lsn_array</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If there are any errors before this point, the error state will not be
	 * reset to false, the persisted buffer pool will not be reuse next time.
	 */</comment>
	<expr_stmt><expr><call><name>polar_buffer_pool_ctl_reset_error_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"check buffer pool consistency successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * check reused buffer is valid or not
 */</comment>
<function><type><name>void</name></type>
<name>polar_redo_check_reused_buffer</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>, <parameter><decl><type><name>Buffer</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>buffer</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>lsn</name> <init>= <expr><name><name>record</name><operator>-&gt;</operator><name>EndRecPtr</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>polar_buffers_lsn_array</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Only check buffer for startup replay process */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AmStartupProcess</name><argument_list>()</argument_list></call> <operator>||</operator> <name>reachedConsistency</name> <operator>||</operator> <call><name>polar_in_replica_mode</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* It's no need to lock, nobody can modify POLAR_BUF_REUSED flag */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>polar_flags</name></name> <operator>&amp;</operator> <name>POLAR_BUF_REUSED</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>should_check_buffer</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name><name>polar_buffers_lsn_array</name><index>[<expr><name>buffer</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Maybe origin buffer has been evicted from this buffer id, but don't
		 * worry, POLAR_BUF_REUSED flag will clear, we cannot go to here.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>polar_buffers_lsn_array</name><index>[<expr><name>buffer</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>lsn</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>POLAR_LOG_XLOG_RECORD_INFO</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>POLAR_LOG_BUFFER_TAG_INFO</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,
				 <argument><expr><literal type="string">"reused buffer(flags:%d, lsn:%ld) is not the latest version(lsn:%ld) in buffer pool"</literal></expr></argument>,
				 <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>polar_flags</name></name></expr></argument>,
				 <argument><expr><name><name>polar_buffers_lsn_array</name><index>[<expr><name>buffer</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
				 <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * For some wal types, they register buffer, but do not set its lsn,
 * if replay this wal, it will read the buffer that lsn is less than
 * the wal lsn. For this wal, we just do not check it.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>should_check_buffer</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>	<name>info</name> <init>= <expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_HASH_DELETE</name> <operator>||</operator>
		<name>info</name> <operator>==</operator> <name>XLOG_HASH_SQUEEZE_PAGE</name> <operator>||</operator>
		<name>info</name> <operator>==</operator> <name>XLOG_HASH_MOVE_PAGE_CONTENTS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * when call LockBuffer for X lock, we mark buffer unrecoverable, maybe
 * backend dirties page meanwhile
 */</comment>
<function><type><name>void</name></type>
<name>polar_mark_buffer_unrecoverable_flag</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Only buffer lock with LW_EXCLUSIVE should set POLAR_BUF_UNRECOVERABLE flag */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LWLockHeldByMeInMode</name><argument_list>(<argument><expr><call><name>BufferDescriptorGetContentLock</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We always set/get unrecoverable flag under the content lock, so do not
	 * need the header lock.
	 */</comment>
	<expr_stmt><expr><name><name>buf_desc</name><operator>-&gt;</operator><name>polar_flags</name></name> <operator>|=</operator> <name>POLAR_BUF_UNRECOVERABLE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * when call LockBuffer for unlock, we clear unrecoverable flag
 */</comment>
<function><type><name>void</name></type>
<name>polar_clear_buffer_unrecoverable_flag</name><parameter_list>(<parameter><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>buf_desc</name><operator>-&gt;</operator><name>polar_flags</name></name> <operator>&amp;</operator> <name>POLAR_BUF_UNRECOVERABLE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
	 	 * We always set/get unrecoverable flag under the content lock, so do not
	 	 * need the header lock.
	 	 */</comment>
		<expr_stmt><expr><name><name>buf_desc</name><operator>-&gt;</operator><name>polar_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>POLAR_BUF_UNRECOVERABLE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_verify_buffer_pool_ctl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ControlFileData</name> <modifier>*</modifier></type><name>control_file</name> <init>= <expr><call><name>polar_get_control_file</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>	<name>valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolarNodeType</name></type> <name>ctl_node_type</name> <init>= <expr><call><name>polar_buffer_pool_ctl_get_node_type</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_in_replica_mode</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"replica cannot reuse buffer pool, reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>ctl_node_type</name> <operator>!=</operator> <name>polar_local_node_type</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Node type changed from %d to %d, reset buffer pool"</literal></expr></argument>,
			 <argument><expr><name>ctl_node_type</name></expr></argument>, <argument><expr><name>polar_local_node_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>polar_buffer_pool_ctl_get_error_state</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"some errors occurred in the last reuse, reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name>POLAR_BUFFER_POOL_CTL_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"PBP control struct version is changed, reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>header_magic</name></name> <operator>!=</operator> <name>POLAR_BUFFER_POOL_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"head_magic is inconsistent, reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>system_identifier</name></name> <operator>!=</operator>
		<name><name>control_file</name><operator>-&gt;</operator><name>system_identifier</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"system_identifier is inconsistent, reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>last_checkpoint_lsn</name></name> <operator>!=</operator>
		<name><name>control_file</name><operator>-&gt;</operator><name>checkPoint</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"last_checkpoint_lsn is inconsistent, reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>nbuffers</name></name> <operator>!=</operator> <name>NBuffers</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"nbuffers is inconsistent, reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>buf_desc_size</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BufferDescPadded</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"buf_desc_size is inconsistent, reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>buffer_pool_ctl_shmem_size</name></name> <operator>!=</operator>
		<sizeof>sizeof<argument_list>(<argument><expr><name>polar_buffer_pool_ctl_padded</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"buffer_pool_ctl_shmem_size is inconsistent, reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>buffer_pool_shmem_size</name></name> <operator>!=</operator> <call><name>BufferShmemSize</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"buffer_pool_shmem_size is inconsistent, reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>copy_buffer_shmem_size</name></name> <operator>!=</operator>
		<call><name>polar_copy_buffer_shmem_size</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"copy_buffer_shmem_size is inconsistent, reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>flush_list_ctl_shmem_size</name></name> <operator>!=</operator>
		<call><name>polar_flush_list_ctl_shmem_size</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"flush_list_ctl_shmem_size is inconsistent, reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>strategy_shmem_size</name></name> <operator>!=</operator> <call><name>StrategyShmemSize</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"strategy_shmem_size is inconsistent, reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>tail_magic</name></name> <operator>!=</operator> <name>POLAR_BUFFER_POOL_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"tail_magic is inconsistent, reset buffer pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>valid</name></expr>;</return>
</block_content>}</block></function>
</unit>
