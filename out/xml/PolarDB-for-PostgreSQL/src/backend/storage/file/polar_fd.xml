<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/storage/file/polar_fd.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_fd.c
 *	  Polardb Virtual file descriptor code.
 *
 * Copyright (c) 2021, Alibaba Group Holding Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *	  src/backend/storage/file/polar_fd.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_RESOURCE_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>		<comment type="block">/* for getrlimit */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/file_perm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"portability/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resowner_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_fd.h"</cpp:file></cpp:include>

<comment type="block">/* POLAR */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_datamax/polar_datamax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_io_fencing.h"</cpp:file></cpp:include>
<comment type="block">/* POLAR end */</comment>

<comment type="block">/* set mode by parsing recovery.conf */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>POLAR_REPLICA_MODE</name></cpp:macro> 	<cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>POLAR_STANDBY_MODE</name></cpp:macro>	<cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>POLAR_DATAMAX_MODE</name></cpp:macro>	<cpp:value>0x04</cpp:value></cpp:define>

<decl_stmt><decl><type><name>bool</name></type>	<name>polar_mount_pfs_readonly_mode</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>	<name>polar_openfile_with_readonly_in_replica</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>		<name>polar_vfs_switch</name> <init>= <expr><name>POLAR_VFS_SWITCH_LOCAL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Record the initial node type, it is initialized by postmaster, inherited by
 * other backends. We record this value in shared memory later.
 */</comment>
<decl_stmt><decl><type><name>PolarNodeType</name></type>	<name>polar_local_node_type</name> <init>= <expr><name>POLAR_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_tls_callback_registered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_vfs_exit_cleanup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Polar Conseusus */</comment>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>vfs_mgr</name><modifier>*</modifier></type> <name>polar_get_local_vfs_mgr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * POLAR: The virtual file interface
 * 1 The standard file interface function is used by default.
 * polar_vfs_switch = POLAR_VFS_SWITCH_LOCAL
 * 2 When a storage plugin is accessed, all io call implemented in the plugin.
 * polar_vfs_switch = POLAR_VFS_SWITCH_PLUGIN
 * 3 polar_vfs means use function in plugin to read write data which include local file or 
 * stared storage file.
 */</comment>
<decl_stmt><decl><type><name>vfs_mgr</name></type> <name><name>polar_vfs</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{
		<expr><operator>.</operator><name>vfs_env_init</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_env_destroy</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_mount</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_remount</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_open</name> <operator>=</operator> <operator>(</operator><name>vfs_open_type</name><operator>)</operator><name>open</name></expr>,
		<expr><operator>.</operator><name>vfs_creat</name> <operator>=</operator> <name>creat</name></expr>,
		<expr><operator>.</operator><name>vfs_close</name> <operator>=</operator> <name>close</name></expr>,
		<expr><operator>.</operator><name>vfs_read</name> <operator>=</operator> <name>read</name></expr>,
		<expr><operator>.</operator><name>vfs_write</name> <operator>=</operator> <name>write</name></expr>,
		<expr><operator>.</operator><name>vfs_pread</name> <operator>=</operator> <name>pread</name></expr>,
		<expr><operator>.</operator><name>vfs_pwrite</name> <operator>=</operator> <name>pwrite</name></expr>,
		<expr><operator>.</operator><name>vfs_stat</name> <operator>=</operator> <name>stat</name></expr>,
		<expr><operator>.</operator><name>vfs_fstat</name> <operator>=</operator> <name>fstat</name></expr>,
		<expr><operator>.</operator><name>vfs_lstat</name> <operator>=</operator> <name>lstat</name></expr>,
		<expr><operator>.</operator><name>vfs_lseek</name> <operator>=</operator> <name>lseek</name></expr>,
		<expr><operator>.</operator><name>vfs_lseek_cache</name> <operator>=</operator> <name>lseek</name></expr>,
		<expr><operator>.</operator><name>vfs_access</name> <operator>=</operator> <name>access</name></expr>,
		<expr><operator>.</operator><name>vfs_fsync</name> <operator>=</operator> <name>pg_fsync</name></expr>,
		<expr><operator>.</operator><name>vfs_unlink</name> <operator>=</operator> <name>unlink</name></expr>,
		<expr><operator>.</operator><name>vfs_rename</name> <operator>=</operator> <name>rename</name></expr>,
		<expr><operator>.</operator><name>vfs_fallocate</name> <operator>=</operator> <name>posix_fallocate</name></expr>,
		<expr><operator>.</operator><name>vfs_ftruncate</name> <operator>=</operator> <name>ftruncate</name></expr>,
		<expr><operator>.</operator><name>vfs_opendir</name> <operator>=</operator> <name>opendir</name></expr>,
		<expr><operator>.</operator><name>vfs_readdir</name> <operator>=</operator> <name>readdir</name></expr>,
		<expr><operator>.</operator><name>vfs_closedir</name> <operator>=</operator> <name>closedir</name></expr>,
		<expr><operator>.</operator><name>vfs_mkdir</name> <operator>=</operator> <name>mkdir</name></expr>,
		<expr><operator>.</operator><name>vfs_rmdir</name> <operator>=</operator> <name>rmdir</name></expr>,
		<expr><operator>.</operator><name>vfs_mgr_func</name> <operator>=</operator> <name>polar_get_local_vfs_mgr</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>vfs_env_init</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_env_destroy</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_mount</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_remount</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_open</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_creat</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_close</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_read</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_write</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_pread</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_pwrite</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_stat</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_fstat</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_lstat</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_lseek</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_lseek_cache</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_access</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_fsync</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_unlink</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_rename</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_fallocate</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_ftruncate</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_opendir</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_readdir</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_closedir</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_mkdir</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_rmdir</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_mgr_func</name> <operator>=</operator> <name>NULL</name></expr> 
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>inline</specifier> <name>int</name></type>	
<name>polar_env_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><name>vfs_env_init</name></expr>)</condition><block type="pseudo"><block_content>	
		<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_env_init</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_env_destroy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><name>vfs_env_destroy</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_env_destroy</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_mount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><name>vfs_mount</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_mount</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>polar_enable_io_fencing</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* POLAR: FATAL when shared storage is unavailable, or force to write RWID. */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>polar_shared_storage_is_available</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>polar_hold_shared_storage</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>POLAR_IO_FENCING_SET_STATE</name><argument_list>(<argument><expr><call><name>polar_io_fencing_get_instance</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>POLAR_IO_FENCING_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"polardb shared storage %s is unavailable."</literal></expr></argument>, <argument><expr><name>polar_datadir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_remount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><name>vfs_remount</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_remount</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>polar_enable_io_fencing</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* POLAR: FATAL when shared storage is unavailable, or force to write RWID. */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>polar_shared_storage_is_available</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>polar_hold_shared_storage</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>POLAR_IO_FENCING_SET_STATE</name><argument_list>(<argument><expr><call><name>polar_io_fencing_get_instance</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>POLAR_IO_FENCING_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"polardb shared storage %s is unavailable."</literal></expr></argument>, <argument><expr><name>polar_datadir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_creat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_creat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type>
<name>polar_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type>
<name>polar_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type>
<name>polar_pread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_pread</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type>
<name>polar_pwrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_pwrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* POLAR: Replacing stat function, check all unlink when every merge code */</comment>
<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_fstat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_lstat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_lstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>off_t</name></type>
<name>polar_lseek</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>off_t</name></type>
<name>polar_lseek_cache</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_lseek_cache</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_access</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_access</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_fsync</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_fsync</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* POLAR: Replacing unlink function, check all unlink when every merge code */</comment>
<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_unlink</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_rename</name><argument_list>(<argument><expr><name>oldfile</name></expr></argument>, <argument><expr><name>newfile</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_fallocate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_fallocate</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_ftruncate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_ftruncate</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>DIR</name>	<modifier>*</modifier></type>
<name>polar_opendir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_opendir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type>
<name>polar_readdir</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_closedir</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_mkdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* POLAR: Replacing rmdir function, check all unlink when every merge code */</comment>
<function><type><specifier>inline</specifier> <name>int</name></type>
<name>polar_rmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><call><name>vfs_rmdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>vfs_mgr</name><modifier>*</modifier></type>
<name>polar_get_local_vfs_mgr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>&amp;</operator><name><name>polar_vfs</name><index>[<expr><name>POLAR_VFS_SWITCH_LOCAL</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>vfs_mgr</name><modifier>*</modifier></type>
<name>polar_vfs_mgr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><name>vfs_mgr_func</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>polar_vfs</name><index>[<expr><name>polar_vfs_switch</name></expr>]</index></name><operator>.</operator><name>vfs_mgr_func</name><operator>)</operator><operator>(</operator><name>path</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>polar_make_pg_directory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>directoryName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>polar_mkdir</name><argument_list>(<argument><expr><name>directoryName</name></expr></argument>, <argument><expr><name>pg_dir_create_mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_copydir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fromdir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>todir</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recurse</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clean</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>skip_file_err</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>skip_open_dir_err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DIR</name>		   <modifier>*</modifier></type><name>xldir</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>xlde</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>fromfile</name><index>[<expr><name>MAXPGPATH</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>tofile</name><index>[<expr><name>MAXPGPATH</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>read_dir_err</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_mkdir</name><argument_list>(<argument><expr><name>todir</name></expr></argument>, <argument><expr><name>S_IRWXU</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>EEXIST</name> <operator>==</operator> <name>errno</name> <operator>&amp;&amp;</operator> <name>clean</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_remove_file_in_dir</name><argument_list>(<argument><expr><name>todir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create directory \"%s\": %m"</literal></expr></argument>, <argument><expr><name>todir</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * For polar store, the readdir will cache a dir entry, if the dir is deleted
	 * when readdir, it will fail. So we should retry.
	 *
	 * For create/drop database, we will have a lock during the copying time,
	 * no directories will be deleted, so do not care this failure.
	 */</comment>
<label><name>read_dir_failed</name>:</label>

	<expr_stmt><expr><name>read_dir_err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>xldir</name> <operator>=</operator> <call><name>polar_allocate_dir</name><argument_list>(<argument><expr><name>fromdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>xldir</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ENOENT</name> <operator>==</operator> <name>errno</name> <operator>&amp;&amp;</operator> <name>skip_open_dir_err</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open directory \"%s\": %m"</literal></expr></argument>, <argument><expr><name>fromdir</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return;</return>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open directory \"%s\": %m"</literal></expr></argument>, <argument><expr><name>fromdir</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>xlde</name> <operator>=</operator> <call><name>polar_read_dir_ext</name><argument_list>(<argument><expr><name>xldir</name></expr></argument>, <argument><expr><name>fromdir</name></expr></argument>, <argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_dir_err</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>fst</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>strcmp</name><argument_list>(<argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fromfile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fromfile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>fromdir</name></expr></argument>, <argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tofile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tofile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>todir</name></expr></argument>, <argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>polar_stat</name><argument_list>(<argument><expr><name>fromfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fst</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* File may be deleted after ReadDir */</comment>
			<if_stmt><if>if <condition>(<expr><name>ENOENT</name> <operator>==</operator> <name>errno</name> <operator>&amp;&amp;</operator> <name>skip_file_err</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"file \"%s\" not exist: %m"</literal></expr></argument>, <argument><expr><name>fromfile</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Skip it, continue to deal with other directories */</comment>
				<continue>continue;</continue>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not stat file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>fromfile</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>fst</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>recurse</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>polar_copydir</name><argument_list>(<argument><expr><name>fromfile</name></expr></argument>, <argument><expr><name>tofile</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>clean</name></expr></argument>, <argument><expr><name>skip_file_err</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>fst</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_copy_file</name><argument_list>(<argument><expr><name>fromfile</name></expr></argument>, <argument><expr><name>tofile</name></expr></argument>, <argument><expr><name>skip_file_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>FreeDir</name><argument_list>(<argument><expr><name>xldir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>read_dir_err</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"When readdir, some entries were deleted, retry."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>read_dir_failed</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_copy_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fromfile</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tofile</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>skiperr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>srcfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>dstfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>nbytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_BUF_SIZE</name></cpp:macro> <cpp:value>(8 * BLCKSZ)</cpp:value></cpp:define>

	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>COPY_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>srcfd</name> <operator>=</operator> <call><name>polar_open_transient_file</name><argument_list>(<argument><expr><name>fromfile</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>srcfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* File may be deleted, skip it and free buffer */</comment>
		<if_stmt><if>if <condition>(<expr><name>ENOENT</name> <operator>==</operator> <name>errno</name> <operator>&amp;&amp;</operator> <name>skiperr</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"file \"%s\" not exist: %m"</literal></expr></argument>, <argument><expr><name>fromfile</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>fromfile</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>dstfd</name> <operator>=</operator> <call><name>polar_open_transient_file</name><argument_list>(<argument><expr><name>tofile</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dstfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>EEXIST</name> <operator>==</operator> <name>errno</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>dstfd</name> <operator>=</operator> <call><name>polar_open_transient_file</name><argument_list>(<argument><expr><name>tofile</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>dstfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>tofile</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>offset</name> <operator>+=</operator> <name>nbytes</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>WAIT_EVENT_COPY_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nbytes</name> <operator>=</operator> <call><name>polar_read</name><argument_list>(<argument><expr><name>srcfd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>COPY_BUF_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* File was deleted during we read it. */</comment>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not read file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>fromfile</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>WAIT_EVENT_COPY_FILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>polar_write</name><argument_list>(<argument><expr><name>dstfd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nbytes</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSPC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not write to file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>tofile</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>polar_fsync</name><argument_list>(<argument><expr><name>dstfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>dstfd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not close file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>tofile</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>srcfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_make_file_path_level3</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>POLAR_FILE_IN_SHARED_STORAGE</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s/%s"</literal></expr></argument>, <argument><expr><name>polar_datadir</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_make_file_path_level2</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>POLAR_FILE_IN_SHARED_STORAGE</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>polar_datadir</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Extend from XLogFilePath
 */</comment>
<function><type><name>void</name></type>
<name>polar_xLog_file_path</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>TimeLineID</name></type> <name>tli</name></decl></parameter>, <parameter><decl><type><name>XLogSegNo</name></type> <name>logSegNo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wal_segsz_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* POLAR: handle datamax branch */</comment>
	<if_stmt><if>if <condition>(<expr><name>polar_is_datamax_mode</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_datamax_wal_file_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>tli</name></expr></argument>, <argument><expr><name>logSegNo</name></expr></argument>, <argument><expr><name>wal_segsz_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* POLAR end */</comment>

	<if_stmt><if>if <condition>(<expr><call><name>POLAR_FILE_IN_SHARED_STORAGE</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/"</literal> <name>XLOGDIR</name> <literal type="string">"/%08X%08X%08X"</literal></expr></argument>, <argument><expr><name>polar_datadir</name></expr></argument>, <argument><expr><name>tli</name></expr></argument>,	
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>logSegNo</name><operator>)</operator> <operator>/</operator> <call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segsz_bytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, 
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>logSegNo</name><operator>)</operator> <operator>%</operator> <call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segsz_bytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><name>XLOGDIR</name> <literal type="string">"/%08X%08X%08X"</literal></expr></argument>, <argument><expr><name>tli</name></expr></argument>,	
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>logSegNo</name><operator>)</operator> <operator>/</operator> <call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segsz_bytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, 
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>logSegNo</name><operator>)</operator> <operator>%</operator> <call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segsz_bytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Extend from TLHistoryFilePath
 */</comment>
<function><type><name>void</name></type>
<name>polar_tl_history_file_path</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>TimeLineID</name></type> <name>tli</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* POLAR: handle datamax branch */</comment>
	<if_stmt><if>if <condition>(<expr><name>polar_is_datamax_mode</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_datamax_tl_history_file_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>tli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* POLAR end */</comment>

	<if_stmt><if>if <condition>(<expr><call><name>POLAR_FILE_IN_SHARED_STORAGE</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/"</literal> <name>XLOGDIR</name> <literal type="string">"/%08X.history"</literal></expr></argument>, <argument><expr><name>polar_datadir</name></expr></argument>, <argument><expr><name>tli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><name>XLOGDIR</name> <literal type="string">"/%08X.history"</literal></expr></argument>, <argument><expr><name>tli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: StatusFilePath
 */</comment>
<function><type><name>void</name></type>
<name>polar_status_file_path</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xlog</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* POLAR: handle datamax branch */</comment>
	<if_stmt><if>if <condition>(<expr><name>polar_is_datamax_mode</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_datamax_status_file_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>xlog</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* POLAR end */</comment>

	<if_stmt><if>if <condition>(<expr><call><name>POLAR_FILE_IN_SHARED_STORAGE</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/"</literal> <name>XLOGDIR</name> <literal type="string">"/archive_status/%s%s"</literal></expr></argument>, <argument><expr><name>polar_datadir</name></expr></argument>, <argument><expr><name>xlog</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><name>XLOGDIR</name> <literal type="string">"/archive_status/%s%s"</literal></expr></argument>, <argument><expr><name>xlog</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Extend from BackupHistoryFilePath
 */</comment>
<function><type><name>void</name></type>
<name>polar_backup_history_file_path</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>TimeLineID</name></type> <name>tli</name></decl></parameter>, <parameter><decl><type><name>XLogSegNo</name></type> <name>logSegNo</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>startpoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wal_segsz_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>POLAR_FILE_IN_SHARED_STORAGE</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/"</literal> <name>XLOGDIR</name> <literal type="string">"/%08X%08X%08X.%08X.backup"</literal></expr></argument>, <argument><expr><name>polar_datadir</name></expr></argument>, <argument><expr><name>tli</name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>logSegNo</name><operator>)</operator> <operator>/</operator> <call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segsz_bytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>logSegNo</name><operator>)</operator> <operator>%</operator> <call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segsz_bytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><call><name>XLogSegmentOffset</name><argument_list>(<argument><expr><operator>(</operator><name>startpoint</name><operator>)</operator></expr></argument>, <argument><expr><name>wal_segsz_bytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><name>XLOGDIR</name> <literal type="string">"/%08X%08X%08X.%08X.backup"</literal></expr></argument>, <argument><expr><name>tli</name></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>logSegNo</name><operator>)</operator> <operator>/</operator> <call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segsz_bytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>logSegNo</name><operator>)</operator> <operator>%</operator> <call><name>XLogSegmentsPerXLogId</name><argument_list>(<argument><expr><name>wal_segsz_bytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><call><name>XLogSegmentOffset</name><argument_list>(<argument><expr><operator>(</operator><name>startpoint</name><operator>)</operator></expr></argument>, <argument><expr><name>wal_segsz_bytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_reset_vfs_switch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>polar_vfs_switch</name> <operator>=</operator> <name>POLAR_VFS_SWITCH_LOCAL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_set_vfs_function_ready</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>polar_vfs_switch</name> <operator>=</operator> <name>POLAR_VFS_SWITCH_PLUGIN</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type>
<name>polar_read_dir_ext</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elevel</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ReadDirExtended</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>elevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* POLAR: register tls cleanup function */</comment>
<function><type><name>void</name></type>
<name>polar_register_tls_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>POLAR_FILE_IN_SHARED_STORAGE</name><argument_list>()</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>polar_vfs_switch</name> <operator>==</operator> <name>POLAR_VFS_SWITCH_LOCAL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>polar_tls_callback_registered</name> <operator>==</operator> <name>false</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>on_proc_exit</name><argument_list>(<argument><expr><name>polar_vfs_exit_cleanup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>polar_tls_callback_registered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_vfs_exit_cleanup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>polar_env_destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_validate_dir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"required directory \"%s\" exists, but is not dir"</literal></expr></argument>,
							<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"creating missing directory \"%s\""</literal></expr></argument>,
					<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>polar_make_pg_directory</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create missing directory \"%s\": %m"</literal></expr></argument>,
							<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type>
<name>polar_read_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>num_read</name></decl>;</decl_stmt>                    <comment type="block">/* # of bytes fetched by last read() */</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>tot_read</name></decl>;</decl_stmt>                     <comment type="block">/* Total bytes read so far */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>                       <comment type="block">/* No pointer arithmetic on "void *" */</comment>

	<expr_stmt><expr><name>tot_read</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>num_read</name> <operator>=</operator> <call><name>polar_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>num_read</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>         <comment type="block">/* Interrupted --&gt; restart read() */</comment>
				<continue>continue;</continue></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>              <comment type="block">/* Some other error */</comment>

		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num_read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>      <comment type="block">/* EOF */</comment>
			<if_stmt><if>if <condition>(<expr><name>tot_read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>           <comment type="block">/* No bytes read; return 0 */</comment>
				<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
			<else>else<block type="pseudo"><block_content>                        <comment type="block">/* Some bytes read; add '\0' */</comment>
				<break>break;</break></block_content></block></else></if_stmt>

		</block_content>}</block></if> <else>else <block>{<block_content>                        <comment type="block">/* 'numRead' must be 1 if we get here */</comment>
			<if_stmt><if>if <condition>(<expr><name>tot_read</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>      <comment type="block">/* Discard &gt; (n - 1) bytes */</comment>
				<expr_stmt><expr><name>tot_read</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><name>tot_read</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_init_node_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>polar_local_node_type</name> <operator>=</operator> <call><name>polar_node_type_by_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PolarNodeType</name></type>
<name>polar_node_type_by_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ConfigVariable</name> <modifier>*</modifier></type><name>item</name></decl>,
	               <decl><type ref="prev"><modifier>*</modifier></type><name>head</name> <init>= <expr><name>NULL</name></expr></init></decl>,
	               <decl><type ref="prev"><modifier>*</modifier></type><name>tail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* use flag to show whether replica/standby/datamax is requested */</comment>
	<decl_stmt><decl><type><name>uint8_t</name></type> 	<name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolarNodeType</name></type> <name>polar_node_type</name> <init>= <expr><name>POLAR_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECOVERY_COMMAND_FILE</name></cpp:macro>	<cpp:value>"recovery.conf"</cpp:value></cpp:define>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>AllocateFile</name><argument_list>(<argument><expr><name>RECOVERY_COMMAND_FILE</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>polar_node_type</name> <operator>=</operator> <name>POLAR_MASTER</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"recovery.conf not exist, polardb in readwrite mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>polar_node_type</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
		        <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
			        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open recovery command file \"%s\": %m"</literal></expr></argument>,
			               <argument><expr><name>RECOVERY_COMMAND_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Since we're asking ParseConfigFp() to report errors as FATAL, there's
	 * no need to check the return value.
	 */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ParseConfigFp</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>RECOVERY_COMMAND_FILE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FATAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <name>head</name></expr>;</init> <condition><expr><name>item</name></expr>;</condition> <incr><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* set true when replica or standby mode is set */</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>polar_is_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>POLAR_ENABLE_DMA</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"polar_replica"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_bool</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>polar_is_set</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"parameter \"%s\" requires a Boolean value"</literal></expr></argument>,
					               <argument><expr><literal type="string">"polar_replica"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			        <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"polar_replica = '%s'"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>polar_is_set</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>POLAR_REPLICA_MODE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>POLAR_ENABLE_DMA</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"standby_mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_bool</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>polar_is_set</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"parameter \"%s\" requires a Boolean value"</literal></expr></argument>,
					               <argument><expr><literal type="string">"standby_mode"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			        <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"standby_mode = '%s'"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>polar_is_set</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>POLAR_STANDBY_MODE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"polar_datamax_mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"standalone"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>POLAR_DATAMAX_MODE</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"parameter \"%s\" has unknown value: %s, set polar_datamax_mode = standalone"</literal></expr></argument>,
					       <argument><expr><literal type="string">"polar_datamax_mode"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>POLAR_REPLICA_MODE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>polar_node_type</name> <operator>=</operator> <name>POLAR_REPLICA</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
		     <argument><expr><literal type="string">"read polar_replica = on, polardb in replica mode, use ro mode mount pfs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>POLAR_STANDBY_MODE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>polar_node_type</name> <operator>=</operator> <name>POLAR_STANDBY</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
		     <argument><expr><literal type="string">"read standby_mode = on, polardb in standby mode, use readwrite mode mount pfs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>POLAR_DATAMAX_MODE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>polar_node_type</name> <operator>=</operator> <name>POLAR_STANDALONE_DATAMAX</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			 <argument><expr><literal type="string">"read polar_datamax_mode=standalone config, polardb in datamax mode with independent storage."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <operator>(</operator><name>flag</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
			<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"replica, standby and datamax mode is mutually exclusive."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Exists one recovery.conf, but it is not replica or standby, it may be
	 * a PITR recovery.conf.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Exists recovery.conf, but it's not replica or standby, may be in archive recovery(PITR)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>polar_node_type</name> <operator>=</operator> <name>POLAR_MASTER</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FreeConfigVariables</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>polar_node_type</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: We provide this macro in order to remove protocol
 * from polar_datadir. The polar_datadir must conform to the format:
 * [protocol]://[path]
 *
 * Notice: The polar_datadir's protocol must be same as the polar_vfs_klind
 * inside polar_vfs.c. This macro should ONLY be used when you can't use polar_vfs
 * interface.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>polar_path_remove_protocol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vfs_path</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>POLAR_VFS_PROTOCOL_TAG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>vfs_path</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>vfs_path</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>POLAR_VFS_PROTOCOL_TAG</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>path</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: DirectIO optimization will be turned on when
 * polar_datadir use local DirectIO protocol.
 */</comment>
<function><type><name>void</name></type>
<name>assign_polar_datadir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>polar_enable_buffer_alignment</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>POLAR_VFS_PROTOCAL_LOCAL_DIO</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>POLAR_VFS_PROTOCAL_LOCAL_DIO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>polar_enable_buffer_alignment</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
