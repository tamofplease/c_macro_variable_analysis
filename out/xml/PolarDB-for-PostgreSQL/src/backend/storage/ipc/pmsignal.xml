<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/storage/ipc/pmsignal.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pmsignal.c
 *	  routines for signaling the postmaster from its child processes
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/storage/ipc/pmsignal.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/walsender.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/pmsignal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>


<comment type="block">/*
 * The postmaster is signaled by its children by sending SIGUSR1.  The
 * specific reason is communicated via flags in shared memory.  We keep
 * a boolean flag for each possible "reason", so that different reasons
 * can be signaled by different backends at the same time.  (However,
 * if the same reason is signaled more than once simultaneously, the
 * postmaster will observe it only once.)
 *
 * The flags are actually declared as "volatile sig_atomic_t" for maximum
 * portability.  This should ensure that loads and stores of the flag
 * values are atomic, allowing us to dispense with any explicit locking.
 *
 * In addition to the per-reason flags, we store a set of per-child-process
 * flags that are currently used only for detecting whether a backend has
 * exited without performing proper shutdown.  The per-child-process flags
 * have three possible states: UNUSED, ASSIGNED, ACTIVE.  An UNUSED slot is
 * available for assignment.  An ASSIGNED slot is associated with a postmaster
 * child process, but either the process has not touched shared memory yet,
 * or it has successfully cleaned up after itself.  A ACTIVE slot means the
 * process is actively using shared memory.  The slots are assigned to
 * child processes at random, and postmaster.c is responsible for tracking
 * which one goes with which PID.
 *
 * Actually there is a fourth state, WALSENDER.  This is just like ACTIVE,
 * but carries the extra information that the child is a WAL sender.
 * WAL senders too start in ACTIVE state, but switch to WALSENDER once they
 * start streaming the WAL (and they never go back to ACTIVE after that).
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PM_CHILD_UNUSED</name></cpp:macro>		<cpp:value>0</cpp:value></cpp:define>	<comment type="block">/* these values must fit in sig_atomic_t */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PM_CHILD_ASSIGNED</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PM_CHILD_ACTIVE</name></cpp:macro>		<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PM_CHILD_WALSENDER</name></cpp:macro>	<cpp:value>3</cpp:value></cpp:define>

<comment type="block">/* "typedef struct PMSignalData PMSignalData" appears in pmsignal.h */</comment>
<struct>struct <name>PMSignalData</name>
<block>{
	<comment type="block">/* per-reason flags */</comment>
	<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name><name>PMSignalFlags</name><index>[<expr><name>NUM_PMSIGNALS</name></expr>]</index></name></decl>;</decl_stmt>
	<comment type="block">/* per-child-process flags */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>num_child_flags</name></decl>;</decl_stmt>	<comment type="block">/* # of entries in PMChildFlags[] */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>next_child_flag</name></decl>;</decl_stmt>	<comment type="block">/* next slot to try to assign */</comment>
	<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name><name>PMChildFlags</name><index>[<expr><name>FLEXIBLE_ARRAY_MEMBER</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>NON_EXEC_STATIC</name> <specifier>volatile</specifier> <name>PMSignalData</name> <modifier>*</modifier></type><name>PMSignalState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * PMSignalShmemSize
 *		Compute space needed for pmsignal.c's shared memory
 */</comment>
<function><type><name>Size</name></type>
<name>PMSignalShmemSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>PMSignalData</name></expr></argument>, <argument><expr><name>PMChildFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><call><name>MaxLivePostmasterChildren</name><argument_list>()</argument_list></call></expr></argument>,
								   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig_atomic_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PMSignalShmemInit - initialize during shared-memory creation
 */</comment>
<function><type><name>void</name></type>
<name>PMSignalShmemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>PMSignalState</name> <operator>=</operator> <operator>(</operator><name>PMSignalData</name> <operator>*</operator><operator>)</operator>
		<call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"PMSignalState"</literal></expr></argument>, <argument><expr><call><name>PMSignalShmemSize</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>PMSignalState</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>PMSignalShmemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>num_child_flags</name></name> <operator>=</operator> <call><name>MaxLivePostmasterChildren</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SendPostmasterSignal - signal the postmaster from a child process
 */</comment>
<function><type><name>void</name></type>
<name>SendPostmasterSignal</name><parameter_list>(<parameter><decl><type><name>PMSignalReason</name></type> <name>reason</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If called in a standalone backend, do nothing */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<comment type="block">/* Atomically set the proper flag */</comment>
	<expr_stmt><expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>PMSignalFlags</name><index>[<expr><name>reason</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<comment type="block">/* Send signal to postmaster */</comment>
	<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>PostmasterPid</name></expr></argument>, <argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * CheckPostmasterSignal - check to see if a particular reason has been
 * signaled, and clear the signal flag.  Should be called by postmaster
 * after receiving SIGUSR1.
 */</comment>
<function><type><name>bool</name></type>
<name>CheckPostmasterSignal</name><parameter_list>(<parameter><decl><type><name>PMSignalReason</name></type> <name>reason</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Careful here --- don't clear flag if we haven't seen it set */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>PMSignalFlags</name><index>[<expr><name>reason</name></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>PMSignalFlags</name><index>[<expr><name>reason</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * AssignPostmasterChildSlot - select an unused slot for a new postmaster
 * child process, and set its state to ASSIGNED.  Returns a slot number
 * (one to N).
 *
 * Only the postmaster is allowed to execute this routine, so we need no
 * special locking.
 */</comment>
<function><type><name>int</name></type>
<name>AssignPostmasterChildSlot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>slot</name> <init>= <expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>next_child_flag</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>n</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Scan for a free slot.  We track the last slot assigned so as not to
	 * waste time repeatedly rescanning low-numbered slots.
	 */</comment>
	<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>PMSignalState</name><operator>-&gt;</operator><name>num_child_flags</name></name></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>--</operator><name>slot</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>PMSignalState</name><operator>-&gt;</operator><name>num_child_flags</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>PMChildFlags</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>==</operator> <name>PM_CHILD_UNUSED</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>PMChildFlags</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>PM_CHILD_ASSIGNED</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>next_child_flag</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
			<return>return <expr><name>slot</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Out of slots ... should never happen, else postmaster.c messed up */</comment>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"no free slots in PMChildFlags array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>					<comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * ReleasePostmasterChildSlot - release a slot after death of a postmaster
 * child process.  This must be called in the postmaster process.
 *
 * Returns true if the slot had been in ASSIGNED state (the expected case),
 * false otherwise (implying that the child failed to clean itself up).
 */</comment>
<function><type><name>bool</name></type>
<name>ReleasePostmasterChildSlot</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>slot</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>slot</name> <operator>&lt;=</operator> <name><name>PMSignalState</name><operator>-&gt;</operator><name>num_child_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>slot</name><operator>--</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Note: the slot state might already be unused, because the logic in
	 * postmaster.c is such that this might get called twice when a child
	 * crashes.  So we don't try to Assert anything about the state.
	 */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name><name>PMSignalState</name><operator>-&gt;</operator><name>PMChildFlags</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>==</operator> <name>PM_CHILD_ASSIGNED</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>PMChildFlags</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>PM_CHILD_UNUSED</name></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * IsPostmasterChildWalSender - check if given slot is in use by a
 * walsender process.
 */</comment>
<function><type><name>bool</name></type>
<name>IsPostmasterChildWalSender</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>slot</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>slot</name> <operator>&lt;=</operator> <name><name>PMSignalState</name><operator>-&gt;</operator><name>num_child_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>slot</name><operator>--</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>PMChildFlags</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>==</operator> <name>PM_CHILD_WALSENDER</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * MarkPostmasterChildActive - mark a postmaster child as about to begin
 * actively using shared memory.  This is called in the child process.
 */</comment>
<function><type><name>void</name></type>
<name>MarkPostmasterChildActive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>slot</name> <init>= <expr><name>MyPMChildSlot</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>slot</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>slot</name> <operator>&lt;=</operator> <name><name>PMSignalState</name><operator>-&gt;</operator><name>num_child_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>slot</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>PMChildFlags</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>==</operator> <name>PM_CHILD_ASSIGNED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>PMChildFlags</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>PM_CHILD_ACTIVE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * MarkPostmasterChildWalSender - mark a postmaster child as a WAL sender
 * process.  This is called in the child process, sometime after marking the
 * child as active.
 */</comment>
<function><type><name>void</name></type>
<name>MarkPostmasterChildWalSender</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>slot</name> <init>= <expr><name>MyPMChildSlot</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>am_walsender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>slot</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>slot</name> <operator>&lt;=</operator> <name><name>PMSignalState</name><operator>-&gt;</operator><name>num_child_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>slot</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>PMChildFlags</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>==</operator> <name>PM_CHILD_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>PMChildFlags</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>PM_CHILD_WALSENDER</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * MarkPostmasterChildInactive - mark a postmaster child as done using
 * shared memory.  This is called in the child process.
 */</comment>
<function><type><name>void</name></type>
<name>MarkPostmasterChildInactive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>slot</name> <init>= <expr><name>MyPMChildSlot</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>slot</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>slot</name> <operator>&lt;=</operator> <name><name>PMSignalState</name><operator>-&gt;</operator><name>num_child_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>slot</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>PMChildFlags</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>==</operator> <name>PM_CHILD_ACTIVE</name> <operator>||</operator>
		   <name><name>PMSignalState</name><operator>-&gt;</operator><name>PMChildFlags</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>==</operator> <name>PM_CHILD_WALSENDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>PMSignalState</name><operator>-&gt;</operator><name>PMChildFlags</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>PM_CHILD_ASSIGNED</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * PostmasterIsAlive - check whether postmaster process is still alive
 */</comment>
<function><type><name>bool</name></type>
<name>PostmasterIsAlive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<decl_stmt><decl><type><name>char</name></type>		<name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>		<name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>postmaster_alive_fds</name><index>[<expr><name>POSTMASTER_FD_WATCH</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"read on postmaster death monitoring pipe failed: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"unexpected data in postmaster death monitoring pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* WIN32 */</comment>
	<return>return <expr><operator>(</operator><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>PostmasterHandle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_TIMEOUT</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WIN32 */</comment>
</block_content>}</block></function>
</unit>
