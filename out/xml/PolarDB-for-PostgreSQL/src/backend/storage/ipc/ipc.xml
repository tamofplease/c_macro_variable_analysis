<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/storage/ipc/ipc.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ipc.c
 *	  POSTGRES inter-process communication definitions.
 *
 * This file is misnamed, as it no longer has much of anything directly
 * to do with IPC.  The functionality here is concerned with managing
 * exit-time cleanup for either a postmaster or a backend.
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/storage/ipc/ipc.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PROFILE_PID_DIR</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/autovacuum.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/dsm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/tcopprot.h"</cpp:file></cpp:include>


<comment type="block">/*
 * This flag is set during proc_exit() to change ereport()'s behavior,
 * so that an ereport() from an on_proc_exit routine cannot get us out
 * of the exit procedure.  We do NOT want to go back to the idle loop...
 */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>proc_exit_inprogress</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Set when shmem_exit() is in progress.
 */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>shmem_exit_inprogress</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * This flag tracks whether we've called atexit() in the current process
 * (or in the parent postmaster).
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>atexit_callback_setup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* local functions */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>proc_exit_prepare</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* ----------------------------------------------------------------
 *						exit() handling stuff
 *
 * These functions are in generally the same spirit as atexit(),
 * but provide some additional features we need --- in particular,
 * we want to register callbacks to invoke when we are disconnecting
 * from a broken shared-memory context but not exiting the postmaster.
 *
 * Callback functions can take zero, one, or two args: the first passed
 * arg is the integer exitcode, the second is the Datum supplied when
 * the callback was registered.
 * ----------------------------------------------------------------
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ON_EXITS</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>polar_elog_hook</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>list</name></type></parameter>, <parameter><type><name>index</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>elog(LOG, "%s[%d]: %p, %lu", \
			name, index, list[index].function, list[index].arg);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>polar_check_hook</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>polar_check_hook_util(#name, name##_list, name##_index, function, arg, TRUE);</cpp:value></cpp:define>

<struct>struct <name>ONEXIT</name>
<block>{
	<decl_stmt><decl><type><name>pg_on_exit_callback</name></type> <name>function</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>arg</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ONEXIT</name></name></type> <name><name>on_proc_exit_list</name><index>[<expr><name>MAX_ON_EXITS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ONEXIT</name></name></type> <name><name>on_shmem_exit_list</name><index>[<expr><name>MAX_ON_EXITS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ONEXIT</name></name></type> <name><name>before_shmem_exit_list</name><index>[<expr><name>MAX_ON_EXITS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>on_proc_exit_index</name></decl>,
			<decl><type ref="prev"/><name>on_shmem_exit_index</name></decl>,
			<decl><type ref="prev"/><name>before_shmem_exit_index</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_check_hook_util</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hook_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ONEXIT</name></name></type> <name><name>hook_list</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hook_index</name></decl></parameter>,
		   <parameter><decl><type><name>pg_on_exit_callback</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_backtrace</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * POLAR: check hook before adding to list.
 *
 * Works in two situation:
 *  1. List overflowed: elog all hook functions and args.
 *  2. Add same hook: elog the same hook functions and args.
 * 
 * Return true when no overflow and no same hook
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_check_hook_util</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hook_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ONEXIT</name></name></type> <name><name>hook_list</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hook_index</name></decl></parameter>,
		   <parameter><decl><type><name>pg_on_exit_callback</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_backtrace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found_same</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>hook_index</name> <operator>&gt;=</operator> <name>MAX_ON_EXITS</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hook_index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_elog_hook</name><argument_list>(<argument><expr><name>hook_name</name></expr></argument>, <argument><expr><name>hook_list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: %p, %lu"</literal></expr></argument>, <argument><expr><name>hook_name</name></expr></argument>, <argument><expr><name>hook_index</name></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"out of %s slots"</literal></expr></argument>, <argument><expr><name>hook_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hook_index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>hook_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>function</name> <operator>==</operator> <name>function</name> <operator>&amp;&amp;</operator> <name><name>hook_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>==</operator> <name>arg</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>found_same</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>polar_elog_hook</name><argument_list>(<argument><expr><name>hook_name</name></expr></argument>, <argument><expr><name>hook_list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>found_same</name> <operator>&amp;&amp;</operator> <name>print_backtrace</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ErrorData</name></type> <name>edata</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]: %p, %lu"</literal></expr></argument>, <argument><expr><name>hook_name</name></expr></argument>, <argument><expr><name>hook_index</name></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Found same exit hook!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_backtrace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edata</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>edata</name><operator>.</operator><name>backtrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>edata</name><operator>.</operator><name>backtrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>!</operator><name>found_same</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		proc_exit
 *
 *		this function calls all the callbacks registered
 *		for it (to free resources) and then calls exit.
 *
 *		This should be the only function to call exit().
 *		-cim 2/6/90
 *
 *		Unfortunately, we can't really guarantee that add-on code
 *		obeys the rule of not calling exit() directly.  So, while
 *		this is the preferred way out of the system, we also register
 *		an atexit callback that will make sure cleanup happens.
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>proc_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Clean up everything that must be cleaned up */</comment>
	<expr_stmt><expr><call><name>proc_exit_prepare</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PROFILE_PID_DIR</name></cpp:ifdef>
	<block>{<block_content>
		<comment type="block">/*
		 * If we are profiling ourself then gprof's mcleanup() is about to
		 * write out a profile to ./gmon.out.  Since mcleanup() always uses a
		 * fixed file name, each backend will overwrite earlier profiles. To
		 * fix that, we create a separate subdirectory for each backend
		 * (./gprof/pid) and 'cd' to that subdirectory before we exit() - that
		 * forces mcleanup() to write each profile into its own directory.  We
		 * end up with something like: $PGDATA/gprof/8829/gmon.out
		 * $PGDATA/gprof/8845/gmon.out ...
		 *
		 * To avoid undesirable disk space bloat, autovacuum workers are
		 * discriminated against: all their gmon.out files go into the same
		 * subdirectory.  Without this, an installation that is "just sitting
		 * there" nonetheless eats megabytes of disk space every few seconds.
		 *
		 * Note that we do this here instead of in an on_proc_exit() callback
		 * because we want to ensure that this code executes last - we don't
		 * want to interfere with any other on_proc_exit() callback.  For the
		 * same reason, we do not include it in proc_exit_prepare ... so if
		 * you are exiting in the "wrong way" you won't drop your profile in a
		 * nice place.
		 */</comment>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>gprofDirName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>IsAutoVacuumWorkerProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>gprofDirName</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"gprof/avworker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>gprofDirName</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"gprof/%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/*
		 * Use mkdir() instead of MakePGDirectory() since we aren't making a
		 * PG directory here.
		 */</comment>
		<expr_stmt><expr><call><name>mkdir</name><argument_list>(<argument><expr><literal type="string">"gprof"</literal></expr></argument>, <argument><expr><name>S_IRWXU</name> <operator>|</operator> <name>S_IRWXG</name> <operator>|</operator> <name>S_IRWXO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mkdir</name><argument_list>(<argument><expr><name>gprofDirName</name></expr></argument>, <argument><expr><name>S_IRWXU</name> <operator>|</operator> <name>S_IRWXG</name> <operator>|</operator> <name>S_IRWXO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>chdir</name><argument_list>(<argument><expr><name>gprofDirName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"exit(%d)"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Code shared between proc_exit and the atexit handler.  Note that in
 * normal exit through proc_exit, this will actually be called twice ...
 * but the second call will have nothing to do.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>proc_exit_prepare</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Once we set this flag, we are committed to exit.  Any ereport() will
	 * NOT send control back to the main loop, but right back here.
	 */</comment>
	<expr_stmt><expr><name>proc_exit_inprogress</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Forget any pending cancel or die requests; we're doing our best to
	 * close up shop already.  Note that the signal handlers will not set
	 * these flags again, now that proc_exit_inprogress is set.
	 */</comment>
	<expr_stmt><expr><name>InterruptPending</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ProcDiePending</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>QueryCancelPending</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>InterruptHoldoffCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>CritSectionCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Also clear the error context stack, to prevent error callbacks from
	 * being invoked by any elog/ereport calls made during proc_exit. Whatever
	 * context they might want to offer is probably not relevant, and in any
	 * case they are likely to fail outright after we've done things like
	 * aborting any open transaction.  (In normal exit scenarios the context
	 * stack should be empty anyway, but it might not be in the case of
	 * elog(FATAL) for example.)
	 */</comment>
	<expr_stmt><expr><name>error_context_stack</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<comment type="block">/* For the same reason, reset debug_query_string before it's clobbered */</comment>
	<expr_stmt><expr><name>debug_query_string</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* do our shared memory exits first */</comment>
	<expr_stmt><expr><call><name>shmem_exit</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"proc_exit(%d): %d callbacks to make"</literal></expr></argument>,
		 <argument><expr><name>code</name></expr></argument>, <argument><expr><name>on_proc_exit_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * call all the registered callbacks.
	 *
	 * Note that since we decrement on_proc_exit_index each time, if a
	 * callback calls ereport(ERROR) or ereport(FATAL) then it won't be
	 * invoked again when control comes back here (nor will the
	 * previously-completed callbacks).  So, an infinite loop should not be
	 * possible.
	 */</comment>
	<while>while <condition>(<expr><operator>--</operator><name>on_proc_exit_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>on_proc_exit_list</name><index>[<expr><name>on_proc_exit_index</name></expr>]</index></name><operator>.</operator><call><name>function</name><argument_list>(<argument><expr><name>code</name></expr></argument>,
													   <argument><expr><name><name>on_proc_exit_list</name><index>[<expr><name>on_proc_exit_index</name></expr>]</index></name><operator>.</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<expr_stmt><expr><name>on_proc_exit_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ------------------
 * Run all of the on_shmem_exit routines --- but don't actually exit.
 * This is used by the postmaster to re-initialize shared memory and
 * semaphores after a backend dies horribly.  As with proc_exit(), we
 * remove each callback from the list before calling it, to avoid
 * infinite loop in case of error.
 * ------------------
 */</comment>
<function><type><name>void</name></type>
<name>shmem_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>shmem_exit_inprogress</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Call before_shmem_exit callbacks.
	 *
	 * These should be things that need most of the system to still be up and
	 * working, such as cleanup of temp relations, which requires catalog
	 * access; or things that need to be completed because later cleanup steps
	 * depend on them, such as releasing lwlocks.
	 */</comment>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"shmem_exit(%d): %d before_shmem_exit callbacks to make"</literal></expr></argument>,
		 <argument><expr><name>code</name></expr></argument>, <argument><expr><name>before_shmem_exit_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>--</operator><name>before_shmem_exit_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>before_shmem_exit_list</name><index>[<expr><name>before_shmem_exit_index</name></expr>]</index></name><operator>.</operator><call><name>function</name><argument_list>(<argument><expr><name>code</name></expr></argument>,
																 <argument><expr><name><name>before_shmem_exit_list</name><index>[<expr><name>before_shmem_exit_index</name></expr>]</index></name><operator>.</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><name>before_shmem_exit_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Call dynamic shared memory callbacks.
	 *
	 * These serve the same purpose as late callbacks, but for dynamic shared
	 * memory segments rather than the main shared memory segment.
	 * dsm_backend_shutdown() has the same kind of progressive logic we use
	 * for the main shared memory segment; namely, it unregisters each
	 * callback before invoking it, so that we don't get stuck in an infinite
	 * loop if one of those callbacks itself throws an ERROR or FATAL.
	 *
	 * Note that explicitly calling this function here is quite different from
	 * registering it as an on_shmem_exit callback for precisely this reason:
	 * if one dynamic shared memory callback errors out, the remaining
	 * callbacks will still be invoked.  Thus, hard-coding this call puts it
	 * equal footing with callbacks for the main shared memory segment.
	 */</comment>
	<expr_stmt><expr><call><name>dsm_backend_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Call on_shmem_exit callbacks.
	 *
	 * These are generally releasing low-level shared memory resources.  In
	 * some cases, this is a backstop against the possibility that the early
	 * callbacks might themselves fail, leading to re-entry to this routine;
	 * in other cases, it's cleanup that only happens at process exit.
	 */</comment>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"shmem_exit(%d): %d on_shmem_exit callbacks to make"</literal></expr></argument>,
		 <argument><expr><name>code</name></expr></argument>, <argument><expr><name>on_shmem_exit_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>--</operator><name>on_shmem_exit_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>on_shmem_exit_list</name><index>[<expr><name>on_shmem_exit_index</name></expr>]</index></name><operator>.</operator><call><name>function</name><argument_list>(<argument><expr><name>code</name></expr></argument>,
														 <argument><expr><name><name>on_shmem_exit_list</name><index>[<expr><name>on_shmem_exit_index</name></expr>]</index></name><operator>.</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><name>on_shmem_exit_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>shmem_exit_inprogress</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		atexit_callback
 *
 *		Backstop to ensure that direct calls of exit() don't mess us up.
 *
 * Somebody who was being really uncooperative could call _exit(),
 * but for that case we have a "dead man switch" that will make the
 * postmaster treat it as a crash --- see pmsignal.c.
 * ----------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>atexit_callback</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Clean up everything that must be cleaned up */</comment>
	<comment type="block">/* ... too bad we don't know the real exit code ... */</comment>
	<expr_stmt><expr><call><name>proc_exit_prepare</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		on_proc_exit
 *
 *		this function adds a callback function to the list of
 *		functions invoked by proc_exit().   -cim 2/6/90
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>on_proc_exit</name><parameter_list>(<parameter><decl><type><name>pg_on_exit_callback</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>polar_check_hook</name><argument_list>(<argument><expr><name>on_proc_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>on_proc_exit_list</name><index>[<expr><name>on_proc_exit_index</name></expr>]</index></name><operator>.</operator><name>function</name> <operator>=</operator> <name>function</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>on_proc_exit_list</name><index>[<expr><name>on_proc_exit_index</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>++</operator><name>on_proc_exit_index</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>atexit_callback_setup</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>atexit_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>atexit_callback_setup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		before_shmem_exit
 *
 *		Register early callback to perform user-level cleanup,
 *		e.g. transaction abort, before we begin shutting down
 *		low-level subsystems.
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>before_shmem_exit</name><parameter_list>(<parameter><decl><type><name>pg_on_exit_callback</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>polar_check_hook</name><argument_list>(<argument><expr><name>before_shmem_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>before_shmem_exit_list</name><index>[<expr><name>before_shmem_exit_index</name></expr>]</index></name><operator>.</operator><name>function</name> <operator>=</operator> <name>function</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>before_shmem_exit_list</name><index>[<expr><name>before_shmem_exit_index</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>++</operator><name>before_shmem_exit_index</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>atexit_callback_setup</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>atexit_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>atexit_callback_setup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		on_shmem_exit
 *
 *		Register ordinary callback to perform low-level shutdown
 *		(e.g. releasing our PGPROC); run after before_shmem_exit
 *		callbacks and before on_proc_exit callbacks.
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>on_shmem_exit</name><parameter_list>(<parameter><decl><type><name>pg_on_exit_callback</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>polar_check_hook</name><argument_list>(<argument><expr><name>on_shmem_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>on_shmem_exit_list</name><index>[<expr><name>on_shmem_exit_index</name></expr>]</index></name><operator>.</operator><name>function</name> <operator>=</operator> <name>function</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>on_shmem_exit_list</name><index>[<expr><name>on_shmem_exit_index</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>++</operator><name>on_shmem_exit_index</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>atexit_callback_setup</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>atexit_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>atexit_callback_setup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		cancel_before_shmem_exit
 *
 *		this function removes a previously-registered before_shmem_exit
 *		callback.  For simplicity, only the latest entry can be
 *		removed.  (We could work harder but there is no need for
 *		current uses.)
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>cancel_before_shmem_exit</name><parameter_list>(<parameter><decl><type><name>pg_on_exit_callback</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>before_shmem_exit_index</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<name><name>before_shmem_exit_list</name><index>[<expr><name>before_shmem_exit_index</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>function</name>
		<operator>==</operator> <name>function</name> <operator>&amp;&amp;</operator>
		<name><name>before_shmem_exit_list</name><index>[<expr><name>before_shmem_exit_index</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>arg</name> <operator>==</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>--</operator><name>before_shmem_exit_index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		on_exit_reset
 *
 *		this function clears all on_proc_exit() and on_shmem_exit()
 *		registered functions.  This is used just after forking a backend,
 *		so that the backend doesn't believe it should call the postmaster's
 *		on-exit routines when it exits...
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>on_exit_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>before_shmem_exit_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>on_shmem_exit_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>on_proc_exit_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reset_on_dsm_detach</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* 
 * POLAR: Check whether it's able to register a before_shmem_exit callback
 * return true when before_shmem_list is not overflowed
 * and there is no same before_shmem_exit callback has been registered previously
 */</comment>
<function><type><name>bool</name></type>
<name>polar_check_before_shmem_exit</name><parameter_list>(<parameter><decl><type><name>pg_on_exit_callback</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_backtrace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>polar_check_hook_util</name><argument_list>(<argument><expr><literal type="string">"before_shmem_exit"</literal></expr></argument>, <argument><expr><name>before_shmem_exit_list</name></expr></argument>, <argument><expr><name>before_shmem_exit_index</name></expr></argument>, 
								 <argument><expr><name>function</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>print_backtrace</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function></unit>
