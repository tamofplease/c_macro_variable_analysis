<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/storage/ipc/polar_shmem.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_shmem.c
 *	  create polar persisted shared memory and initialize shared memory data structures.
 *
 * Copyright (c) 2021, Alibaba Group Holding Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * IDENTIFICATION
 *	  src/backend/storage/ipc/polar_shmem.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_shmem.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>polar_enable_persisted_buffer_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>polar_enable_shared_storage_mode</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>polar_shmem_is_allocated</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(polar_shmem_allocated &amp; (1 &lt;&lt; idx))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>polar_shmem_set_allocated</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(polar_shmem_allocated |= (1 &lt;&lt; idx))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>polar_shmem_addr</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(polar_shmem_infos[idx].location)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>polar_shmem_addr_is_valid</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((addr &gt;= polar_shmem_base) &amp;&amp; (addr &lt; polar_shmem_end))</cpp:value></cpp:define>

<comment type="block">/* shared memory global variables */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PGShmemHeader</name>	<modifier>*</modifier></type><name>polar_shmem_hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name>		<modifier>*</modifier></type><name>polar_shmem_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name>		<modifier>*</modifier></type><name>polar_shmem_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32</name></type>	<name>polar_shmem_allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PolarShmemInfo</name></type>	<name><name>polar_shmem_infos</name><index>[<expr><name>POLAR_PERSISTED_SHMEM_NUM</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>polar_persisted_shmem_names</name><index>[<expr><name>POLAR_PERSISTED_SHMEM_NUM</name></expr>]</index></name> <init>=
					  <expr><block>{<expr><literal type="string">"POLAR Buffer Pool Ctl"</literal></expr>, <expr><literal type="string">"Buffer Descriptors"</literal></expr>,
					   <expr><literal type="string">"Buffer Blocks"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>persisted_shmem_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>polar_shmem_alloc</name><parameter_list>(<parameter><decl><type><name>PolarPersistedShmem</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 *	polar_init_shmem_access --- set up basic pointers to shared memory.
 *
 * Note: the argument should be declared "PGShmemHeader *seghdr",
 * but we use void to avoid having to include ipc.h in polar_shmem.h.
 */</comment>
<function><type><name>void</name></type>
<name>polar_init_shmem_access</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>seghdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGShmemHeader</name> <modifier>*</modifier></type><name>shmhdr</name> <init>= <expr><operator>(</operator><name>PGShmemHeader</name> <operator>*</operator><operator>)</operator> <name>seghdr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>polar_shmem_hdr</name> <operator>=</operator> <name>shmhdr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>polar_shmem_base</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>shmhdr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>polar_shmem_end</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>polar_shmem_base</name> <operator>+</operator> <name><name>shmhdr</name><operator>-&gt;</operator><name>totalsize</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>polar_shmem_allocated</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>polar_shmem_infos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PolarShmemInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>POLAR_PERSISTED_SHMEM_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * polar_shmem_alloc -- allocate max-aligned chunk from shared memory
 *
 * Throws error if request cannot be satisfied.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>polar_shmem_alloc</name><parameter_list>(<parameter><decl><type><name>PolarPersistedShmem</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>newStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>newFree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>newSpace</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>polar_shmem_hdr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>newStart</name> <operator>=</operator> <name><name>polar_shmem_hdr</name><operator>-&gt;</operator><name>freeoffset</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>newFree</name> <operator>=</operator> <name>newStart</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>newFree</name> <operator>&gt;</operator> <name><name>polar_shmem_hdr</name><operator>-&gt;</operator><name>totalsize</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
					<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of shared memory (%zu bytes requested)"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>newSpace</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>polar_shmem_base</name> <operator>+</operator> <name>newStart</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_shmem_hdr</name><operator>-&gt;</operator><name>freeoffset</name></name> <operator>=</operator> <name>newFree</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_shmem_set_allocated</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_shmem_addr_is_valid</name><argument_list>(<argument><expr><name>newSpace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>newSpace</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><name>newSpace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newSpace</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * polar_shmem_init_struct -- Create/attach to a structure in shared memory.
 *
 *		This is called during initialization to find or allocate
 *		a data structure in shared memory.  If no other process
 *		has created the structure, this routine allocates space
 *		for it.  If it exists already, a pointer to the existing
 *		structure is returned.
 *
 *	Returns: pointer to the object.  *foundPtr is set true if the object was
 *		already initialized.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>polar_shmem_init_struct</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>foundPtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name>	<modifier>*</modifier></type><name>struct_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolarShmemInfo</name>	<modifier>*</modifier></type><name>shmem_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolarPersistedShmem</name></type> <name>shmem</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>shmem</name> <operator>=</operator> <call><name>persisted_shmem_idx</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>shmem</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_shmem_is_allocated</name><argument_list>(<argument><expr><name>shmem</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>foundPtr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><call><name>polar_shmem_addr</name><argument_list>(<argument><expr><name>shmem</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>struct_ptr</name> <operator>=</operator> <call><name>polar_shmem_alloc</name><argument_list>(<argument><expr><name>shmem</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Store shmem info. */</comment>
	<expr_stmt><expr><name>shmem_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>polar_shmem_infos</name><index>[<expr><name>shmem</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>shmem_info</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>polar_persisted_shmem_names</name><index>[<expr><name>shmem</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>shmem_info</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>shmem_info</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>struct_ptr</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>foundPtr</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<return>return <expr><name>struct_ptr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check if persisted buffer pool is enable. If name is not null, we should
 * check if this shmem named *name* is allowed to use persisted shared memory.
 */</comment>
<function><type><name>bool</name></type>
<name>polar_persisted_buffer_pool_enabled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_enable_persisted_buffer_pool</name> <operator>||</operator> <call><name>IsBootstrapProcessingMode</name><argument_list>()</argument_list></call> <operator>||</operator>
		<operator>!</operator><name>polar_enable_shared_storage_mode</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>persisted_shmem_idx</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>persisted_shmem_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>cur_dir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>POLAR_PERSISTED_SHMEM_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>cur_dir</name> <operator>=</operator> <name><name>polar_persisted_shmem_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>cur_dir</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>POLAR_PERSISTED_SHMEM_NUM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PolarShmemInfo</name> <modifier>*</modifier></type>
<name>polar_get_persisted_shmem_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>polar_shmem_infos</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PGShmemHeader</name> <modifier>*</modifier></type>
<name>polar_get_persisted_shmem_seg_hdr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>polar_shmem_hdr</name></expr>;</return>
</block_content>}</block></function>
</unit>
