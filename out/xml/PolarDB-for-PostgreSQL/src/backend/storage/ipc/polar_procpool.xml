<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/storage/ipc/polar_procpool.c"><comment type="block">/*----------------------------------------------------------------------------------------
 *
 * polar_procpool.c
 *  This list is used to manage free resources.
 *  The resources are allocated as array items,
 *  get the free item from polar_successor_list_pop
 *  and call polar_successor_list_push when the item is released.
 *
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * src/backend/storage/ipc/polar_procpool.c
 * ---------------------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_procpool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/spin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/polar_bitpos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ps_status.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>proc_hold_task_t</name>
<block>{
	<decl_stmt><decl><type><name>dlist_node</name></type> <name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name></decl>;</decl_stmt>
}</block></struct></type> <name>proc_hold_task_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>proc_repeat_task_t</name>
<block>{
	<decl_stmt><decl><type><name>dlist_node</name></type> <name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>      <name>repeat_delay</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name></decl>;</decl_stmt>
}</block></struct></type> <name>proc_repeat_task_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>sub_task_ctl_t</name>
<block>{
	<decl_stmt><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Latch</name> <modifier>*</modifier></type><name>dispatcher_latch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>sub_proc_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>dlist_head</name></type> <name>hold_tasks</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>dlist_head</name></type> <name>repeat_tasks</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint64</name></type> <name>max_fetch_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>fetch_task_idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>fetch_running_task</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>add_hold_task</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>remove_hold_task</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>add_repeat_task</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>remove_repeat_task</name></decl>;</decl_stmt>
}</block></struct></type> <name>sub_task_ctl_t</name>;</typedef>

<comment type="block">/* Flags set by signal handlers */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>got_sigterm</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>got_sighup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_SCHED_PROC</name><parameter_list>(<parameter><type><name>ctl</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		(ctl)-&gt;dst_proc++; \
		if (unlikely((ctl)-&gt;dst_proc == (ctl)-&gt;sched-&gt;total_proc)) \
			(ctl)-&gt;dst_proc = 0; \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TASK_HASH_SET_HEAD</name><parameter_list>(<parameter><type><name>ctl</name></type></parameter>, <parameter><type><name>hash_elem</name></type></parameter>, <parameter><type><name>node</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		char *p = (hash_elem) + (ctl)-&gt;task_tag_size; \
		memcpy(p, &amp;(node), sizeof(polar_task_node_t *)); \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TASK_HASH_GET_HEAD</name><parameter_list>(<parameter><type><name>ctl</name></type></parameter>, <parameter><type><name>hash_elem</name></type></parameter>, <parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		char *p = (hash_elem) + (ctl)-&gt;task_tag_size; \
		memcpy(&amp;(head), p, sizeof(polar_task_node_t *)); \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TASK_QUEUE_IS_EMPTY</name><parameter_list>(<parameter><type><name>proc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((proc)-&gt;task_head == proc-&gt;task_tail &amp;&amp; !proc-&gt;ring_full)</cpp:value></cpp:define>

<function><type><name>Size</name></type>
<name>polar_calc_task_sched_shmem_size</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>parallel_num</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>task_node_size</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>task_queue_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>parallel_num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>task_queue_depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>task_node_size</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_task_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>polar_task_sched_t</name></expr></argument>, <argument><expr><name>task_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>parallel_num</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>task_node_size</name></expr></argument>, <argument><expr><name>task_queue_depth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_init_task_queue</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>total</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>sched</name><operator>-&gt;</operator><name>task_nodes</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>total</name> <operator>=</operator> <name><name>sched</name><operator>-&gt;</operator><name>total_proc</name></name> <operator>*</operator> <name><name>sched</name><operator>-&gt;</operator><name>task_queue_depth</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>total</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>polar_task_node_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>POLAR_RESET_TASK_NODE</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>sched</name><operator>-&gt;</operator><name>task_node_size</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_sub_task_sigterm_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>got_sigterm</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>MyProc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_sub_task_sighup_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>got_sighup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>MyProc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>polar_task_sched_t</name> <modifier>*</modifier></type>
<name>polar_create_proc_task_sched</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sched_name</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>parallel_num</name></decl></parameter>,
							 <parameter><decl><type><name>Size</name></type> <name>task_node_size</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>task_queue_depth</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>run_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>polar_calc_task_sched_shmem_size</name><argument_list>(<argument><expr><name>parallel_num</name></expr></argument>, <argument><expr><name>task_node_size</name></expr></argument>, <argument><expr><name>task_queue_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sched</name> <operator>=</operator> <operator>(</operator><name>polar_task_sched_t</name> <operator>*</operator><operator>)</operator><call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>sched_name</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>sched</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><name><name>sched</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>sched_name</name></expr></argument>, <argument><expr><name>POLAR_TASK_NAME_MAX_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sched</name><operator>-&gt;</operator><name>total_proc</name></name> <operator>=</operator> <name>parallel_num</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sched</name><operator>-&gt;</operator><name>task_node_size</name></name> <operator>=</operator> <name>task_node_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sched</name><operator>-&gt;</operator><name>task_queue_depth</name></name> <operator>=</operator> <name>task_queue_depth</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sched</name><operator>-&gt;</operator><name>run_arg</name></name> <operator>=</operator> <name>run_arg</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sched</name><operator>-&gt;</operator><name>added_seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sched</name><operator>-&gt;</operator><name>enable_shutdown</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sched</name><operator>-&gt;</operator><name>finished_seq</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>sched</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_sched_reg_handler</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name></decl></parameter>, <parameter><decl><type><name>polar_task_handle_startup</name></type> <name>task_startup</name></decl></parameter>,
						<parameter><decl><type><name>polar_task_handler</name></type> <name>task_handle</name></decl></parameter>,
						<parameter><decl><type><name>polar_task_handle_cleanup</name></type> <name>task_cleanup</name></decl></parameter>,
						<parameter><decl><type><name>polar_task_get_tag</name></type> <name>task_get_tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>sched</name><operator>-&gt;</operator><name>task_startup</name></name> <operator>=</operator> <name>task_startup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sched</name><operator>-&gt;</operator><name>task_handle</name></name> <operator>=</operator> <name>task_handle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sched</name><operator>-&gt;</operator><name>task_cleanup</name></name> <operator>=</operator> <name>task_cleanup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sched</name><operator>-&gt;</operator><name>task_tag</name></name> <operator>=</operator> <name>task_get_tag</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_ring_task_nodes_init</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>proc_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_sub_proc_t</name> <modifier>*</modifier></type><name>sub_proc</name> <init>= <expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>sub_proc</name><index>[<expr><name>proc_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>sched</name><operator>-&gt;</operator><name>task_nodes</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>sub_proc</name><operator>-&gt;</operator><name>ring_task_nodes_begin</name></name> <operator>=</operator> <operator>(</operator><name>polar_task_node_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <operator>(</operator><name>proc_num</name> <operator>*</operator> <name><name>sched</name><operator>-&gt;</operator><name>task_node_size</name></name> <operator>*</operator> <name><name>sched</name><operator>-&gt;</operator><name>task_queue_depth</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sub_proc</name><operator>-&gt;</operator><name>ring_task_nodes_end</name></name> <operator>=</operator> <call><name>POLAR_SCHED_TASK_POINT</name><argument_list>(<argument><expr><name>sched</name></expr></argument>, <argument><expr><name><name>sub_proc</name><operator>-&gt;</operator><name>ring_task_nodes_begin</name></name></expr></argument>, <argument><expr><name><name>sched</name><operator>-&gt;</operator><name>task_queue_depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>sub_proc</name><operator>-&gt;</operator><name>task_head</name></name> <operator>=</operator> <name><name>sub_proc</name><operator>-&gt;</operator><name>ring_task_nodes_begin</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sub_proc</name><operator>-&gt;</operator><name>task_tail</name></name> <operator>=</operator> <name><name>sub_proc</name><operator>-&gt;</operator><name>ring_task_nodes_begin</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sub_proc</name><operator>-&gt;</operator><name>ring_full</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type>
<name>polar_create_task_sched_ctl</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>task_tag_size</name></decl></parameter>, <parameter><decl><type><name>HashValueFunc</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>HashCompareFunc</name></type> <name>match</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>size</name> <init>= <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>polar_task_sched_ctl_t</name></expr></argument>, <argument><expr><name>sub_proc</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_sub_proc_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>sched</name><operator>-&gt;</operator><name>total_proc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>max_hash_elem</name> <init>= <expr><name><name>sched</name><operator>-&gt;</operator><name>total_proc</name></name> <operator>*</operator> <name><name>sched</name><operator>-&gt;</operator><name>task_queue_depth</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASHCTL</name></type> <name>hash_ctl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>hash_flag</name> <init>= <expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>polar_init_task_queue</name><argument_list>(<argument><expr><name>sched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sched</name><operator>-&gt;</operator><name>running_queue_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>running_task_head</name></name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>running_task_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name></name> <operator>=</operator> <name>sched</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <name>task_tag_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <name>task_tag_size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_task_node_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>hash</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>hash_flag</name> <operator>|=</operator> <name>HASH_FUNCTION</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>match</name></name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>hash_flag</name> <operator>|=</operator> <name>HASH_COMPARE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>task_hash</name></name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"PolarProcPool"</literal></expr></argument>, <argument><expr><name>max_hash_elem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_ctl</name></expr></argument>, <argument><expr><name>hash_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sched</name><operator>-&gt;</operator><name>total_proc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_ring_task_nodes_init</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>task_tag_size</name></name> <operator>=</operator> <name>task_tag_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_sched_enable_shutdown</name><argument_list>(<argument><expr><name>sched</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ctl</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sub_task_update_ps_display</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>sub_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>old_status</name> <operator>=</operator> <call><name>get_ps_display</name><argument_list>(<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>new_status</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_status</name></expr></argument>, <argument><expr><name>old_status</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>new_status</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" subid=%d"</literal></expr></argument>, <argument><expr><name>sub_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_ps_display</name><argument_list>(<argument><expr><name>new_status</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>new_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>polar_task_node_t</name> <modifier>*</modifier></type>
<name>fetch_waiting_task_from_repeat_list</name><parameter_list>(<parameter><decl><type><name>sub_task_ctl_t</name> <modifier>*</modifier></type><name>task_ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dlist_node</name> <modifier>*</modifier></type><name>cur_node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>running_task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>dlist_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_ctl</name><operator>-&gt;</operator><name>repeat_tasks</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <call><name>dlist_head_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_ctl</name><operator>-&gt;</operator><name>repeat_tasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>cur_node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>proc_repeat_task_t</name> <modifier>*</modifier></type><name>repeat_task</name> <init>= <expr><call><name>dlist_container</name><argument_list>(<argument><expr><name>proc_repeat_task_t</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>dlist_has_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_ctl</name><operator>-&gt;</operator><name>repeat_tasks</name></name></expr></argument>, <argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>next_node</name> <operator>=</operator> <call><name>dlist_next_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_ctl</name><operator>-&gt;</operator><name>repeat_tasks</name></name></expr></argument>, <argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>next_node</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>POLAR_TASK_NODE_STATUS</name><argument_list>(<argument><expr><name><name>repeat_task</name><operator>-&gt;</operator><name>task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>status</name> <operator>!=</operator> <name>POLAR_TASK_NODE_RUNNING</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Task status is incorrect in %s, expected POLAR_TASK_NODE_RUNNING, got %x, task_addr %p"</literal></expr></argument>,
				 <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>repeat_task</name><operator>-&gt;</operator><name>task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>repeat_task</name><operator>-&gt;</operator><name>repeat_delay</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>running_task</name> <operator>=</operator> <name><name>repeat_task</name><operator>-&gt;</operator><name>task</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dlist_delete</name><argument_list>(<argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>repeat_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>task_ctl</name><operator>-&gt;</operator><name>remove_repeat_task</name></name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>repeat_task</name><operator>-&gt;</operator><name>repeat_delay</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <name>next_node</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>running_task</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>polar_task_node_t</name> <modifier>*</modifier></type>
<name>fetch_waiting_task_from_hold_list</name><parameter_list>(<parameter><decl><type><name>sub_task_ctl_t</name> <modifier>*</modifier></type><name>task_ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dlist_node</name> <modifier>*</modifier></type><name>cur_node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>running_task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>dlist_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_ctl</name><operator>-&gt;</operator><name>hold_tasks</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <call><name>dlist_head_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_ctl</name><operator>-&gt;</operator><name>hold_tasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>cur_node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>proc_hold_task_t</name> <modifier>*</modifier></type><name>hold_task</name> <init>= <expr><call><name>dlist_container</name><argument_list>(<argument><expr><name>proc_hold_task_t</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>dlist_has_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_ctl</name><operator>-&gt;</operator><name>hold_tasks</name></name></expr></argument>, <argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>next_node</name> <operator>=</operator> <call><name>dlist_next_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_ctl</name><operator>-&gt;</operator><name>hold_tasks</name></name></expr></argument>, <argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>next_node</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>POLAR_TASK_NODE_STATUS</name><argument_list>(<argument><expr><name><name>hold_task</name><operator>-&gt;</operator><name>task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>POLAR_TASK_NODE_HOLD</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>POLAR_TASK_NODE_RUNNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>POLAR_TASK_NODE_RUNNING</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>running_task</name> <operator>=</operator> <name><name>hold_task</name><operator>-&gt;</operator><name>task</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dlist_delete</name><argument_list>(<argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>hold_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>task_ctl</name><operator>-&gt;</operator><name>remove_hold_task</name></name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <name>next_node</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>running_task</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>proc_add_hold_task</name><parameter_list>(<parameter><decl><type><name>sub_task_ctl_t</name> <modifier>*</modifier></type><name>task_ctl</name></decl></parameter>, <parameter><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>proc_hold_task_t</name> <modifier>*</modifier></type><name>hold_task</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proc_hold_task_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>hold_task</name><operator>-&gt;</operator><name>task</name></name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dlist_push_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_ctl</name><operator>-&gt;</operator><name>hold_tasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hold_task</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>task_ctl</name><operator>-&gt;</operator><name>add_hold_task</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>proc_add_repeat_task</name><parameter_list>(<parameter><decl><type><name>sub_task_ctl_t</name> <modifier>*</modifier></type><name>task_ctl</name></decl></parameter>, <parameter><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>proc_repeat_task_t</name> <modifier>*</modifier></type><name>repeat_task</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>POLAR_TASK_NODE_RUNNING</name> <operator>==</operator> <call><name>POLAR_TASK_NODE_STATUS</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>repeat_task</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proc_repeat_task_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repeat_task</name><operator>-&gt;</operator><name>task</name></name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>repeat_task</name><operator>-&gt;</operator><name>repeat_delay</name></name> <operator>=</operator> <name>POLAR_TASK_MAX_REPEAT_DELAY_TIMES</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dlist_push_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_ctl</name><operator>-&gt;</operator><name>repeat_tasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>repeat_task</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>task_ctl</name><operator>-&gt;</operator><name>add_repeat_task</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>polar_task_node_t</name> <modifier>*</modifier></type>
<name>fetch_waiting_task_from_queue</name><parameter_list>(<parameter><decl><type><name>sub_task_ctl_t</name> <modifier>*</modifier></type><name>task_ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>task_ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>task_nodes</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>dst_task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>task_ctl</name><operator>-&gt;</operator><name>fetch_task_idx</name></name> <operator>&gt;=</operator> <name><name>task_ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>task_queue_depth</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>task_ctl</name><operator>-&gt;</operator><name>fetch_task_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>dst_task</name> <operator>=</operator> <operator>(</operator><name>polar_task_node_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator>
										 <operator>(</operator><name><name>task_ctl</name><operator>-&gt;</operator><name>sub_proc_id</name></name> <operator>*</operator> <name><name>task_ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>task_queue_depth</name></name> <operator>+</operator> <name><name>task_ctl</name><operator>-&gt;</operator><name>fetch_task_idx</name></name><operator>)</operator>
										 <operator>*</operator> <name><name>task_ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>task_node_size</name></name><operator>)</operator></expr>;</expr_stmt>

		<comment type="block">/* We fetch task from the ring queue, if add_seq == max_fetch_seq, then we reach the end of this queue */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>dst_task</name><operator>-&gt;</operator><name>add_seq</name></name> <operator>&gt;</operator> <name><name>task_ctl</name><operator>-&gt;</operator><name>max_fetch_seq</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>POLAR_TASK_NODE_STATUS</name><argument_list>(<argument><expr><name>dst_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>POLAR_TASK_NODE_RUNNING</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>task_ctl</name><operator>-&gt;</operator><name>fetch_task_idx</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>task_ctl</name><operator>-&gt;</operator><name>fetch_running_task</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>task_ctl</name><operator>-&gt;</operator><name>max_fetch_seq</name></name> <operator>=</operator> <name><name>dst_task</name><operator>-&gt;</operator><name>add_seq</name></name></expr>;</expr_stmt>

				<return>return <expr><name>dst_task</name></expr>;</return>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>POLAR_TASK_NODE_HOLD</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>proc_add_hold_task</name><argument_list>(<argument><expr><name>task_ctl</name></expr></argument>, <argument><expr><name>dst_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>task_ctl</name><operator>-&gt;</operator><name>fetch_task_idx</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>task_ctl</name><operator>-&gt;</operator><name>max_fetch_seq</name></name> <operator>=</operator> <name><name>dst_task</name><operator>-&gt;</operator><name>add_seq</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>status</name> <operator>!=</operator> <name>POLAR_TASK_NODE_IDLE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Got unexpect task status %x in %s, which task is %p"</literal></expr></argument>,
					 <argument><expr><name>status</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>dst_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<break>break;</break></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>polar_task_node_t</name> <modifier>*</modifier></type>
<name>fetch_waiting_task_node</name><parameter_list>(<parameter><decl><type><name>sub_task_ctl_t</name> <modifier>*</modifier></type><name>task_ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>task</name> <operator>=</operator> <call><name>fetch_waiting_task_from_repeat_list</name><argument_list>(<argument><expr><name>task_ctl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>task</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>task</name> <operator>=</operator> <call><name>fetch_waiting_task_from_hold_list</name><argument_list>(<argument><expr><name>task_ctl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>task</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>fetch_waiting_task_from_queue</name><argument_list>(<argument><expr><name>task_ctl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>proc_task_queue_is_full</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>sub_proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_sub_proc_t</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>sub_proc</name><index>[<expr><name>sub_proc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>proc</name><operator>-&gt;</operator><name>ring_full</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PGPROC</name> <modifier>*</modifier></type>
<name>polar_sched_get_worker_proc</name><parameter_list>(<parameter><decl><type><name>BackgroundWorkerHandle</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GetBackgroundWorkerPid</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BGWH_STARTED</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><call><name>polar_search_proc</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>polar_sched_get_next_proc</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sched</name><operator>-&gt;</operator><name>total_proc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>proc_num</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>dst_proc</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>NEXT_SCHED_PROC</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If proc is NULL then we will try to get its PGPROC base on BackgroundHandle.
		 * And if the return value is NULL, then this process is not started.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>sub_proc</name><index>[<expr><name>proc_num</name></expr>]</index></name><operator>.</operator><name>proc</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>sub_proc</name><index>[<expr><name>proc_num</name></expr>]</index></name><operator>.</operator><name>proc</name> <operator>=</operator> <call><name>polar_sched_get_worker_proc</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>sub_proc</name><index>[<expr><name>proc_num</name></expr>]</index></name><operator>.</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>ctl</name><operator>-&gt;</operator><name>sub_proc</name><index>[<expr><name>proc_num</name></expr>]</index></name><operator>.</operator><name>proc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>proc_task_queue_is_full</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>proc_num</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>proc_num</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>polar_sched_get_dst_proc</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type> <name>proc_num</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>task_tag</name> <init>= <expr><call><name><name>ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>task_tag</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task_head</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hash_elem</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>hash_elem</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>hash_search</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>task_hash</name></name></expr></argument>, <argument><expr><name>task_tag</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>hash_elem</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>TASK_HASH_GET_HEAD</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>hash_elem</name></expr></argument>, <argument><expr><name>task_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>task_head</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task_tail</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>task_tail</name> <operator>=</operator> <operator>(</operator><name>polar_task_node_t</name> <operator>*</operator><operator>)</operator><call><name>SHMQueuePrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_head</name><operator>-&gt;</operator><name>depend_task</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>task_head</name><operator>-&gt;</operator><name>depend_task</name></name></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>polar_task_node_t</name></expr></argument>, <argument><expr><name>depend_task</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>task_tail</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>task_tail</name> <operator>=</operator> <name>task_head</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>proc_num</name> <operator>=</operator> <call><name>POLAR_TASK_NODE_PROC</name><argument_list>(<argument><expr><name>task_tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>proc_task_queue_is_full</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>proc_num</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>polar_sched_remove_finished_task</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>proc_task_queue_is_full</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>proc_num</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>proc_num</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>proc_num</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>proc_num</name> <operator>=</operator> <call><name>polar_sched_get_next_proc</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>proc_num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_sched_proc_advance_ring</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>polar_sub_proc_t</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>ring_full</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>POLAR_SCHED_TASK_ADVANCE</name><argument_list>(<argument><expr><name>sched</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>task_tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>POLAR_SCHED_TASK_ADVANCE</name><argument_list>(<argument><expr><name>sched</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>task_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>ring_full</name></name> <operator>=</operator> <operator>(</operator><name><name>proc</name><operator>-&gt;</operator><name>task_head</name></name> <operator>==</operator> <name><name>proc</name><operator>-&gt;</operator><name>task_tail</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_sched_proc_retreat_ring</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>polar_sub_proc_t</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>ring_full</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_SCHED_TASK_ADVANCE</name><argument_list>(<argument><expr><name>sched</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>task_tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_notify_task_proc</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>proc_num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGPROC</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>proc_num</name> <operator>=</operator> <call><name>POLAR_TASK_NODE_PROC</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>proc_num</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>proc_num</name> <operator>&lt;</operator> <name><name>ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>total_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>proc</name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>sub_proc</name><index>[<expr><name>proc_num</name></expr>]</index></name><operator>.</operator><name>proc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>polar_sched_add_task_hash_table</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>polar_sub_proc_t</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>task_tag</name> <init>= <expr><call><name><name>sched</name><operator>-&gt;</operator><name>task_tag</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>status</name> <init>= <expr><name>POLAR_TASK_NODE_RUNNING</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hash_elem</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>hash_elem</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>hash_search</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>task_hash</name></name></expr></argument>, <argument><expr><name>task_tag</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* In this hash table we save task_tag as key, and polar_task_node_t * as value */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHMQueueInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>depend_task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TASK_HASH_SET_HEAD</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>hash_elem</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task_head</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>prev_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>TASK_HASH_GET_HEAD</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>hash_elem</name></expr></argument>, <argument><expr><name>task_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHMQueueInsertBefore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_head</name><operator>-&gt;</operator><name>depend_task</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>depend_task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>prev_node</name> <operator>=</operator> <operator>(</operator><name>polar_task_node_t</name> <operator>*</operator><operator>)</operator><call><name>SHMQueuePrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>depend_task</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>depend_task</name></name></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>polar_task_node_t</name></expr></argument>, <argument><expr><name>depend_task</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prev_node</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>POLAR_TASK_NODE_STATUS</name><argument_list>(<argument><expr><name>prev_node</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>POLAR_TASK_NODE_FINISHED</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name>POLAR_TASK_NODE_HOLD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prev_node</name><operator>-&gt;</operator><name>next_latch</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>proc</name><operator>-&gt;</operator><name>procLatch</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>POLAR_UPDATE_TASK_NODE_STATUS</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>hold_task_num</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prev_node</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>POLAR_TASK_NODE_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>POLAR_UPDATE_TASK_NODE_STATUS</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>added_task_num</name></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_sched_add_running_queue</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ctl</name><operator>-&gt;</operator><name>running_task_head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SHMQueueInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>running_task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>running_task_head</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>running_task</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>running_task_tail</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>running_task</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>running_queue_head</name></name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>running_task_head</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>SHMQueueInsertAfter</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>running_task_tail</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>running_task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>running_task_tail</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>running_task</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>polar_task_node_t</name> <modifier>*</modifier></type>
<name>polar_sched_proc_add_task</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>dst_proc_num</name></decl></parameter>, <parameter><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_sub_proc_t</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>sub_proc</name><index>[<expr><name>dst_proc_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>dst_node</name> <init>= <expr><name><name>proc</name><operator>-&gt;</operator><name>task_head</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>extend_offset</name> <init>= <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>polar_task_node_t</name></expr></argument>, <argument><expr><name>task_status</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pg_atomic_uint32</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dst_node</name> <operator>+</operator> <name>extend_offset</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>node</name> <operator>+</operator> <name>extend_offset</name></expr></argument>, <argument><expr><name><name>sched</name><operator>-&gt;</operator><name>task_node_size</name></name> <operator>-</operator> <name>extend_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst_node</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>POLAR_TASK_NODE_INIT_STATUS</name><argument_list>(<argument><expr><name>dst_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_UPDATE_TASK_NODE_PROC</name><argument_list>(<argument><expr><name>dst_node</name></expr></argument>, <argument><expr><name>dst_proc_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_write_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst_node</name><operator>-&gt;</operator><name>add_seq</name></name> <operator>=</operator> <operator>++</operator><name><name>sched</name><operator>-&gt;</operator><name>added_seq</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_sched_add_running_queue</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_sched_add_task_hash_table</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>POLAR_TASK_NODE_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_notify_task_proc</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>polar_sched_proc_advance_ring</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>running_tasks_num</name></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>dst_node</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>polar_task_node_t</name> <modifier>*</modifier></type>
<name>polar_sched_add_task</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>dst_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>dst_proc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dst_proc</name> <operator>=</operator> <call><name>polar_sched_get_dst_proc</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst_proc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>fail_add_task_num</name></name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>dst_node</name> <operator>=</operator> <call><name>polar_sched_proc_add_task</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>dst_proc</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>dst_node</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sched_remove_from_running_queue</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ctl</name><operator>-&gt;</operator><name>running_task_tail</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>running_task</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>SHMQueueEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>running_task</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>running_task_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>running_task_tail</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>running_task</name><operator>.</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctl</name><operator>-&gt;</operator><name>running_task_head</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>running_task</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>SHMQueueEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>running_task</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>running_task_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>running_task_head</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>running_task</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>running_queue_head</name></name> <operator>=</operator> <name><name>ctl</name><operator>-&gt;</operator><name>running_task_head</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SHMQueueDelete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>running_task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sched_proc_mark_finished_tasks_removed</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>task_tag</name> <init>= <expr><call><name><name>sched</name><operator>-&gt;</operator><name>task_tag</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hash_elem</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>hash_search</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>task_hash</name></name></expr></argument>, <argument><expr><name>task_tag</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task_head</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_task</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_task</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>TASK_HASH_GET_HEAD</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>hash_elem</name></expr></argument>, <argument><expr><name>task_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>prev_task</name> <operator>=</operator> <name>task_head</name></expr>;</expr_stmt>

	<comment type="block">/* If task is finished, then its previous dependent task should be finished too */</comment>
	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type> <name>prev_status</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>prev_status</name> <operator>=</operator> <call><name>POLAR_TASK_NODE_STATUS</name><argument_list>(<argument><expr><name>prev_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>prev_status</name> <operator>!=</operator> <name>POLAR_TASK_NODE_FINISHED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Previous task %p status=%x is incorrect ,expect POLAR_TASK_NODE_FINISHED, task_head %p"</literal></expr></argument>, <argument><expr><name>prev_task</name></expr></argument>, <argument><expr><name>prev_status</name></expr></argument>, <argument><expr><name>task_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Call dispatcher registerd function to handle the finished task */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>ctl</name><operator>-&gt;</operator><name>handle_finished</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>ctl</name><operator>-&gt;</operator><name>handle_finished</name></name><argument_list>(<argument><expr><name>prev_task</name></expr></argument>, <argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>finished_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>sched_remove_from_running_queue</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>prev_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>next_task</name> <operator>=</operator> <operator>(</operator><name>polar_task_node_t</name> <operator>*</operator><operator>)</operator><call><name>SHMQueueNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prev_task</name><operator>-&gt;</operator><name>depend_task</name></name></expr></argument>,
													  <argument><expr><operator>&amp;</operator><name><name>prev_task</name><operator>-&gt;</operator><name>depend_task</name></name></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>polar_task_node_t</name></expr></argument>, <argument><expr><name>depend_task</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>prev_task</name> <operator>==</operator> <name>task</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>next_task</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>task_hash</name></name></expr></argument>, <argument><expr><name>task_tag</name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>TASK_HASH_SET_HEAD</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>hash_elem</name></expr></argument>, <argument><expr><name>next_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>SHMQueueDelete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prev_task</name><operator>-&gt;</operator><name>depend_task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>POLAR_UPDATE_TASK_NODE_STATUS</name><argument_list>(<argument><expr><name>prev_task</name></expr></argument>, <argument><expr><name>POLAR_TASK_NODE_REMOVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev_task</name> <operator>=</operator> <name>next_task</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>finished_task_num</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>
	while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_sched_proc_set_tasks_removed</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sched</name><operator>-&gt;</operator><name>total_proc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>polar_sub_proc_t</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>sub_proc</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task_finished</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>TASK_QUEUE_IS_EMPTY</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>task_finished</name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>task_tail</name></name></expr>;</expr_stmt>

		<do>do
		<block>{<block_content>
			<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>task_finished</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint32</name></type> <name>status</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>POLAR_TASK_NODE_STATUS</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>POLAR_TASK_NODE_FINISHED</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sched_proc_mark_finished_tasks_removed</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>status</name> <operator>!=</operator> <name>POLAR_TASK_NODE_REMOVED</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>task_finished</name> <operator>==</operator> <name><name>proc</name><operator>-&gt;</operator><name>task_head</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>POLAR_SCHED_TASK_ADVANCE</name><argument_list>(<argument><expr><name>sched</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>, <argument><expr><name>task_finished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		while <condition>(<expr><name>true</name></expr>)</condition>;</do>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>polar_sched_proc_reset_removed_tasks</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>removed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sched</name><operator>-&gt;</operator><name>total_proc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>polar_sub_proc_t</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>&amp;</operator><name><name>ctl</name><operator>-&gt;</operator><name>sub_proc</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><operator>!</operator><call><name>TASK_QUEUE_IS_EMPTY</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name><name>proc</name><operator>-&gt;</operator><name>task_tail</name></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>POLAR_TASK_NODE_STATUS</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>POLAR_TASK_NODE_REMOVED</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>POLAR_RESET_TASK_NODE</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>polar_sched_proc_retreat_ring</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>removed</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>reset_task_num</name></name> <operator>+=</operator> <name>removed</name></expr>;</expr_stmt>
	<return>return <expr><name>removed</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Remove finished task from the running queue.
 * Return the number of removed finished task in this cycle
 */</comment>
<function><type><name>int</name></type>
<name>polar_sched_remove_finished_task</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>polar_sched_proc_set_tasks_removed</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>polar_sched_proc_reset_removed_tasks</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>cleanup_task</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>sched</name><operator>-&gt;</operator><name>task_cleanup</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name><name>sched</name><operator>-&gt;</operator><name>task_cleanup</name></name><argument_list>(<argument><expr><name><name>sched</name><operator>-&gt;</operator><name>run_arg</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_sub_task_main</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sub_task_ctl_t</name></type> <name>task_ctl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Latch</name> <modifier>*</modifier></type><name>dispatcher_latch</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>task_ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sub_task_ctl_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>task_ctl</name><operator>.</operator><name>sched</name></name> <operator>=</operator> <operator>(</operator><name>polar_task_sched_t</name> <operator>*</operator><operator>)</operator><name>main_arg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>dispatcher_latch</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>task_ctl</name><operator>.</operator><name>sched</name><operator>-&gt;</operator><name>dispatcher</name><operator>-&gt;</operator><name>procLatch</name></name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_ctl</name><operator>.</operator><name>sub_proc_id</name></name></expr></argument>, <argument><expr><name><name>MyBgworkerEntry</name><operator>-&gt;</operator><name>bgw_extra</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>task_ctl</name><operator>.</operator><name>sub_proc_id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>task_ctl</name><operator>.</operator><name>sub_proc_id</name></name> <operator>&lt;</operator> <name><name>task_ctl</name><operator>.</operator><name>sched</name><operator>-&gt;</operator><name>total_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>MyProc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>MyLatch</name> <operator>==</operator> <operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>task_ctl</name><operator>.</operator><name>fetch_task_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dlist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_ctl</name><operator>.</operator><name>hold_tasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dlist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_ctl</name><operator>.</operator><name>repeat_tasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sub_task_update_ps_display</name><argument_list>(<argument><expr><name><name>task_ctl</name><operator>.</operator><name>sub_proc_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>CurrentResourceOwner</name> <operator>=</operator> <call><name>ResourceOwnerCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"parallel proc pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CurrentMemoryContext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
												 <argument><expr><literal type="string">"parallel proc pool"</literal></expr></argument>,
												 <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>polar_sub_task_sigterm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>polar_sub_task_sighup_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>polar_bg_quickdie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><name>polar_bg_sigusr1_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>task_ctl</name><operator>.</operator><name>sched</name><operator>-&gt;</operator><name>task_startup</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>task_ctl</name><operator>.</operator><name>sched</name><operator>-&gt;</operator><name>task_startup</name></name><argument_list>(<argument><expr><name><name>task_ctl</name><operator>.</operator><name>sched</name><operator>-&gt;</operator><name>run_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>dispatcher_latch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"polar proc pool start subprocess %d for %s"</literal></expr></argument>, <argument><expr><name><name>task_ctl</name><operator>.</operator><name>sub_proc_id</name></name></expr></argument>, <argument><expr><name><name>task_ctl</name><operator>.</operator><name>sched</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Exit this process if we get sigterm signal and parallel schedule enable shutdown.
		 * Processes may have order to exit, we use cleanup_task to control it
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>got_sigterm</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>polar_sched_shutdown_enabled</name><argument_list>(<argument><expr><name><name>task_ctl</name><operator>.</operator><name>sched</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>cleanup_task</name><argument_list>(<argument><expr><name><name>task_ctl</name><operator>.</operator><name>sched</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>got_sighup</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>got_sighup</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ProcessConfigFile</name><argument_list>(<argument><expr><name>PGC_SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>task</name> <operator>=</operator> <call><name>fetch_waiting_task_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>task_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>task</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>next_task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Latch</name> <modifier>*</modifier></type><name>next_latch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>task_ctl</name><operator>.</operator><name>sched</name><operator>-&gt;</operator><name>task_handle</name></name><argument_list>(<argument><expr><name><name>task_ctl</name><operator>.</operator><name>sched</name></name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>proc_add_repeat_task</name><argument_list>(<argument><expr><operator>&amp;</operator><name>task_ctl</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>finished_seq</name></name> <operator>=</operator> <call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>task_ctl</name><operator>.</operator><name>sched</name><operator>-&gt;</operator><name>finished_seq</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>next_latch</name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>next_latch</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>next_latch</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>next_task</name> <operator>=</operator> <operator>(</operator><name>polar_task_node_t</name> <operator>*</operator><operator>)</operator><call><name>SHMQueueNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>depend_task</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>depend_task</name></name></expr></argument>,
															  <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>polar_task_node_t</name></expr></argument>, <argument><expr><name>depend_task</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>POLAR_UPDATE_TASK_NODE_STATUS</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>POLAR_TASK_NODE_FINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>next_latch</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>next_task</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_TASK_NODE_STATUS</name><argument_list>(<argument><expr><name>next_task</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>POLAR_TASK_NODE_HOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>POLAR_UPDATE_TASK_NODE_STATUS</name><argument_list>(<argument><expr><name>next_task</name></expr></argument>, <argument><expr><name>POLAR_TASK_NODE_RUNNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>next_latch</name> <operator>!=</operator> <name>MyLatch</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>next_latch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>dispatcher_latch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>evt</name> <init>= <expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_POSTMASTER_DEATH</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dlist_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task_ctl</name><operator>.</operator><name>repeat_tasks</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>evt</name> <operator>|=</operator> <name>WL_TIMEOUT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <comment type="block">/* ms */</comment>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>, <argument><expr><name>evt</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>WAIT_EVENT_POLAR_SUB_TASK_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_POSTMASTER_DEATH</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_LATCH_SET</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"polar proc pool exit subprocess %d for %s, fetch_running_task=%ld, add_hold_task=%ld, remove_hold_task=%ld, add_repeat_task=%ld, remove_repeat_task=%ld"</literal></expr></argument>,
		 <argument><expr><name><name>task_ctl</name><operator>.</operator><name>sub_proc_id</name></name></expr></argument>, <argument><expr><name><name>task_ctl</name><operator>.</operator><name>sched</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
		 <argument><expr><name><name>task_ctl</name><operator>.</operator><name>fetch_running_task</name></name></expr></argument>, <argument><expr><name><name>task_ctl</name><operator>.</operator><name>add_hold_task</name></name></expr></argument>, <argument><expr><name><name>task_ctl</name><operator>.</operator><name>remove_hold_task</name></name></expr></argument>,
		 <argument><expr><name><name>task_ctl</name><operator>.</operator><name>add_repeat_task</name></name></expr></argument>, <argument><expr><name><name>task_ctl</name><operator>.</operator><name>remove_repeat_task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * From here on, elog(ERROR) should end with exit(1), not send
	 * control back to the sigsetjmp block above
	 */</comment>
	<expr_stmt><expr><name>ExitOnAnyError</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<comment type="block">/* Normal exit from the bgwriter is here */</comment>
	<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* done */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_reg_sub_task</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BackgroundWorker</name></type> <name>worker</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BackgroundWorkerHandle</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_flags</name></name> <operator>=</operator> <name>BGWORKER_SHMEM_ACCESS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_start_time</name></name> <operator>=</operator> <name>BgWorkerStart_PostmasterStart</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_restart_time</name></name> <operator>=</operator> <name>BGW_NEVER_RESTART</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_library_name</name></name></expr></argument>, <argument><expr><literal type="string">"postgres"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_function_name</name></name></expr></argument>, <argument><expr><literal type="string">"polar_sub_task_main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_notify_pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_extra</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_name</name></name></expr></argument>, <argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_type</name></name></expr></argument>, <argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_main_arg</name></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator><operator>(</operator><name><name>ctl</name><operator>-&gt;</operator><name>sched</name></name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RegisterDynamicBackgroundWorker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>sub_proc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>handle</name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>sub_proc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>proc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_start_proc_pool</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>sched</name><operator>-&gt;</operator><name>dispatcher</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>sched</name><operator>-&gt;</operator><name>dispatcher</name></name> <operator>=</operator> <name>MyProc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>dispatcher</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sched</name><operator>-&gt;</operator><name>total_proc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_reg_sub_task</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/*
 * polar_bg_quickdie() occurs when signalled SIGQUIT by the postmaster.
 */</comment>
<function><type><name>void</name></type>
<name>polar_bg_quickdie</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We DO NOT want to run proc_exit() or atexit() callbacks -- we're here
	 * because shared memory may be corrupted, so we don't want to try to
	 * clean up our transaction.  Just nail the windows shut and get out of
	 * town.  The callbacks wouldn't be safe to run from a signal handler,
	 * anyway.
	 *
	 * Note we do _exit(2) not _exit(0).  This is to force the postmaster into
	 * a system reset cycle if someone sends a manual SIGQUIT to a random
	 * backend.  This is necessary precisely because we don't clean up our
	 * shared memory state.  (The "dead man switch" mechanism in pmsignal.c
	 * should ensure the postmaster sees this as a crash, too, but no harm in
	 * being doubly sure.)
	 */</comment>
	<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_bg_sigusr1_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>         <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>latch_sigusr1_handler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_release_task_sched_ctl</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>task_nodes_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>task_nodes_ptr</name> <init>= <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>sched</name><operator>)</operator> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>polar_task_sched_t</name></expr></argument>, <argument><expr><name>task_nodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>polar_sched_enable_shutdown</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>sched</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctl</name><operator>-&gt;</operator><name>sched</name><operator>-&gt;</operator><name>total_proc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BackgroundWorkerHandle</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name><name>ctl</name><operator>-&gt;</operator><name>sub_proc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>handle</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BgwHandleStatus</name></type> <name>status</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>GetBackgroundWorkerPid</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>BGWH_STOPPED</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>TerminateBackgroundWorker</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>polar_wait_bg_worker_shutdown</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Release polar_task_sched_ctl_t, added_task_num=%ld, fail_add_task_num=%ld, finished_task_num=%ld, hold_task_num=%ld, reset_task_num=%ld"</literal></expr></argument>,
		 <argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>added_task_num</name></name></expr></argument>, <argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>fail_add_task_num</name></name></expr></argument>, <argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>finished_task_num</name></name></expr></argument>, <argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>hold_task_num</name></name></expr></argument>, <argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>reset_task_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_destroy</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>task_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>polar_calc_task_sched_shmem_size</name><argument_list>(<argument><expr><name><name>sched</name><operator>-&gt;</operator><name>total_proc</name></name></expr></argument>, <argument><expr><name><name>sched</name><operator>-&gt;</operator><name>task_node_size</name></name></expr></argument>, <argument><expr><name><name>sched</name><operator>-&gt;</operator><name>task_queue_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>task_nodes_size</name> <operator>=</operator> <name>size</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>polar_task_sched_t</name></expr></argument>, <argument><expr><name>task_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>task_nodes_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>task_nodes_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_sched_ctl_reg_handler</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>polar_dispatcher_handle_finished</name></type> <name>handle_finished</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>finished_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>handle_finished</name></name> <operator>=</operator> <name>handle_finished</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>finished_arg</name></name> <operator>=</operator> <name>finished_arg</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
