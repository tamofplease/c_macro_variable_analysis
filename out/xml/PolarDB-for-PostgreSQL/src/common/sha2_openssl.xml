<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/common/sha2_openssl.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * sha2_openssl.c
 *	  Set of wrapper routines on top of OpenSSL to support SHA-224
 *	  SHA-256, SHA-384 and SHA-512 functions.
 *
 * This should only be used if code is compiled with OpenSSL support.
 *
 * Portions Copyright (c) 2016-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *		  src/common/sha2_openssl.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/sha.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/sha2.h"</cpp:file></cpp:include>


<comment type="block">/* Interface routines for SHA-256 */</comment>
<function><type><name>void</name></type>
<name>pg_sha256_init</name><parameter_list>(<parameter><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SHA256_Init</name><argument_list>(<argument><expr><operator>(</operator><name>SHA256_CTX</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_sha256_update</name><parameter_list>(<parameter><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SHA256_Update</name><argument_list>(<argument><expr><operator>(</operator><name>SHA256_CTX</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_sha256_final</name><parameter_list>(<parameter><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SHA256_Final</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>(</operator><name>SHA256_CTX</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Interface routines for SHA-512 */</comment>
<function><type><name>void</name></type>
<name>pg_sha512_init</name><parameter_list>(<parameter><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SHA512_Init</name><argument_list>(<argument><expr><operator>(</operator><name>SHA512_CTX</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_sha512_update</name><parameter_list>(<parameter><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SHA512_Update</name><argument_list>(<argument><expr><operator>(</operator><name>SHA512_CTX</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_sha512_final</name><parameter_list>(<parameter><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SHA512_Final</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>(</operator><name>SHA512_CTX</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Interface routines for SHA-384 */</comment>
<function><type><name>void</name></type>
<name>pg_sha384_init</name><parameter_list>(<parameter><decl><type><name>pg_sha384_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SHA384_Init</name><argument_list>(<argument><expr><operator>(</operator><name>SHA512_CTX</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_sha384_update</name><parameter_list>(<parameter><decl><type><name>pg_sha384_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SHA384_Update</name><argument_list>(<argument><expr><operator>(</operator><name>SHA512_CTX</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_sha384_final</name><parameter_list>(<parameter><decl><type><name>pg_sha384_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SHA384_Final</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>(</operator><name>SHA512_CTX</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Interface routines for SHA-224 */</comment>
<function><type><name>void</name></type>
<name>pg_sha224_init</name><parameter_list>(<parameter><decl><type><name>pg_sha224_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SHA224_Init</name><argument_list>(<argument><expr><operator>(</operator><name>SHA256_CTX</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_sha224_update</name><parameter_list>(<parameter><decl><type><name>pg_sha224_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SHA224_Update</name><argument_list>(<argument><expr><operator>(</operator><name>SHA256_CTX</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_sha224_final</name><parameter_list>(<parameter><decl><type><name>pg_sha224_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SHA224_Final</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>(</operator><name>SHA256_CTX</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
