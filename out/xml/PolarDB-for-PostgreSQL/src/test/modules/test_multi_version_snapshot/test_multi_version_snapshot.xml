<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/test/modules/test_multi_version_snapshot/test_multi_version_snapshot.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapshot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELOG</name><parameter_list>(<parameter><type><name>err_mode</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>elog(err_mode, "Test %s in %d failed, "fmt, __FUNCTION__, __LINE__, ##__VA_ARGS__)</cpp:value></cpp:define>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_snapshot_access_with_set_retry</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name><name>xip</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>bool</name></type> <name>overflowed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>xmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>xmax</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>replication_slot_xmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>replication_slot_catalog_xmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * When all snapshot slots share lock hold, set snapshot should do nothing
	 */</comment>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <call><name>polar_replica_multi_version_snapshot_get_slot_num</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_test_acquire_slot_lock</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="line">//no available slot, should do nothing</comment>
	<expr_stmt><expr><call><name>polar_test_KnownAssignedXidsAdd</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_replica_multi_version_snapshot_set_snapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <call><name>polar_replica_multi_version_snapshot_get_slot_num</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_test_release_slot_lock</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_curr_slot_no</name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot set should do nothing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_next_slot_no</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot next slot num wrong: wrong value is %d; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_next_slot_no</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_write_retried_times</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>polar_replica_multi_version_snapshot_get_retry_times</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store write retried times wrong: wrong value is"</literal><name>UINT64_FORMAT</name><literal type="string">"; correct value is %d"</literal></expr></argument>,
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_read_retried_times</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>polar_replica_multi_version_snapshot_get_retry_times</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_write_switched_times</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store write switched times wrong: wrong value is "</literal><name>UINT64_FORMAT</name><literal type="string">"; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_write_switched_times</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * When all slot share lock released, set snapshot should success
	 */</comment>
	<expr_stmt><expr><call><name>polar_test_replica_multi_version_snapshot_set_snapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_curr_slot_no</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot current slot num wrong: wrong value is %d; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_curr_slot_no</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_next_slot_no</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot next slot num wrong: wrong value is %d; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_next_slot_no</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>polar_test_replica_multi_version_snapshot_get_snapshot</name><argument_list>(<argument><expr><name>xip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflowed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmax</name></expr></argument>,
													<argument><expr><operator>&amp;</operator><name>replication_slot_xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>replication_slot_catalog_xmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction count wrong: wrong value is %d; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>xmin</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction xmin wrong: wrong value is %d; correct value is %d"</literal></expr></argument>,
			 <argument><expr><name>xmin</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>xmax</name> <operator>!=</operator> <call><name>GetLatestSnapshot</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>xmax</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction xmax wrong: wrong value is %d; correct value is %d"</literal></expr></argument>,
			 <argument><expr><name>xmax</name></expr></argument>, <argument><expr><call><name>GetLatestSnapshot</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>xmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>xip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>xip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>xip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction array wrong: wrong value is %d-%d-%d; correct value is %d-%d-%d"</literal></expr></argument>,
			 <argument><expr><name><name>xip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_write_retried_times</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>polar_replica_multi_version_snapshot_get_retry_times</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store write retried times wrong: wrong value is"</literal><name>UINT64_FORMAT</name><literal type="string">"; correct value is %d"</literal></expr></argument>,
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_read_retried_times</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>polar_replica_multi_version_snapshot_get_retry_times</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_write_switched_times</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store write switched times wrong: wrong value is "</literal><name>UINT64_FORMAT</name><literal type="string">"; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_write_switched_times</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* 
	 * When next slot share locked, set snapshot should success on next slot with retry 
	 */</comment>
	<expr_stmt><expr><call><name>polar_test_acquire_slot_lock</name><argument_list>(<argument><expr><call><name>polar_replica_multi_version_snapshot_get_next_slot_no</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_replica_multi_version_snapshot_set_snapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_release_slot_lock</name><argument_list>(<argument><expr><call><name>polar_replica_multi_version_snapshot_get_next_slot_no</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_curr_slot_no</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot current slot num wrong: wrong value is %d; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_curr_slot_no</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_next_slot_no</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot next slot num wrong: wrong value is %d; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_next_slot_no</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>polar_test_replica_multi_version_snapshot_get_snapshot</name><argument_list>(<argument><expr><name>xip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflowed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmax</name></expr></argument>,
													<argument><expr><operator>&amp;</operator><name>replication_slot_xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>replication_slot_catalog_xmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction count wrong: wrong value is %d; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>xmin</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction xmin wrong: wrong value is %d; correct value is %d"</literal></expr></argument>,
			 <argument><expr><name>xmin</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>xmax</name> <operator>!=</operator> <call><name>GetLatestSnapshot</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>xmax</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction xmax wrong: wrong value is %d; correct value is %d"</literal></expr></argument>,
			 <argument><expr><name>xmax</name></expr></argument>, <argument><expr><call><name>GetLatestSnapshot</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>xmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>xip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>xip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>xip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction array wrong: wrong value is %d-%d-%d; correct value is %d-%d-%d"</literal></expr></argument>,
			 <argument><expr><name><name>xip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_write_retried_times</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>polar_replica_multi_version_snapshot_get_retry_times</name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store write retried times wrong: wrong value is"</literal><name>UINT64_FORMAT</name><literal type="string">"; correct value is %d"</literal></expr></argument>,
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_read_retried_times</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>polar_replica_multi_version_snapshot_get_retry_times</name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_write_switched_times</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store write switched times wrong: wrong value is "</literal><name>UINT64_FORMAT</name><literal type="string">"; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_write_switched_times</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* clear test env */</comment>
	<expr_stmt><expr><call><name>polar_test_set_curr_slot_num</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_set_next_slot_num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_KnownAssignedXidsReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_snapshot_access_with_get_retry</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name><name>xip</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>bool</name></type> <name>overflowed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>xmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>xmax</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>replication_slot_xmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>replication_slot_catalog_xmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>get_succ</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * When no snapshot set, get snapshot should failed
	 */</comment>
	<expr_stmt><expr><name>get_succ</name> <operator>=</operator> <call><name>polar_test_replica_multi_version_snapshot_get_snapshot</name><argument_list>(<argument><expr><name>xip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflowed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmax</name></expr></argument>,
														<argument><expr><operator>&amp;</operator><name>replication_slot_xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>replication_slot_catalog_xmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>get_succ</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"get snapshot should failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_read_retried_times</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>polar_replica_multi_version_snapshot_get_retry_times</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store read retried times wrong: wrong value is"</literal><name>UINT64_FORMAT</name><literal type="string">"; correct value is %d"</literal></expr></argument>,
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_read_retried_times</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>polar_replica_multi_version_snapshot_get_retry_times</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_read_switched_times</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store read switched times wrong: wrong value is "</literal><name>UINT64_FORMAT</name><literal type="string">"; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_read_switched_times</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * When snapshot slot exclusive lock hold, get snapshot should retry or failed
	 */</comment>
	<expr_stmt><expr><call><name>polar_test_KnownAssignedXidsAdd</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_replica_multi_version_snapshot_set_snapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_acquire_slot_lock</name><argument_list>(<argument><expr><call><name>polar_replica_multi_version_snapshot_get_curr_slot_no</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>get_succ</name> <operator>=</operator> <call><name>polar_test_replica_multi_version_snapshot_get_snapshot</name><argument_list>(<argument><expr><name>xip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflowed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmax</name></expr></argument>,
													<argument><expr><operator>&amp;</operator><name>replication_slot_xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>replication_slot_catalog_xmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_release_slot_lock</name><argument_list>(<argument><expr><call><name>polar_replica_multi_version_snapshot_get_curr_slot_no</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>get_succ</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"get snapshot should failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_read_retried_times</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal><operator>*</operator><call><name>polar_replica_multi_version_snapshot_get_retry_times</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store read retried times wrong: wrong value is "</literal><name>UINT64_FORMAT</name><literal type="string">"; correct value is %d"</literal></expr></argument>,
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_read_retried_times</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><call><name>polar_replica_multi_version_snapshot_get_retry_times</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_read_switched_times</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store read switched times wrong: wrong value is "</literal><name>UINT64_FORMAT</name><literal type="string">"; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_read_switched_times</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* 
	 * When snapshot slot exclusive lock released, get snapshot should success
	 */</comment>
	<expr_stmt><expr><call><name>polar_test_replica_multi_version_snapshot_get_snapshot</name><argument_list>(<argument><expr><name>xip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflowed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmax</name></expr></argument>,
													<argument><expr><operator>&amp;</operator><name>replication_slot_xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>replication_slot_catalog_xmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction count wrong: wrong value is %d; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>xmin</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction xmin wrong: wrong value is %d; correct value is %d"</literal></expr></argument>,
			 <argument><expr><name>xmin</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>xmax</name> <operator>!=</operator> <call><name>GetLatestSnapshot</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>xmax</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction xmax wrong: wrong value is %d; correct value is %d"</literal></expr></argument>,
			 <argument><expr><name>xmax</name></expr></argument>, <argument><expr><call><name>GetLatestSnapshot</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>xmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>xip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>xip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>xip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction array wrong: wrong value is %d-%d-%d; correct value is %d-%d-%d"</literal></expr></argument>,
			 <argument><expr><name><name>xip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_read_retried_times</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal><operator>*</operator><call><name>polar_replica_multi_version_snapshot_get_retry_times</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store read retried times wrong: wrong value is "</literal><name>UINT64_FORMAT</name><literal type="string">"; correct value is %d"</literal></expr></argument>,
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_read_retried_times</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><call><name>polar_replica_multi_version_snapshot_get_retry_times</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_read_switched_times</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store read switched times wrong: wrong value is "</literal><name>UINT64_FORMAT</name><literal type="string">"; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_read_switched_times</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* 
	 * When new snapshot set, should get new snapshot
	 */</comment>
	<expr_stmt><expr><call><name>polar_test_KnownAssignedXidsAdd</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_replica_multi_version_snapshot_set_snapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_replica_multi_version_snapshot_get_snapshot</name><argument_list>(<argument><expr><name>xip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflowed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmax</name></expr></argument>,
													<argument><expr><operator>&amp;</operator><name>replication_slot_xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>replication_slot_catalog_xmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction count wrong: wrong value is %d; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>xmax</name> <operator>!=</operator> <call><name>GetLatestSnapshot</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>xmax</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction xmax wrong: wrong value is %d; correct value is %d"</literal></expr></argument>,
			 <argument><expr><name>xmax</name></expr></argument>, <argument><expr><call><name>GetLatestSnapshot</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>xmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>xip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>xip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>xip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">5</literal> <operator>||</operator> <name><name>xip</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction array wrong: wrong value is %d-%d-%d-%d; correct value is %d-%d-%d-%d"</literal></expr></argument>,
			 <argument><expr><name><name>xip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xip</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_curr_slot_no</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot current slot num wrong: wrong value is %d; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_curr_slot_no</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_next_slot_no</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot next slot num wrong: wrong value is %d; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_next_slot_no</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* clear test env */</comment>
	<expr_stmt><expr><call><name>polar_test_set_curr_slot_num</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_set_next_slot_num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_KnownAssignedXidsReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_snapshot_access_with_roundwrap</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>polar_test_KnownAssignedXidsAdd</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>polar_replica_multi_version_snapshot_get_slot_num</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_test_replica_multi_version_snapshot_set_snapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_curr_slot_no</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>polar_replica_multi_version_snapshot_get_slot_num</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot current slot num wrong: wrong value is %d; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_curr_slot_no</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>polar_replica_multi_version_snapshot_get_slot_num</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_next_slot_no</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot next slot num wrong: wrong value is %d; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_next_slot_no</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* clear test env */</comment>
	<expr_stmt><expr><call><name>polar_test_set_curr_slot_num</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_set_next_slot_num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_KnownAssignedXidsReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_snapshot_access</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name><name>xip</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>bool</name></type> <name>overflowed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>xmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>xmax</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>replication_slot_xmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>replication_slot_catalog_xmin</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>polar_test_KnownAssignedXidsAdd</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_test_replica_multi_version_snapshot_set_snapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_test_replica_multi_version_snapshot_get_snapshot</name><argument_list>(<argument><expr><name>xip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflowed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmax</name></expr></argument>,
													<argument><expr><operator>&amp;</operator><name>replication_slot_xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>replication_slot_catalog_xmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction count wrong: wrong value is %d; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>xmin</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction xmin wrong: wrong value is %d; correct value is %d"</literal></expr></argument>,
			 <argument><expr><name>xmin</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>xmax</name> <operator>!=</operator> <call><name>GetLatestSnapshot</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>xmax</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction xmax wrong: wrong value is %d; correct value is %d"</literal></expr></argument>,
			 <argument><expr><name>xmax</name></expr></argument>, <argument><expr><call><name>GetLatestSnapshot</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>xmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>xip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>xip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>xip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot transaction array wrong: wrong value is %d-%d-%d; correct value is %d-%d-%d"</literal></expr></argument>,
			 <argument><expr><name><name>xip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>xip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_read_retried_times</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store read retried times wrong: wrong value is "</literal><name>UINT64_FORMAT</name><literal type="string">"; correct value is %d"</literal></expr></argument>,
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_read_retried_times</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_replica_multi_version_snapshot_get_write_retried_times</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store write retried times wrong: wrong value is "</literal><name>UINT64_FORMAT</name><literal type="string">"; correct value is %d"</literal></expr></argument>, 
			 <argument><expr><call><name>polar_replica_multi_version_snapshot_get_write_retried_times</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* clear test env */</comment>
	<expr_stmt><expr><call><name>polar_test_set_curr_slot_num</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_set_next_slot_num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_test_KnownAssignedXidsReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_size</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>store_size</name></decl>;</decl_stmt>

	<comment type="block">/* 
	 * In this test, we have configurations as below: ref test_multi_version_snapshot.conf
	 * 		polar_replica_multi_version_snapshot_slot_num = 32
	 * 		max_connections = 80	
     * 		max_prepared_transactions = 5
     * 		max_worker_processes = 9
     * 		autovacuum_max_workers = 5
	 * so we have some computed values as below:
	 * 		MaxBackends = max_connections + autovacuum_max_workers + 1 + max_worker_processes 
	 *                  = 80 + 5 + 1 + 9
	 *                  = 95
	 *  	PROCARRAY_MAXPROCS = MaxBackends + max_prepared_xacts = 95 + 5 = 100
	 * 		TOTAL_MAX_CACHED_SUBXIDS = (PGPROC_MAX_CACHED_SUBXIDS + 1) * PROCARRAY_MAXPROCS) 
	 *                               = (64 + 1) * 100
	 *                               = 6500
	 * then 
	 *      sizeof(polar_replica_multi_version_snapshot_t) = 32 + TOTAL_MAX_CACHED_SUBXIDS * 4 
	 *                                                     = 32 + 6500 * 4
	 * 													   = 26032 bytes
	 *      total shared memory size = 64 + 32*128 + 32*26032 = 418624
	 */</comment>
	<expr_stmt><expr><name>store_size</name> <operator>=</operator> <call><name>polar_replica_multi_version_snapshot_store_shmem_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>store_size</name> <operator>!=</operator> <literal type="number">837184</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"snapshot store size computed wrong: wrong value is %d, correct value is %d"</literal></expr></argument>, 
			 <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>store_size</name></expr></argument>, <argument><expr><literal type="number">837184</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_multi_version_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * SQL-callable entry point to perform all tests.
 */</comment>
<function><type><name>Datum</name></type>
<name>test_multi_version_snapshot</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>test_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_snapshot_access</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_snapshot_access_with_roundwrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_snapshot_access_with_get_retry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_snapshot_access_with_set_retry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
