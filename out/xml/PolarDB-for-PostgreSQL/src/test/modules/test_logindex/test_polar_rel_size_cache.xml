<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/test/modules/test_logindex/test_polar_rel_size_cache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_rel_size_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_fd.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_rel_exists</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RelFileNode</name></type> <name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferTag</name></type>   <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>lsn_changed</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>forkNum</name></name> <operator>=</operator> <name>MAIN_FORKNUM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* It should be valid if we did not add information for this relation */</comment>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_only</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x4000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The block is invalid if it's dropped */</comment>
	<expr_stmt><expr><call><name>polar_record_db_state_with_lock</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x5000</literal></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name>POLAR_DB_DROPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x4000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <literal type="number">0x5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The block is valid if it's new created db */</comment>
	<expr_stmt><expr><call><name>polar_record_db_state_with_lock</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x5100</literal></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name>POLAR_DB_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">99</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x5110</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <literal type="number">0x5110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">98</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x5100</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <literal type="number">0x5100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The block is invalid if it's truncated */</comment>
	<expr_stmt><expr><call><name>polar_record_rel_size_with_lock</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x5200</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x5110</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <literal type="number">0x5200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The block is valid if we didn't add infomation for this relation after 0x6000 */</comment>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x6000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <literal type="number">0x6000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x5110</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <literal type="number">0x5200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_record_db_state_with_lock</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x6100</literal></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name>POLAR_DB_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x6110</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <literal type="number">0x6110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x6100</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <literal type="number">0x6100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_record_rel_size_with_lock</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x6200</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">99</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x6100</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <literal type="number">0x6100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x6100</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <literal type="number">0x6200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_rel_size_table_full</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><name>REL_INFO_TOTAL_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_relation_size_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RelFileNode</name></type> <name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>lsn</name> <init>= <expr><literal type="number">0x7000</literal></expr></init></decl>, <decl><type ref="prev"/><name>lsn_changed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>size</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>, <decl><type ref="prev"/><name>size101</name></decl>, <decl><type ref="prev"/><name>size102</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>max_tid2_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferTag</name></type> <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>polar_rel_size_cache_blocks</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">101</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>forkNum</name></name> <operator>=</operator> <name>MAIN_FORKNUM</name></expr>;</expr_stmt>

	<comment type="block">/* Write table full, which tid=1 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>total</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>lsn</name> <operator>+=</operator> <name>i</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_record_rel_size_with_lock</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x4000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <literal type="number">0x4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x4000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size101</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>max_tid2_lsn</name> <operator>=</operator> <name>lsn</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x5110</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <literal type="number">0x5200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">102</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">200000</literal></expr>;</expr_stmt>

	<comment type="block">/* Write table full and tid=1 and tid=2 should be flushed */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>total</name> <operator>*</operator> <name>polar_rel_size_cache_blocks</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>lsn</name> <operator>+=</operator> <name>i</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_record_rel_size_with_lock</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>size102</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x4000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x4000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">101</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <name>size101</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_only</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x4000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <name>size101</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x4000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <name>max_tid2_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x5110</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <literal type="number">0x5200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Keep table which tid=2 */</comment>
	<expr_stmt><expr><call><name>polar_truncate_rel_size_cache</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_tid2_lsn</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_only</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x4000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">101</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <name>size101</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x4000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <name>max_tid2_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_truncate_rel_size_cache</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_tid2_lsn</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">102</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <name>size102</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x4000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_changed</name> <operator>==</operator> <name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <name>size102</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>polar_check_rel_block_valid_and_lsn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0x4000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_polar_rel_size_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
 * SQL-callable entry point to perform all tests.
 *
 * If a 1% false positive threshold is not met, emits WARNINGs.
 *
 * See README for details of arguments.
 */</comment>
<function><type><name>Datum</name></type>
<name>test_polar_rel_size_cache</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_rel_size_shmem_init</name><argument_list>(<argument><expr><literal type="string">"test_rel_cache"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name>polar_rel_size_shmem_init</name><argument_list>(<argument><expr><literal type="string">"test_rel_cache"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>cache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_rel_exists</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_rel_size_table_full</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>IsUnderPostmaster</name>  <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
