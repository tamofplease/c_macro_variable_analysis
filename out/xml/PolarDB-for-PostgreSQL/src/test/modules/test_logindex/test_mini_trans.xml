<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/test/modules/test_logindex/test_mini_trans.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_mini_transaction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/buf_internals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/polar_bitpos.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_mini_trans_page</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>  <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>  <name>plsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mini_trans_info_t</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>trans</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_find</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_cond_lock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plsn</name></expr></argument>)</argument_list></call>
		   <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>polar_logindex_mini_trans_lock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>h</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_BIT_IS_OCCUPIED</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>plsn</name> <operator>==</operator> <name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_mini_trans_unlock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_BIT_IS_OCCUPIED</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_find</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_BIT_IS_OCCUPIED</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>plsn</name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_lock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plsn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>plsn</name> <operator>==</operator> <name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_BIT_IS_OCCUPIED</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_mini_trans_unlock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_BIT_IS_OCCUPIED</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>plsn</name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_cond_lock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plsn</name></expr></argument>)</argument_list></call>
		   <operator>==</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>plsn</name> <operator>==</operator> <name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_BIT_IS_OCCUPIED</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_mini_trans_unlock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_BIT_IS_OCCUPIED</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_mini_trans_hash_conflict</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>  <name>plsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mini_trans_info_t</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>trans</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_find</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_cond_lock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plsn</name></expr></argument>)</argument_list></call>
		   <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>polar_logindex_mini_trans_key_lock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>h</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_BIT_IS_OCCUPIED</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>plsn</name> <operator>==</operator> <name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_mini_trans_unlock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_BIT_IS_OCCUPIED</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_key_find</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_BIT_IS_OCCUPIED</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>plsn</name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_key_lock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plsn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>plsn</name> <operator>==</operator> <name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_BIT_IS_OCCUPIED</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_mini_trans_unlock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_BIT_IS_OCCUPIED</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>plsn</name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_cond_key_lock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plsn</name></expr></argument>)</argument_list></call>
		   <operator>==</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>plsn</name> <operator>==</operator> <name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_BIT_IS_OCCUPIED</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_mini_trans_unlock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_BIT_IS_OCCUPIED</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_mini_trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>test_mini_trans</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferTag</name></type>   <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>  <name>lsn</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>, <decl><type ref="prev"/><name>plsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>trans</name> <operator>=</operator> <call><name>polar_logindex_mini_trans_shmem_init</name><argument_list>(<argument><expr><literal type="string">"test_mini_trans"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>trans</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_start</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>forkNum</name></name> <operator>=</operator> <name>MAIN_FORKNUM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_mini_trans_page</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_mini_trans_page</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_mini_trans_page</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>MINI_TRANSACTION_HASH_PAGE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_mini_trans_hash_conflict</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_mini_trans_hash_conflict</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test hash table full */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MINI_TRANSACTION_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>test_mini_trans_page</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_key_lock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><call><name>MINI_TRANSACTION_HASH_PAGE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plsn</name></expr></argument>)</argument_list></call>
		   <operator>!=</operator> <name>POLAR_INVALID_PAGE_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_key_lock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><call><name>MINI_TRANSACTION_HASH_PAGE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plsn</name></expr></argument>)</argument_list></call>
		   <operator>==</operator> <name>POLAR_INVALID_PAGE_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_logindex_abort_mini_transaction</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_logindex_mini_trans_end</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_find</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_cond_lock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plsn</name></expr></argument>)</argument_list></call>
		   <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_find</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_mini_trans_cond_lock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plsn</name></expr></argument>)</argument_list></call>
		   <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
