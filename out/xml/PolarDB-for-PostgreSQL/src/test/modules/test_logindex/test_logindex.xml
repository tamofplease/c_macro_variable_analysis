<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/test/modules/test_logindex/test_logindex.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_fullpage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_logindex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_logindex_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_control.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/bgworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/polar_bitpos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ps_status.h"</cpp:file></cpp:include>


<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSN_TEST_STEP</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MAX_BLOCK_NUMBER</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>bgwriter_pid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>BackgroundWorkerHandle</name> <modifier>*</modifier></type><name>bgwriter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>shutdown_requested</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XLogRecPtr</name></type>   <name>test_max_lsn</name> <init>= <expr><name>InvalidXLogRecPtr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>XLogRecPtr</name></type>   <name><name>test_start_lsn</name><index>[<expr><name>TEST_MAX_BLOCK_NUMBER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>XLogRecPtr</name></type>   <name><name>test_end_lsn</name><index>[<expr><name>TEST_MAX_BLOCK_NUMBER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>XLogRecPtr</name></type>   <name><name>test_only_two</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>test_logindex_bgwriter_main</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_insert_lsn_to_mem</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>max_lsn</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_mem_table_t</name>     <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_item_head_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_item_seg_t</name>  <modifier>*</modifier></type><name>item_seg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>      <name>plsn</name> <init>= <expr><name>InvalidXLogRecPtr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_lsn_t</name></type> <name>lsn_info</name></decl>;</decl_stmt>

	<comment type="block">/* Test insert into log_item_head_t */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>LOG_INDEX_ITEM_HEAD_LSN_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>lsn_info</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lsn_info</name><operator>.</operator><name>lsn</name></name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>max_lsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lsn_info</name><operator>.</operator><name>prev_lsn</name></name> <operator>=</operator> <name>plsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>log_index_insert_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_info</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>plsn</name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>max_lsn</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL_ACTIVE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_STATE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LOG_INDEX_MEM_TBL_STATE_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>log_index_tbl_find</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>number</name></name> <operator>==</operator> <name>LOG_INDEX_ITEM_HEAD_LSN_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>LOG_INDEX_ITEM_HEAD_LSN_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_COMBINE_LSN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>suffix_lsn</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>max_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_ITEM_IS</name><argument_list>(
			   <argument><expr><call><name>log_index_item_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
								   <argument><expr><call><name>LOG_INDEX_TBL_SLOT_VALUE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>==</operator> <name>LOG_INDEX_TBL_INVALID_SEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test insert log_item_seg_t after log_item_head_t */</comment>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LOG_INDEX_ITEM_SEG_LSN_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>lsn_info</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lsn_info</name><operator>.</operator><name>lsn</name></name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>max_lsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lsn_info</name><operator>.</operator><name>prev_lsn</name></name> <operator>=</operator> <name>plsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>log_index_insert_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_info</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>plsn</name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>max_lsn</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>!=</operator> <name>LOG_INDEX_TBL_INVALID_SEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>item_seg</name> <operator>=</operator> <call><name>log_index_item_seg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>next_seg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>item_seg</name><operator>-&gt;</operator><name>number</name></name> <operator>==</operator> <name>LOG_INDEX_ITEM_SEG_LSN_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>item_seg</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>==</operator> <name>LOG_INDEX_TBL_INVALID_SEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name>LOG_INDEX_ITEM_HEAD_LSN_NUM</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init>
			<condition><expr><name>j</name> <operator>&lt;</operator> <name>LOG_INDEX_ITEM_SEG_LSN_NUM</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_COMBINE_LSN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>item_seg</name><operator>-&gt;</operator><name>suffix_lsn</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name> <operator>*</operator> <name>LSN_TEST_STEP</name> <operator>+</operator> <name>max_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/* Test insert log_item_seg_t after log_item_seg_t */</comment>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LOG_INDEX_ITEM_SEG_LSN_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>lsn_info</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lsn_info</name><operator>.</operator><name>lsn</name></name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>max_lsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lsn_info</name><operator>.</operator><name>prev_lsn</name></name> <operator>=</operator> <name>plsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>log_index_insert_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_info</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>plsn</name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>max_lsn</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>test_max_lsn</name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>max_lsn</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>item_seg</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>!=</operator> <name>LOG_INDEX_TBL_INVALID_SEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>item_seg</name> <operator>=</operator> <call><name>log_index_item_seg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>item_seg</name><operator>-&gt;</operator><name>next_seg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>item_seg</name><operator>-&gt;</operator><name>number</name></name> <operator>==</operator> <name>LOG_INDEX_ITEM_SEG_LSN_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>item_seg</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>==</operator> <name>LOG_INDEX_TBL_INVALID_SEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator>
				<operator>(</operator><name>LOG_INDEX_ITEM_HEAD_LSN_NUM</name> <operator>+</operator> <name>LOG_INDEX_ITEM_SEG_LSN_NUM</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</init>
			<condition><expr><name>j</name> <operator>&lt;</operator> <name>LOG_INDEX_ITEM_HEAD_LSN_NUM</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_COMBINE_LSN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>item_seg</name><operator>-&gt;</operator><name>suffix_lsn</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name> <operator>*</operator> <name>LSN_TEST_STEP</name> <operator>+</operator> <name>max_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_insert_one_mem_table_full</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>  <name>start_lsn</name> <init>= <expr><name>test_max_lsn</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>total</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>start_time</name></decl>, <decl><type ref="prev"/><name>end_time</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>cost</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>tid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>plsn</name> <init>= <expr><name>InvalidXLogRecPtr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>total</name> <operator>=</operator> <name>LOG_INDEX_MEM_TBL_SEG_NUM</name> <operator>*</operator> <name>LOG_INDEX_ITEM_SEG_LSN_NUM</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>total</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_logindex_add_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>plsn</name></expr></argument>, <argument><expr><name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>start_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>plsn</name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>start_lsn</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>test_max_lsn</name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>start_lsn</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>start_lsn</name> <operator>=</operator> <name>test_max_lsn</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cost</name> <operator>=</operator> <operator>(</operator><name><name>end_time</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>start_time</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000000</literal> <operator>+</operator>
		   <operator>(</operator><name><name>end_time</name><operator>.</operator><name>tv_nsec</name></name> <operator>-</operator> <name><name>start_time</name><operator>.</operator><name>tv_nsec</name></name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
					  <argument><expr><literal type="string">"insert %d ,cost %ld, qps=%ld"</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name>cost</name></expr></argument>,
					  <argument><expr><name>total</name> <operator>*</operator> <operator>(</operator><literal type="number">1000000000</literal> <operator>/</operator> <name>cost</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tid</name> <operator>=</operator> <name>LOG_INDEX_MEM_TBL_ACTIVE_ID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_PREV_ID</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_FREE_HEAD</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>
		   <operator>==</operator> <name>LOG_INDEX_MEM_TBL_SEG_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"mem tbl state %d"</literal></expr></argument>, <argument><expr><call><name>LOG_INDEX_MEM_TBL_STATE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_STATE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>
		   <operator>==</operator> <name>LOG_INDEX_MEM_TBL_STATE_FLUSHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_TID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_STATE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>
		   <operator>==</operator> <name>LOG_INDEX_MEM_TBL_STATE_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_TID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_NEXT_ID</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_STATE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>
		   <operator>==</operator> <name>LOG_INDEX_MEM_TBL_STATE_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_TID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>
		   <operator>==</operator> <name>LOG_INDEX_TABLE_INVALID_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>total</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_logindex_add_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>plsn</name></expr></argument>, <argument><expr><name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>start_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>plsn</name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>start_lsn</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>test_max_lsn</name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>start_lsn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_lsn_iterator</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>log_index_lsn_iter_t</name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_lsn_t</name> <modifier>*</modifier></type><name>lsn_info</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>LSN_TEST_STEP</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>lsn_info</name> <operator>=</operator> <call><name>polar_logindex_lsn_iterator_next</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_info</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>lsn</name></name> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_lsn_iterate_from_invalid</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_index_lsn_iter_t</name></type> <name>lsn_iter</name> <init>= <expr><call><name>polar_logindex_create_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>test_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>lsn_iter</name></expr></argument>, <argument><expr><name>LSN_TEST_STEP</name></expr></argument>, <argument><expr><name>test_max_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_logindex_release_lsn_iterator</name><argument_list>(<argument><expr><name>lsn_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_lsn_iterate_from_super_max</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_index_lsn_t</name> <modifier>*</modifier></type><name>lsn_info</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>log_index_lsn_iter_t</name></type> <name>lsn_iter</name> <init>= <expr><call><name>polar_logindex_create_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>test_max_lsn</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>lsn_info</name> <operator>=</operator> <call><name>polar_logindex_lsn_iterator_next</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>lsn_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_info</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_logindex_release_lsn_iterator</name><argument_list>(<argument><expr><name>lsn_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_lsn_iterate_from_table_interval</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_index_lsn_t</name> <modifier>*</modifier></type><name>lsn_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferTag</name></type> <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>start_lsn</name> <init>= <expr><name>InvalidXLogRecPtr</name></expr></init></decl>, <decl><type ref="prev"/><name>plsn</name> <init>= <expr><name>InvalidXLogRecPtr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>total</name> <init>= <expr><name>LOG_INDEX_MEM_TBL_SEG_NUM</name> <operator>*</operator> <name>LOG_INDEX_ITEM_SEG_LSN_NUM</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>prev_tbl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_lsn_iter_t</name></type> <name>lsn_iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>forkNum</name></name> <operator>=</operator> <name>MAIN_FORKNUM</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

	<comment type="line">// insert one table</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>total</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_logindex_add_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>plsn</name></expr></argument>, <argument><expr><name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>test_max_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>plsn</name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>test_max_lsn</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>test_max_lsn</name> <operator>+=</operator> <operator>(</operator><name>LSN_TEST_STEP</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>prev_tbl</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_PREV_ID</name><argument_list>(<argument><expr><name>LOG_INDEX_MEM_TBL_ACTIVE_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>start_lsn</name> <operator>=</operator> <name><name>prev_tbl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>max_lsn</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>lsn_iter</name> <operator>=</operator> <call><name>polar_logindex_create_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>start_lsn</name> <operator>+</operator> <operator>(</operator><name>LSN_TEST_STEP</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lsn_info</name> <operator>=</operator> <call><name>polar_logindex_lsn_iterator_next</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>lsn_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_info</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>lsn</name></name> <operator>==</operator> <name>start_lsn</name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_lsn_iterate_from_file</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_index_lsn_iter_t</name></type> <name>lsn_iter</name> <init>= <expr><call><name>polar_logindex_create_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>test_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>lsn_iter</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>test_max_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_logindex_release_lsn_iterator</name><argument_list>(<argument><expr><name>lsn_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_insert_lsn_after_force_flush</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferTag</name></type> <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>total</name> <init>= <expr><name>LOG_INDEX_MEM_TBL_SEG_NUM</name> <operator>*</operator> <name>LOG_INDEX_ITEM_SEG_LSN_NUM</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_lsn_iter_t</name></type>   <name>lsn_iter</name> <init>= <expr><call><name>polar_logindex_create_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>test_max_lsn</name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>plsn</name> <init>= <expr><name>InvalidXLogRecPtr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>LOG_INDEX_MEM_TBL_ACTIVE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>next_table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>start_lsn</name> <init>= <expr><name>test_max_lsn</name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>forkNum</name></name> <operator>=</operator> <name>MAIN_FORKNUM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>


	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>total</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_logindex_add_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>plsn</name></expr></argument>, <argument><expr><name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>test_max_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>plsn</name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>test_max_lsn</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>test_max_lsn</name> <operator>+=</operator> <operator>(</operator><name>LSN_TEST_STEP</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>next_table</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL_ACTIVE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>LOG_INDEX_MEM_TBL_TID</name><argument_list>(<argument><expr><name>next_table</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>LOG_INDEX_MEM_TBL_TID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>lsn_iter</name></expr></argument>, <argument><expr><name>start_lsn</name></expr></argument>, <argument><expr><name>test_max_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_logindex_release_lsn_iterator</name><argument_list>(<argument><expr><name>lsn_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FULL_FILE_TEST</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>XLogRecPtr</name></type> <name><name>test_full_lsn</name><index>[<expr><name>MAX_FULL_FILE_TEST</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_insert_file_full</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferTag</name></type> <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>total</name> <init>= <expr><name>LOG_INDEX_MEM_TBL_SEG_NUM</name> <operator>*</operator> <name>LOG_INDEX_ITEM_SEG_LSN_NUM</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>plsn</name> <init>= <expr><name>InvalidXLogRecPtr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>start_time</name></decl>, <decl><type ref="prev"/><name>end_time</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>cost</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>forkNum</name></name> <operator>=</operator> <name>MAIN_FORKNUM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_FULL_FILE_TEST</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LOG_INDEX_TABLE_NUM_PER_FILE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>total</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>polar_logindex_add_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>plsn</name></expr></argument>, <argument><expr><name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>test_max_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>plsn</name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>test_max_lsn</name></expr>;</expr_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><name>test_max_lsn</name> <operator>+=</operator> <operator>(</operator><name>LSN_TEST_STEP</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name><name>test_full_lsn</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>test_max_lsn</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cost</name> <operator>=</operator> <operator>(</operator><name><name>end_time</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>start_time</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000000</literal> <operator>+</operator>
		   <operator>(</operator><name><name>end_time</name><operator>.</operator><name>tv_nsec</name></name> <operator>-</operator> <name><name>start_time</name><operator>.</operator><name>tv_nsec</name></name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Insert full file test, cost=%.2lf,qps=%.2lf"</literal></expr></argument>, <argument><expr><name>cost</name> <operator>/</operator> <literal type="number">1000000000.0</literal></expr></argument>,
						 <argument><expr><name>MAX_FULL_FILE_TEST</name> <operator>*</operator> <name>LOG_INDEX_TABLE_NUM_PER_FILE</name> <operator>*</operator> <name>total</name>
						 <operator>/</operator> <operator>(</operator><name>cost</name> <operator>/</operator> <literal type="number">1000000000.0</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_insert_lsn</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferTag</name></type> <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_item_head_t</name> <modifier>*</modifier></type><name>item1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>item9</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_item_head_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>LOG_INDEX_MEM_TBL_ACTIVE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_lsn_t</name></type> <name>lsn_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_lsn_iter_t</name></type>   <name>lsn_iter</name> <init>= <expr><call><name>polar_logindex_create_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>test_max_lsn</name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>forkNum</name></name> <operator>=</operator> <name>MAIN_FORKNUM</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_iter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>test_start_lsn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>test_max_lsn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_insert_lsn_to_mem</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>test_max_lsn</name></expr></argument>, <argument><expr><call><name>LOG_INDEX_MEM_TBL_HASH_PAGE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_end_lsn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>test_max_lsn</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>lsn_iter</name></expr></argument>, <argument><expr><name><name>test_start_lsn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr></argument>, <argument><expr><name><name>test_end_lsn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_start_lsn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>test_max_lsn</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_insert_lsn_to_mem</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>test_max_lsn</name></expr></argument>, <argument><expr><call><name>LOG_INDEX_MEM_TBL_HASH_PAGE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_end_lsn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>test_max_lsn</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>lsn_iter</name></expr></argument>, <argument><expr><name><name>test_start_lsn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr></argument>, <argument><expr><name><name>test_end_lsn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Test hash conflict */</comment>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL_HASH_PAGE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_start_lsn</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>test_max_lsn</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_insert_lsn_to_mem</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>test_max_lsn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_end_lsn</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>test_max_lsn</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>lsn_iter</name></expr></argument>, <argument><expr><name><name>test_start_lsn</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr></argument>, <argument><expr><name><name>test_end_lsn</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>log_index_tbl_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><call><name>LOG_INDEX_MEM_TBL_ACTIVE</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>data</name><operator>)</operator></expr></argument>,
							  <argument><expr><call><name>LOG_INDEX_MEM_TBL_HASH_PAGE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
		   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>log_index_tbl_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><call><name>LOG_INDEX_MEM_TBL_ACTIVE</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>data</name><operator>)</operator></expr></argument>,
							  <argument><expr><call><name>LOG_INDEX_MEM_TBL_HASH_PAGE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
		   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="block">/* Test find non-exists item */</comment>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>log_index_tbl_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><call><name>LOG_INDEX_MEM_TBL_ACTIVE</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>data</name><operator>)</operator></expr></argument>,
							  <argument><expr><call><name>LOG_INDEX_MEM_TBL_HASH_PAGE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
		   <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="block">/* Test hash conflict */</comment>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL_HASH_PAGE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>item1</name> <operator>=</operator> <call><name>log_index_tbl_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>item9</name> <operator>=</operator> <call><name>log_index_tbl_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>item1</name><operator>-&gt;</operator><name>next_item</name></name> <operator>==</operator> <name>LOG_INDEX_TBL_INVALID_SEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>log_index_item_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>item9</name><operator>-&gt;</operator><name>next_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name>item1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>log_index_item_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>LOG_INDEX_TBL_SLOT_VALUE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name>item9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test insert only one lsn */</comment>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>lsn_info</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <operator>&amp;</operator><name>tag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lsn_info</name><operator>.</operator><name>lsn</name></name> <operator>=</operator> <name>test_max_lsn</name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lsn_info</name><operator>.</operator><name>prev_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>log_index_insert_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_info</name></expr></argument>, <argument><expr><call><name>LOG_INDEX_MEM_TBL_HASH_PAGE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>test_only_two</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>test_max_lsn</name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_max_lsn</name> <operator>+=</operator> <name>LSN_TEST_STEP</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>lsn_iter</name></expr></argument>, <argument><expr><name><name>test_only_two</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>test_only_two</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Test insert one mem table full */</comment>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

	<block>{<block_content>
		<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>start</name> <init>= <expr><name>test_max_lsn</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>test_insert_one_mem_table_full</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>test_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>lsn_iter</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr></argument>, <argument><expr><name>test_max_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/* Test insert the other one lsn */</comment>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lsn_info</name><operator>.</operator><name>lsn</name></name> <operator>=</operator> <name>test_max_lsn</name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lsn_info</name><operator>.</operator><name>prev_lsn</name></name> <operator>=</operator> <name><name>test_only_two</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>log_index_insert_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lsn_info</name></expr></argument>, <argument><expr><call><name>LOG_INDEX_MEM_TBL_HASH_PAGE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>test_only_two</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>test_max_lsn</name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>lsn_iter</name></expr></argument>, <argument><expr><name><name>test_only_two</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>test_only_two</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_release_lsn_iterator</name><argument_list>(<argument><expr><name>lsn_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>test_max_lsn</name> <operator>+=</operator> <name>LSN_TEST_STEP</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_logindex_sigterm</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>shutdown_requested</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_iterate_non_exists_block_lsn</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>BlockNumber</name></type> <name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferTag</name></type>       <name>tag</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>forkNum</name></name> <operator>=</operator> <name>MAIN_FORKNUM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>polar_logindex_create_page_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>,
											   <argument><expr><name>LSN_TEST_STEP</name></expr></argument>, <argument><expr><name>test_max_lsn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_page_iterator_end</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_page_iterator_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_release_page_iterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_iterate_in_table0</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferTag</name></type>   <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>LSN_TEST_STEP</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>min_lsn</name> <init>= <expr><name>LSN_TEST_STEP</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>max_lsn</name> <init>=
		<expr><operator>(</operator><name>LOG_INDEX_ITEM_SEG_LSN_NUM</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>LOG_INDEX_ITEM_HEAD_LSN_NUM</name><operator>)</operator> <operator>*</operator> <name>LSN_TEST_STEP</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_lsn_t</name> <modifier>*</modifier></type><name>lsn_info</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>max_lsn</name> <operator>=</operator> <name>LSN_TEST_STEP</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<comment type="block">/*
	 * In this test case we first push lsn in set [min_lsn, max_lsn]
	 * Create iterator to get this set
	 */</comment>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>forkNum</name></name> <operator>=</operator> <name>MAIN_FORKNUM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>polar_logindex_create_page_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>min_lsn</name></expr></argument>, <argument><expr><name>max_lsn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>lsn_info</name> <operator>=</operator> <call><name>polar_logindex_page_iterator_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>LSN_TEST_STEP</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>prev_lsn</name></name> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>prev_lsn</name></name> <operator>==</operator> <name>i</name> <operator>-</operator> <name>LSN_TEST_STEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>lsn</name></name> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>LSN_TEST_STEP</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>max_lsn</name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_release_page_iterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_iterate_release</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferTag</name></type> <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>min_lsn</name> <init>= <expr><name>LSN_TEST_STEP</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>max_lsn</name> <init>=
		<expr><operator>(</operator><name>LOG_INDEX_ITEM_SEG_LSN_NUM</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>LOG_INDEX_ITEM_HEAD_LSN_NUM</name><operator>)</operator> <operator>*</operator> <name>LSN_TEST_STEP</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>forkNum</name></name> <operator>=</operator> <name>MAIN_FORKNUM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>polar_logindex_create_page_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>min_lsn</name></expr></argument>, <argument><expr><name>max_lsn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_logindex_page_iterator_end</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_release_page_iterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_iterate_only_two_lsn</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferTag</name></type> <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_lsn_t</name>       <modifier>*</modifier></type><name>lsn_info</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>forkNum</name></name> <operator>=</operator> <name>MAIN_FORKNUM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>


	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>polar_logindex_create_page_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name><name>test_only_two</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>test_only_two</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>lsn_info</name> <operator>=</operator> <call><name>polar_logindex_page_iterator_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>lsn</name></name> <operator>==</operator> <name><name>test_only_two</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>prev_lsn</name></name> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>lsn_info</name> <operator>=</operator> <call><name>polar_logindex_page_iterator_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>lsn</name></name> <operator>==</operator> <name><name>test_only_two</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>prev_lsn</name></name> <operator>==</operator> <name><name>test_only_two</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_release_page_iterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>polar_logindex_create_page_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name><name>test_only_two</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_only_two</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>lsn_info</name> <operator>=</operator> <call><name>polar_logindex_page_iterator_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>lsn</name></name> <operator>==</operator> <name><name>test_only_two</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>prev_lsn</name></name> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_release_page_iterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>polar_logindex_create_page_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name><name>test_only_two</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>test_only_two</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>lsn_info</name> <operator>=</operator> <call><name>polar_logindex_page_iterator_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>lsn</name></name> <operator>==</operator> <name><name>test_only_two</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>prev_lsn</name></name> <operator>==</operator> <name><name>test_only_two</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_release_page_iterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_iterate_lsn</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>test_iterate_only_two_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_iterate_non_exists_block_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_iterate_in_table0</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_iterate_release</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_save_memtable</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>logindex_snapshot</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>max_idx_table_id</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Test iterate lsn from saved file
	 */</comment>
	<expr_stmt><expr><call><name>test_iterate_in_table0</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_force_flush_table</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>mid</name> <init>= <expr><name>LOG_INDEX_MEM_TBL_ACTIVE_ID</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>LOG_INDEX_MEM_TBL</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">//Wait bgwriter to flush inactive table</comment>
	<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_STATE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LOG_INDEX_MEM_TBL_STATE_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>log_index_force_save_table</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>max_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>min_lsn</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>free_head</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_check_saved</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>

	<comment type="block">/* Add LSN which is already exists */</comment>
	<expr_stmt><expr><call><name>polar_logindex_add_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>, <argument><expr><name>test_max_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL_ACTIVE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_STATE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LOG_INDEX_MEM_TBL_STATE_FREE</name> <operator>||</operator>
		   <call><name>LOG_INDEX_MEM_TBL_IS_NEW</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_add_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>, <argument><expr><name>test_max_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_STATE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LOG_INDEX_MEM_TBL_STATE_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_FREE_HEAD</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_iterate_after_truncate</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>start_lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferTag</name></type> <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_lsn_t</name> <modifier>*</modifier></type><name>lsn_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>i</name> <init>= <expr><name>start_lsn</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>forkNum</name></name> <operator>=</operator> <name>MAIN_FORKNUM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>polar_logindex_create_page_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>start_lsn</name></expr></argument>, <argument><expr><name>test_max_lsn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>lsn_info</name> <operator>=</operator> <call><name>polar_logindex_page_iterator_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>lsn</name></name> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>LSN_TEST_STEP</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>test_max_lsn</name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_release_page_iterator</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_truncate_log</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>max_seg_no</name> <init>= <expr><call><name>LOG_INDEX_FILE_TABLE_SEGMENT_NO</name><argument_list>(<argument><expr><name><name>logindex_snapshot</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>max_idx_table_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_FULL_FILE_TEST</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint64</name></type> <name>seg_no</name> <init>= <expr><name><name>logindex_snapshot</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>min_segment_info</name><operator>.</operator><name>segment_no</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>polar_logindex_truncate</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name><name>test_full_lsn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>logindex_snapshot</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>min_segment_info</name><operator>.</operator><name>segment_no</name></name> <operator>-</operator> <name>seg_no</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>test_lsn_iterate_from_file</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name><name>test_full_lsn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>test_iterate_after_truncate</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name><name>test_full_lsn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LOG_INDEX_FILE_TABLE_NAME</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>max_seg_no</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_change_lsn_prefix</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>table</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferTag</name></type> <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>start_lsn</name></decl>, <decl><type ref="prev"/><name>end_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_lsn_iter_t</name></type> <name>lsn_iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>forkNum</name></name> <operator>=</operator> <name>MAIN_FORKNUM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL</name><argument_list>(<argument><expr><name>LOG_INDEX_MEM_TBL_ACTIVE_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>start_lsn</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>test_max_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_insert_lsn_to_mem</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>start_lsn</name></expr></argument>, <argument><expr><call><name>LOG_INDEX_MEM_TBL_HASH_PAGE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>end_lsn</name> <operator>=</operator> <name>test_max_lsn</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>next_table</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL</name><argument_list>(<argument><expr><name>LOG_INDEX_MEM_TBL_ACTIVE_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>lsn_iter</name> <operator>=</operator> <call><name>polar_logindex_create_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>start_lsn</name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn_iter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>next_table</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>idx_table_id</name></name> <operator>==</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>idx_table_id</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_lsn_iterator</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>lsn_iter</name></expr></argument>, <argument><expr><name>start_lsn</name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr></argument>, <argument><expr><name>end_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_logindex_release_lsn_iterator</name><argument_list>(<argument><expr><name>lsn_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>test_logindex_table_flushable</name><parameter_list>(<parameter><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test_logindex_bgwriter_main</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>logindex_snapshot_t</name></type> <name>logindex_snapshot</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>test_logindex_sigterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>logindex_snapshot</name> <operator>=</operator> <call><name>polar_logindex_snapshot_shmem_init</name><argument_list>(<argument><expr><literal type="string">"test_logindex_snapshot"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>LWTRANCHE_WAL_LOGINDEX_BEGIN</name></expr></argument>, <argument><expr><name>LWTRANCHE_WAL_LOGINDEX_END</name></expr></argument>, <argument><expr><name>test_logindex_table_flushable</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* We're now ready to receive signals */</comment>
	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"start logindex_bgwriter test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>!</operator><name>shutdown_requested</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>WaitLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>, <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_TIMEOUT</name> <operator>|</operator>
						   <name>WL_POSTMASTER_DEATH</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>PG_WAIT_EXTENSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Reset the latch, bail out if postmaster died, otherwise loop. */</comment>
		<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_POSTMASTER_DEATH</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>polar_logindex_bg_write</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_logindex_bgwriter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BackgroundWorker</name></type> <name>worker</name></decl>;</decl_stmt>

	<comment type="block">/* set up common data for all our workers */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_flags</name></name> <operator>=</operator> <name>BGWORKER_SHMEM_ACCESS</name> <operator>|</operator>
					   <name>BGWORKER_BACKEND_DATABASE_CONNECTION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_start_time</name></name> <operator>=</operator> <name>BgWorkerStart_RecoveryFinished</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_restart_time</name></name> <operator>=</operator> <name>BGW_NEVER_RESTART</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_library_name</name></name></expr></argument>, <argument><expr><literal type="string">"test_logindex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_function_name</name></name></expr></argument>, <argument><expr><literal type="string">"test_logindex_bgwriter_main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_name</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"test_logindex_bgwriter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_type</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"test_logindex_bgwriter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_notify_pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RegisterDynamicBackgroundWorker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bgwriter_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>WaitForBackgroundWorkerStartup</name><argument_list>(<argument><expr><name>bgwriter_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bgwriter_pid</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BGWH_STARTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_force_flush_full_table</name><parameter_list>(<parameter><decl><type><name>logindex_snapshot_t</name></type> <name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LWLock</name>     <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name> <operator>=</operator> <name>MAIN_FORKNUM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL_ACTIVE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL_LOCK</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>!</operator><call><name>LOG_INDEX_MEM_TBL_FULL</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>test_max_lsn</name> <operator>+=</operator> <name>LSN_TEST_STEP</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_logindex_add_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>, <argument><expr><name>test_max_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>LOG_INDEX_MEM_TBL_SET_STATE</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>LOG_INDEX_MEM_TBL_STATE_INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>log_index_force_save_table</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_logindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
 * SQL-callable entry point to perform all tests.
 *
 * If a 1% false positive threshold is not met, emits WARNINGs.
 *
 * See README for details of arguments.
 */</comment>
<function><type><name>Datum</name></type>
<name>test_logindex</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>start_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>logindex_snapshot_t</name></type> <name>logindex_snapshot</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>logindex_snapshot</name> <operator>=</operator> <call><name>polar_logindex_snapshot_shmem_init</name><argument_list>(<argument><expr><literal type="string">"test_logindex_snapshot"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>LWTRANCHE_WAL_LOGINDEX_BEGIN</name></expr></argument>, <argument><expr><name>LWTRANCHE_WAL_LOGINDEX_END</name></expr></argument>, <argument><expr><name>test_logindex_table_flushable</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>logindex_snapshot</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_logindex_bgwriter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>test_start_lsn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XLogRecPtr</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>TEST_MAX_BLOCK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>test_end_lsn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XLogRecPtr</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>TEST_MAX_BLOCK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>logindex_snapshot</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_logindex_snapshot_init</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>LSN_TEST_STEP</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_logindex_set_start_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>LSN_TEST_STEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_insert_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_lsn_iterate_from_file</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>LSN_TEST_STEP</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_lsn_iterate_from_invalid</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_lsn_iterate_from_super_max</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_lsn_iterate_from_table_interval</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_iterate_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_save_memtable</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_lsn_iterate_from_file</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>LSN_TEST_STEP</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_lsn_iterate_from_invalid</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_force_flush_table</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_load_logindex_snapshot_from_storage</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>LSN_TEST_STEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_lsn_iterate_from_file</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>LSN_TEST_STEP</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BufferTag</name></type> <name>tag</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>test_force_flush_full_table</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>logindex_snapshot</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_logindex_snapshot_init</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>LSN_TEST_STEP</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>test_check_saved</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>start_lsn</name>  <operator>=</operator> <name>test_max_lsn</name> <operator>+</operator> <name>LSN_TEST_STEP</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_insert_lsn_after_force_flush</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_insert_file_full</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_iterate_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_lsn_iterate_from_file</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>start_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_truncate_log</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_change_lsn_prefix</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>bgwriter_pid</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>WaitForBackgroundWorkerShutdown</name><argument_list>(<argument><expr><name>bgwriter_handle</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BGWH_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextResetAndDeleteChildren</name><argument_list>(<argument><expr><call><name>polar_logindex_memory_context</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
