<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/test/modules/test_rbtree/test_rbtree.c"><comment type="block">/*--------------------------------------------------------------------------
 *
 * test_rbtree.c
 *		Test correctness of red-black tree operations.
 *
 * Copyright (c) 2009-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *		src/test/modules/test_rbtree/test_rbtree.c
 *
 * -------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/rbtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>


<comment type="block">/*
 * Our test trees store an integer key, and nothing else.
 */</comment>
<typedef>typedef <type><struct>struct <name>IntRBTreeNode</name>
<block>{
	<decl_stmt><decl><type><name>RBTNode</name></type>		<name>rbtnode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>key</name></decl>;</decl_stmt>
}</block></struct></type> <name>IntRBTreeNode</name>;</typedef>


<comment type="block">/*
 * Node comparator.  We don't worry about overflow in the subtraction,
 * since none of our test keys are negative.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>irbt_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RBTNode</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBTNode</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>IntRBTreeNode</name> <modifier>*</modifier></type><name>ea</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>IntRBTreeNode</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>IntRBTreeNode</name> <modifier>*</modifier></type><name>eb</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>IntRBTreeNode</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>ea</name><operator>-&gt;</operator><name>key</name></name> <operator>-</operator> <name><name>eb</name><operator>-&gt;</operator><name>key</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Node combiner.  For testing purposes, just check that library doesn't
 * try to combine unequal keys.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>irbt_combine</name><parameter_list>(<parameter><decl><type><name>RBTNode</name> <modifier>*</modifier></type><name>existing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBTNode</name> <modifier>*</modifier></type><name>newdata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>IntRBTreeNode</name> <modifier>*</modifier></type><name>eexist</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>IntRBTreeNode</name> <operator>*</operator><operator>)</operator> <name>existing</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>IntRBTreeNode</name> <modifier>*</modifier></type><name>enew</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>IntRBTreeNode</name> <operator>*</operator><operator>)</operator> <name>newdata</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eexist</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name><name>enew</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"red-black tree combines %d into %d"</literal></expr></argument>,
			 <argument><expr><name><name>enew</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>eexist</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Node allocator */</comment>
<function><type><specifier>static</specifier> <name>RBTNode</name> <modifier>*</modifier></type>
<name>irbt_alloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IntRBTreeNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Node freer */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>irbt_free</name><parameter_list>(<parameter><decl><type><name>RBTNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Create a red-black tree using our support functions
 */</comment>
<function><type><specifier>static</specifier> <name>RBTree</name> <modifier>*</modifier></type>
<name>create_int_rbtree</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>rbt_create</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IntRBTreeNode</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					  <argument><expr><name>irbt_cmp</name></expr></argument>,
					  <argument><expr><name>irbt_combine</name></expr></argument>,
					  <argument><expr><name>irbt_alloc</name></expr></argument>,
					  <argument><expr><name>irbt_free</name></expr></argument>,
					  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Generate a random permutation of the integers 0..size-1
 */</comment>
<function><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type>
<name>GetPermutation</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>permutation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>permutation</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>permutation</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * This is the "inside-out" variant of the Fisher-Yates shuffle algorithm.
	 * Notionally, we append each new value to the array and then swap it with
	 * a randomly-chosen array element (possibly including itself, else we
	 * fail to generate permutations with the last integer last).  The swap
	 * step can be optimized by combining it with the insertion.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>j</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>				<comment type="block">/* avoid fetching undefined data if j=i */</comment>
			<expr_stmt><expr><name><name>permutation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>permutation</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>permutation</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>permutation</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Populate an empty RBTree with "size" integers having the values
 * 0, step, 2*step, 3*step, ..., inserting them in random order
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>rbt_populate</name><parameter_list>(<parameter><decl><type><name>RBTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>permutation</name> <init>= <expr><call><name>GetPermutation</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IntRBTreeNode</name></type> <name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isNew</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Insert values.  We don't expect any collisions. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>step</name> <operator>*</operator> <name><name>permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rbt_insert</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isNew</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected !isNew result from rbt_insert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Re-insert the first value to make sure collisions work right.  It's
	 * probably not useful to test that case over again for all the values.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>step</name> <operator>*</operator> <name><name>permutation</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rbt_insert</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isNew</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected isNew result from rbt_insert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>permutation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check the correctness of left-right traversal.
 * Left-right traversal is correct if all elements are
 * visited in increasing order.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testleftright</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RBTree</name>	   <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>create_int_rbtree</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IntRBTreeNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RBTreeIterator</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lastKey</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* check iteration over empty tree */</comment>
	<expr_stmt><expr><call><name>rbt_begin_iterate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>LeftRightWalk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rbt_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"left-right walk over empty tree produced an element"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* fill tree with consecutive natural numbers */</comment>
	<expr_stmt><expr><call><name>rbt_populate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* iterate over the tree */</comment>
	<expr_stmt><expr><call><name>rbt_begin_iterate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>LeftRightWalk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <operator>(</operator><name>IntRBTreeNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* check that order is increasing */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>&lt;=</operator> <name>lastKey</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"left-right walk gives elements not in sorted order"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>lastKey</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>lastKey</name> <operator>!=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"left-right walk did not reach end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"left-right walk missed some elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check the correctness of right-left traversal.
 * Right-left traversal is correct if all elements are
 * visited in decreasing order.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testrightleft</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RBTree</name>	   <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>create_int_rbtree</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IntRBTreeNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RBTreeIterator</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lastKey</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* check iteration over empty tree */</comment>
	<expr_stmt><expr><call><name>rbt_begin_iterate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>RightLeftWalk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rbt_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"right-left walk over empty tree produced an element"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* fill tree with consecutive natural numbers */</comment>
	<expr_stmt><expr><call><name>rbt_populate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* iterate over the tree */</comment>
	<expr_stmt><expr><call><name>rbt_begin_iterate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>RightLeftWalk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <operator>(</operator><name>IntRBTreeNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* check that order is decreasing */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>&gt;=</operator> <name>lastKey</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"right-left walk gives elements not in sorted order"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>lastKey</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>lastKey</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"right-left walk did not reach end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"right-left walk missed some elements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check the correctness of the rbt_find operation by searching for
 * both elements we inserted and elements we didn't.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testfind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RBTree</name>	   <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>create_int_rbtree</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Insert even integers from 0 to 2 * (size-1) */</comment>
	<expr_stmt><expr><call><name>rbt_populate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check that all inserted elements can be found */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IntRBTreeNode</name></type> <name>node</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>IntRBTreeNode</name> <modifier>*</modifier></type><name>resultNode</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>node</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>resultNode</name> <operator>=</operator> <operator>(</operator><name>IntRBTreeNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_find</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>resultNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"inserted element was not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>key</name></name> <operator>!=</operator> <name><name>resultNode</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"find operation in rbtree gave wrong result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Check that not-inserted elements can not be found, being sure to try
	 * values before the first and after the last element.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IntRBTreeNode</name></type> <name>node</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>IntRBTreeNode</name> <modifier>*</modifier></type><name>resultNode</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>node</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>resultNode</name> <operator>=</operator> <operator>(</operator><name>IntRBTreeNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_find</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>resultNode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"not-inserted element was found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Check the correctness of the rbt_leftmost operation.
 * This operation should always return the smallest element of the tree.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testleftmost</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RBTree</name>	   <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>create_int_rbtree</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IntRBTreeNode</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<comment type="block">/* Check that empty tree has no leftmost element */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>rbt_leftmost</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"leftmost node of empty tree is not NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* fill tree with consecutive natural numbers */</comment>
	<expr_stmt><expr><call><name>rbt_populate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check that leftmost element is the smallest one */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>IntRBTreeNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_leftmost</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>result</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"rbt_leftmost gave wrong result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check the correctness of the rbt_delete operation.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testdelete</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RBTree</name>	   <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>create_int_rbtree</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>deleteIds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>chosen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* fill tree with consecutive natural numbers */</comment>
	<expr_stmt><expr><call><name>rbt_populate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Choose unique ids to delete */</comment>
	<expr_stmt><expr><name>deleteIds</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>delsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>chosen</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>delsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>k</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call> <operator>%</operator> <name>size</name></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><name><name>chosen</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>size</name></expr>;</expr_stmt></block_content></block></while>
		<expr_stmt><expr><name><name>deleteIds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>chosen</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Delete elements */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>delsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IntRBTreeNode</name></type> <name>find</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>IntRBTreeNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>find</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>deleteIds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<comment type="block">/* Locate the node to be deleted */</comment>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>IntRBTreeNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_find</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name><name>deleteIds</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"expected element was not found during deleting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="block">/* Delete it */</comment>
		<expr_stmt><expr><call><name>rbt_delete</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Check that deleted elements are deleted */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IntRBTreeNode</name></type> <name>node</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>IntRBTreeNode</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>node</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>IntRBTreeNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_find</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>chosen</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Deleted element should be absent */</comment>
			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"deleted element still present in the rbtree"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Else it should be present */</comment>
			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>result</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"delete operation removed wrong rbtree value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Delete remaining elements, so as to exercise reducing tree to empty */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IntRBTreeNode</name></type> <name>find</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>IntRBTreeNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>chosen</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>find</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<comment type="block">/* Locate the node to be deleted */</comment>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>IntRBTreeNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_find</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"expected element was not found during deleting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="block">/* Delete it */</comment>
		<expr_stmt><expr><call><name>rbt_delete</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Tree should now be empty */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>rbt_leftmost</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"deleting all elements failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>deleteIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>chosen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SQL-callable entry point to perform all tests
 *
 * Argument is the number of entries to put in the trees
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_rb_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>test_rb_tree</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>size</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>&gt;</operator> <name>MaxAllocSize</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid size for test_rb_tree: %d"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>testleftright</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>testrightleft</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>testfind</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>testleftmost</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>testdelete</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>Max</name><argument_list>(<argument><expr><name>size</name> <operator>/</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
