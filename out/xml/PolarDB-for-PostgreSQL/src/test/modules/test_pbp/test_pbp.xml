<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/test/modules/test_pbp/test_pbp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_flushlist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_pbp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>Buffer</name></type>
<name>get_buffer_from_flushlist</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>	<name>first</name></decl>;</decl_stmt>

	<comment type="block">/* Do not hold this lock too much time. */</comment>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>flushlist_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>first_flush_buffer</name></name></expr>;</expr_stmt>

	<comment type="block">/* Flushlist is empty. */</comment>
	<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>POLAR_FLUSHNEXT_END_OF_LIST</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>flushlist_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>InvalidBuffer</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_flush_list_ctl</name><operator>-&gt;</operator><name>flushlist_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>first</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_buffer_with_exclusive_lock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name></type>	<name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>	<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf_desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>oldest_lsn</name></decl>;</decl_stmt>

	<comment type="block">/* Get one buffer from flush list. */</comment>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>get_buffer_from_flushlist</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>BufferIsInvalid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>buf_desc</name> <operator>=</operator> <call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Try to lock the buffer with LW_EXCLUSIVE */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>polar_conditional_lock_buffer_ext</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* lock successfully */</comment>

	<comment type="block">/* The buffer should have unrecoverable flag. */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>buf_desc</name><operator>-&gt;</operator><name>polar_flags</name></name> <operator>&amp;</operator> <name>POLAR_BUF_UNRECOVERABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldest_lsn</name> <operator>=</operator> <call><name>polar_buffer_get_oldest_lsn</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name>oldest_lsn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>oldest_lsn</name> <operator>&gt;=</operator> <name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>last_checkpoint_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><call><name>BufferGetLSN</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_lock_buffer_ext</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_UNLOCK</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_buffer_with_share_lock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name></type>	<name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>	<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufferDesc</name>	<modifier>*</modifier></type><name>buf_desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>oldest_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>latest_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> 		<name>state</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>get_buffer_from_flushlist</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>BufferIsInvalid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>buf_desc</name> <operator>=</operator> <call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Try to lock the buffer with LW_SHARE */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>LWLockConditionalAcquire</name><argument_list>(<argument><expr><call><name>BufferDescriptorGetContentLock</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>)</argument_list></call></expr></argument>,
								   <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* lock successfully */</comment>
	<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>LockBufHdr</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UnlockBufHdr</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldest_lsn</name> <operator>=</operator> <call><name>polar_buffer_get_oldest_lsn</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name>oldest_lsn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>oldest_lsn</name> <operator>&gt;=</operator> <name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>last_checkpoint_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>buf_desc</name><operator>-&gt;</operator><name>polar_flags</name></name> <operator>&amp;</operator> <name>POLAR_BUF_UNRECOVERABLE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>latest_lsn</name> <operator>=</operator> <call><name>BufferGetLSN</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>latest_lsn</name> <operator>&gt;</operator> <name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>last_flush_lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>polar_buffer_can_be_reused</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>XLogFlush</name><argument_list>(<argument><expr><name>latest_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_buffer_pool_ctl_set_last_flush_lsn</name><argument_list>(<argument><expr><name>latest_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_NO_REUSED</name></cpp:macro> <cpp:value>(BM_IO_IN_PROGRESS|BM_LOCKED|BM_IO_ERROR|BM_PIN_COUNT_WAITER)</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>BUF_FLAG_MASK</name> <operator>&amp;</operator> <name>FLAGS_NO_REUSED</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>polar_buffer_can_be_reused</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* clean flags that make buffer can not be reused. */</comment>
	<expr_stmt><expr><name>state</name> <operator>&amp;=</operator> <operator>~</operator><name>FLAGS_NO_REUSED</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS_MUST_BE_SET</name></cpp:macro> <cpp:value>(BM_VALID | BM_TAG_VALID | BM_PERMANENT)</cpp:value></cpp:define>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>FLAGS_MUST_BE_SET</name><operator>)</operator> <operator>!=</operator> <name>FLAGS_MUST_BE_SET</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>polar_buffer_can_be_reused</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Set flags that must be set. */</comment>
	<expr_stmt><expr><name>state</name> <operator>|=</operator> <name>FLAGS_MUST_BE_SET</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now, the buffer can be reused, but we do not really change the state
	 * at buffer, only use a fake state value.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_buffer_can_be_reused</name><argument_list>(<argument><expr><name>buf_desc</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_lock_buffer_ext</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_UNLOCK</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>verify_pbp_ctl</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		polar_buffer_pool_ctl-&gt;name = old_ctl-&gt;name + 1; \
		Assert(!polar_verify_buffer_pool_ctl()); \
		polar_buffer_pool_ctl-&gt;name = old_ctl-&gt;name; \
	} while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_buffer_pool_ctl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>pbp_ctl_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_buffer_pool_ctl_t</name> <modifier>*</modifier></type><name>old_ctl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>state</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_verify_buffer_pool_ctl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pbp_ctl_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_buffer_pool_ctl_padded</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_ctl</name> <operator>=</operator> <operator>(</operator><name>polar_buffer_pool_ctl_t</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>pbp_ctl_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>old_ctl</name></expr></argument>, <argument><expr><name>polar_buffer_pool_ctl</name></expr></argument>, <argument><expr><name>pbp_ctl_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>verify_pbp_ctl</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>verify_pbp_ctl</name><argument_list>(<argument><expr><name>header_magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>verify_pbp_ctl</name><argument_list>(<argument><expr><name>system_identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>verify_pbp_ctl</name><argument_list>(<argument><expr><name>last_checkpoint_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>verify_pbp_ctl</name><argument_list>(<argument><expr><name>nbuffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>verify_pbp_ctl</name><argument_list>(<argument><expr><name>buf_desc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>verify_pbp_ctl</name><argument_list>(<argument><expr><name>buffer_pool_ctl_shmem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>verify_pbp_ctl</name><argument_list>(<argument><expr><name>buffer_pool_shmem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>verify_pbp_ctl</name><argument_list>(<argument><expr><name>copy_buffer_shmem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>verify_pbp_ctl</name><argument_list>(<argument><expr><name>flush_list_ctl_shmem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>verify_pbp_ctl</name><argument_list>(<argument><expr><name>strategy_shmem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>verify_pbp_ctl</name><argument_list>(<argument><expr><name>tail_magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* verify state */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_buffer_pool_ctl_get_node_type</name><argument_list>()</argument_list></call> <operator>==</operator> <name>POLAR_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_buffer_pool_ctl_set_node_type</name><argument_list>(<argument><expr><name>POLAR_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>polar_verify_buffer_pool_ctl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_buffer_pool_ctl_set_node_type</name><argument_list>(<argument><expr><name>POLAR_REPLICA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>polar_verify_buffer_pool_ctl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_buffer_pool_ctl_set_node_type</name><argument_list>(<argument><expr><name>POLAR_STANDBY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>polar_verify_buffer_pool_ctl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>polar_local_node_type</name> <operator>=</operator> <name>POLAR_STANDBY</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_verify_buffer_pool_ctl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_buffer_pool_ctl_set_node_type</name><argument_list>(<argument><expr><name>POLAR_STANDALONE_DATAMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_verify_buffer_pool_ctl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Reset the old state. */</comment>
	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_verify_buffer_pool_ctl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_buffer_pool_ctl_get_error_state</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_buffer_pool_ctl_set_error_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>polar_verify_buffer_pool_ctl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_buffer_pool_ctl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>old_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_verify_buffer_pool_ctl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_pbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
 * SQL-callable entry point to perform all tests.
 */</comment>
<function><type><name>Datum</name></type>
<name>test_pbp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_enable_shared_storage_mode</name> <operator>||</operator>
		<operator>!</operator><call><name>polar_flush_list_enabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>polar_buffer_pool_is_inited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_verify_buffer_pool_ctl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_buffer_with_exclusive_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_buffer_with_share_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_buffer_pool_ctl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
