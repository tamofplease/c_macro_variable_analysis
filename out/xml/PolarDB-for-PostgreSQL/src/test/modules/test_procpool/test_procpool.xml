<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/test/modules/test_procpool/test_procpool.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/rbtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_procpool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MAX_TASK_NODES_NUM</name></cpp:macro> <cpp:value>(8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_TASK_QUEUE_DEPTH</name></cpp:macro> <cpp:value>(32)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>test_calc_task_node_t</name>
<block>{
	<decl_stmt><decl><type><name>polar_task_node_t</name></type>   <name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>              <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>              <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>              <name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>test_calc_task_node_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>test_node_handle_task</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name></decl></parameter>, <parameter><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>test_calc_task_node_t</name> <modifier>*</modifier></type><name>task_node</name> <init>= <expr><operator>(</operator><name>test_calc_task_node_t</name> <operator>*</operator><operator>)</operator><name>task</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>i</name> <init>= <expr><name><name>task_node</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>task_node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>i</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_node_task_finished</name><parameter_list>(<parameter><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>test_calc_task_node_t</name> <modifier>*</modifier></type><name>task_node</name> <init>= <expr><operator>(</operator><name>test_calc_task_node_t</name> <operator>*</operator><operator>)</operator><name>task</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name> <modifier>*</modifier></type><name>total</name> <init>= <expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>total</name> <operator>+=</operator> <name><name>task_node</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>test_node_get_tag</name><parameter_list>(<parameter><decl><type><name>polar_task_node_t</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>test_calc_task_node_t</name> <modifier>*</modifier></type><name>task_node</name> <init>= <expr><operator>(</operator><name>test_calc_task_node_t</name> <operator>*</operator><operator>)</operator><name>task</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>task_node</name><operator>-&gt;</operator><name>key</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>test_tag_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>i</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>i</name> <operator>%</operator> <literal type="number">32</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>test_tag_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>k1</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>key1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>k2</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>key2</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>k1</name> <operator>-</operator> <name>k2</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_calc_startup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Call startup function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>test_calc_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Call cleanup function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint64</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type>
<name>test_node_create_task_ctl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ctl</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>polar_task_sched_t</name> <modifier>*</modifier></type><name>sched</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>sched</name> <operator>=</operator> <call><name>polar_create_proc_task_sched</name><argument_list>(<argument><expr><literal type="string">"polar_test_procpool"</literal></expr></argument>,
											 <argument><expr><name>TEST_MAX_TASK_NODES_NUM</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_calc_task_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>TEST_TASK_QUEUE_DEPTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>polar_sched_reg_handler</name><argument_list>(<argument><expr><name>sched</name></expr></argument>, <argument><expr><name>test_calc_startup</name></expr></argument>, <argument><expr><name>test_node_handle_task</name></expr></argument>, <argument><expr><name>test_calc_cleanup</name></expr></argument>, <argument><expr><name>test_node_get_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>polar_create_task_sched_ctl</name><argument_list>(<argument><expr><name>sched</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>test_tag_hash</name></expr></argument>, <argument><expr><name>test_tag_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>polar_sched_ctl_reg_handler</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>test_node_task_finished</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ctl</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64</name></type>
<name>test_multi_calc</name><parameter_list>(<parameter><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_calc_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>n</name> <init>= <expr><name>max_calc_num</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>expected</name> <init>= <expr><name>n</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>test_calc_task_node_t</name></type> <name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>removed</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>added</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>node</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>i</name> <operator>%</operator> <literal type="number">256</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>.</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>added</name> <operator>=</operator> <call><name>polar_sched_add_task</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><operator>(</operator><name>polar_task_node_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>added</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>removed</name> <operator>=</operator> <call><name>polar_sched_remove_finished_task</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>added</name> <operator>&amp;&amp;</operator> <name>removed</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>, <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_POSTMASTER_DEATH</name></expr></argument>,
						   <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>WAIT_EVENT_POLAR_SUB_TASK_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>&amp;</operator> <name>WL_POSTMASTER_DEATH</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_LATCH_SET</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>max_calc_num</name></expr>)</condition>;</do>

	<while>while <condition>(<expr><operator>!</operator><call><name>polar_sched_empty_running_task</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>removed</name> <operator>=</operator> <call><name>polar_sched_remove_finished_task</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>removed</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>, <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_POSTMASTER_DEATH</name></expr></argument>,
						   <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>WAIT_EVENT_POLAR_SUB_TASK_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>&amp;</operator> <name>WL_POSTMASTER_DEATH</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_LATCH_SET</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>total</name> <operator>==</operator> <name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_procpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
 * SQL-callable entry point to perform all tests.
 *
 * If a 1% false positive threshold is not met, emits WARNINGs.
 *
 * See README for details of arguments.
 */</comment>
<function><type><name>Datum</name></type>
<name>test_procpool</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>max_calc_num</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>value</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>polar_task_sched_ctl_t</name> <modifier>*</modifier></type><name>ctl</name> <init>= <expr><call><name>test_node_create_task_ctl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>polar_start_proc_pool</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>test_multi_calc</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name>max_calc_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_release_task_sched_ctl</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>
</unit>
