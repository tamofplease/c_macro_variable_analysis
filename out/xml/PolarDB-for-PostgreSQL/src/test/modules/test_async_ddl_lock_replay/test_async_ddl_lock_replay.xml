<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/test/modules/test_async_ddl_lock_replay/test_async_ddl_lock_replay.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/relfilenode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_async_ddl_lock_replay.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_TEST_GET_PENDING_LOCK</name><parameter_list>(<parameter><type><name>lock</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((xl_standby_lock *)&amp;((lock).xid))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_TEST_INIT_PENDING_TBL</name><parameter_list>(<parameter><type><name>lk_tbl</name></type></parameter>)</parameter_list></cpp:macro> \
		<cpp:value>test_add_lock_to_pending_tbl(lk_tbl, sizeof(lk_tbl) / sizeof(polar_pending_lock));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><parameter_list>(<parameter><type><name>tx</name></type></parameter>, <parameter><type><name>tx_oldest</name></type></parameter>, <parameter><type><name>oldest</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>polar_get_lock_by_tx(tx, false); \
	Assert(tx-&gt;last_ptr == tx_oldest); \
	Assert(polar_get_async_ddl_lock_replay_oldest_ptr() == oldest);</cpp:value></cpp:define>

<comment type="block">/* one tx */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>polar_pending_lock</name></name></type> <name><name>lock_tbl1</name><index>[]</index></name> <init>=
<expr><block>{
	<comment type="block">/* ptr, rtime, xid, dbOid, relOid */</comment>
	<expr><block>{ <expr><literal type="number">111</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">100001</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100003</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">112</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">100001</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100004</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">113</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">100001</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100003</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">114</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">100001</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100005</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* two entries */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>polar_pending_lock</name></name></type> <name><name>lock_tbl2</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{ <expr><literal type="number">111</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">100001</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100003</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">112</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100004</literal></expr>, <expr><literal type="number">100003</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">113</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100004</literal></expr>, <expr><literal type="number">100005</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">114</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">100001</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100005</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">115</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">100001</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100004</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">116</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100004</literal></expr>, <expr><literal type="number">100007</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* five entries */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>polar_pending_lock</name></name></type> <name><name>lock_tbl3</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{ <expr><literal type="number">111</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">100001</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100003</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">112</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100004</literal></expr>, <expr><literal type="number">100003</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">113</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">100003</literal></expr>, <expr><literal type="number">100004</literal></expr>, <expr><literal type="number">100005</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">114</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100005</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">115</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">100001</literal></expr>, <expr><literal type="number">100002</literal></expr>, <expr><literal type="number">100004</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">116</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">100004</literal></expr>, <expr><literal type="number">100004</literal></expr>, <expr><literal type="number">100007</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">117</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">100003</literal></expr>, <expr><literal type="number">100004</literal></expr>, <expr><literal type="number">100007</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">118</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">100005</literal></expr>, <expr><literal type="number">100004</literal></expr>, <expr><literal type="number">100007</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">119</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">100004</literal></expr>, <expr><literal type="number">100004</literal></expr>, <expr><literal type="number">100007</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_init_async_ddl_lock_replay_myworker</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_async_ddl_lock_replay_worker_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>myWorker</name> <init>= <expr><call><name>polar_async_ddl_lock_replay_get_myworker</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_async_ddl_lock_replay_worker_t</name> <modifier>*</modifier></type><name>MyWorker</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>MyWorker</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_async_ddl_lock_replay_worker_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>cur_tx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>working</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name>LWTRANCHE_POLAR_ASYNC_LOCK_WORKER</name></expr></argument>, <argument><expr><literal type="string">"async ddl lock replay async worker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyWorker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LWTRANCHE_POLAR_ASYNC_LOCK_WORKER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>myWorker</name> <operator>=</operator> <name>MyWorker</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_allow_async_ddl_lock_replay</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>polar_enable_async_ddl_lock_replay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>polar_async_ddl_lock_replay_worker_num</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>polar_allow_async_ddl_lock_replay</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>polar_enable_async_ddl_lock_replay</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>polar_async_ddl_lock_replay_worker_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>polar_allow_async_ddl_lock_replay</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>polar_enable_async_ddl_lock_replay</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>polar_async_ddl_lock_replay_worker_num</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_allow_async_ddl_lock_replay</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_add_lock_to_pending_tbl</name><parameter_list>(<parameter><decl><type><name>polar_pending_lock</name> <modifier>*</modifier></type><name>locks</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_add_lock_to_pending_tbl</name><argument_list>(<argument><expr><call><name>POLAR_TEST_GET_PENDING_LOCK</name><argument_list>(<argument><expr><name><name>locks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>locks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last_ptr</name></expr></argument>, <argument><expr><name><name>locks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_async_ddl_lock_case1</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_get_async_ddl_lock_replay_oldest_ptr</name><argument_list>()</argument_list></call> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>POLAR_TEST_INIT_PENDING_TBL</name><argument_list>(<argument><expr><name>lock_tbl1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tx</name> <operator>=</operator> <call><name>polar_own_pending_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx</name><operator>-&gt;</operator><name>cur_lock</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx</name><operator>-&gt;</operator><name>cur_lock</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx</name><operator>-&gt;</operator><name>cur_lock</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">113</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx</name><operator>-&gt;</operator><name>cur_lock</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx</name><operator>-&gt;</operator><name>cur_lock</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_get_async_ddl_lock_replay_oldest_ptr</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><literal type="number">112</literal></expr></argument>, <argument><expr><literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><literal type="number">113</literal></expr></argument>, <argument><expr><literal type="number">113</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_release_all_pending_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_get_async_ddl_lock_replay_oldest_ptr</name><argument_list>()</argument_list></call> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_async_ddl_lock_case2</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx2</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx1</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>POLAR_TEST_INIT_PENDING_TBL</name><argument_list>(<argument><expr><name>lock_tbl2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tx1</name> <operator>=</operator> <call><name>polar_own_pending_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tx2</name> <operator>=</operator> <call><name>polar_own_pending_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx1</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx1</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx1</name><operator>-&gt;</operator><name>cur_lock</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx1</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx1</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx1</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx2</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx2</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx2</name><operator>-&gt;</operator><name>cur_lock</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx2</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">113</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx2</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">116</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx2</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx1</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>, <argument><expr><literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx2</name></expr></argument>, <argument><expr><literal type="number">113</literal></expr></argument>, <argument><expr><literal type="number">113</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx2</name></expr></argument>, <argument><expr><literal type="number">116</literal></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx1</name></expr></argument>, <argument><expr><literal type="number">115</literal></expr></argument>, <argument><expr><literal type="number">115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx1</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>, <argument><expr><literal type="number">116</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx2</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_release_all_pending_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_async_ddl_lock_case3</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx1</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx2</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx3</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx4</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx5</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>POLAR_TEST_INIT_PENDING_TBL</name><argument_list>(<argument><expr><name>lock_tbl3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tx1</name> <operator>=</operator> <call><name>polar_own_pending_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tx2</name> <operator>=</operator> <call><name>polar_own_pending_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tx3</name> <operator>=</operator> <call><name>polar_own_pending_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tx4</name> <operator>=</operator> <call><name>polar_own_pending_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tx5</name> <operator>=</operator> <call><name>polar_own_pending_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx1</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx2</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx3</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">113</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx4</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">116</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tx5</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <literal type="number">118</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx2</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>, <argument><expr><literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx4</name></expr></argument>, <argument><expr><literal type="number">119</literal></expr></argument>, <argument><expr><literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx3</name></expr></argument>, <argument><expr><literal type="number">117</literal></expr></argument>, <argument><expr><literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx3</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>, <argument><expr><literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx1</name></expr></argument>, <argument><expr><literal type="number">115</literal></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx5</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx1</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx2</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>, <argument><expr><literal type="number">119</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_TEST_GET_LOCK_AND_ASSERT</name><argument_list>(<argument><expr><name>tx4</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_release_all_pending_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_get_async_ddl_lock_replay_oldest_ptr</name><argument_list>()</argument_list></call> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_add_many_locks_to_pending_tbl</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_lock</name></type> <name>lock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>lock</name><operator>.</operator><name>last_ptr</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">100</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lock</name><operator>.</operator><name>rtime</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">500</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lock</name><operator>.</operator><name>xid</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lock</name><operator>.</operator><name>dbOid</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">2000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lock</name><operator>.</operator><name>relOid</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">5000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_add_lock_to_pending_tbl</name><argument_list>(<argument><expr><call><name>POLAR_TEST_GET_PENDING_LOCK</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lock</name><operator>.</operator><name>last_ptr</name></name></expr></argument>, <argument><expr><name><name>lock</name><operator>.</operator><name>rtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<while>while <condition>(<expr><operator>(</operator><name>tx</name> <operator>=</operator> <call><name>polar_own_pending_tx</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_release_all_pending_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_get_async_ddl_lock_replay_oldest_ptr</name><argument_list>()</argument_list></call> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_async_ddl_lock_replay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
 * SQL-callable entry point to perform all tests.
 *
 * If a 1% false positive threshold is not met, emits WARNINGs.
 *
 * See README for details of arguments.
 */</comment>
<function><type><name>Datum</name></type>
<name>test_async_ddl_lock_replay</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"start of test case."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>RecoveryInProgress</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
		<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<expr_stmt><expr><name>polar_enable_async_ddl_lock_replay_unit_test</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_allow_async_ddl_lock_replay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_init_async_ddl_lock_replay_myworker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_init_async_ddl_lock_replay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_async_ddl_lock_case1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_async_ddl_lock_case2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_async_ddl_lock_case3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_add_many_locks_to_pending_tbl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
