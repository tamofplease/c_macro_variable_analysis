<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/test/modules/test_xact_split/test_xact_split.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/variable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_xact_split_mock_ro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_xact_split_reset_mock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_xact_split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>save_polar_enable_xact_split</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>save_polar_enable_shared_storage_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PolarNodeType</name></type> <name>save_node_type</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>test_polar_str_to_xid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>test_polar_xact_split_mock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_polar_str_to_xid</name><parameter_list>(<parameter><type><name>input</name></type></parameter>, <parameter><type><name>output</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>if (polar_str_to_xid(input, INFO, NULL) != output) \
	{ \
		elog(WARNING, "result is different, %u, %u", polar_str_to_xid(input, INFO, NULL), output); \
		Assert(false); \
	}</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>polar_xact_split_guc_xids_tbl</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><literal type="string">"0,5,1,2,3,4"</literal></expr>,
	<expr><literal type="string">"1,5,4,3,2,1"</literal></expr>,
	<expr><literal type="string">"2,1"</literal></expr>,
	<expr><literal type="string">"3,10,7,2,4,3,8,9,1,6,5"</literal></expr>,
	<expr><literal type="string">"4,156140752,156140751,156140750,156140749,156140748,156140747,156140746,156140745,156140744,156140743,156140742,156140741,156140740,156140739,156140738,156140737,156140736,156140735,156140734,156140733,156140732,156140731,156140730,156140729,156140728,156140727,156140726,156140725,156140724,156140723,156140722,156140721,156140720,156140719,156140718,156140717,156140716,156140715,156140714"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>polar_xact_split_xact_state_xids_tbl</name><index>[]</index><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>=
<expr><block>{
	<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">156140752</literal></expr>,<expr><literal type="number">156140714</literal></expr>,<expr><literal type="number">156140715</literal></expr>,<expr><literal type="number">156140716</literal></expr>,<expr><literal type="number">156140717</literal></expr>,<expr><literal type="number">156140718</literal></expr>,<expr><literal type="number">156140719</literal></expr>,<expr><literal type="number">156140720</literal></expr>,<expr><literal type="number">156140721</literal></expr>,<expr><literal type="number">156140722</literal></expr>,<expr><literal type="number">156140723</literal></expr>,<expr><literal type="number">156140724</literal></expr>,<expr><literal type="number">156140725</literal></expr>,<expr><literal type="number">156140726</literal></expr>,<expr><literal type="number">156140727</literal></expr>,<expr><literal type="number">156140728</literal></expr>,<expr><literal type="number">156140729</literal></expr>,<expr><literal type="number">156140730</literal></expr>,<expr><literal type="number">156140731</literal></expr>,<expr><literal type="number">156140732</literal></expr>,<expr><literal type="number">156140733</literal></expr>,<expr><literal type="number">156140734</literal></expr>,<expr><literal type="number">156140735</literal></expr>,<expr><literal type="number">156140736</literal></expr>,<expr><literal type="number">156140737</literal></expr>,<expr><literal type="number">156140738</literal></expr>,<expr><literal type="number">156140739</literal></expr>,<expr><literal type="number">156140740</literal></expr>,<expr><literal type="number">156140741</literal></expr>,<expr><literal type="number">156140742</literal></expr>,<expr><literal type="number">156140743</literal></expr>,<expr><literal type="number">156140744</literal></expr>,<expr><literal type="number">156140745</literal></expr>,<expr><literal type="number">156140746</literal></expr>,<expr><literal type="number">156140747</literal></expr>,<expr><literal type="number">156140748</literal></expr>,<expr><literal type="number">156140749</literal></expr>,<expr><literal type="number">156140750</literal></expr>,<expr><literal type="number">156140751</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_polar_str_to_xid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>INFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>success</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name>INFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>success</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name>INFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>success</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"4294967296"</literal></expr></argument>, <argument><expr><name>INFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>success</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"4294967295"</literal></expr></argument>, <argument><expr><literal type="number">4294967295u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"4294967296"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* &gt; MaxTransactionId */</comment>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"18446744073709551615"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"18446744073709551616"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* overflow in strtoul */</comment>

	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">" 1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">" 1 "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"	1	"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"1 1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"1	1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"-2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"-3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"--1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"1-"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"1--"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"-1-"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"aa"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"1a"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"a1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"1a1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_polar_str_to_xid</name><argument_list>(<argument><expr><literal type="string">"a1a"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_polar_xact_split_mock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n_cases</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_xact_split_xact_state_xids_tbl</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>polar_xact_split_xact_state_xids_tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_cases</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>test_single_polar_xact_split_mock</name><argument_list>(<argument><expr><name><name>polar_xact_split_guc_xids_tbl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>polar_xact_split_xact_state_xids_tbl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"test case %d finished"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>test_xact_split_mock_ro</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>save_polar_enable_xact_split</name> <operator>=</operator> <name>polar_enable_xact_split</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>save_polar_enable_shared_storage_mode</name> <operator>=</operator> <name>polar_enable_shared_storage_mode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>save_node_type</name> <operator>=</operator> <call><name>polar_node_type</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>polar_enable_xact_split</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>polar_enable_shared_storage_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_set_node_type</name><argument_list>(<argument><expr><name>POLAR_REPLICA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>test_xact_split_reset_mock</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>polar_enable_xact_split</name> <operator>=</operator> <name>save_polar_enable_xact_split</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>polar_enable_shared_storage_mode</name> <operator>=</operator> <name>save_polar_enable_shared_storage_mode</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_set_node_type</name><argument_list>(<argument><expr><name>save_node_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SQL-callable entry point to perform all tests.
 */</comment>
<function><type><name>Datum</name></type>
<name>test_xact_split</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>test_polar_str_to_xid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_polar_xact_split_mock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
