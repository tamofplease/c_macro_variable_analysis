<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/test/modules/test_csn/test_csn.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapshot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/tqual.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/spin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/standby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_csn_mvcc_vars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_csnlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
    
<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>SnapshotData</name></name></type> <name>TestSnapshotDataMVCC</name> <init>= <expr><block>{<expr><name>HeapTupleSatisfiesMVCC</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_next_xid_info</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>nextXid</name></name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_next_xid_info</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"xid info -- nextXid:%d"</literal></expr></argument>, 
         <argument><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>nextXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_mvcc_info</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"mvcc info -- polar_oldest_active_xid:%d, polar_next_csn:"</literal><name>UINT64_FORMAT</name><literal type="string">", polar_latest_completed_xid:%d"</literal></expr></argument>, 
         <argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_shmem_csn_mvcc_var_cache</name><operator>-&gt;</operator><name>polar_oldest_active_xid</name></name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_shmem_csn_mvcc_var_cache</name><operator>-&gt;</operator><name>polar_next_csn</name></name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_shmem_csn_mvcc_var_cache</name><operator>-&gt;</operator><name>polar_latest_completed_xid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_xmin_info</name><parameter_list>(<parameter><decl><type><name>PGPROC</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>recent_xmin</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>transaction_xmin</name></decl></parameter>,
                         <parameter><decl><type><name>TransactionId</name></type> <name>recent_global_xmin</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>recent_global_data_xmin</name></decl></parameter>,
                         <parameter><decl><type><name>TransactionId</name></type> <name>replication_slot_xmin</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>replication_slot_catalog_xmin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>RecentXmin</name> <operator>=</operator> <name>recent_xmin</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>TransactionXmin</name> <operator>=</operator> <name>transaction_xmin</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>RecentGlobalXmin</name> <operator>=</operator> <name>recent_global_xmin</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>RecentGlobalDataXmin</name> <operator>=</operator> <name>recent_global_data_xmin</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ProcArraySetReplicationSlotXmin</name><argument_list>(<argument><expr><name>replication_slot_xmin</name></expr></argument>, <argument><expr><name>replication_slot_catalog_xmin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_xmin_info</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>data_xmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>catalog_xmin</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ProcArrayGetReplicationSlotXmin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data_xmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>catalog_xmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"xmin info -- RecentXmin:%d, TransactionXmin:%d, RecentGlobalXmin:%d, RecentGlobalDataXmin:%d, replication_slot_xmin:%d, replication_slot_catalog_xmin:%d"</literal></expr></argument>,
         <argument><expr><name>RecentXmin</name></expr></argument>, <argument><expr><name>TransactionXmin</name></expr></argument>, <argument><expr><name>RecentGlobalXmin</name></expr></argument>, <argument><expr><name>RecentGlobalDataXmin</name></expr></argument>, <argument><expr><name>data_xmin</name></expr></argument>, <argument><expr><name>catalog_xmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_pgxact_info</name><parameter_list>(<parameter><decl><type><name>PGPROC</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>xmin</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>vacuum_flags</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
    <decl_stmt><decl><type><name>PGXACT</name>	   <modifier>*</modifier></type><name>pgxact</name> <init>= <expr><operator>&amp;</operator><name><name>ProcGlobal</name><operator>-&gt;</operator><name>allPgXact</name><index>[<expr><name><name>proc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pgxact</name><operator>-&gt;</operator><name>xid</name></name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pgxact</name><operator>-&gt;</operator><name>xmin</name></name> <operator>=</operator> <name>xmin</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pgxact</name><operator>-&gt;</operator><name>polar_csn</name></name> <operator>=</operator> <name>csn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pgxact</name><operator>-&gt;</operator><name>vacuumFlags</name></name> <operator>=</operator> <name>vacuum_flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pgxact</name><operator>-&gt;</operator><name>overflowed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pgxact</name><operator>-&gt;</operator><name>delayChkpt</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pgxact</name><operator>-&gt;</operator><name>nxids</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_pgxact_info</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"pgxact info -- xid:%d, xmin:%d, polar_csn:"</literal><name>UINT64_FORMAT</name><literal type="string">", vacuumFlags:%d, overflowed:%d, delayChkpt:%d, nxids:%d"</literal></expr></argument>, 
         <argument><expr><name><name>MyPgXact</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><name><name>MyPgXact</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>, <argument><expr><name><name>MyPgXact</name><operator>-&gt;</operator><name>polar_csn</name></name></expr></argument>, <argument><expr><name><name>MyPgXact</name><operator>-&gt;</operator><name>vacuumFlags</name></name></expr></argument>,
         <argument><expr><name><name>MyPgXact</name><operator>-&gt;</operator><name>overflowed</name></name></expr></argument>, <argument><expr><name><name>MyPgXact</name><operator>-&gt;</operator><name>delayChkpt</name></name></expr></argument>, <argument><expr><name><name>MyPgXact</name><operator>-&gt;</operator><name>nxids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_snapshot_info</name><parameter_list>(<parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xmin</name></name> <operator>=</operator> <name>InvalidTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xmax</name></name> <operator>=</operator> <name>InvalidTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>polar_snapshot_csn</name></name> <operator>=</operator> <name>InvalidCommitSeqNo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>polar_csn_xid_snapshot</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xcnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>subxcnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>suboverflowed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>whenTaken</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_snapshot_info</name><parameter_list>(<parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>-&gt;</operator><name>polar_snapshot_csn</name></name> <operator>!=</operator> <name>InvalidCommitSeqNo</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>-&gt;</operator><name>polar_csn_xid_snapshot</name></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"snapshot info -- xmin:%d, polar_snapshot_csn:"</literal><name>UINT64_FORMAT</name><literal type="string">", xmax:%d, subxcnt:%d, suboverflowed:%d"</literal></expr></argument>,
                 <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>polar_snapshot_csn</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>subxcnt</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>suboverflowed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"subxids:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>snapshot</name><operator>-&gt;</operator><name>subxcnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>subxip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"snapshot info -- xmin:%d, polar_snapshot_csn:"</literal><name>UINT64_FORMAT</name><literal type="string">", xmax:%d"</literal></expr></argument>,
                 <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>polar_snapshot_csn</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"snapshot info -- xmin:%d, xmax:%d, xcnt:%d, subxcnt:%d, suboverflowed:%d"</literal></expr></argument>,
             <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xcnt</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>subxcnt</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>suboverflowed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"xids:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>snapshot</name><operator>-&gt;</operator><name>xcnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"subxids:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>snapshot</name><operator>-&gt;</operator><name>subxcnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>subxip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_info</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>next_xid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mvcc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>xmin</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pgxact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>next_xid</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print_next_xid_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mvcc</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print_mvcc_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>xmin</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print_xmin_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pgxact</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print_pgxact_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_ProcArrayInitRecovery</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xid</name> <operator>=</operator> <name>FirstNormalTransactionId</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>polar_csn_mvcc_var_cache_set</name><argument_list>(<argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_set_latestObservedXid</name><argument_list>(<argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"before init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"latestObservedXid:%d"</literal></expr></argument>, <argument><expr><call><name>polar_get_latestObservedXid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* In case of assert fail */</comment>
    <expr_stmt><expr><name>standbyState</name> <operator>=</operator> <name>STANDBY_INITIALIZED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ProcArrayInitRecovery</name><argument_list>(<argument><expr><name>xid</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>standbyState</name> <operator>=</operator> <name>STANDBY_DISABLED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"after init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"latestObservedXid:%d"</literal></expr></argument>, <argument><expr><call><name>polar_get_latestObservedXid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_ProcArrayClearTransaction</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xid</name> <operator>=</operator> <name>FirstNormalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>csn</name> <operator>=</operator> <name>POLAR_CSN_FIRST_NORMAL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>set_pgxact_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>PROC_IN_VACUUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"before clear"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ProcArrayClearTransaction</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"after clear"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_ProcArrayEndTransaction</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xid</name> <operator>=</operator> <name>FirstNormalTransactionId</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>set_pgxact_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csn_mvcc_var_cache_set</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_next_xid_info</name><argument_list>(<argument><expr><name>xid</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"before xact end var info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ProcArrayEndTransaction</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"after xact end var info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_AdvanceOldestActiveXidCSN</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid2</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xid1</name> <operator>=</operator> <name>FirstNormalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid2</name> <operator>=</operator> <name>FirstNormalTransactionId</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* case 1 test xid different with polar_oldest_active_xid, should do nothing */</comment>
    <expr_stmt><expr><call><name>polar_csn_mvcc_var_cache_shmem_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_pgxact_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"before advance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AdvanceOldestActiveXidCSNWrapper</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"after advance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* case 2 test xid same with polar_oldest_active_xid and no other active xid */</comment>
    <expr_stmt><expr><call><name>polar_csn_mvcc_var_cache_set</name><argument_list>(<argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_pgxact_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_next_xid_info</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"before advance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AdvanceOldestActiveXidCSNWrapper</name><argument_list>(<argument><expr><name>xid1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"after advance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* case 3 test xid same with polar_oldest_active_xid and have other active xid */</comment>
    <expr_stmt><expr><call><name>polar_csn_mvcc_var_cache_set</name><argument_list>(<argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_pgxact_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_next_xid_info</name><argument_list>(<argument><expr><name>xid2</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>POLAR_CSN_INPROGRESS</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"before advance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AdvanceOldestActiveXidCSNWrapper</name><argument_list>(<argument><expr><name>xid1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"after advance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_GetRecentGlobalDataXminCSN</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid2</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xid1</name> <operator>=</operator> <name>FirstNormalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid2</name> <operator>=</operator> <name>xid1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* 
     * case 1 
     * test RecentGlobalDataXmin/RecentGlobalXmin cache valid
     */</comment>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"before get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_xmin_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetRecentGlobalXminCSN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetRecentGlobalDataXminCSN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"after get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_xmin_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 
     * case 2
     * test RecentGlobalDataXmin/RecentGlobalXmin cache invalid 
     * and replication_slot_catalog_xmin/replication_slot_xmin invalid
     */</comment>
    <expr_stmt><expr><call><name>polar_csn_mvcc_var_cache_set</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_pgxact_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"before get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_xmin_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetRecentGlobalDataXminCSN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"after get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_xmin_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 
     * case 3
     * test RecentGlobalDataXmin/RecentGlobalXmin cache invalid 
     * and replication_slot_xmin valid and less
     */</comment>
    <expr_stmt><expr><call><name>polar_csn_mvcc_var_cache_set</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_pgxact_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"before get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_xmin_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetRecentGlobalDataXminCSN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"after get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_xmin_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 
     * case 4
     * test RecentGlobalDataXmin/RecentGlobalXmin cache invalid 
     * and replication_slot_catalog_xmin valid and less
     */</comment>
    <expr_stmt><expr><call><name>polar_csn_mvcc_var_cache_set</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_pgxact_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"before get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_xmin_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetRecentGlobalDataXminCSN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"after get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_xmin_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 
     * case 5
     * test RecentGlobalDataXmin/RecentGlobalXmin cache invalid 
     * and replication_slot_catalog_xmin/replication_slot_xmin invalid
     * and vacuum_defer_cleanup_age
     */</comment>
    <expr_stmt><expr><call><name>polar_csn_mvcc_var_cache_set</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_pgxact_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"before get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_xmin_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vacuum_defer_cleanup_age</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetRecentGlobalDataXminCSN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vacuum_defer_cleanup_age</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"after get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_xmin_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_GetSnapshotData</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn2</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xid1</name> <operator>=</operator> <name>FirstNormalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid2</name> <operator>=</operator> <name>xid1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid3</name> <operator>=</operator> <name>xid2</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>csn1</name> <operator>=</operator> <name>POLAR_CSN_FIRST_NORMAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>csn2</name> <operator>=</operator> <name>csn1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* case 1 test csn snapshot */</comment>
    <expr_stmt><expr><call><name>polar_csn_mvcc_var_cache_set</name><argument_list>(<argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>csn1</name></expr></argument>, <argument><expr><name>xid3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_pgxact_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_snapshot_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestSnapshotDataMVCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"before get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_snapshot_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestSnapshotDataMVCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetSnapshotData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestSnapshotDataMVCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"after get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_snapshot_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestSnapshotDataMVCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* case 2 test csn xid snapshot */</comment>
    <expr_stmt><expr><name>polar_csn_xid_snapshot</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csn_mvcc_var_cache_set</name><argument_list>(<argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>csn1</name></expr></argument>, <argument><expr><name>xid3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_pgxact_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_snapshot_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestSnapshotDataMVCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>csn2</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>POLAR_CSN_INPROGRESS</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"before get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_snapshot_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestSnapshotDataMVCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetSnapshotData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestSnapshotDataMVCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"after get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>polar_csn_xid_snapshot</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_info</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_snapshot_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestSnapshotDataMVCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* case 3 test csn snapshot with old_snapshot_threshold enable */</comment>
    <expr_stmt><expr><call><name>polar_csn_mvcc_var_cache_set</name><argument_list>(<argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>csn1</name></expr></argument>, <argument><expr><name>xid3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_pgxact_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_snapshot_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestSnapshotDataMVCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"before get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_snapshot_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestSnapshotDataMVCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"snapshot extra info -- whenTaken:%d, lsn:%d"</literal></expr></argument>,
         <argument><expr><ternary><condition><expr><operator>(</operator><operator>&amp;</operator><name>TestSnapshotDataMVCC</name><operator>)</operator><operator>-&gt;</operator><name>whenTaken</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>&amp;</operator><name>TestSnapshotDataMVCC</name><operator>)</operator><operator>-&gt;</operator><name>lsn</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>old_snapshot_threshold</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetSnapshotData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestSnapshotDataMVCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>old_snapshot_threshold</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"after get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_snapshot_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestSnapshotDataMVCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"snapshot extra info -- whenTaken:%d, lsn:%d"</literal></expr></argument>,
         <argument><expr><ternary><condition><expr><operator>(</operator><operator>&amp;</operator><name>TestSnapshotDataMVCC</name><operator>)</operator><operator>-&gt;</operator><name>whenTaken</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>&amp;</operator><name>TestSnapshotDataMVCC</name><operator>)</operator><operator>-&gt;</operator><name>lsn</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_polar_csnlog_get_set_csn</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid4</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name><name>subxids</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xid1</name> <operator>=</operator> <name>FirstNormalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid2</name> <operator>=</operator> <literal type="number">1023</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid3</name> <operator>=</operator> <name>xid2</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid4</name> <operator>=</operator> <name>xid3</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subxids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>xid3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subxids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>xid4</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>csn</name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

    <comment type="block">/* case 1 test normal case */</comment>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>subxids</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"xid2:%d, csn2:"</literal><name>UINT64_FORMAT</name></expr></argument>, <argument><expr><name>xid2</name></expr></argument>, <argument><expr><call><name>polar_csnlog_get_csn</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"xid3:%d, csn3:"</literal><name>UINT64_FORMAT</name></expr></argument>, <argument><expr><name>xid3</name></expr></argument>, <argument><expr><call><name>polar_csnlog_get_csn</name><argument_list>(<argument><expr><name>xid3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"xid4:%d, csn4:"</literal><name>UINT64_FORMAT</name></expr></argument>, <argument><expr><name>xid4</name></expr></argument>, <argument><expr><call><name>polar_csnlog_get_csn</name><argument_list>(<argument><expr><name>xid4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* case 2 test get InvalidTransactionId */</comment>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"xid:%d, csn:"</literal><name>UINT64_FORMAT</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><call><name>polar_csnlog_get_csn</name><argument_list>(<argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* case 3 test get FrozenTransactionId */</comment>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"xid:%d, csn:"</literal><name>UINT64_FORMAT</name></expr></argument>, <argument><expr><name>FrozenTransactionId</name></expr></argument>, <argument><expr><call><name>polar_csnlog_get_csn</name><argument_list>(<argument><expr><name>FrozenTransactionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* case 4 test get BootstrapTransactionId */</comment>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"xid:%d, csn:"</literal><name>UINT64_FORMAT</name></expr></argument>, <argument><expr><name>BootstrapTransactionId</name></expr></argument>, <argument><expr><call><name>polar_csnlog_get_csn</name><argument_list>(<argument><expr><name>BootstrapTransactionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* case 5 test subtrans */</comment>
    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>POLAR_CSN_COMMITTING</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>POLAR_CSN_INPROGRESS</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>POLAR_CSN_INPROGRESS</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_parent</name><argument_list>(<argument><expr><name>xid3</name></expr></argument>, <argument><expr><name>xid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_parent</name><argument_list>(<argument><expr><name>xid4</name></expr></argument>, <argument><expr><name>xid3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"case 5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"xid:%d, csn:"</literal><name>UINT64_FORMAT</name></expr></argument>, <argument><expr><name>xid4</name></expr></argument>, <argument><expr><call><name>polar_csnlog_get_csn</name><argument_list>(<argument><expr><name>xid4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_polar_csnlog_get_set_parent</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid2</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xid1</name> <operator>=</operator> <name>FirstNormalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid2</name> <operator>=</operator> <name>xid1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>POLAR_CSN_INPROGRESS</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_parent</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"child:%d, parent:%d"</literal></expr></argument>, <argument><expr><name>xid2</name></expr></argument>, <argument><expr><call><name>polar_csnlog_get_parent</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_polar_csnlog_get_next_active_xid</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xid1</name> <operator>=</operator> <name>FirstNormalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid2</name> <operator>=</operator> <name>xid1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid3</name> <operator>=</operator> <name>xid2</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>csn</name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>set_next_xid_info</name><argument_list>(<argument><expr><name>xid3</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>POLAR_CSN_INPROGRESS</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>print_next_xid_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"next active xid:%d"</literal></expr></argument>, <argument><expr><call><name>polar_csnlog_get_next_active_xid</name><argument_list>(<argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid3</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_polar_csnlog_get_running_xids</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_xids</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nxids</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name><name>xids</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>overflowed</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xid1</name> <operator>=</operator> <name>FirstNormalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid2</name> <operator>=</operator> <name>xid1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid3</name> <operator>=</operator> <name>xid2</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>csn1</name> <operator>=</operator> <name>POLAR_CSN_FIRST_NORMAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>csn2</name> <operator>=</operator> <name>csn1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>csn3</name> <operator>=</operator> <name>csn2</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>csn1</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>POLAR_CSN_INPROGRESS</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>csn3</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_get_running_xids</name><argument_list>(<argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid3</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>csn1</name></expr></argument>, <argument><expr><name>max_xids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nxids</name></expr></argument>, <argument><expr><name>xids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"nxids:%d, overflowed:%d"</literal></expr></argument>, <argument><expr><name>nxids</name></expr></argument>, <argument><expr><name>overflowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nxids</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"xid:%d"</literal></expr></argument>, <argument><expr><name><name>xids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_polar_csnlog_get_top</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid3</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xid1</name> <operator>=</operator> <name>FirstNormalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid2</name> <operator>=</operator> <name>xid1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid3</name> <operator>=</operator> <name>xid2</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>POLAR_CSN_INPROGRESS</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>POLAR_CSN_INPROGRESS</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_csn</name><argument_list>(<argument><expr><name>xid3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>POLAR_CSN_INPROGRESS</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_parent</name><argument_list>(<argument><expr><name>xid2</name></expr></argument>, <argument><expr><name>xid1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_set_parent</name><argument_list>(<argument><expr><name>xid3</name></expr></argument>, <argument><expr><name>xid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"child:%d, top:%d"</literal></expr></argument>, <argument><expr><name>xid3</name></expr></argument>, <argument><expr><call><name>polar_csnlog_get_top</name><argument_list>(<argument><expr><name>xid3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_polar_csnlog_extend_truncate</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xid</name> <operator>=</operator> <literal type="number">131072</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_extend</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_checkpoint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_truncate</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"xid:%d, csn:"</literal><name>UINT64_FORMAT</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><call><name>polar_csnlog_get_csn</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_polar_csnlog_zero_page_redo</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TransactionId</name></type> <name>xid</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xid</name> <operator>=</operator> <literal type="number">1025</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>set_xmin_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>polar_csnlog_zero_page_redo</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"xid:%d, csn:"</literal><name>UINT64_FORMAT</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><call><name>polar_csnlog_get_csn</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_csnlog_mgr</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>test_polar_csnlog_get_set_csn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test_polar_csnlog_get_set_parent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test_polar_csnlog_get_next_active_xid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test_polar_csnlog_get_running_xids</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test_polar_csnlog_get_top</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test_polar_csnlog_extend_truncate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test_polar_csnlog_zero_page_redo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_snapshot_mgr</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>test_AdvanceOldestActiveXidCSN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>test_ProcArrayInitRecovery</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test_ProcArrayClearTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test_ProcArrayEndTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test_GetRecentGlobalDataXminCSN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test_GetSnapshotData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * SQL-callable entry point to perform all tests.
 */</comment>
<function><type><name>Datum</name></type>
<name>test_csn</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>polar_csn_enable</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>polar_csnlog_validate_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>polar_csnlog_shmem_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>polar_csnlog_bootstrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>polar_csnlog_startup</name><argument_list>(<argument><expr><name>FirstNormalTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_snapshot_mgr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* test last, because truncate test */</comment>
    <expr_stmt><expr><call><name>test_csnlog_mgr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>polar_csnlog_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>polar_csn_enable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <comment type="block">/* clear MyPgXact in case of assert fail */</comment>
    <expr_stmt><expr><call><name>set_pgxact_info</name><argument_list>(<argument><expr><name>MyProc</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
