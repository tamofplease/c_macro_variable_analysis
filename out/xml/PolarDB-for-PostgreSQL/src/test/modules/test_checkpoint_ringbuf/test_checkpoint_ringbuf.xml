<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/test/modules/test_checkpoint_ringbuf/test_checkpoint_ringbuf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_control.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_checkpoint_ringbuf.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_checkpoint_ringbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
 * SQL-callable entry point to perform all tests.
 *
 * If a 1% false positive threshold is not met, emits WARNINGs.
 *
 * See README for details of arguments.
 */</comment>
<function><type><name>Datum</name></type>
<name>test_checkpoint_ringbuf</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	
	<decl_stmt><decl><type><name>polar_checkpoint_ringbuf_t</name></type> <name>ringbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>redoBase</name></decl>, <decl><type ref="prev"/><name>startBase</name></decl>, <decl><type ref="prev"/><name>endBase</name></decl>, <decl><type ref="prev"/><name>gap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CheckPoint</name></type> <name><name>checkpoint</name><index>[<expr><name>TEST_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name><name>start</name><index>[<expr><name>TEST_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name><name>end</name><index>[<expr><name>TEST_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CheckPoint</name></type> <name>checkpointReturn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>startReturn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>endReturn</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_checkpoint_ringbuf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>checkpoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>redo</name>	<operator>=</operator> <literal type="number">0x5000000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>			<operator>=</operator> <literal type="number">0x50001000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>				<operator>=</operator> <literal type="number">0x50002000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
	<block>{<block_content>
		<expr_stmt><expr><name>gap</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">0x990000</literal> <operator>+</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>redoBase</name> <operator>+=</operator> <name>gap</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>startBase</name> <operator>+=</operator> <name>gap</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>endBase</name> <operator>+=</operator> <name>gap</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>checkpoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>redo</name> <operator>=</operator> <name>redoBase</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>start</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>startBase</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>end</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>endBase</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_shrink</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// after shrink, ringbuf: []</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ringbuf</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><name><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>checkpoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// after insert, ringbuf: [0]</comment>
	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_shrink</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// after shrink, ringbuf: [0]</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ringbuf</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkpointReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>checkpointReturn</name><operator>.</operator><name>redo</name></name> <operator>==</operator> <name><name>checkpoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>startReturn</name> <operator>==</operator> <name><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>endReturn</name> <operator>==</operator> <name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> 
		<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><name><name>start</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>end</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>checkpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<comment type="line">// after insert, ringbuf: [0,1,2,3,4]</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ringbuf</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkpointReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>checkpointReturn</name><operator>.</operator><name>redo</name></name> <operator>==</operator> <name><name>checkpoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>startReturn</name> <operator>==</operator> <name><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>endReturn</name> <operator>==</operator> <name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_shrink</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><name><name>checkpoint</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// after shrink, ringbuf: [4]</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ringbuf</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkpointReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>checkpointReturn</name><operator>.</operator><name>redo</name></name> <operator>==</operator> <name><name>checkpoint</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>startReturn</name> <operator>==</operator> <name><name>start</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>endReturn</name> <operator>==</operator> <name><name>end</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_shrink</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><name><name>checkpoint</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// after shrink, ringbuf: [4]</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ringbuf</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><name><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>checkpoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ringbuf</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkpointReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>checkpointReturn</name><operator>.</operator><name>redo</name></name> <operator>==</operator> <name><name>checkpoint</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>startReturn</name> <operator>==</operator> <name><name>start</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>endReturn</name> <operator>==</operator> <name><name>end</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> 
		<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><name><name>start</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>end</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>checkpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<comment type="line">// after insert, ringbuf: [4,5,6,7,9] </comment>
	<comment type="line">// (8 will be evicted, only work under the current eviction strategy)</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ringbuf</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkpointReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>checkpointReturn</name><operator>.</operator><name>redo</name></name> <operator>==</operator> <name><name>checkpoint</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>startReturn</name> <operator>==</operator> <name><name>start</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>endReturn</name> <operator>==</operator> <name><name>end</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_shrink</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><name><name>checkpoint</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// after shrink, ringbuf: [7,9]</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ringbuf</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkpointReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>checkpointReturn</name><operator>.</operator><name>redo</name></name> <operator>==</operator> <name><name>checkpoint</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>startReturn</name> <operator>==</operator> <name><name>start</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>endReturn</name> <operator>==</operator> <name><name>end</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_shrink</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><name><name>checkpoint</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// after shrink, ringbuf: [7,9]</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ringbuf</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkpointReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>checkpointReturn</name><operator>.</operator><name>redo</name></name> <operator>==</operator> <name><name>checkpoint</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>startReturn</name> <operator>==</operator> <name><name>start</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>endReturn</name> <operator>==</operator> <name><name>end</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_shrink</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><name><name>checkpoint</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// after shrink, ringbuf: [9]</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ringbuf</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_checkpoint_ringbuf_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ringbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endReturn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkpointReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>checkpointReturn</name><operator>.</operator><name>redo</name></name> <operator>==</operator> <name><name>checkpoint</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>startReturn</name> <operator>==</operator> <name><name>start</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>endReturn</name> <operator>==</operator> <name><name>end</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
