<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/test/modules/test_local_cache/test_local_cache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/bgworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/spin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hsearch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/polar_local_cache.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARED_TEST_DIR</name></cpp:macro> <cpp:value>"local_cache_shared_dir"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_TEST_DIR</name></cpp:macro> <cpp:value>"local_cache_local_dir"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_SIZE</name></cpp:macro> <cpp:value>(8192)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_PER_SEGMENT</name></cpp:macro> <cpp:value>(32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOP_MAX_SEGMENT</name></cpp:macro>  <cpp:value>(3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_CACHE_STAT_INIT</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_CACHE_STAT_START</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_CACHE_STAT_STOP</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>test_local_cache_write_worker</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>test_local_cache_read_worker</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>test_local_cache_flush_worker</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>test_local_cache_remove_worker</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>test_local_cache_meta</name>
<block>{
	<decl_stmt><decl><type><name>slock_t</name></type> <name>lock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>curr_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>min_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>max_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>read_min_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>del_seg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl>;</decl_stmt>
}</block></struct></type> <name>test_local_cache_meta</name>;</typedef>


<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>test_local_cache_worker_main</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_prepare_dir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>polar_datadir</name> <operator>=</operator> <name>SHARED_TEST_DIR</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_make_pg_directory</name><argument_list>(<argument><expr><name>LOCAL_TEST_DIR</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_make_pg_directory</name><argument_list>(<argument><expr><name>polar_datadir</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>polar_datadir</name></expr></argument>, <argument><expr><name>LOCAL_TEST_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_make_pg_directory</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_set_block_data</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>range</name> <init>= <expr><name>BLOCK_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>start</name> <init>= <expr><name>block</name> <operator>*</operator> <name>range</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>range</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_verify_block_data</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>range</name> <init>= <expr><name>BLOCK_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>start</name> <init>= <expr><name>block</name> <operator>*</operator> <name>range</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>range</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>start</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_verify_block_zero</name><parameter_list>(<parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>range</name> <init>= <expr><name>BLOCK_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>range</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_verify_block_cleard</name><parameter_list>(<parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>range</name> <init>= <expr><name>BLOCK_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>range</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_write</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_segment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>test_blocks</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_cache_io_error</name></type> <name>io_error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>test_blocks</name> <operator>=</operator> <name>max_segment</name> <operator>*</operator> <name>BLOCK_PER_SEGMENT</name> <operator>*</operator> <name>LOOP_MAX_SEGMENT</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>test_blocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>test_set_block_data</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>segno</name> <operator>=</operator> <name>i</name> <operator>/</operator> <name>BLOCK_PER_SEGMENT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>%</operator> <name>BLOCK_PER_SEGMENT</name><operator>)</operator> <operator>*</operator> <name>BLOCK_SIZE</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_write</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_clear_segments</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_segment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BLOCK_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>test_blocks</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_cache_io_error</name></type> <name>io_error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>test_blocks</name> <operator>=</operator> <name>max_segment</name> <operator>*</operator> <name>BLOCK_PER_SEGMENT</name> <operator>*</operator> <name>LOOP_MAX_SEGMENT</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>test_blocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>segno</name> <operator>=</operator> <name>i</name> <operator>/</operator> <name>BLOCK_PER_SEGMENT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>%</operator> <name>BLOCK_PER_SEGMENT</name><operator>)</operator> <operator>*</operator> <name>BLOCK_SIZE</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_write</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_check_segments_cleard</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_segment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>test_blocks</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_cache_io_error</name></type> <name>io_error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>test_blocks</name> <operator>=</operator> <name>max_segment</name> <operator>*</operator> <name>BLOCK_PER_SEGMENT</name> <operator>*</operator> <name>LOOP_MAX_SEGMENT</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>test_blocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>segno</name> <operator>=</operator> <name>i</name> <operator>/</operator> <name>BLOCK_PER_SEGMENT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>%</operator> <name>BLOCK_PER_SEGMENT</name><operator>)</operator> <operator>*</operator> <name>BLOCK_SIZE</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_read</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>test_verify_block_cleard</name><argument_list>(<argument><expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_read_asc</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_segment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>test_blocks</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_cache_io_error</name></type> <name>io_error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>test_blocks</name> <operator>=</operator> <name>max_segment</name> <operator>*</operator> <name>BLOCK_PER_SEGMENT</name> <operator>*</operator> <name>LOOP_MAX_SEGMENT</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>test_blocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>segno</name> <operator>=</operator> <name>i</name> <operator>/</operator> <name>BLOCK_PER_SEGMENT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>%</operator> <name>BLOCK_PER_SEGMENT</name><operator>)</operator> <operator>*</operator> <name>BLOCK_SIZE</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_read</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>test_verify_block_data</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_read_desc</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_segment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>test_blocks</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_cache_io_error</name></type> <name>io_error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>test_blocks</name> <operator>=</operator> <name>max_segment</name> <operator>*</operator> <name>BLOCK_PER_SEGMENT</name> <operator>*</operator> <name>LOOP_MAX_SEGMENT</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>test_blocks</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>segno</name> <operator>=</operator> <name>i</name> <operator>/</operator> <name>BLOCK_PER_SEGMENT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>%</operator> <name>BLOCK_PER_SEGMENT</name><operator>)</operator> <operator>*</operator> <name>BLOCK_SIZE</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_read</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>test_verify_block_data</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_not_exists</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_segment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_cache_io_error</name></type> <name>io_error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>test_blocks</name> <init>= <expr><name>max_segment</name> <operator>*</operator> <name>BLOCK_PER_SEGMENT</name> <operator>*</operator> <name>LOOP_MAX_SEGMENT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>test_blocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>segno</name> <operator>=</operator> <name>i</name> <operator>/</operator> <name>BLOCK_PER_SEGMENT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>%</operator> <name>BLOCK_PER_SEGMENT</name><operator>)</operator> <operator>*</operator> <name>BLOCK_SIZE</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_read</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_SEGMENT_NOT_EXISTS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_remove</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_segment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_cache_io_error</name></type> <name>io_error</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_segment</name> <operator>*</operator> <name>LOOP_MAX_SEGMENT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>polar_local_cache_remove</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_shared_exists</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>max_segment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>local_buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>shared_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>seg_size</name> <init>= <expr><name>BLOCK_SIZE</name> <operator>*</operator> <name>BLOCK_PER_SEGMENT</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>local_buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>seg_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>shared_buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>seg_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_segment</name> <operator>*</operator> <name>LOOP_MAX_SEGMENT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>POLAR_LOCAL_FILE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>polar_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>PG_BINARY</name> <operator>|</operator> <name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>local_buf</name></expr></argument>, <argument><expr><name>seg_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>seg_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>POLAR_SHARED_FILE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>polar_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>PG_BINARY</name> <operator>|</operator> <name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>shared_buf</name></expr></argument>, <argument><expr><name>seg_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>seg_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>local_buf</name></expr></argument>, <argument><expr><name>shared_buf</name></expr></argument>, <argument><expr><name>seg_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>local_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>shared_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_shared_not_exists</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>max_segment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>seg_size</name> <init>= <expr><name>BLOCK_SIZE</name> <operator>*</operator> <name>BLOCK_PER_SEGMENT</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_segment</name> <operator>*</operator> <name>LOOP_MAX_SEGMENT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_LOCAL_FILE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>==</operator> <name>seg_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>POLAR_SHARED_FILE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_check_consistent</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>max_segment</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>io_permission</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>io_permission</name> <operator>&amp;</operator> <name>POLAR_CACHE_SHARED_FILE_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>test_local_cache_shared_exists</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>test_local_cache_shared_not_exists</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_flushlist_exists</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>POLAR_LOCAL_CACHE_META_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>POLAR_LOCAL_CACHE_META_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<comment type="block">/* Test shared storage with rw permission */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_io</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_segment</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>io_permission</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_cache_io_error</name></type> <name>io_error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>prev_flushed_times</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>polar_local_cache_set_io_permission</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>io_permission</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_local_cache_write</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_local_cache_read_asc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_local_cache_read_desc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_local_cache_remove</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_local_cache_not_exists</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_local_cache_write</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_local_cache_read_desc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_local_cache_read_asc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_local_cache_remove</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_local_cache_not_exists</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_local_cache_write</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>polar_local_cache_flush_all</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>io_permission</name> <operator>&amp;</operator> <name>POLAR_CACHE_SHARED_FILE_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>prev_flushed_times</name> <operator>==</operator> <name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>test_local_cache_read_asc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_local_cache_read_desc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_local_cache_check_consistent</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>, <argument><expr><name>io_permission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test rewrite segments */</comment>
	<expr_stmt><expr><call><name>test_local_cache_clear_segments</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_local_cache_check_segments_cleard</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>polar_local_cache_flush_all</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>io_permission</name> <operator>&amp;</operator> <name>POLAR_CACHE_SHARED_FILE_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>prev_flushed_times</name> <operator>==</operator> <name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>test_local_cache_write</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>polar_local_cache_flush_all</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>io_permission</name> <operator>&amp;</operator> <name>POLAR_CACHE_SHARED_FILE_WRITE</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>prev_flushed_times</name> <operator>==</operator> <name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>test_local_cache_flushlist_exists</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>test_local_cache_read_asc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_local_cache_read_desc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_local_cache_check_consistent</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>, <argument><expr><name>io_permission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_local_cache_remove</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_sigterm</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>start_test</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_sigusr2</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>start_test</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_LOOP_TIMES</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>test_worker_func</name>)<parameter_list>(<parameter><decl><type><name>Datum</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><name>void</name></type>
<name>test_local_cache_write_worker</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>write_page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>test_local_cache_meta</name> <modifier>*</modifier></type><name>test_meta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>polar_datadir</name> <operator>=</operator> <name>SHARED_TEST_DIR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_meta</name> <operator>=</operator> <operator>(</operator><name>test_local_cache_meta</name> <operator>*</operator><operator>)</operator><call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"test_local_cache_meta"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_local_cache_meta</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_local_cache_attach_hashmap</name><argument_list>(<argument><expr><name><name>test_meta</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>test_local_cache_sigterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGUSR2</name></expr></argument>, <argument><expr><name>test_local_cache_sigusr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We're now ready to receive signals */</comment>
	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type> <name>segno</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type> <name>offset</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>polar_cache_io_error</name></type> <name>io_error</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>test_meta</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LOCAL_CACHE_STAT_START</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>write_page</name> <operator>=</operator> <name><name>test_meta</name><operator>-&gt;</operator><name>curr_page</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>test_meta</name><operator>-&gt;</operator><name>curr_page</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LOCAL_CACHE_STAT_INIT</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>LOCAL_CACHE_STAT_STOP</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>test_set_block_data</name><argument_list>(<argument><expr><name>write_page</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>segno</name> <operator>=</operator> <name>write_page</name> <operator>/</operator> <name>BLOCK_PER_SEGMENT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>write_page</name> <operator>%</operator> <name>BLOCK_PER_SEGMENT</name><operator>)</operator> <operator>*</operator> <name>BLOCK_SIZE</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_write</name><argument_list>(<argument><expr><name><name>test_meta</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name><name>test_meta</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>test_meta</name><operator>-&gt;</operator><name>max_page</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>test_meta</name><operator>-&gt;</operator><name>max_page</name></name></expr></argument>, <argument><expr><name>write_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test_local_cache_read_worker</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>test_local_cache_meta</name> <modifier>*</modifier></type><name>test_meta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>read_page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>offset</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>polar_datadir</name> <operator>=</operator> <name>SHARED_TEST_DIR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_meta</name> <operator>=</operator> <operator>(</operator><name>test_local_cache_meta</name> <operator>*</operator><operator>)</operator><call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"test_local_cache_meta"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_local_cache_meta</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_local_cache_attach_hashmap</name><argument_list>(<argument><expr><name><name>test_meta</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>test_local_cache_sigterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGUSR2</name></expr></argument>, <argument><expr><name>test_local_cache_sigusr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We're now ready to receive signals */</comment>
	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>polar_cache_io_error</name></type> <name>io_error</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>need_read</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>test_meta</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LOCAL_CACHE_STAT_START</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>test_meta</name><operator>-&gt;</operator><name>max_page</name></name> <operator>&gt;</operator> <name><name>test_meta</name><operator>-&gt;</operator><name>read_min_page</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>read_page</name> <operator>=</operator> <name>r</name> <operator>%</operator> <operator>(</operator><name><name>test_meta</name><operator>-&gt;</operator><name>max_page</name></name> <operator>-</operator> <name><name>test_meta</name><operator>-&gt;</operator><name>read_min_page</name></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>read_page</name> <operator>+=</operator> <name><name>test_meta</name><operator>-&gt;</operator><name>read_min_page</name></name></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>test_meta</name><operator>-&gt;</operator><name>read_min_page</name></name> <operator>&lt;</operator> <name><name>test_meta</name><operator>-&gt;</operator><name>max_page</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>test_meta</name><operator>-&gt;</operator><name>read_min_page</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>need_read</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LOCAL_CACHE_STAT_STOP</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>LOCAL_CACHE_STAT_INIT</name> <operator>||</operator> <operator>!</operator><name>need_read</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>segno</name> <operator>=</operator> <name>read_page</name> <operator>/</operator> <name>BLOCK_PER_SEGMENT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>read_page</name> <operator>%</operator> <name>BLOCK_PER_SEGMENT</name><operator>)</operator> <operator>*</operator> <name>BLOCK_SIZE</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_read</name><argument_list>(<argument><expr><name><name>test_meta</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name><name>io_error</name><operator>.</operator><name>save_errno</name></name> <operator>!=</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name><name>test_meta</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* It could be all zero if we write larger page first */</comment>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>test_verify_block_zero</name><argument_list>(<argument><expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>io_error</name><operator>.</operator><name>save_errno</name></name> <operator>!=</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>test_verify_block_data</name><argument_list>(<argument><expr><name>read_page</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test_local_cache_flush_worker</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>test_local_cache_meta</name> <modifier>*</modifier></type><name>test_meta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>polar_datadir</name> <operator>=</operator> <name>SHARED_TEST_DIR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_meta</name> <operator>=</operator> <operator>(</operator><name>test_local_cache_meta</name> <operator>*</operator><operator>)</operator><call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"test_local_cache_meta"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_local_cache_meta</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_local_cache_attach_hashmap</name><argument_list>(<argument><expr><name><name>test_meta</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>test_local_cache_sigterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGUSR2</name></expr></argument>, <argument><expr><name>test_local_cache_sigusr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We're now ready to receive signals */</comment>
	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>polar_cache_io_error</name></type> <name>io_error</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>test_meta</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LOCAL_CACHE_STAT_INIT</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LOCAL_CACHE_STAT_STOP</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_flush_all</name><argument_list>(<argument><expr><name><name>test_meta</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name><name>test_meta</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test_local_cache_remove_worker</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>test_local_cache_meta</name> <modifier>*</modifier></type><name>test_meta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>polar_datadir</name> <operator>=</operator> <name>SHARED_TEST_DIR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_meta</name> <operator>=</operator> <operator>(</operator><name>test_local_cache_meta</name> <operator>*</operator><operator>)</operator><call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"test_local_cache_meta"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_local_cache_meta</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_local_cache_attach_hashmap</name><argument_list>(<argument><expr><name><name>test_meta</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>test_local_cache_sigterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGUSR2</name></expr></argument>, <argument><expr><name>test_local_cache_sigusr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We're now ready to receive signals */</comment>
	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>polar_cache_io_error</name></type> <name>io_error</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>need_remove</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type> <name>segno</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>test_meta</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LOCAL_CACHE_STAT_START</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>test_meta</name><operator>-&gt;</operator><name>max_page</name></name> <operator>&gt;</operator> <name><name>test_meta</name><operator>-&gt;</operator><name>read_min_page</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>test_meta</name><operator>-&gt;</operator><name>read_min_page</name></name> <operator>-</operator> <name><name>test_meta</name><operator>-&gt;</operator><name>min_page</name></name> <operator>&gt;</operator> <name>BLOCK_PER_SEGMENT</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>segno</name> <operator>=</operator> <name><name>test_meta</name><operator>-&gt;</operator><name>min_page</name></name> <operator>%</operator> <name>BLOCK_PER_SEGMENT</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>need_remove</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LOCAL_CACHE_STAT_INIT</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LOCAL_CACHE_STAT_STOP</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_remove</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_remove</name><argument_list>(<argument><expr><name><name>test_meta</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name><name>test_meta</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>test_meta</name><operator>-&gt;</operator><name>min_page</name></name> <operator>+=</operator> <name>BLOCK_PER_SEGMENT</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BackgroundWorkerHandle</name> <modifier>*</modifier></type>
<name>test_local_cache_launch_worker</name><parameter_list>(<parameter><decl><type><name>BackgroundWorker</name> <modifier>*</modifier></type><name>worker</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BackgroundWorkerHandle</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackgroundWorker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>bgw_flags</name></name> <operator>=</operator> <name>BGWORKER_SHMEM_ACCESS</name> <operator>|</operator>
						<name>BGWORKER_BACKEND_DATABASE_CONNECTION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>bgw_start_time</name></name> <operator>=</operator> <name>BgWorkerStart_RecoveryFinished</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>bgw_restart_time</name></name> <operator>=</operator> <name>BGW_NEVER_RESTART</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>bgw_library_name</name></name></expr></argument>, <argument><expr><literal type="string">"test_local_cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>bgw_function_name</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>bgw_notify_pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>bgw_name</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>bgw_type</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"test_local_cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RegisterDynamicBackgroundWorker</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>handler</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_bgworker</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BACK_PROCESS</name></cpp:macro> <cpp:value>(6)</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>test_local_cache_meta</name> <modifier>*</modifier></type><name>test_meta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BackgroundWorkerHandle</name> <modifier>*</modifier></type><name><name>handler</name><index>[<expr><name>MAX_BACK_PROCESS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BackgroundWorker</name></type> <name><name>worker</name><index>[<expr><name>MAX_BACK_PROCESS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>back_func</name><index>[]</index></name> <init>=
	<expr><block>{
		<expr><literal type="string">"test_local_cache_write_worker"</literal></expr>,
		<expr><literal type="string">"test_local_cache_write_worker"</literal></expr>,
		<expr><literal type="string">"test_local_cache_read_worker"</literal></expr>,
		<expr><literal type="string">"test_local_cache_read_worker"</literal></expr>,
		<expr><literal type="string">"test_local_cache_flush_worker"</literal></expr>,
		<expr><literal type="string">"test_local_cache_remove_worker"</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>test_meta</name> <operator>=</operator> <operator>(</operator><name>test_local_cache_meta</name> <operator>*</operator><operator>)</operator><call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"test_local_cache_meta"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_local_cache_meta</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>test_meta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_local_cache_meta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_meta</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BACK_PROCESS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>handler</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>test_local_cache_launch_worker</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>back_func</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BACK_PROCESS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BgwHandleStatus</name></type> <name>status</name> <init>= <expr><call><name>WaitForBackgroundWorkerStartup</name><argument_list>(<argument><expr><name><name>handler</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>BGWH_STARTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_meta</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LOCAL_CACHE_STAT_START</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">30</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_meta</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LOCAL_CACHE_STAT_STOP</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_meta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BACK_PROCESS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>WaitForBackgroundWorkerShutdown</name><argument_list>(<argument><expr><name><name>handler</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BGWH_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>test_local_cache_dir_empty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>AllocateDir</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Could not open dir %s, %d"</literal></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>ReadDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>FreeDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_move_trash</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>test_local_cache_dir_empty</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_local_cache_move_trash</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>stat</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>test_local_cache_dir_empty</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_local_cache_empty_trash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>test_local_cache_dir_empty</name><argument_list>(<argument><expr><name>POLAR_CACHE_TRASH_DIR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_local_cache_write_before_read</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_cache_io_error</name></type> <name>io_error</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>POLAR_SHARED_FILE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_set_block_data</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>polar_open_transient_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_set_block_data</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_write</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_read</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_verify_block_data</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_remove</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_copy_to_local_failed</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_cache_io_error</name></type> <name>io_error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>POLAR_SHARED_FILE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>polar_open_transient_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLOCK_PER_SEGMENT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>test_set_block_data</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>polar_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>BLOCK_PER_SEGMENT</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_read</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>BLOCK_SIZE</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_verify_block_data</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>POLAR_LOCAL_FILE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>truncate</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_read</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>BLOCK_SIZE</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_verify_block_data</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>polar_local_cache_remove</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_error</name></expr></argument>, <argument><expr><name>PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_local_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * SQL-callable entry point to perform all tests.
 *
 * If a 1% false positive threshold is not met, emits WARNINGs.
 *
 * See README for details of arguments.
 */</comment>
<function><type><name>Datum</name></type>
<name>test_local_cache</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>max_segment</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>io_permission</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>io_permission</name> <operator>=</operator> <name>POLAR_CACHE_LOCAL_FILE_READ</name> <operator>|</operator> <name>POLAR_CACHE_LOCAL_FILE_WRITE</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_prepare_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name>polar_create_local_cache</name><argument_list>(<argument><expr><literal type="string">"test_local_cache"</literal></expr></argument>, <argument><expr><name>LOCAL_TEST_DIR</name></expr></argument>,
									 <argument><expr><name>max_segment</name></expr></argument>, <argument><expr><name>BLOCK_SIZE</name> <operator>*</operator> <name>BLOCK_PER_SEGMENT</name></expr></argument>, <argument><expr><name>LWTRANCHE_FIRST_USER_DEFINED</name></expr></argument>,
									 <argument><expr><name>io_permission</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cache</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_local_cache_move_trash</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>test_local_cache_io</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>, <argument><expr><name>io_permission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>io_permission</name> <operator>=</operator> <name>POLAR_CACHE_LOCAL_FILE_READ</name> <operator>|</operator> <name>POLAR_CACHE_LOCAL_FILE_WRITE</name> <operator>|</operator>
					<name>POLAR_CACHE_SHARED_FILE_READ</name> <operator>|</operator> <name>POLAR_CACHE_SHARED_FILE_WRITE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_local_cache_io</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>max_segment</name></expr></argument>, <argument><expr><name>io_permission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_local_cache_write_before_read</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_copy_to_local_failed</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_local_cache_bgworker</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_local_cache_move_trash</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
