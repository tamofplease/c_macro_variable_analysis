<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/test/modules/test_px/test_px_gpopt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/parsenodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/tcopprot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/px_opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<comment type="block">/* Refer from  px_optimizer_util*/</comment>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>SerializeDXLPlan</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>polar_px_gpopt_sql_run</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name><modifier>*</modifier></type> <name>polar_px_gpopt_sql_to_dxl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>polar_px_gpopt_sql_run</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>query_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>     <modifier>*</modifier></type><name>parsetree_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>parsetree_item</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>parsetree_list</name> <operator>=</operator> <call><name>pg_parse_query</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>foreach</name><argument_list>(<argument>parsetree_item</argument>, <argument>parsetree_list</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>querytree_list</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>query_list</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RawStmt</name>    <modifier>*</modifier></type><name>parsetree</name> <init>= <expr><call><name>lfirst_node</name><argument_list>(<argument><expr><name>RawStmt</name></expr></argument>, <argument><expr><name>parsetree_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>querytree_list</name> <operator>=</operator> <call><name>pg_analyze_and_rewrite</name><argument_list>(
                            <argument><expr><name>parsetree</name></expr></argument>, <argument><expr><name>query_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>foreach</name><argument_list>(<argument>query_list</argument>, <argument>querytree_list</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>lfirst_node</name><argument_list>(<argument><expr><name>Query</name></expr></argument>, <argument><expr><name>query_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>commandType</name></name> <operator>!=</operator> <name>CMD_UTILITY</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>px_optimize_query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
    </block_content>}</block>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> 
<name>polar_px_gpopt_sql_to_dxl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>query_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>dxl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name>     <modifier>*</modifier></type><name>parsetree_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>parsetree_item</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>dxl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>parsetree_list</name> <operator>=</operator> <call><name>pg_parse_query</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>foreach</name><argument_list>(<argument>parsetree_item</argument>, <argument>parsetree_list</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>querytree_list</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>query_list</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RawStmt</name>    <modifier>*</modifier></type><name>parsetree</name> <init>= <expr><call><name>lfirst_node</name><argument_list>(<argument><expr><name>RawStmt</name></expr></argument>, <argument><expr><name>parsetree_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>querytree_list</name> <operator>=</operator> <call><name>pg_analyze_and_rewrite</name><argument_list>(
                            <argument><expr><name>parsetree</name></expr></argument>, <argument><expr><name>query_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>foreach</name><argument_list>(<argument>query_list</argument>, <argument>querytree_list</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>lfirst_node</name><argument_list>(<argument><expr><name>Query</name></expr></argument>, <argument><expr><name>query_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>commandType</name></name> <operator>!=</operator> <name>CMD_UTILITY</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>dxl</name> <operator>=</operator> <call><name>SerializeDXLPlan</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
    </block_content>}</block>
    <return>return <expr><name>dxl</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dry run a sql*/</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_px_gpopt_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>test_px_gpopt_sql</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sql</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>polar_px_gpopt_sql_run</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* turn a sql into dxl*/</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_px_gpopt_sql_to_dxl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>test_px_gpopt_sql_to_dxl</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dxl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sql</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>dxl</name> <operator>=</operator> <call><name>polar_px_gpopt_sql_to_dxl</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_CSTRING</name><argument_list>(<argument><expr><name>dxl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* enum all config param*/</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_px_gpopt_config_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>test_px_gpopt_config_param</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sql</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>   <name>enable_count</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>lastValues</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name><name>options</name><index>[]</index></name> <init>= <expr><block>{
            <expr><operator>&amp;</operator><name>px_optimizer_enable_indexjoin</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_bitmapscan</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_outerjoin_to_unionall_rewrite</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_assert_maxonerow</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_hashjoin</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_dynamictablescan</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_dynamicindexscan</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_seqscan</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_seqsharescan</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_indexscan</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_shareindexscan</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_indexonlyscan</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_hashagg</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_groupagg</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_mergejoin</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_nestloopjoin</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_lasj_notin</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_lasj</name></expr>,
            <expr><operator>&amp;</operator><name>px_optimizer_enable_associativity</name></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <comment type="block">/* stash param and open all */</comment>
        <expr_stmt><expr><name>enable_count</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastValues</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>enable_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>enable_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>lastValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>last_px_optimizer_join_order</name> <init>= <expr><name>px_optimizer_join_order</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>px_optimizer_join_order</name> <operator>=</operator> <name>JOIN_ORDER_IN_QUERY</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>polar_px_gpopt_sql_run</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>px_optimizer_join_order</name> <operator>=</operator> <name>JOIN_ORDER_GREEDY_SEARCH</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>polar_px_gpopt_sql_run</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>px_optimizer_join_order</name> <operator>=</operator> <name>JOIN_ORDER_EXHAUSTIVE_SEARCH</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>polar_px_gpopt_sql_run</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>px_optimizer_join_order</name> <operator>=</operator> <name>JOIN_ORDER_EXHAUSTIVE2_SEARCH</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>polar_px_gpopt_sql_run</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>px_optimizer_join_order</name> <operator>=</operator> <name>last_px_optimizer_join_order</name></expr>;</expr_stmt>
        </block_content>}</block>
        <comment type="block">/* reset param*/</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>enable_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lastValues</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_px_gpopt_cost_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>test_px_gpopt_cost_module</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sql</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>last_cost_model</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>last_cost_model</name> <operator>=</operator> <name>px_optimizer_cost_model</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>px_optimizer_cost_model</name> <operator>=</operator> <name>OPTIMIZER_GPDB_CALIBRATED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>polar_px_gpopt_sql_run</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>px_optimizer_cost_model</name> <operator>=</operator> <name>OPTIMIZER_POLARDB</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>polar_px_gpopt_sql_run</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>px_optimizer_cost_model</name> <operator>=</operator> <name>last_cost_model</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
