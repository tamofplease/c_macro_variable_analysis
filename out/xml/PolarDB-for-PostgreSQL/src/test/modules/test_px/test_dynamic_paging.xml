<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/test/modules/test_px/test_dynamic_paging.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;px/px_adaptive_paging.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** test different rs_nblocks between px workers */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>unit_different_blocks</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SeqscanPageRequest</name></type> <name>req</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SeqscanPageResponse</name></type> <name>res</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>px_adps_array_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>worker_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>task_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>direction</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>page_count</name></name> <operator>=</operator> <literal type="number">1050</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>scan_count</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>scan_round</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>px_scan_unit_size</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/** first request */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/** request worker`s page &gt; first */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name><name>req</name><operator>.</operator><name>page_count</name></name> <operator>=</operator> <literal type="number">1100</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>.</operator><name>success</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>page_end</name></name> <operator>&lt;</operator> <literal type="number">1050</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>page_start</name></name> <operator>&lt;</operator> <literal type="number">1050</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	while <condition>(<expr><name><name>res</name><operator>.</operator><name>success</name></name></expr>)</condition>;</do>

	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>task_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>page_count</name></name> <operator>=</operator> <literal type="number">1100</literal></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/** first request */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/** request worker`s page &lt; first */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name><name>req</name><operator>.</operator><name>page_count</name></name> <operator>=</operator> <literal type="number">1050</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>.</operator><name>success</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>page_end</name></name> <operator>&lt;</operator> <literal type="number">1050</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>page_start</name></name> <operator>&lt;</operator> <literal type="number">1050</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	while <condition>(<expr><name><name>res</name><operator>.</operator><name>success</name></name></expr>)</condition>;</do>

	<comment type="block" format="doxygen">/** reverse scan */</comment>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>task_id</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>direction</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>page_count</name></name> <operator>=</operator> <literal type="number">1500</literal></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/** first request */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/** request worker`s page &lt; first */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name><name>req</name><operator>.</operator><name>page_count</name></name> <operator>=</operator> <literal type="number">900</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>.</operator><name>success</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>page_end</name></name> <operator>&lt;</operator> <literal type="number">900</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>page_start</name></name> <operator>&lt;</operator> <literal type="number">900</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	while <condition>(<expr><name><name>res</name><operator>.</operator><name>success</name></name></expr>)</condition>;</do>

	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>task_id</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>direction</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>page_count</name></name> <operator>=</operator> <literal type="number">1500</literal></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/** first request */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/** request worker`s page &gt; first */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name><name>req</name><operator>.</operator><name>page_count</name></name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>.</operator><name>success</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>page_end</name></name> <operator>&lt;</operator> <literal type="number">1500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>page_start</name></name> <operator>&lt;</operator> <literal type="number">1500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	while <condition>(<expr><name><name>res</name><operator>.</operator><name>success</name></name></expr>)</condition>;</do>
	<expr_stmt><expr><call><name>px_adps_array_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>unit_scan_many_round</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SeqscanPageRequest</name></type> <name>req</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SeqscanPageResponse</name></type> <name>res</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>px_adps_array_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>worker_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>task_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>direction</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>page_count</name></name> <operator>=</operator> <literal type="number">1050</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>scan_count</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>scan_round</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>px_scan_unit_size</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	while <condition>(<expr><name><name>res</name><operator>.</operator><name>success</name></name></expr>)</condition>;</do>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>scan_round</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block" format="doxygen">/** normal round */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>success</name></name> <operator>&amp;&amp;</operator> <name><name>res</name><operator>.</operator><name>page_start</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" format="doxygen">/** last round`s request */</comment>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>scan_round</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>res</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" format="doxygen">/** maybe meet a error when scan */</comment>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>scan_round</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" format="doxygen">/** skip to round 2 and ignore the unfinished */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" format="doxygen">/** long sleep worker fail to get page */</comment>
	<expr_stmt><expr><name><name>req</name><operator>.</operator><name>scan_round</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>res</name><operator>.</operator><name>success</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>px_adps_array_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>unit_scan_part</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>direction</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>scan_unit</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">4096</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64_t</name></type> <name><name>page_num</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">510</literal></expr>, <expr><literal type="number">511</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">513</literal></expr>, <expr><literal type="number">1023</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">1025</literal></expr>, <expr><literal type="number">100000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_adps_array_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>page_num</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="block">/* forward + 1 */</comment>
			<decl_stmt><decl><type><name>SeqscanPageRequest</name></type> <name>req</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>SeqscanPageResponse</name></type> <name>res</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int64_t</name></type> <name>page_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>node_count</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>req</name><operator>.</operator><name>worker_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>req</name><operator>.</operator><name>task_id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>req</name><operator>.</operator><name>direction</name></name> <operator>=</operator> <name><name>direction</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>req</name><operator>.</operator><name>page_count</name></name> <operator>=</operator> <name><name>page_num</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>req</name><operator>.</operator><name>scan_count</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>req</name><operator>.</operator><name>scan_start</name></name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>req</name><operator>.</operator><name>scan_round</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>px_scan_unit_size</name> <operator>=</operator> <name><name>scan_unit</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<do>do
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>random</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>node_count</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>random</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>.</operator><name>success</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>page_sum</name> <operator>+=</operator> <call><name>labs</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>res</name><operator>.</operator><name>page_start</name></name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>res</name><operator>.</operator><name>page_end</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			while <condition>(<expr><name><name>res</name><operator>.</operator><name>success</name></name></expr>)</condition>;</do>
			<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>direction</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>page_sum</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name><name>page_num</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">600</literal></expr> ?</condition><then> <expr><literal type="number">100</literal></expr> </then><else>: <expr><name><name>page_num</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">500</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>page_sum</name> <operator>==</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<comment type="block">/* check the result */</comment>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>ip</name></decl>;</decl_stmt>
				<for>for <control>(<init><expr><name>ip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ip</name> <operator>&lt;</operator> <name>node_count</name></expr>;</condition> <incr><expr><name>ip</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>success</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>px_adps_array_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>unit_scan_full</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>direction</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>scan_unit</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">4096</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64_t</name></type> <name><name>page_num</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">511</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">513</literal></expr>, <expr><literal type="number">1023</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">1025</literal></expr>, <expr><literal type="number">100000</literal></expr>, <expr><literal type="number">10000000</literal></expr>, <expr><literal type="number">0xFFFFFFF0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_adps_array_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>page_num</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>SeqscanPageRequest</name></type> <name>req</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>SeqscanPageResponse</name></type> <name>res</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int64_t</name></type> <name>page_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>node_count</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>req</name><operator>.</operator><name>worker_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>req</name><operator>.</operator><name>task_id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>req</name><operator>.</operator><name>direction</name></name> <operator>=</operator> <name><name>direction</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>req</name><operator>.</operator><name>page_count</name></name> <operator>=</operator> <name><name>page_num</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>req</name><operator>.</operator><name>scan_count</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>req</name><operator>.</operator><name>scan_round</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>px_scan_unit_size</name> <operator>=</operator> <name><name>scan_unit</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<comment type="block">/* test uint32 blkno*/</comment>
			<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>page_count</name></name> <operator>&gt;</operator> <literal type="number">0xF0000000</literal> <operator>&amp;&amp;</operator> <name>px_scan_unit_size</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<do>do
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>random</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>node_count</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>random</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>.</operator><name>success</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>page_sum</name> <operator>+=</operator> <call><name>labs</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>res</name><operator>.</operator><name>page_end</name></name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>res</name><operator>.</operator><name>page_start</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			while <condition>(<expr><name><name>res</name><operator>.</operator><name>success</name></name></expr>)</condition>;</do>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>page_sum</name> <operator>==</operator> <name><name>page_num</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>ip</name></decl>;</decl_stmt>
				<for>for <control>(<init><expr><name>ip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ip</name> <operator>&lt;</operator> <name>node_count</name></expr>;</condition> <incr><expr><name>ip</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_adps_get_response_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>success</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>px_adps_array_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * test dynamic paging.
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>test_px_adaptive_paging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>test_px_adaptive_paging</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unit_scan_full</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unit_scan_part</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unit_scan_many_round</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unit_different_blocks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
