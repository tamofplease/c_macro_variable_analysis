<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/port/win32setlocale.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * win32setlocale.c
 *		Wrapper to work around bugs in Windows setlocale() implementation
 *
 * Copyright (c) 2011-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/port/win32setlocale.c
 *
 *
 * The setlocale() function in Windows is broken in two ways. First, it
 * has a problem with locale names that have a dot in the country name. For
 * example:
 *
 * "Chinese (Traditional)_Hong Kong S.A.R..950"
 *
 * For some reason, setlocale() doesn't accept that as argument, even though
 * setlocale(LC_ALL, NULL) returns exactly that. Fortunately, it accepts
 * various alternative names for such countries, so to work around the broken
 * setlocale() function, we map the troublemaking locale names to accepted
 * aliases, before calling setlocale().
 *
 * The second problem is that the locale name for "Norwegian (Bokm&amp;aring;l)"
 * contains a non-ASCII character. That's problematic, because it's not clear
 * what encoding the locale name itself is supposed to be in, when you
 * haven't yet set a locale. Also, it causes problems when the cluster
 * contains databases with different encodings, as the locale name is stored
 * in the pg_database system catalog. To work around that, when setlocale()
 * returns that locale name, map it to a pure-ASCII alias for the same
 * locale.
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>setlocale</name></cpp:undef>

<struct>struct <name>locale_map</name>
<block>{
	<comment type="block">/*
	 * String in locale name to replace. Can be a single string (end is NULL),
	 * or separate start and end strings. If two strings are given, the locale
	 * name must contain both of them, and everything between them is
	 * replaced. This is used for a poor-man's regexp search, allowing
	 * replacement of "start.*end".
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale_name_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale_name_end</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>replacement</name></decl>;</decl_stmt>	<comment type="block">/* string to replace the match with */</comment>
}</block>;</struct>

<comment type="block">/*
 * Mappings applied before calling setlocale(), to the argument.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>locale_map</name></name></type> <name><name>locale_map_argument</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/*
	 * "HKG" is listed here:
	 * http://msdn.microsoft.com/en-us/library/cdax410z%28v=vs.71%29.aspx
	 * (Country/Region Strings).
	 *
	 * "ARE" is the ISO-3166 three-letter code for U.A.E. It is not on the
	 * above list, but seems to work anyway.
	 */</comment>
	<expr><block>{<expr><literal type="string">"Hong Kong S.A.R."</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"HKG"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"U.A.E."</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"ARE"</literal></expr>}</block></expr>,

	<comment type="block">/*
	 * The ISO-3166 country code for Macau S.A.R. is MAC, but Windows doesn't
	 * seem to recognize that. And Macau isn't listed in the table of accepted
	 * abbreviations linked above. Fortunately, "ZHM" seems to be accepted as
	 * an alias for "Chinese (Traditional)_Macau S.A.R..950". I'm not sure
	 * where "ZHM" comes from, must be some legacy naming scheme. But hey, it
	 * works.
	 *
	 * Note that unlike HKG and ARE, ZHM is an alias for the *whole* locale
	 * name, not just the country part.
	 *
	 * Some versions of Windows spell it "Macau", others "Macao".
	 */</comment>
	<expr><block>{<expr><literal type="string">"Chinese (Traditional)_Macau S.A.R..950"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"ZHM"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"Chinese_Macau S.A.R..950"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"ZHM"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"Chinese (Traditional)_Macao S.A.R..950"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"ZHM"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"Chinese_Macao S.A.R..950"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"ZHM"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Mappings applied after calling setlocale(), to its return value.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>locale_map</name></name></type> <name><name>locale_map_result</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/*
	 * "Norwegian (Bokm&amp;aring;l)" locale name contains the a-ring character.
	 * Map it to a pure-ASCII alias.
	 *
	 * It's not clear what encoding setlocale() uses when it returns the
	 * locale name, so to play it safe, we search for "Norwegian (Bok*l)".
	 *
	 * Just to make life even more complicated, some versions of Windows spell
	 * the locale name without parentheses.  Translate that too.
	 */</comment>
	<expr><block>{<expr><literal type="string">"Norwegian (Bokm"</literal></expr>, <expr><literal type="string">"l)_Norway"</literal></expr>, <expr><literal type="string">"Norwegian_Norway"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"Norwegian Bokm"</literal></expr>, <expr><literal type="string">"l_Norway"</literal></expr>, <expr><literal type="string">"Norwegian_Norway"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LOCALE_NAME_LEN</name></cpp:macro>		<cpp:value>100</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>map_locale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>locale_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>aliasbuf</name><index>[<expr><name>MAX_LOCALE_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Check if the locale name matches any of the problematic ones. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>locale_name_start</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>needle_start</name> <init>= <expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>locale_name_start</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>needle_end</name> <init>= <expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>locale_name_end</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>replacement</name> <init>= <expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>replacement</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>match_start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>match_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr><name>needle_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Found a match for the first part. If this was a two-part
			 * replacement, find the second part.
			 */</comment>
			<expr_stmt><expr><name>match_start</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>needle_end</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>match_start</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>needle_start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>needle_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>match_end</name> <operator>=</operator> <name>match</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>needle_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>match_start</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>match_end</name> <operator>=</operator> <name>match_start</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>needle_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>match_start</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Found a match. Replace the matched string. */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>matchpos</name> <init>= <expr><name>match_start</name> <operator>-</operator> <name>locale</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>replacementlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>replacement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rest</name> <init>= <expr><name>match_end</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>restlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/* check that the result fits in the static buffer */</comment>
			<if_stmt><if>if <condition>(<expr><name>matchpos</name> <operator>+</operator> <name>replacementlen</name> <operator>+</operator> <name>restlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>MAX_LOCALE_NAME_LEN</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aliasbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>locale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>matchpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aliasbuf</name><index>[<expr><name>matchpos</name></expr>]</index></name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>, <argument><expr><name>replacementlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* includes null terminator */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aliasbuf</name><index>[<expr><name>matchpos</name> <operator>+</operator> <name>replacementlen</name></expr>]</index></name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>restlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><name>aliasbuf</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* no match, just return the original string */</comment>
	<return>return <expr><name>locale</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>pgwin32_setlocale</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>category</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argument</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>locale</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>argument</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>argument</name> <operator>=</operator> <call><name>map_locale</name><argument_list>(<argument><expr><name>locale_map_argument</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* Call the real setlocale() function */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * setlocale() is specified to return a "char *" that the caller is
	 * forbidden to modify, so casting away the "const" is innocuous.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>map_locale</name><argument_list>(<argument><expr><name>locale_map_result</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
