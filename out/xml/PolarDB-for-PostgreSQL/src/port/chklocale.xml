<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/port/chklocale.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * chklocale.c
 *		Functions for handling locale-related info
 *
 *
 * Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/port/chklocale.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LANGINFO_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;langinfo.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>


<comment type="block">/*
 * This table needs to recognize all the CODESET spellings for supported
 * backend encodings, as well as frontend-only encodings where possible
 * (the latter case is currently only needed for initdb to recognize
 * error situations).  On Windows, we rely on entries for codepage
 * numbers (CPnnn).
 *
 * Note that we search the table with pg_strcasecmp(), so variant
 * capitalizations don't need their own entries.
 */</comment>
<struct>struct <name>encoding_match</name>
<block>{
	<decl_stmt><decl><type><name><name>enum</name> <name>pg_enc</name></name></type> <name>pg_enc_code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>system_enc_name</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>encoding_match</name></name></type> <name><name>encoding_match_list</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>PG_EUC_JP</name></expr>, <expr><literal type="string">"EUC-JP"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_JP</name></expr>, <expr><literal type="string">"eucJP"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_JP</name></expr>, <expr><literal type="string">"IBM-eucJP"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_JP</name></expr>, <expr><literal type="string">"sdeckanji"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_JP</name></expr>, <expr><literal type="string">"CP20932"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_EUC_CN</name></expr>, <expr><literal type="string">"EUC-CN"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_CN</name></expr>, <expr><literal type="string">"eucCN"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_CN</name></expr>, <expr><literal type="string">"IBM-eucCN"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_CN</name></expr>, <expr><literal type="string">"GB2312"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_CN</name></expr>, <expr><literal type="string">"dechanzi"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_CN</name></expr>, <expr><literal type="string">"CP20936"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_EUC_KR</name></expr>, <expr><literal type="string">"EUC-KR"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_KR</name></expr>, <expr><literal type="string">"eucKR"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_KR</name></expr>, <expr><literal type="string">"IBM-eucKR"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_KR</name></expr>, <expr><literal type="string">"deckorean"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_KR</name></expr>, <expr><literal type="string">"5601"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_KR</name></expr>, <expr><literal type="string">"CP51949"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_EUC_TW</name></expr>, <expr><literal type="string">"EUC-TW"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_TW</name></expr>, <expr><literal type="string">"eucTW"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_TW</name></expr>, <expr><literal type="string">"IBM-eucTW"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_TW</name></expr>, <expr><literal type="string">"cns11643"</literal></expr>}</block></expr>,
	<comment type="block">/* No codepage for EUC-TW ? */</comment>

	<expr><block>{<expr><name>PG_UTF8</name></expr>, <expr><literal type="string">"UTF-8"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_UTF8</name></expr>, <expr><literal type="string">"utf8"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_UTF8</name></expr>, <expr><literal type="string">"CP65001"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_LATIN1</name></expr>, <expr><literal type="string">"ISO-8859-1"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN1</name></expr>, <expr><literal type="string">"ISO8859-1"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN1</name></expr>, <expr><literal type="string">"iso88591"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN1</name></expr>, <expr><literal type="string">"CP28591"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_LATIN2</name></expr>, <expr><literal type="string">"ISO-8859-2"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN2</name></expr>, <expr><literal type="string">"ISO8859-2"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN2</name></expr>, <expr><literal type="string">"iso88592"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN2</name></expr>, <expr><literal type="string">"CP28592"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_LATIN3</name></expr>, <expr><literal type="string">"ISO-8859-3"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN3</name></expr>, <expr><literal type="string">"ISO8859-3"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN3</name></expr>, <expr><literal type="string">"iso88593"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN3</name></expr>, <expr><literal type="string">"CP28593"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_LATIN4</name></expr>, <expr><literal type="string">"ISO-8859-4"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN4</name></expr>, <expr><literal type="string">"ISO8859-4"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN4</name></expr>, <expr><literal type="string">"iso88594"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN4</name></expr>, <expr><literal type="string">"CP28594"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_LATIN5</name></expr>, <expr><literal type="string">"ISO-8859-9"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN5</name></expr>, <expr><literal type="string">"ISO8859-9"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN5</name></expr>, <expr><literal type="string">"iso88599"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN5</name></expr>, <expr><literal type="string">"CP28599"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_LATIN6</name></expr>, <expr><literal type="string">"ISO-8859-10"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN6</name></expr>, <expr><literal type="string">"ISO8859-10"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN6</name></expr>, <expr><literal type="string">"iso885910"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_LATIN7</name></expr>, <expr><literal type="string">"ISO-8859-13"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN7</name></expr>, <expr><literal type="string">"ISO8859-13"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN7</name></expr>, <expr><literal type="string">"iso885913"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_LATIN8</name></expr>, <expr><literal type="string">"ISO-8859-14"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN8</name></expr>, <expr><literal type="string">"ISO8859-14"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN8</name></expr>, <expr><literal type="string">"iso885914"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_LATIN9</name></expr>, <expr><literal type="string">"ISO-8859-15"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN9</name></expr>, <expr><literal type="string">"ISO8859-15"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN9</name></expr>, <expr><literal type="string">"iso885915"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN9</name></expr>, <expr><literal type="string">"CP28605"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_LATIN10</name></expr>, <expr><literal type="string">"ISO-8859-16"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN10</name></expr>, <expr><literal type="string">"ISO8859-16"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN10</name></expr>, <expr><literal type="string">"iso885916"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_KOI8R</name></expr>, <expr><literal type="string">"KOI8-R"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_KOI8R</name></expr>, <expr><literal type="string">"CP20866"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_KOI8U</name></expr>, <expr><literal type="string">"KOI8-U"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_KOI8U</name></expr>, <expr><literal type="string">"CP21866"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_WIN866</name></expr>, <expr><literal type="string">"CP866"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN874</name></expr>, <expr><literal type="string">"CP874"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1250</name></expr>, <expr><literal type="string">"CP1250"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1251</name></expr>, <expr><literal type="string">"CP1251"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1251</name></expr>, <expr><literal type="string">"ansi-1251"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1252</name></expr>, <expr><literal type="string">"CP1252"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1253</name></expr>, <expr><literal type="string">"CP1253"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1254</name></expr>, <expr><literal type="string">"CP1254"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1255</name></expr>, <expr><literal type="string">"CP1255"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1256</name></expr>, <expr><literal type="string">"CP1256"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1257</name></expr>, <expr><literal type="string">"CP1257"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1258</name></expr>, <expr><literal type="string">"CP1258"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_ISO_8859_5</name></expr>, <expr><literal type="string">"ISO-8859-5"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_5</name></expr>, <expr><literal type="string">"ISO8859-5"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_5</name></expr>, <expr><literal type="string">"iso88595"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_5</name></expr>, <expr><literal type="string">"CP28595"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_ISO_8859_6</name></expr>, <expr><literal type="string">"ISO-8859-6"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_6</name></expr>, <expr><literal type="string">"ISO8859-6"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_6</name></expr>, <expr><literal type="string">"iso88596"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_6</name></expr>, <expr><literal type="string">"CP28596"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_ISO_8859_7</name></expr>, <expr><literal type="string">"ISO-8859-7"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_7</name></expr>, <expr><literal type="string">"ISO8859-7"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_7</name></expr>, <expr><literal type="string">"iso88597"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_7</name></expr>, <expr><literal type="string">"CP28597"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_ISO_8859_8</name></expr>, <expr><literal type="string">"ISO-8859-8"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_8</name></expr>, <expr><literal type="string">"ISO8859-8"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_8</name></expr>, <expr><literal type="string">"iso88598"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_8</name></expr>, <expr><literal type="string">"CP28598"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_SJIS</name></expr>, <expr><literal type="string">"SJIS"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_SJIS</name></expr>, <expr><literal type="string">"PCK"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_SJIS</name></expr>, <expr><literal type="string">"CP932"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_SJIS</name></expr>, <expr><literal type="string">"SHIFT_JIS"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_BIG5</name></expr>, <expr><literal type="string">"BIG5"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_BIG5</name></expr>, <expr><literal type="string">"BIG5HKSCS"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_BIG5</name></expr>, <expr><literal type="string">"Big5-HKSCS"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_BIG5</name></expr>, <expr><literal type="string">"CP950"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_GBK</name></expr>, <expr><literal type="string">"GBK"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_GBK</name></expr>, <expr><literal type="string">"CP936"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_UHC</name></expr>, <expr><literal type="string">"UHC"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_UHC</name></expr>, <expr><literal type="string">"CP949"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_JOHAB</name></expr>, <expr><literal type="string">"JOHAB"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_JOHAB</name></expr>, <expr><literal type="string">"CP1361"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_GB18030</name></expr>, <expr><literal type="string">"GB18030"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_GB18030</name></expr>, <expr><literal type="string">"CP54936"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_SHIFT_JIS_2004</name></expr>, <expr><literal type="string">"SJIS_2004"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_SQL_ASCII</name></expr>, <expr><literal type="string">"US-ASCII"</literal></expr>}</block></expr>,

	<expr><block>{<expr><name>PG_SQL_ASCII</name></expr>, <expr><name>NULL</name></expr>}</block></expr>		<comment type="block">/* end marker */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<comment type="block">/*
 * On Windows, use CP&lt;code page number&gt; instead of the nl_langinfo() result
 *
 * Visual Studio 2012 expanded the set of valid LC_CTYPE values, so have its
 * locale machinery determine the code page.  See comments at IsoLocaleName().
 * For other compilers, follow the locale's predictable format.
 *
 * Visual Studio 2015 should still be able to do the same, but the declaration
 * of lc_codepage is missing in _locale_t, causing this code compilation to
 * fail, hence this falls back instead on GetLocaleInfoEx. VS 2015 may be an
 * exception and post-VS2015 versions should be able to handle properly the
 * codepage number using _create_locale(). So, instead of the same logic as
 * VS 2012 and VS 2013, this routine uses GetLocaleInfoEx to parse short
 * locale names like "de-DE", "fr-FR", etc. If those cannot be parsed correctly
 * process falls back to the pre-VS-2010 manual parsing done with
 * using &lt;Language&gt;_&lt;Country&gt;.&lt;CodePage&gt; as a base.
 *
 * Returns a malloc()'d string for the caller to free.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>win32_langinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1700</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1900</literal><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>_locale_t</name></type>	<name>loct</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>loct</name> <operator>=</operator> <call><name>_create_locale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>loct</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block">/* excess */</comment>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"CP%u"</literal></expr></argument>, <argument><expr><name><name>loct</name><operator>-&gt;</operator><name>locinfo</name><operator>-&gt;</operator><name>lc_codepage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>_free_locale</name><argument_list>(<argument><expr><name>loct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>codepage</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1900</literal><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WCHAR</name></type>		<name><name>wctype</name><index>[<expr><name>LOCALE_NAME_MAX_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>wctype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wctype</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wctype</name></expr></argument>, <argument><expr><name>LOCALE_NAME_MAX_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GetLocaleInfoEx</name><argument_list>(<argument><expr><name>wctype</name></expr></argument>,
						<argument><expr><name>LOCALE_IDEFAULTANSICODEPAGE</name> <operator>|</operator> <name>LOCALE_RETURN_NUMBER</name></expr></argument>,
						<argument><expr><operator>(</operator><name>LPWSTR</name><operator>)</operator> <operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block">/* excess */</comment>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * If the return value is CP_ACP that means no ANSI code page is
			 * available, so only Unicode can be used for the locale.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>CP_ACP</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"utf8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"CP%u"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
		<comment type="block">/*
		 * Locale format on Win32 is &lt;Language&gt;_&lt;Country&gt;.&lt;CodePage&gt;.  For
		 * example, English_United States.1252.  If we see digits after the
		 * last dot, assume it's a codepage number.  Otherwise, we might be
		 * dealing with a Unix-style locale string; Windows' setlocale() will
		 * take those even though GetLocaleInfoEx() won't, so we end up here.
		 * In that case, just return what's after the last dot and hope we can
		 * find it in our table.
		 */</comment>
		<expr_stmt><expr><name>codepage</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>codepage</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type>		<name>ln</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>codepage</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>codepage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>ln</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>strspn</name><argument_list>(<argument><expr><name>codepage</name></expr></argument>, <argument><expr><literal type="string">"0123456789"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ln</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"CP%s"</literal></expr></argument>, <argument><expr><name>codepage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>codepage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<comment type="block">/*
 * Given a Windows code page identifier, find the corresponding PostgreSQL
 * encoding.  Issue a warning and return -1 if none found.
 */</comment>
<function><type><name>int</name></type>
<name>pg_codepage_to_encoding</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>sys</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><literal type="string">"CP%u"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check the table */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>encoding_match_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>system_enc_name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name><name>encoding_match_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>system_enc_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>encoding_match_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pg_enc_code</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not determine encoding for codeset \"%s\""</literal></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WIN32 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/*
 * Given a setting for LC_CTYPE, return the Postgres ID of the associated
 * encoding, if we can determine it.  Return -1 if we can't determine it.
 *
 * Pass in NULL to get the encoding for the current locale setting.
 * Pass "" to get the encoding selected by the server's environment.
 *
 * If the result is PG_SQL_ASCII, callers should treat it as being compatible
 * with any desired encoding.
 *
 * If running in the backend and write_message is false, this function must
 * cope with the possibility that elog() and palloc() are not yet usable.
 */</comment>
<function><type><name>int</name></type>
<name>pg_get_encoding_from_locale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctype</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write_message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Get the CODESET property, and also LC_CTYPE if not passed in */</comment>
	<if_stmt><if>if <condition>(<expr><name>ctype</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

		<comment type="block">/* If locale is C or POSIX, we can allow all encodings */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"POSIX"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PG_SQL_ASCII</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>save</name> <operator>=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>save</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* setlocale() broken? */</comment>
		<comment type="block">/* must copy result, or it might change after setlocale */</comment>
		<expr_stmt><expr><name>save</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>save</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* out of memory; unlikely */</comment>

		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>			<comment type="block">/* bogus ctype passed in? */</comment>
		</block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>nl_langinfo</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sys</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>win32_langinfo</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* much easier... */</comment>
		<expr_stmt><expr><name>ctype</name> <operator>=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctype</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* setlocale() broken? */</comment>

		<comment type="block">/* If locale is C or POSIX, we can allow all encodings */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"POSIX"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PG_SQL_ASCII</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>nl_langinfo</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sys</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>win32_langinfo</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>				<comment type="block">/* out of memory; unlikely */</comment>

	<comment type="block">/* Check the table */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>encoding_match_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>system_enc_name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name><name>encoding_match_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>system_enc_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name><name>encoding_match_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pg_enc_code</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Special-case kluges for particular platforms go here */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__darwin__</name></cpp:ifdef>

	<comment type="block">/*
	 * Current macOS has many locales that report an empty string for CODESET,
	 * but they all seem to actually use UTF-8.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PG_UTF8</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * We print a warning if we got a CODESET string but couldn't recognize
	 * it.  This means we need another entry in the table.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>write_message</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FRONTEND</name></cpp:ifdef>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not determine encoding for locale \"%s\": codeset is \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* keep newline separate so there's only one translatable string */</comment>
		<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not determine encoding for locale \"%s\": codeset is \"%s\""</literal></expr></argument>,
						<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* (HAVE_LANGINFO_H &amp;&amp; CODESET) || WIN32 */</comment>

<comment type="block">/*
 * stub if no multi-language platform support
 *
 * Note: we could return -1 here, but that would have the effect of
 * forcing users to specify an encoding to initdb on such platforms.
 * It seems better to silently default to SQL_ASCII.
 */</comment>
<function><type><name>int</name></type>
<name>pg_get_encoding_from_locale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctype</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write_message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>PG_SQL_ASCII</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* (HAVE_LANGINFO_H &amp;&amp; CODESET) || WIN32 */</comment>
</unit>
