<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/port/getaddrinfo.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * getaddrinfo.c
 *	  Support getaddrinfo() on platforms that don't have it.
 *
 * We also supply getnameinfo() here, assuming that the platform will have
 * it if and only if it has getaddrinfo().  If this proves false on some
 * platform, we'll need to split this file and provide a separate configure
 * test for getnameinfo().
 *
 * Windows may or may not have these routines, so we handle Windows specially
 * by dynamically checking for their existence.  If they already exist, we
 * use the Windows native routines, but if not, we use our own.
 *
 *
 * Copyright (c) 2003-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/port/getaddrinfo.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<comment type="block">/* This is intended to be used in both frontend and backend, so use c.h */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getaddrinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqcomm.h"</cpp:file></cpp:include>		<comment type="block">/* needed for struct sockaddr_storage */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/pg_bswap.h"</cpp:file></cpp:include>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<comment type="block">/*
 * The native routines may or may not exist on the Windows platform we are on,
 * so we dynamically look up the routines, and call them via function pointers.
 * Here we need to declare what the function pointers look like
 */</comment>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>__stdcall</name> <modifier>*</modifier> <name>getaddrinfo_ptr_t</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>,
											 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>,
											 <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>,
											 <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>__stdcall</name> <modifier>*</modifier> <name>freeaddrinfo_ptr_t</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>__stdcall</name> <modifier>*</modifier> <name>getnameinfo_ptr_t</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>,
											 <parameter><decl><type><name>int</name></type> <name>salen</name></decl></parameter>,
											 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hostlen</name></decl></parameter>,
											 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>serv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>servlen</name></decl></parameter>,
											 <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* static pointers to the native routines, so we only do the lookup once. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>getaddrinfo_ptr_t</name></type> <name>getaddrinfo_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>freeaddrinfo_ptr_t</name></type> <name>freeaddrinfo_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>getnameinfo_ptr_t</name></type> <name>getnameinfo_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>haveNativeWindowsIPv6routines</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>hLibrary</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>alreadyLookedForIpv6routines</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>alreadyLookedForIpv6routines</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>getaddrinfo_ptr</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * For Windows XP and Windows 2003 (and longhorn/vista), the IPv6 routines
	 * are present in the WinSock 2 library (ws2_32.dll). Try that first
	 */</comment>

	<expr_stmt><expr><name>hLibrary</name> <operator>=</operator> <call><name>LoadLibraryA</name><argument_list>(<argument><expr><literal type="string">"ws2_32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>hLibrary</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibrary</name></expr></argument>, <argument><expr><literal type="string">"getaddrinfo"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Well, ws2_32 doesn't exist, or more likely doesn't have
		 * getaddrinfo.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>hLibrary</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hLibrary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * In Windows 2000, there was only the IPv6 Technology Preview look in
		 * the IPv6 WinSock library (wship6.dll).
		 */</comment>

		<expr_stmt><expr><name>hLibrary</name> <operator>=</operator> <call><name>LoadLibraryA</name><argument_list>(<argument><expr><literal type="string">"wship6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If hLibrary is null, we couldn't find a dll with functions */</comment>
	<if_stmt><if>if <condition>(<expr><name>hLibrary</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* We found a dll, so now get the addresses of the routines */</comment>

		<expr_stmt><expr><name>getaddrinfo_ptr</name> <operator>=</operator> <operator>(</operator><name>getaddrinfo_ptr_t</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibrary</name></expr></argument>,
															 <argument><expr><literal type="string">"getaddrinfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>freeaddrinfo_ptr</name> <operator>=</operator> <operator>(</operator><name>freeaddrinfo_ptr_t</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibrary</name></expr></argument>,
															   <argument><expr><literal type="string">"freeaddrinfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>getnameinfo_ptr</name> <operator>=</operator> <operator>(</operator><name>getnameinfo_ptr_t</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibrary</name></expr></argument>,
															 <argument><expr><literal type="string">"getnameinfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If any one of the routines is missing, let's play it safe and
		 * ignore them all
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>getaddrinfo_ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
			<name>freeaddrinfo_ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
			<name>getnameinfo_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hLibrary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>hLibrary</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>getaddrinfo_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>freeaddrinfo_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>getnameinfo_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>alreadyLookedForIpv6routines</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>getaddrinfo_ptr</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * get address info for ipv4 sockets.
 *
 *	Bugs:	- only one addrinfo is set even though hintp is NULL or
 *		  ai_socktype is 0
 *		- AI_CANONNAME is not supported.
 *		- servname can only be a number, not text.
 */</comment>
<function><type><name>int</name></type>
<name>getaddrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
			<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hintp</name></decl></parameter>,
			<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>psin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>

	<comment type="block">/*
	 * If Windows has native IPv6 support, use the native Windows routine.
	 * Otherwise, fall through and use our own code.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>haveNativeWindowsIPv6routines</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>getaddrinfo_ptr</name>) <argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>hintp</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>hintp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>hintp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>!=</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>!=</operator> <name>AF_UNSPEC</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EAI_FAMILY</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>service</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EAI_NONAME</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>pg_hton32</name><argument_list>(<argument><expr><name>INADDR_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>AI_NUMERICHOST</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_aton</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>EAI_NONAME</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FRONTEND</name></cpp:ifdef>
			<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name></type> <name>hpstr</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>herrno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>pqGethostbyname</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hpstr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>hp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>herrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>gethostbyname</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<switch>switch <condition>(<expr><name>h_errno</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>HOST_NOT_FOUND</name></expr>:</case>
					<case>case <expr><name>NO_DATA</name></expr>:</case>
						<return>return <expr><name>EAI_NONAME</name></expr>;</return>
					<case>case <expr><name>TRY_AGAIN</name></expr>:</case>
						<return>return <expr><name>EAI_AGAIN</name></expr>;</return>
					<case>case <expr><name>NO_RECOVERY</name></expr>:</case>
					<default>default:</default>
						<return>return <expr><name>EAI_FAIL</name></expr>;</return>
				</block_content>}</block></switch>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>h_addrtype</name></name> <operator>!=</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>EAI_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sin</name><operator>.</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>hp</name><operator>-&gt;</operator><name>h_addr</name></name></expr></argument>, <argument><expr><name><name>hp</name><operator>-&gt;</operator><name>h_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>AI_PASSIVE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>pg_hton32</name><argument_list>(<argument><expr><name>INADDR_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>pg_hton32</name><argument_list>(<argument><expr><name>INADDR_LOOPBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>service</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>pg_hton16</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRUCT_SOCKADDR_STORAGE_SS_LEN</name></cpp:ifdef>
	<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ai</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ai</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EAI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>psin</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>psin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psin</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>EAI_MEMORY</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>psin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>psin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name><name>hints</name><operator>.</operator><name>ai_socktype</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name><name>hints</name><operator>.</operator><name>ai_protocol</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>psin</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <name>psin</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>freeaddrinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>

		<comment type="block">/*
		 * If Windows has native IPv6 support, use the native Windows routine.
		 * Otherwise, fall through and use our own code.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>haveNativeWindowsIPv6routines</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call>(<modifier>*</modifier><name>freeaddrinfo_ptr</name>) <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>gai_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_HSTRERROR</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>			<name>hcode</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>errcode</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>EAI_NONAME</name></expr>:</case>
			<expr_stmt><expr><name>hcode</name> <operator>=</operator> <name>HOST_NOT_FOUND</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>EAI_AGAIN</name></expr>:</case>
			<expr_stmt><expr><name>hcode</name> <operator>=</operator> <name>TRY_AGAIN</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>EAI_FAIL</name></expr>:</case>
		<default>default:</default>
			<expr_stmt><expr><name>hcode</name> <operator>=</operator> <name>NO_RECOVERY</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><call><name>hstrerror</name><argument_list>(<argument><expr><name>hcode</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !HAVE_HSTRERROR */</comment>

	<switch>switch <condition>(<expr><name>errcode</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>EAI_NONAME</name></expr>:</case>
			<return>return <expr><literal type="string">"Unknown host"</literal></expr>;</return>
		<case>case <expr><name>EAI_AGAIN</name></expr>:</case>
			<return>return <expr><literal type="string">"Host name lookup failure"</literal></expr>;</return>
			<comment type="block">/* Errors below are probably WIN32 only */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EAI_BADFLAGS</name></cpp:ifdef>
		<case>case <expr><name>EAI_BADFLAGS</name></expr>:</case>
			<return>return <expr><literal type="string">"Invalid argument"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EAI_FAMILY</name></cpp:ifdef>
		<case>case <expr><name>EAI_FAMILY</name></expr>:</case>
			<return>return <expr><literal type="string">"Address family not supported"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EAI_MEMORY</name></cpp:ifdef>
		<case>case <expr><name>EAI_MEMORY</name></expr>:</case>
			<return>return <expr><literal type="string">"Not enough memory"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAI_NODATA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>EAI_NODATA</name> <operator>!=</operator> <name>EAI_NONAME</name></expr></cpp:if> <comment type="block">/* MSVC/WIN64 duplicate */</comment>
		<case>case <expr><name>EAI_NODATA</name></expr>:</case>
			<return>return <expr><literal type="string">"No host data of that type was found"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EAI_SERVICE</name></cpp:ifdef>
		<case>case <expr><name>EAI_SERVICE</name></expr>:</case>
			<return>return <expr><literal type="string">"Class type not found"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EAI_SOCKTYPE</name></cpp:ifdef>
		<case>case <expr><name>EAI_SOCKTYPE</name></expr>:</case>
			<return>return <expr><literal type="string">"Socket type not supported"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<default>default:</default>
			<return>return <expr><literal type="string">"Unknown server error"</literal></expr>;</return>
	</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_HSTRERROR */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Convert an ipv4 address to a hostname.
 *
 * Bugs:	- Only supports NI_NUMERICHOST and NI_NUMERICSERV behavior.
 *		  It will never resolve a hostname.
 *		- No IPv6 support.
 */</comment>
<function><type><name>int</name></type>
<name>getnameinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>salen</name></decl></parameter>,
			<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nodelen</name></decl></parameter>,
			<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>servicelen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>

	<comment type="block">/*
	 * If Windows has native IPv6 support, use the native Windows routine.
	 * Otherwise, fall through and use our own code.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>haveNativeWindowsIPv6routines</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>getnameinfo_ptr</name>) <argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>salen</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>nodelen</name></expr></argument>,
								   <argument><expr><name>service</name></expr></argument>, <argument><expr><name>servicelen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Invalid arguments. */</comment>
	<if_stmt><if>if <condition>(<expr><name>sa</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>node</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>service</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EAI_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAVE_IPV6</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EAI_FAMILY</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Unsupported flags. */</comment>
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NI_NAMEREQD</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EAI_AGAIN</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>inet_net_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr></argument>,
							  <argument><expr><ternary><condition><expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">128</literal></expr></else></ternary></expr></argument>,
							  <argument><expr><name>node</name></expr></argument>, <argument><expr><name>nodelen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>EAI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><name>EAI_MEMORY</name></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>service</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>servicelen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,
						   <argument><expr><call><name>pg_ntoh16</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret</name> <operator>&gt;=</operator> <name>servicelen</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>EAI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
