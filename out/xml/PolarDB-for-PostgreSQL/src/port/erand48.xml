<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/port/erand48.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * erand48.c
 *
 * This file supplies pg_erand48() and related functions, which except
 * for the names are just like the POSIX-standard erand48() family.
 * (We don't supply the full set though, only the ones we have found use
 * for in Postgres.  In particular, we do *not* implement lcong48(), so
 * that there is no need for the multiplier and addend to be variable.)
 *
 * We used to test for an operating system version rather than
 * unconditionally using our own, but (1) some versions of Cygwin have a
 * buggy erand48() that always returns zero and (2) as of 2011, glibc's
 * erand48() is strangely coded to be almost-but-not-quite thread-safe,
 * which doesn't matter for the backend but is important for pgbench.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 * Portions Copyright (c) 1993 Martin Birgmeier
 * All rights reserved.
 *
 * You may redistribute unmodified or modified versions of this source
 * code provided that the above copyright notice and this and the
 * following conditions are retained.
 *
 * This software is provided ``as is'', and comes with no warranties
 * of any kind. I shall in no event be liable for anything that happens
 * to anyone/anything when using this software.
 *
 * IDENTIFICATION
 *	  src/port/erand48.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND48_SEED_0</name></cpp:macro>	<cpp:value>(0x330e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND48_SEED_1</name></cpp:macro>	<cpp:value>(0xabcd)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND48_SEED_2</name></cpp:macro>	<cpp:value>(0x1234)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND48_MULT_0</name></cpp:macro>	<cpp:value>(0xe66d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND48_MULT_1</name></cpp:macro>	<cpp:value>(0xdeec)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND48_MULT_2</name></cpp:macro>	<cpp:value>(0x0005)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND48_ADD</name></cpp:macro>		<cpp:value>(0x000b)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name><name>_rand48_seed</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><name>RAND48_SEED_0</name></expr>,
	<expr><name>RAND48_SEED_1</name></expr>,
	<expr><name>RAND48_SEED_2</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name><name>_rand48_mult</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><name>RAND48_MULT_0</name></expr>,
	<expr><name>RAND48_MULT_1</name></expr>,
	<expr><name>RAND48_MULT_2</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>_rand48_add</name> <init>= <expr><name>RAND48_ADD</name></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * Advance the 48-bit value stored in xseed[] to the next "random" number.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_dorand48</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name><name>xseed</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>accu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>_rand48_mult</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>xseed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
		<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>_rand48_add</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>accu</name></expr>;</expr_stmt>	<comment type="block">/* lower 16 bits */</comment>
	<expr_stmt><expr><name>accu</name> <operator>&gt;&gt;=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>accu</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>_rand48_mult</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>xseed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
		<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>_rand48_mult</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>xseed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>accu</name></expr>;</expr_stmt>	<comment type="block">/* middle 16 bits */</comment>
	<expr_stmt><expr><name>accu</name> <operator>&gt;&gt;=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>accu</name> <operator>+=</operator> <name><name>_rand48_mult</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>xseed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>_rand48_mult</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>xseed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>_rand48_mult</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>xseed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xseed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xseed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xseed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>accu</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Generate a random floating-point value using caller-supplied state.
 * Values are uniformly distributed over the interval [0.0, 1.0).
 */</comment>
<function><type><name>double</name></type>
<name>pg_erand48</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name><name>xseed</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>_dorand48</name><argument_list>(<argument><expr><name>xseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>ldexp</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>xseed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">48</literal></expr></argument>)</argument_list></call> <operator>+</operator>
		<call><name>ldexp</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>xseed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>+</operator>
		<call><name>ldexp</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>xseed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Generate a random non-negative integral value using internal state.
 * Values are uniformly distributed over the interval [0, 2^31).
 */</comment>
<function><type><name>long</name></type>
<name>pg_lrand48</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>_dorand48</name><argument_list>(<argument><expr><name>_rand48_seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>_rand48_seed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>_rand48_seed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Generate a random signed integral value using caller-supplied state.
 * Values are uniformly distributed over the interval [-2^31, 2^31).
 */</comment>
<function><type><name>long</name></type>
<name>pg_jrand48</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name><name>xseed</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>_dorand48</name><argument_list>(<argument><expr><name>xseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int32</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>xseed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <name><name>xseed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize the internal state using the given seed.
 *
 * Per POSIX, this uses only 32 bits from "seed" even if "long" is wider.
 * Hence, the set of possible seed values is smaller than it could be.
 * Better practice is to use caller-supplied state and initialize it with
 * random bits obtained from a high-quality source of random bits.
 *
 * Note: POSIX specifies a function seed48() that allows all 48 bits
 * of the internal state to be set, but we don't currently support that.
 */</comment>
<function><type><name>void</name></type>
<name>pg_srand48</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>_rand48_seed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>RAND48_SEED_0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>_rand48_seed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>seed</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>_rand48_seed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>(</operator><name>seed</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>_rand48_mult</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>RAND48_MULT_0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>_rand48_mult</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>RAND48_MULT_1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>_rand48_mult</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>RAND48_MULT_2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>_rand48_add</name> <operator>=</operator> <name>RAND48_ADD</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
