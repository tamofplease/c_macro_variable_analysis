<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/port/getopt_long.c"><comment type="block">/*
 * getopt_long() -- long options parser
 *
 * Portions Copyright (c) 1987, 1993, 1994
 * The Regents of the University of California.  All rights reserved.
 *
 * Portions Copyright (c) 2003
 * PostgreSQL Global Development Group
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *	  may be used to endorse or promote products derived from this software
 *	  without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * src/port/getopt_long.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getopt_long.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BADCH</name></cpp:macro>	<cpp:value>'?'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BADARG</name></cpp:macro>	<cpp:value>':'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG</name></cpp:macro>	<cpp:value>""</cpp:value></cpp:define>


<comment type="block">/*
 * getopt_long
 *	Parse argc/argv argument vector, with long options.
 *
 * This implementation does not use optreset.  Instead, we guarantee that
 * it can be restarted on a new argv array after a previous call returned -1,
 * if the caller resets optind to 1 before the first call of the new series.
 * (Internally, this means we must be sure to reset "place" to EMSG before
 * returning -1.)
 */</comment>
<function><type><name>int</name></type>
<name>getopt_long</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>,
			<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optstring</name></decl></parameter>,
			<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>longopts</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>longindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>place</name> <init>= <expr><name>EMSG</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* option letter processing */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>oli</name></decl>;</decl_stmt>			<comment type="block">/* option letter list index */</comment>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>place</name></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* update scanning pointer */</comment>
		<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>place</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>place</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>place</name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>place</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* treat "-" as not being an option */</comment>
			<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>place</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>place</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* found "--", treat it as end of options */</comment>
			<expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>place</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>place</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* long option */</comment>
			<decl_stmt><decl><type><name>size_t</name></type>		<name>namelen</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>place</name><operator>++</operator></expr>;</expr_stmt>

			<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>place</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>namelen</name>
					<operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>place</name></expr></argument>, <argument><expr><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type>			<name>has_arg</name> <init>= <expr><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>has_arg</name></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name>has_arg</name> <operator>!=</operator> <name>no_argument</name></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name><name>place</name><index>[<expr><name>namelen</name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>place</name> <operator>+</operator> <name>namelen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
						<if type="elseif">else if <condition>(<expr><name>optind</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
								 <name>has_arg</name> <operator>==</operator> <name>required_argument</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>optind</name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<if_stmt><if>if <condition>(<expr><name><name>optstring</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
								<return>return <expr><name>BADARG</name></expr>;</return></block_content></block></if></if_stmt>

							<if_stmt><if>if <condition>(<expr><name>opterr</name> <operator>&amp;&amp;</operator> <name>has_arg</name> <operator>==</operator> <name>required_argument</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
										<argument><expr><literal type="string">"%s: option requires an argument -- %s\n"</literal></expr></argument>,
										<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

							<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>optind</name><operator>++</operator></expr>;</expr_stmt>

							<if_stmt><if>if <condition>(<expr><name>has_arg</name> <operator>==</operator> <name>required_argument</name></expr>)</condition><block type="pseudo"><block_content>
								<return>return <expr><name>BADCH</name></expr>;</return></block_content></block></if></if_stmt>
							<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name><name>place</name><index>[<expr><name>namelen</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/* XXX error? */</comment>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></else></if_stmt>

					<expr_stmt><expr><name>optind</name><operator>++</operator></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>longindex</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>longindex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</return></block_content></block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>=</operator> <name><name>longopts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
						<return>return <expr><literal type="number">0</literal></expr>;</return>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>

			<if_stmt><if>if <condition>(<expr><name>opterr</name> <operator>&amp;&amp;</operator> <name><name>optstring</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
						<argument><expr><literal type="string">"%s: illegal option -- %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>optind</name><operator>++</operator></expr>;</expr_stmt>
			<return>return <expr><name>BADCH</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* short option */</comment>
	<expr_stmt><expr><name>optopt</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>place</name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>oli</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>optstring</name></expr></argument>, <argument><expr><name>optopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oli</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>place</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>opterr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>optstring</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"%s: illegal option -- %c\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>optopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>BADCH</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>oli</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* don't need argument */</comment>
		<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>place</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>							<comment type="block">/* need an argument */</comment>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>place</name></expr>)</condition><block type="pseudo"><block_content>				<comment type="block">/* no white space */</comment>
			<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>place</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&lt;=</operator> <operator>++</operator><name>optind</name></expr>)</condition>
		<block>{<block_content>						<comment type="block">/* no arg */</comment>
			<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>optstring</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>BADARG</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>opterr</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
						<argument><expr><literal type="string">"%s: option requires an argument -- %c\n"</literal></expr></argument>,
						<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>optopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><name>BADCH</name></expr>;</return>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<comment type="block">/* white space */</comment>
			<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>optopt</name></expr>;</return>
</block_content>}</block></function>
</unit>
