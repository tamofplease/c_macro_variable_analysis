<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/port/crypt.c"><comment type="block">/* src/port/crypt.c */</comment>
<comment type="block">/*	$NetBSD: crypt.c,v 1.18 2001/03/01 14:37:35 wiz Exp $	*/</comment>

<comment type="block">/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Tom Truscott.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *	  may be used to endorse or promote products derived from this software
 *	  without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBC_SCCS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)crypt.c	8.1.1.1 (Berkeley) 8/18/93";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: crypt.c,v 1.18 2001/03/01 14:37:35 wiz Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* not lint */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>des_setkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>des_cipher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_iter</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * UNIX password, and DES, encryption.
 * By Tom Truscott, trt@rti.rti.org,
 * from algorithms by Robert W. Baldwin and James Gillogly.
 *
 * References:
 * "Mathematical Cryptology for Computer Scientists and Mathematicians,"
 * by Wayne Patterson, 1987, ISBN 0-8476-7438-X.
 *
 * "Password Security: A Case History," R. Morris and Ken Thompson,
 * Communications of the ACM, vol. 22, pp. 594-597, Nov. 1979.
 *
 * "DES will be Totally Insecure within Ten Years," M.E. Hellman,
 * IEEE Spectrum, vol. 16, pp. 32-39, July 1979.
 */</comment>

<comment type="block">/* =====  Configuration ==================== */</comment>

<comment type="block">/*
 * define "MUST_ALIGN" if your compiler cannot load/store
 * long integers at arbitrary (e.g. odd) memory locations.
 * (Either that or never pass unaligned addresses to des_cipher!)
 */</comment>
<comment type="block">/* #define	MUST_ALIGN */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHAR_BITS</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CHAR_BITS</name> <operator>!=</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> C_block structure assumes 8 bit characters</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * define "B64" to be the declaration for a 64 bit integer.
 * XXX this feature is currently unused, see "endian" comment below.
 */</comment>
<comment type="block">/* #define B64 int64 */</comment>

<comment type="block">/*
 * define "LARGEDATA" to get faster permutations, by using about 72 kilobytes
 * of lookup tables.  This speeds up des_setkey() and des_cipher(), but has
 * little effect on crypt().
 */</comment>
<comment type="block">/* #define	LARGEDATA */</comment>

<comment type="block">/* compile with "-DSTATIC=void" when profiling */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STATIC</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATIC</name></cpp:macro>	<cpp:value>static void</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Define the "int32_t" type for integral type with a width of at least
 * 32 bits.
 */</comment>
<typedef>typedef <type><name>int</name></type> <name>int32_t</name>;</typedef>

<comment type="block">/* ==================================== */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PASSWORD_EFMT1</name></cpp:macro> <cpp:value>'_'</cpp:value></cpp:define>		<comment type="block">/* extended encryption format */</comment>

<comment type="block">/*
 * Cipher-block representation (Bob Baldwin):
 *
 * DES operates on groups of 64 bits, numbered 1..64 (sigh).  One
 * representation is to store one bit per byte in an array of bytes.  Bit N of
 * the NBS spec is stored as the LSB of the Nth byte (index N-1) in the array.
 * Another representation stores the 64 bits in 8 bytes, with bits 1..8 in the
 * first byte, 9..16 in the second, and so on.  The DES spec apparently has
 * bit 1 in the MSB of the first byte, but that is particularly noxious so we
 * bit-reverse each byte so that bit 1 is the LSB of the first byte, bit 8 is
 * the MSB of the first byte.  Specifically, the 64-bit input data and key are
 * converted to LSB format, and the output 64-bit block is converted back into
 * MSB format.
 *
 * DES operates internally on groups of 32 bits which are expanded to 48 bits
 * by permutation E and shrunk back to 32 bits by the S boxes.  To speed up
 * the computation, the expansion is applied only once, the expanded
 * representation is maintained during the encryption, and a compression
 * permutation is applied only at the end.  To speed up the S-box lookups,
 * the 48 bits are maintained as eight 6 bit groups, one per byte, which
 * directly feed the eight S-boxes.  Within each byte, the 6 bits are the
 * most significant ones.  The low two bits of each byte are zero.  (Thus,
 * bit 1 of the 48 bit E expansion is stored as the "4"-valued bit of the
 * first byte in the eight byte representation, bit 2 of the 48 bit value is
 * the "8"-valued bit, and so on.)	In fact, a combined "SPE"-box lookup is
 * used, in which the output is the 64 bit result of an S-box lookup which
 * has been permuted by P and expanded by E, and is ready for use in the next
 * iteration.  Two 32-bit wide tables, SPE[0] and SPE[1], are used for this
 * lookup.  Since each byte in the 48 bit path is a multiple of four, indexed
 * lookup of SPE[0] and SPE[1] is simple and fast.  The key schedule and
 * "salt" are also converted to this 8*(6+2) format.  The SPE table size is
 * 8*64*8 = 4K bytes.
 *
 * To speed up bit-parallel operations (such as XOR), the 8 byte
 * representation is "union"ed with 32 bit values "i0" and "i1", and, on
 * machines which support it, a 64 bit value "b64".  This data structure,
 * "C_block", has two problems.  First, alignment restrictions must be
 * honored.  Second, the byte-order (e.g. little-endian or big-endian) of
 * the architecture becomes visible.
 *
 * The byte-order problem is unfortunate, since on the one hand it is good
 * to have a machine-independent C_block representation (bits 1..8 in the
 * first byte, etc.), and on the other hand it is good for the LSB of the
 * first byte to be the LSB of i0.  We cannot have both these things, so we
 * currently use the "little-endian" representation and avoid any multi-byte
 * operations that depend on byte order.  This largely precludes use of the
 * 64-bit datatype since the relative order of i0 and i1 are unknown.  It
 * also inhibits grouping the SPE table to look up 12 bits at a time.  (The
 * 12 bits can be stored in a 16-bit field with 3 low-order zeroes and 1
 * high-order zero, providing fast indexing into a 64-bit wide SPE.)  On the
 * other hand, 64-bit datatypes are currently rare, and a 12-bit SPE lookup
 * requires a 128 kilobyte table, so perhaps this is not a big loss.
 *
 * Permutation representation (Jim Gillogly):
 *
 * A transformation is defined by its effect on each of the 8 bytes of the
 * 64-bit input.  For each byte we give a 64-bit output that has the bits in
 * the input distributed appropriately.  The transformation is then the OR
 * of the 8 sets of 64-bits.  This uses 8*256*8 = 16K bytes of storage for
 * each transformation.  Unless LARGEDATA is defined, however, a more compact
 * table is used which looks up 16 4-bit "chunks" rather than 8 8-bit chunks.
 * The smaller table uses 16*16*8 = 2K bytes for each transformation.  This
 * is slower but tolerable, particularly for password encryption in which
 * the SPE transformation is iterated many times.  The small tables total 9K
 * bytes, the large tables total 72K bytes.
 *
 * The transformations used are:
 * IE3264: MSB-&gt;LSB conversion, initial permutation, and expansion.
 *	This is done by collecting the 32 even-numbered bits and applying
 *	a 32-&gt;64 bit transformation, and then collecting the 32 odd-numbered
 *	bits and applying the same transformation.  Since there are only
 *	32 input bits, the IE3264 transformation table is half the size of
 *	the usual table.
 * CF6464: Compression, final permutation, and LSB-&gt;MSB conversion.
 *	This is done by two trivial 48-&gt;32 bit compressions to obtain
 *	a 64-bit block (the bit numbering is given in the "CIFP" table)
 *	followed by a 64-&gt;64 bit "cleanup" transformation.  (It would
 *	be possible to group the bits in the 64-bit block so that 2
 *	identical 32-&gt;32 bit transformations could be used instead,
 *	saving a factor of 4 in space and possibly 2 in time, but
 *	byte-ordering and other complications rear their ugly head.
 *	Similar opportunities/problems arise in the key schedule
 *	transforms.)
 * PC1ROT: MSB-&gt;LSB, PC1 permutation, rotate, and PC2 permutation.
 *	This admittedly baroque 64-&gt;64 bit transformation is used to
 *	produce the first code (in 8*(6+2) format) of the key schedule.
 * PC2ROT[0]: Inverse PC2 permutation, rotate, and PC2 permutation.
 *	It would be possible to define 15 more transformations, each
 *	with a different rotation, to generate the entire key schedule.
 *	To save space, however, we instead permute each code into the
 *	next by using a transformation that "undoes" the PC2 permutation,
 *	rotates the code, and then applies PC2.  Unfortunately, PC2
 *	transforms 56 bits into 48 bits, dropping 8 bits, so PC2 is not
 *	invertible.  We get around that problem by using a modified PC2
 *	which retains the 8 otherwise-lost bits in the unused low-order
 *	bits of each byte.  The low-order bits are cleared when the
 *	codes are stored into the key schedule.
 * PC2ROT[1]: Same as PC2ROT[0], but with two rotations.
 *	This is faster than applying PC2ROT[0] twice,
 *
 * The Bell Labs "salt" (Bob Baldwin):
 *
 * The salting is a simple permutation applied to the 48-bit result of E.
 * Specifically, if bit i (1 &lt;= i &lt;= 24) of the salt is set then bits i and
 * i+24 of the result are swapped.  The salt is thus a 24 bit number, with
 * 16777216 possible values.  (The original salt was 12 bits and could not
 * swap bits 13..24 with 36..48.)
 *
 * It is possible, but ugly, to warp the SPE table to account for the salt
 * permutation.  Fortunately, the conditional bit swapping requires only
 * about four machine instructions and can be done on-the-fly with about an
 * 8% performance penalty.
 */</comment>

<typedef>typedef <type><union>union
<block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<struct>struct
	<block>{
		<decl_stmt><decl><type><name>int32_t</name></type>		<name>i0</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32_t</name></type>		<name>i1</name></decl>;</decl_stmt>
	}</block>			<decl><name>b32</name></decl>;</struct>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B64</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>B64</name></type>			<name>b64</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></union></type> <name>C_block</name>;</typedef>

<comment type="block">/*
 * Convert twenty-four-bit long in host-order
 * to six bits (and 2 low-order zeroes) per char little-endian format.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_SIX_BIT</name><parameter_list>(<parameter><type><name>rslt</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{				\
		C_block cvt;				\
		cvt.b[0] = src; src &gt;&gt;= 6;		\
		cvt.b[1] = src; src &gt;&gt;= 6;		\
		cvt.b[2] = src; src &gt;&gt;= 6;		\
		cvt.b[3] = src;				\
		rslt = (cvt.b32.i0 &amp; 0x3f3f3f3fL) &lt;&lt; 2; \
	}</cpp:value></cpp:define>

<comment type="block">/*
 * These macros may someday permit efficient use of 64-bit integers.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZERO</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>)</parameter_list></cpp:macro>			<cpp:value>d0 = 0, d1 = 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>bl</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>d0 = (bl).b32.i0, d1 = (bl).b32.i1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOADREG</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>s0</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>d0 = s0, d1 = s1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OR</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>bl</name></type></parameter>)</parameter_list></cpp:macro>			<cpp:value>d0 |= (bl).b32.i0, d1 |= (bl).b32.i1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>s0</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>bl</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(bl).b32.i0 = s0, (bl).b32.i1 = s1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCL_BLOCK</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>int32_t d0, d1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LARGEDATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
 <comment type="block">/* Waste memory like crazy.  Also, do permutations in line */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LGCHUNKBITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNKBITS</name></cpp:macro>	<cpp:value>(1&lt;&lt;LGCHUNKBITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERM6464</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>cpp</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>				\
	<cpp:value>LOAD(d,d0,d1,(p)[(0&lt;&lt;CHUNKBITS)+(cpp)[0]]);		\
	OR (d,d0,d1,(p)[(1&lt;&lt;CHUNKBITS)+(cpp)[1]]);		\
	OR (d,d0,d1,(p)[(2&lt;&lt;CHUNKBITS)+(cpp)[2]]);		\
	OR (d,d0,d1,(p)[(3&lt;&lt;CHUNKBITS)+(cpp)[3]]);		\
	OR (d,d0,d1,(p)[(4&lt;&lt;CHUNKBITS)+(cpp)[4]]);		\
	OR (d,d0,d1,(p)[(5&lt;&lt;CHUNKBITS)+(cpp)[5]]);		\
	OR (d,d0,d1,(p)[(6&lt;&lt;CHUNKBITS)+(cpp)[6]]);		\
	OR (d,d0,d1,(p)[(7&lt;&lt;CHUNKBITS)+(cpp)[7]]);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERM3264</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>cpp</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>				\
	<cpp:value>LOAD(d,d0,d1,(p)[(0&lt;&lt;CHUNKBITS)+(cpp)[0]]);		\
	OR (d,d0,d1,(p)[(1&lt;&lt;CHUNKBITS)+(cpp)[1]]);		\
	OR (d,d0,d1,(p)[(2&lt;&lt;CHUNKBITS)+(cpp)[2]]);		\
	OR (d,d0,d1,(p)[(3&lt;&lt;CHUNKBITS)+(cpp)[3]]);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
 <comment type="block">/* "small data" */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LGCHUNKBITS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNKBITS</name></cpp:macro>	<cpp:value>(1&lt;&lt;LGCHUNKBITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERM6464</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>cpp</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>				\
	<cpp:value>{ C_block tblk; permute(cpp,&amp;tblk,p,8); LOAD (d,d0,d1,tblk); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERM3264</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>cpp</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>				\
	<cpp:value>{ C_block tblk; permute(cpp,&amp;tblk,p,4); LOAD (d,d0,d1,tblk); }</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* LARGEDATA */</comment>

<function_decl><type><name>STATIC</name></type>		<name>init_des</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STATIC</name></type>		<name>init_perm</name><parameter_list>(<parameter><decl><type><name><name>C_block</name><index>[<expr><literal type="number">64</literal> <operator>/</operator> <name>CHUNKBITS</name></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CHUNKBITS</name></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name><name>char</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LARGEDATA</name></cpp:ifndef>
<function_decl><type><name>STATIC</name></type>		<name>permute</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>C_block</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>C_block</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<function_decl><type><name>STATIC</name></type>		<name>prtab</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LARGEDATA</name></cpp:ifndef>
<function><type><name>STATIC</name></type>
<name>permute</name><parameter_list>(<parameter><decl><type><name>cp</name></type></decl></parameter>, <parameter><decl><type><name>out</name></type></decl></parameter>, <parameter><decl><type><name>p</name></type></decl></parameter>, <parameter><decl><type><name>chars_in</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>C_block</name>    <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>C_block</name>    <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>chars_in</name></decl>;</decl_stmt>

<block>{<block_content>
	<expr_stmt><expr><call><name>DCL_BLOCK</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>D1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>C_block</name>    <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>t</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ZERO</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>D1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><index>[<expr><name>t</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>OR</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>D1</name></expr></argument>, <argument><expr><operator>*</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CHUNKBITS</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><index>[<expr><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>OR</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>D1</name></expr></argument>, <argument><expr><operator>*</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CHUNKBITS</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><operator>--</operator><name>chars_in</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
	<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>D1</name></expr></argument>, <argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* LARGEDATA */</comment>


<comment type="block">/* =====  (mostly) Standard DES Tables ==================== */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>IP</name><index>[]</index></name> <init>= <expr><block>{ <comment type="block">/* initial permutation */</comment>
	<expr><literal type="number">58</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>,
	<expr><literal type="number">60</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,
	<expr><literal type="number">62</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>,
	<expr><literal type="number">64</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>,
	<expr><literal type="number">57</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>,
	<expr><literal type="number">59</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>,
	<expr><literal type="number">61</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>,
	<expr><literal type="number">63</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* The final permutation is the inverse of IP - no table is necessary */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ExpandTr</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* expansion operation */</comment>
	<expr><literal type="number">32</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,
	<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,
	<expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>,
	<expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>,
	<expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>,
	<expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>,
	<expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>,
	<expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>PC1</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* permuted choice table 1 */</comment>
	<expr><literal type="number">57</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">9</literal></expr>,
	<expr><literal type="number">1</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">18</literal></expr>,
	<expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">27</literal></expr>,
	<expr><literal type="number">19</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">36</literal></expr>,

	<expr><literal type="number">63</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">15</literal></expr>,
	<expr><literal type="number">7</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">22</literal></expr>,
	<expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">29</literal></expr>,
	<expr><literal type="number">21</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>Rotates</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* PC1 rotation schedule */</comment>
	<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* note: each "row" of PC2 is left-padded with bits that make it invertible */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>PC2</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* permuted choice table 2 */</comment>
	<expr><literal type="number">9</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>,
	<expr><literal type="number">22</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">10</literal></expr>,
	<expr><literal type="number">35</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">8</literal></expr>,
	<expr><literal type="number">43</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">2</literal></expr>,

	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">55</literal></expr>,
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">48</literal></expr>,
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">53</literal></expr>,
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">32</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>S</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{ <comment type="block">/* 48-&gt;32 bit substitution tables */</comment>
	<comment type="block">/* S[1]			*/</comment>
	<expr><block>{<expr><literal type="number">14</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>,
		<expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>,
	<expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
	<comment type="block">/* S[2]			*/</comment>
	<expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>,
		<expr><literal type="number">3</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">15</literal></expr>,
	<expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
	<comment type="block">/* S[3]			*/</comment>
	<expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>,
		<expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>,
		<expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>,
	<expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
	<comment type="block">/* S[4]			*/</comment>
	<expr><block>{<expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">15</literal></expr>,
		<expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>,
		<expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>,
	<expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,
	<comment type="block">/* S[5]			*/</comment>
	<expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>,
		<expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>,
		<expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>,
	<expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
	<comment type="block">/* S[6]			*/</comment>
	<expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>,
		<expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>,
		<expr><literal type="number">9</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>,
	<expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
	<comment type="block">/* S[7]			*/</comment>
	<expr><block>{<expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>,
		<expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>,
		<expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>,
	<expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
	<comment type="block">/* S[8]			*/</comment>
	<expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>,
		<expr><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>,
		<expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>,
	<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>P32Tr</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* 32-bit permutation function */</comment>
	<expr><literal type="number">16</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>,
	<expr><literal type="number">29</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">17</literal></expr>,
	<expr><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">26</literal></expr>,
	<expr><literal type="number">5</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">10</literal></expr>,
	<expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">14</literal></expr>,
	<expr><literal type="number">32</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>,
	<expr><literal type="number">19</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">6</literal></expr>,
	<expr><literal type="number">22</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">25</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>CIFP</name><index>[]</index></name> <init>= <expr><block>{	<comment type="block">/* compressed/interleaved permutation */</comment>
	<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>,
	<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>,
	<expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>,
	<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>,

	<expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">52</literal></expr>,
	<expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>,
	<expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>,
	<expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">64</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>itoa64</name><index>[]</index></name> <init>=	<comment type="block">/* 0..63 =&gt; ascii-64 */</comment>
<expr><literal type="string">"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>


<comment type="block">/* =====  Tables that are initialized at run time  ==================== */</comment>


<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>a64toi</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* ascii-64 =&gt; 0..63 */</comment>

<comment type="block">/* Initial key schedule permutation */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>C_block</name></type> <name><name>PC1ROT</name><index>[<expr><literal type="number">64</literal> <operator>/</operator> <name>CHUNKBITS</name></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CHUNKBITS</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/* Subsequent key schedule rotation permutations */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>C_block</name></type> <name><name>PC2ROT</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal> <operator>/</operator> <name>CHUNKBITS</name></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CHUNKBITS</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/* Initial permutation/expansion table */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>C_block</name></type> <name><name>IE3264</name><index>[<expr><literal type="number">32</literal> <operator>/</operator> <name>CHUNKBITS</name></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CHUNKBITS</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/* Table that combines the S, P, and E operations.  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name><name>SPE</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/* compressed/interleaved =&gt; final permutation table */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>C_block</name></type> <name><name>CF6464</name><index>[<expr><literal type="number">64</literal> <operator>/</operator> <name>CHUNKBITS</name></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CHUNKBITS</name></expr>]</index></name></decl>;</decl_stmt>


<comment type="block">/* ==================================== */</comment>


<decl_stmt><decl><type><specifier>static</specifier> <name>C_block</name></type> <name>constdatablock</name></decl>;</decl_stmt>	<comment type="block">/* encryption constant */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>cryptresult</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">11</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* encrypted result */</comment>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>__md5crypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>	<comment type="block">/* XXX */</comment>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>__bcrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>	<comment type="block">/* XXX */</comment>


<comment type="block">/*
 * Return a pointer to static data consisting of the "setting"
 * followed by an encryption produced by the "key" and "setting".
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>crypt</name><parameter_list>(<parameter><decl><type><name>key</name></type></decl></parameter>, <parameter><decl><type><name>setting</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setting</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>encp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type>		<name>salt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>num_iter</name></decl>,
				<decl><type ref="prev"/><name>salt_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>C_block</name></type>		<name>keyblock</name></decl>,
				<decl><type ref="prev"/><name>rsltblock</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	<comment type="block">/* Non-DES encryption schemes hook in here. */</comment>
	if (setting[0] == _PASSWORD_NONDES)
	{
		switch (setting[1])
		{
			case '2':
				return (__bcrypt(key, setting));
			case '1':
			default:
				return (__md5crypt(key, setting));
		}
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>key</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>key</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>keyblock</name><operator>.</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><call><name>des_setkey</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>keyblock</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* also initializes "a64toi" */</comment>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>encp</name> <operator>=</operator> <operator>&amp;</operator><name><name>cryptresult</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><operator>*</operator><name>setting</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>_PASSWORD_EFMT1</name></expr>:</case>

			<comment type="block">/*
			 * Involve the rest of the password 8 characters at a time.
			 */</comment>
			<while>while <condition>(<expr><operator>*</operator><name>key</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>des_cipher</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>keyblock</name></expr></argument>,
							   <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>keyblock</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>key</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>key</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name><name>keyblock</name><operator>.</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
				</block_content>}</block></for>
				<if_stmt><if>if <condition>(<expr><call><name>des_setkey</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>keyblock</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block></while>

			<expr_stmt><expr><operator>*</operator><name>encp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>setting</name><operator>++</operator></expr>;</expr_stmt>

			<comment type="block">/* get iteration count */</comment>
			<expr_stmt><expr><name>num_iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>setting</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>encp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>num_iter</name> <operator>=</operator> <operator>(</operator><name>num_iter</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <name><name>a64toi</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><name>setting</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>encp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>salt_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>num_iter</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>salt_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>salt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>salt_size</name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>setting</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>encp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>salt</name> <operator>=</operator> <operator>(</operator><name>salt</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <name><name>a64toi</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>encp</name> <operator>+=</operator> <name>salt_size</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>des_cipher</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>constdatablock</name></expr></argument>,
				   <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>rsltblock</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>num_iter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Encode the 64 cipher bits as 11 ascii characters.
	 */</comment>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
		<name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>encp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
		<name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>encp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>rsltblock</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>itoa64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>encp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>cryptresult</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * The Key Schedule, filled in by des_setkey() or setkey().
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KS_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>C_block</name></type> <name><name>KS</name><index>[<expr><name>KS_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>des_ready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Set up the key schedule from the key.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>des_setkey</name><parameter_list>(<parameter><decl><type><name>key</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<block>{<block_content>
	<expr_stmt><expr><call><name>DCL_BLOCK</name><argument_list>(<argument><expr><name>K</name></expr></argument>, <argument><expr><name>K0</name></expr></argument>, <argument><expr><name>K1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>C_block</name>    <modifier>*</modifier></type><name>ptabp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>des_ready</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>init_des</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PERM6464</name><argument_list>(<argument><expr><name>K</name></expr></argument>, <argument><expr><name>K0</name></expr></argument>, <argument><expr><name>K1</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>C_block</name> <operator>*</operator><operator>)</operator> <name>PC1ROT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>key</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>KS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>K</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x03030303L</literal></expr></argument>, <argument><expr><name>K0</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x03030303L</literal></expr></argument>, <argument><expr><name>K1</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>C_block</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>key</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>C_block</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>K</name></expr></argument>, <argument><expr><name>K0</name></expr></argument>, <argument><expr><name>K1</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>C_block</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptabp</name> <operator>=</operator> <operator>(</operator><name>C_block</name> <operator>*</operator><operator>)</operator> <name><name>PC2ROT</name><index>[<expr><name><name>Rotates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PERM6464</name><argument_list>(<argument><expr><name>K</name></expr></argument>, <argument><expr><name>K0</name></expr></argument>, <argument><expr><name>K1</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><name>ptabp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>K</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x03030303L</literal></expr></argument>, <argument><expr><name>K0</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x03030303L</literal></expr></argument>, <argument><expr><name>K1</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>C_block</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Encrypt (or decrypt if num_iter &lt; 0) the 8 chars at "in" with abs(num_iter)
 * iterations of DES, using the given 24-bit salt and the pre-computed key
 * schedule, and store the resulting 8 chars at "out" (in == out is permitted).
 *
 * NOTE: the performance of this routine is critically dependent on your
 * compiler and machine architecture.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>des_cipher</name><parameter_list>(<parameter><decl><type><name>in</name></type></decl></parameter>, <parameter><decl><type><name>out</name></type></decl></parameter>, <parameter><decl><type><name>salt</name></type></decl></parameter>, <parameter><decl><type><name>num_iter</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type>		<name>salt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>num_iter</name></decl>;</decl_stmt>
<block>{<block_content>
	<comment type="block">/* variables that we want in registers, most important first */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>pdp11</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int32_t</name></type>		<name>L0</name></decl>,
				<decl><type ref="prev"/><name>L1</name></decl>,
				<decl><type ref="prev"/><name>R0</name></decl>,
				<decl><type ref="prev"/><name>R1</name></decl>,
				<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>C_block</name>    <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ks_inc</name></decl>,
				<decl><type ref="prev"/><name>loop_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>C_block</name></type>		<name>B</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>L0</name> <operator>=</operator> <name>salt</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TO_SIX_BIT</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><name>L0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* convert to 4*(6+2) format */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__vax__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>pdp11</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name>salt</name> <operator>=</operator> <operator>~</operator><name>salt</name></expr>;</expr_stmt>				<comment type="block">/* "x &amp;~ y" is faster than "x &amp; y". */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SALT</name></cpp:macro> <cpp:value>(~salt)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SALT</name></cpp:macro> <cpp:value>salt</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MUST_ALIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L0</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>LOAD</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L0</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>C_block</name> <operator>*</operator><operator>)</operator> <name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>LOADREG</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>R0</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>L0</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>L0</name> <operator>&amp;=</operator> <literal type="number">0x55555555L</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>L1</name> <operator>&amp;=</operator> <literal type="number">0x55555555L</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>L0</name> <operator>=</operator> <operator>(</operator><name>L0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>L1</name></expr>;</expr_stmt>		<comment type="block">/* L0 is the even-numbered input bits */</comment>
	<expr_stmt><expr><name>R0</name> <operator>&amp;=</operator> <literal type="number">0xaaaaaaaaL</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>R1</name> <operator>=</operator> <operator>(</operator><name>R1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555L</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>L1</name> <operator>=</operator> <name>R0</name> <operator>|</operator> <name>R1</name></expr>;</expr_stmt>				<comment type="block">/* L1 is the odd-numbered input bits */</comment>
	<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L0</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PERM3264</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L0</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><operator>(</operator><name>C_block</name> <operator>*</operator><operator>)</operator> <name>IE3264</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* even bits */</comment>
	<expr_stmt><expr><call><name>PERM3264</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>R0</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>b</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>C_block</name> <operator>*</operator><operator>)</operator> <name>IE3264</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* odd bits */</comment>

	<if_stmt><if>if <condition>(<expr><name>num_iter</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* encryption */</comment>
		<expr_stmt><expr><name>kp</name> <operator>=</operator> <operator>&amp;</operator><name><name>KS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ks_inc</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>kp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>							<comment type="block">/* decryption */</comment>
		<expr_stmt><expr><name>num_iter</name> <operator>=</operator> <operator>-</operator><name>num_iter</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>kp</name> <operator>=</operator> <operator>&amp;</operator><name><name>KS</name><index>[<expr><name>KS_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ks_inc</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>long</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>kp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<while>while <condition>(<expr><operator>--</operator><name>num_iter</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>loop_count</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<do>do
		<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPTAB</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> \
		<cpp:value>(*(int32_t *)((unsigned char *)(t) + (i)*(sizeof(int32_t)/4)))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>gould</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* use this if B.b[i] is evaluated just once ... */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOXOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>x^=SPTAB(SPE[0][i],B.b[i]); y^=SPTAB(SPE[1][i],B.b[i]);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>pdp11</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* use this if your "long" int indexing is slow */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOXOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>j=B.b[i]; x^=SPTAB(SPE[0][i],j); y^=SPTAB(SPE[1][i],j);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<comment type="block">/* use this if "k" is allocated to a register ... */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOXOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>k=B.b[i]; x^=SPTAB(SPE[0][i],k); y^=SPTAB(SPE[1][i],k);</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRUNCH</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>q0</name></type></parameter>, <parameter><type><name>q1</name></type></parameter>)</parameter_list></cpp:macro>	\
			<cpp:value>k = ((q0) ^ (q1)) &amp; SALT;				\
			B.b32.i0 = k ^ (q0) ^ kp-&gt;b32.i0;		\
			B.b32.i1 = k ^ (q1) ^ kp-&gt;b32.i1;		\
			kp = (C_block *)((char *)kp+ks_inc);	\
							\
			DOXOR(p0, p1, 0);		\
			DOXOR(p0, p1, 1);		\
			DOXOR(p0, p1, 2);		\
			DOXOR(p0, p1, 3);		\
			DOXOR(p0, p1, 4);		\
			DOXOR(p0, p1, 5);		\
			DOXOR(p0, p1, 6);		\
			DOXOR(p0, p1, 7);</cpp:value></cpp:define>

			<expr_stmt><expr><call><name>CRUNCH</name><argument_list>(<argument><expr><name>L0</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>, <argument><expr><name>R0</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CRUNCH</name><argument_list>(<argument><expr><name>R0</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>, <argument><expr><name>L0</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><operator>--</operator><name>loop_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
		<expr_stmt><expr><name>kp</name> <operator>=</operator> <operator>(</operator><name>C_block</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>kp</name> <operator>-</operator> <operator>(</operator><name>ks_inc</name> <operator>*</operator> <name>KS_SIZE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>


		<comment type="block">/* swap L and R */</comment>
		<expr_stmt><expr><name>L0</name> <operator>^=</operator> <name>R0</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>L1</name> <operator>^=</operator> <name>R1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>R0</name> <operator>^=</operator> <name>L0</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>R1</name> <operator>^=</operator> <name>L1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>L0</name> <operator>^=</operator> <name>R0</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>L1</name> <operator>^=</operator> <name>R1</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* store the encrypted (or decrypted) result */</comment>
	<expr_stmt><expr><name>L0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>L0</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f0f0f0fL</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>L1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0f0f0f0L</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>L1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>R0</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f0f0f0fL</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>R1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0f0f0f0L</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L0</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PERM6464</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L0</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>, <argument><expr><name><name>B</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><operator>(</operator><name>C_block</name> <operator>*</operator><operator>)</operator> <name>CF6464</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MUST_ALIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L0</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L0</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>C_block</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Initialize various tables.  This need only be done once.  It could even be
 * done at compile time, if the compiler were capable of that sort of thing.
 */</comment>
<function><type><name>STATIC</name></type>
<name>init_des</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type>		<name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tableno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>perm</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>,
				<decl><type ref="prev"/><name><name>tmp32</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="block">/* "static" for speed */</comment>

<comment type="block">/*	static volatile long init_start = 0; not used */</comment>

	<comment type="block">/*
	 * table that converts chars "./0-9A-Za-z"to integers 0-63.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>a64toi</name><index>[<expr><name><name>itoa64</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/*
	 * PC1ROT - bit reverse, then PC1, then Rotate, then PC2.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>=</operator> <name><name>PC2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>k</name> <operator>+=</operator> <name><name>Rotates</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>%</operator> <literal type="number">28</literal><operator>)</operator> <operator>&lt;</operator> <name><name>Rotates</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">28</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>PC1</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>|</operator> <literal type="number">07</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">07</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>prtab</name><argument_list>(<argument><expr><literal type="string">"pc1tab"</literal></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>init_perm</name><argument_list>(<argument><expr><name>PC1ROT</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * PC2ROT - PC2 inverse, then Rotate (once or twice), then PC2.
	 */</comment>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pc2inv</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pc2inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>=</operator> <name><name>PC2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>pc2inv</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>=</operator> <name><name>PC2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>%</operator> <literal type="number">28</literal><operator>)</operator> <operator>&lt;=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">28</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pc2inv</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
		<expr_stmt><expr><call><name>prtab</name><argument_list>(<argument><expr><literal type="string">"pc2tab"</literal></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>init_perm</name><argument_list>(<argument><expr><name><name>PC2ROT</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Bit reverse, then initial permutation, then expansion.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>IP</name><index>[<expr><name><name>ExpandTr</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>|</operator> <literal type="number">07</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">07</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>prtab</name><argument_list>(<argument><expr><literal type="string">"ietab"</literal></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>init_perm</name><argument_list>(<argument><expr><name>IE3264</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compression, then final permutation, then bit reverse.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>IP</name><index>[<expr><name><name>CIFP</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>|</operator> <literal type="number">07</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">07</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>perm</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>prtab</name><argument_list>(<argument><expr><literal type="string">"cftab"</literal></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>init_perm</name><argument_list>(<argument><expr><name>CF6464</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * SPE table
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>P32Tr</name><index>[<expr><name><name>ExpandTr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
	<for>for <control>(<init><expr><name>tableno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tableno</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>tableno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator>
				<operator>(</operator><operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator>
				<operator>(</operator><operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>
				<operator>(</operator><operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>
				<operator>(</operator><operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>
				<operator>(</operator><operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>S</name><index>[<expr><name>tableno</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>
				<operator>(</operator><operator>(</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>
				<operator>(</operator><operator>(</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>
				<operator>(</operator><operator>(</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>tmp32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>tmp32</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>tableno</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">01</literal></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">24</literal></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name><name>tmp32</name><index>[<expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><call><name>TO_SIX_BIT</name><argument_list>(<argument><expr><name><name>SPE</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>tableno</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">24</literal></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name><name>tmp32</name><index>[<expr><name><name>perm</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">24</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><call><name>TO_SIX_BIT</name><argument_list>(<argument><expr><name><name>SPE</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>tableno</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>

	<expr_stmt><expr><name>des_ready</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize "perm" to represent transformation "p", which rearranges
 * (perhaps with expansion and/or contraction) one packed array of bits
 * (of size "chars_in" characters) into another array (of size "chars_out"
 * characters).
 *
 * "perm" must be all-zeroes on entry to this routine.
 */</comment>
<function><type><name>STATIC</name></type>
<name>init_perm</name><parameter_list>(<parameter><decl><type><name>perm</name></type></decl></parameter>, <parameter><decl><type><name>p</name></type></decl></parameter>, <parameter><decl><type><name>chars_in</name></type></decl></parameter>, <parameter><decl><type><name>chars_out</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>C_block</name></type>		<name><name>perm</name><index>[<expr><literal type="number">64</literal> <operator>/</operator> <name>CHUNKBITS</name></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CHUNKBITS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>p</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>chars_in</name></decl>,
			<decl><type ref="prev"/><name>chars_out</name></decl>;</decl_stmt>

<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>,
				<decl><type ref="prev"/><name>k</name></decl>,
				<decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>chars_out</name> <operator>*</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>							<comment type="block">/* each output bit position */</comment>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>			<comment type="block">/* where this bit comes from */</comment>
		<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>			<comment type="block">/* output bit is always 0 */</comment>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>LGCHUNKBITS</name></expr>;</expr_stmt>	<comment type="block">/* which chunk this bit comes from */</comment>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>l</name> <operator>&amp;</operator> <operator>(</operator><name>CHUNKBITS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* mask for this bit */</comment>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CHUNKBITS</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>						<comment type="block">/* each chunk value */</comment>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>b</name><index>[<expr><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">07</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * "setkey" routine (for backwards compatibility)
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
<function><type><name>int</name></type>
<name>setkey</name><parameter_list>(<parameter><decl><type><name>key</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>,
				<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>C_block</name></type>		<name>keyblock</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>k</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>key</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>keyblock</name><operator>.</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><operator>(</operator><call><name>des_setkey</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>keyblock</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * "encrypt" routine (for backwards compatibility)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>encrypt</name><parameter_list>(<parameter><decl><type><name>block</name></type></decl></parameter>, <parameter><decl><type><name>flag</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>flag</name></decl>;</decl_stmt>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>,
				<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>C_block</name></type>		<name>cblock</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>k</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>block</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>cblock</name><operator>.</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><call><name>des_cipher</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>cblock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>cblock</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>flag</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>cblock</name><operator>.</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><operator>--</operator><name>block</name> <operator>=</operator> <name>k</name> <operator>&amp;</operator> <literal type="number">01</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<function><type><name>STATIC</name></type>
<name>prtab</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>, <parameter><decl><type><name>t</name></type></decl></parameter>, <parameter><decl><type><name>num_rows</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>num_rows</name></decl>;</decl_stmt>

<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%3d"</literal></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
