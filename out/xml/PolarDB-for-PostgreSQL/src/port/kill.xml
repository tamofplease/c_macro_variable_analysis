<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/port/kill.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * kill.c
 *	  kill()
 *
 * Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 *	This is a replacement version of kill for Win32 which sends
 *	signals that the backend can recognize.
 *
 * IDENTIFICATION
 *	  src/port/kill.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<comment type="block">/* signal sending */</comment>
<function><type><name>int</name></type>
<name>pgkill</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>pipename</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BYTE</name></type>		<name>sigData</name> <init>= <expr><name>sig</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BYTE</name></type>		<name>sigRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>bytes</name></decl>;</decl_stmt>

	<comment type="block">/* we allow signal 0 here, but it will be ignored in pg_queue_signal */</comment>
	<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>&gt;=</operator> <name>PG_SIGNAL_COUNT</name> <operator>||</operator> <name>sig</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* No support for process groups */</comment>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* special case for SIGKILL: just ask the system to terminate the target */</comment>
	<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGKILL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HANDLE</name></type>		<name>prochandle</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prochandle</name> <operator>=</operator> <call><name>OpenProcess</name><argument_list>(<argument><expr><name>PROCESS_TERMINATE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator> <name>pid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ESRCH</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TerminateProcess</name><argument_list>(<argument><expr><name>prochandle</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>_dosmaperr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>prochandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>prochandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pipename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pipename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\\\.\\pipe\\pgsignal_%u"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CallNamedPipe</name><argument_list>(<argument><expr><name>pipename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigData</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigRet</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>sigRet</name> <operator>!=</operator> <name>sig</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ESRCH</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ERROR_BROKEN_PIPE</name></expr>:</case>
		<case>case <expr><name>ERROR_BAD_PIPE</name></expr>:</case>

			<comment type="block">/*
			 * These arise transiently as a process is exiting.  Treat them
			 * like POSIX treats a zombie process, reporting success.
			 */</comment>
			<return>return <expr><literal type="number">0</literal></expr>;</return>

		<case>case <expr><name>ERROR_FILE_NOT_FOUND</name></expr>:</case>
			<comment type="block">/* pipe fully gone, so treat the process as gone */</comment>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ESRCH</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		<case>case <expr><name>ERROR_ACCESS_DENIED</name></expr>:</case>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>		<comment type="block">/* unexpected */</comment>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
