<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/port/dirmod.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * dirmod.c
 *	  directory handling functions
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *	This includes replacement versions of functions that work on
 *	Win32 (NT4 and newer).
 *
 * IDENTIFICATION
 *	  src/port/dirmod.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Don't modify declarations in system headers */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rename</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>unlink</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__CYGWIN__</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winioctl.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;w32api/winioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/*
 *	pgrename
 */</comment>
<function><type><name>int</name></type>
<name>pgrename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>loops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We need to loop because even though PostgreSQL uses flags that allow
	 * rename while the file is open, other applications might have the file
	 * open without those flags.  However, we won't wait indefinitely for
	 * someone else to close the file, as the caller might be holding locks
	 * and blocking other backends.
	 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<while>while <condition>(<expr><operator>!</operator><call><name>MoveFileEx</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>MOVEFILE_REPLACE_EXISTING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<while>while <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<decl_stmt><decl><type><name>DWORD</name></type>		<name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>_dosmaperr</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Modern NT-based Windows versions return ERROR_SHARING_VIOLATION if
		 * another process has the file open without FILE_SHARE_DELETE.
		 * ERROR_LOCK_VIOLATION has also been seen with some anti-virus
		 * software. This used to check for just ERROR_ACCESS_DENIED, so
		 * presumably you can get that too with some OS versions. We don't
		 * expect real permission errors where we currently use rename().
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_ACCESS_DENIED</name> <operator>&amp;&amp;</operator>
			<name>err</name> <operator>!=</operator> <name>ERROR_SHARING_VIOLATION</name> <operator>&amp;&amp;</operator>
			<name>err</name> <operator>!=</operator> <name>ERROR_LOCK_VIOLATION</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EACCES</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>(<expr><operator>++</operator><name>loops</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>		<comment type="block">/* time out after 10 sec */</comment>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* us */</comment>
	</block_content>}</block></while></block_content></block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 *	pgunlink
 */</comment>
<function><type><name>int</name></type>
<name>pgunlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>loops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We need to loop because even though PostgreSQL uses flags that allow
	 * unlink while the file is open, other applications might have the file
	 * open without those flags.  However, we won't wait indefinitely for
	 * someone else to close the file, as the caller might be holding locks
	 * and blocking other backends.
	 */</comment>
	<while>while <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EACCES</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>++</operator><name>loops</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>		<comment type="block">/* time out after 10 sec */</comment>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* us */</comment>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* We undefined these above; now redefine for possible use below */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rename</name><parameter_list>(<parameter><type><name>from</name></type></parameter>, <parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>pgrename(from, to)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlink</name><parameter_list>(<parameter><type><name>path</name></type></parameter>)</parameter_list></cpp:macro>			<cpp:value>pgunlink(path)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* defined(WIN32) || defined(__CYGWIN__) */</comment>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>	<comment type="block">/* Cygwin has its own symlinks */</comment>

<comment type="block">/*
 *	pgsymlink support:
 *
 *	This struct is a replacement for REPARSE_DATA_BUFFER which is defined in VC6 winnt.h
 *	but omitted in later SDK functions.
 *	We only need the SymbolicLinkReparseBuffer part of the original struct's union.
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>ReparseTag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WORD</name></type>		<name>ReparseDataLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WORD</name></type>		<name>Reserved</name></decl>;</decl_stmt>
	<comment type="block">/* SymbolicLinkReparseBuffer */</comment>
	<decl_stmt><decl><type><name>WORD</name></type>		<name>SubstituteNameOffset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WORD</name></type>		<name>SubstituteNameLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WORD</name></type>		<name>PrintNameOffset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WORD</name></type>		<name>PrintNameLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WCHAR</name></type>		<name><name>PathBuffer</name><index>[<expr><name>FLEXIBLE_ARRAY_MEMBER</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>REPARSE_JUNCTION_DATA_BUFFER</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPARSE_JUNCTION_DATA_BUFFER_HEADER_SIZE</name></cpp:macro>   \
		<cpp:value>FIELD_OFFSET(REPARSE_JUNCTION_DATA_BUFFER, SubstituteNameOffset)</cpp:value></cpp:define>


<comment type="block">/*
 *	pgsymlink - uses Win32 junction points
 *
 *	For reference:	http://www.codeproject.com/KB/winsdk/junctionpoints.aspx
 */</comment>
<function><type><name>int</name></type>
<name>pgsymlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldpath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newpath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HANDLE</name></type>		<name>dirhandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buffer</name><index>[<expr><name>MAX_PATH</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>REPARSE_JUNCTION_DATA_BUFFER</name></expr></argument>, <argument><expr><name>PathBuffer</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>nativeTarget</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><name>nativeTarget</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>REPARSE_JUNCTION_DATA_BUFFER</name> <modifier>*</modifier></type><name>reparseBuf</name> <init>= <expr><operator>(</operator><name>REPARSE_JUNCTION_DATA_BUFFER</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CreateDirectory</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dirhandle</name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>, <argument><expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr></argument>,
						   <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>,
						   <argument><expr><name>FILE_FLAG_OPEN_REPARSE_POINT</name> <operator>|</operator> <name>FILE_FLAG_BACKUP_SEMANTICS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dirhandle</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* make sure we have an unparsed native win32 path */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"\\??\\"</literal></expr></argument>, <argument><expr><name>oldpath</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>nativeTarget</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nativeTarget</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\??\\%s"</literal></expr></argument>, <argument><expr><name>oldpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>nativeTarget</name></expr></argument>, <argument><expr><name>oldpath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nativeTarget</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></while>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>nativeTarget</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reparseBuf</name><operator>-&gt;</operator><name>ReparseTag</name></name> <operator>=</operator> <name>IO_REPARSE_TAG_MOUNT_POINT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reparseBuf</name><operator>-&gt;</operator><name>ReparseDataLength</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reparseBuf</name><operator>-&gt;</operator><name>Reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reparseBuf</name><operator>-&gt;</operator><name>SubstituteNameOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reparseBuf</name><operator>-&gt;</operator><name>SubstituteNameLength</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reparseBuf</name><operator>-&gt;</operator><name>PrintNameOffset</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reparseBuf</name><operator>-&gt;</operator><name>PrintNameLength</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nativeTarget</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
						<argument><expr><name><name>reparseBuf</name><operator>-&gt;</operator><name>PathBuffer</name></name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * FSCTL_SET_REPARSE_POINT is coded differently depending on SDK version;
	 * we use our own definition
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DeviceIoControl</name><argument_list>(<argument><expr><name>dirhandle</name></expr></argument>,
						 <argument><expr><call><name>CTL_CODE</name><argument_list>(<argument><expr><name>FILE_DEVICE_FILE_SYSTEM</name></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><name>METHOD_BUFFERED</name></expr></argument>, <argument><expr><name>FILE_ANY_ACCESS</name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><name>reparseBuf</name></expr></argument>,
						 <argument><expr><name><name>reparseBuf</name><operator>-&gt;</operator><name>ReparseDataLength</name></name> <operator>+</operator> <name>REPARSE_JUNCTION_DATA_BUFFER_HEADER_SIZE</name></expr></argument>,
						 <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>LPSTR</name></type>		<name>msg</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FormatMessage</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name> <operator>|</operator>
					  <name>FORMAT_MESSAGE_IGNORE_INSERTS</name> <operator>|</operator>
					  <name>FORMAT_MESSAGE_FROM_SYSTEM</name></expr></argument>,
					  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>,
					  <argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_ENGLISH</name></expr></argument>, <argument><expr><name>SUBLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator> <operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not set junction for \"%s\": %s"</literal></expr></argument>,
						<argument><expr><name>nativeTarget</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not set junction for \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>nativeTarget</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>dirhandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RemoveDirectory</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>dirhandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *	pgreadlink - uses Win32 junction points
 */</comment>
<function><type><name>int</name></type>
<name>pgreadlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type>		<name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buffer</name><index>[<expr><name>MAX_PATH</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>REPARSE_JUNCTION_DATA_BUFFER</name></expr></argument>, <argument><expr><name>PathBuffer</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>REPARSE_JUNCTION_DATA_BUFFER</name> <modifier>*</modifier></type><name>reparseBuf</name> <init>= <expr><operator>(</operator><name>REPARSE_JUNCTION_DATA_BUFFER</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>GetFileAttributes</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>INVALID_FILE_ATTRIBUTES</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>_dosmaperr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>,
				   <argument><expr><name>GENERIC_READ</name></expr></argument>,
				   <argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>,
				   <argument><expr><name>NULL</name></expr></argument>,
				   <argument><expr><name>OPEN_EXISTING</name></expr></argument>,
				   <argument><expr><name>FILE_FLAG_OPEN_REPARSE_POINT</name> <operator>|</operator> <name>FILE_FLAG_BACKUP_SEMANTICS</name></expr></argument>,
				   <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>_dosmaperr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DeviceIoControl</name><argument_list>(<argument><expr><name>h</name></expr></argument>,
						 <argument><expr><name>FSCTL_GET_REPARSE_POINT</name></expr></argument>,
						 <argument><expr><name>NULL</name></expr></argument>,
						 <argument><expr><literal type="number">0</literal></expr></argument>,
						 <argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator> <name>reparseBuf</name></expr></argument>,
						 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
						 <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
						 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>LPSTR</name></type>		<name>msg</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FormatMessage</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name> <operator>|</operator>
					  <name>FORMAT_MESSAGE_IGNORE_INSERTS</name> <operator>|</operator>
					  <name>FORMAT_MESSAGE_FROM_SYSTEM</name></expr></argument>,
					  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>,
					  <argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_ENGLISH</name></expr></argument>, <argument><expr><name>SUBLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator> <operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not get junction for \"%s\": %s"</literal></expr></argument>,
						<argument><expr><name>path</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not get junction for \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>path</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Got it, let's get some results from this */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>reparseBuf</name><operator>-&gt;</operator><name>ReparseTag</name></name> <operator>!=</operator> <name>IO_REPARSE_TAG_MOUNT_POINT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name><name>reparseBuf</name><operator>-&gt;</operator><name>PathBuffer</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
							<argument><expr><name>buf</name></expr></argument>,
							<argument><expr><name>size</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If the path starts with "\??\", which it will do in most (all?) cases,
	 * strip those out.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\??\\"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Assumes the file exists, so will return false if it doesn't
 * (since a nonexistent file is not a junction)
 */</comment>
<function><type><name>bool</name></type>
<name>pgwin32_is_junction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>attr</name> <init>= <expr><call><name>GetFileAttributes</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>INVALID_FILE_ATTRIBUTES</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>_dosmaperr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name><operator>)</operator> <operator>==</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* defined(WIN32) &amp;&amp; !defined(__CYGWIN__) */</comment>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>stat</name></cpp:undef>

<comment type="block">/*
 * The stat() function in win32 is not guaranteed to update the st_size
 * field when run. So we define our own version that uses the Win32 API
 * to update this field.
 */</comment>
<function><type><name>int</name></type>
<name>pgwin32_safestat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WIN32_FILE_ATTRIBUTE_DATA</name></type> <name>attr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_DELETE_PENDING</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * File has been deleted, but is not gone from the filesystem yet.
			 * This can happen when some process with FILE_SHARE_DELETE has it
			 * open and it will be fully removed once that handle is closed.
			 * Meanwhile, we can't open it, so indicate that the file just
			 * doesn't exist.
			 */</comment>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><name>r</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFileAttributesEx</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>GetFileExInfoStandard</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>_dosmaperr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * XXX no support for large files here, but we don't do that in general on
	 * Win32 yet.
	 */</comment>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <name><name>attr</name><operator>.</operator><name>nFileSizeLow</name></name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
