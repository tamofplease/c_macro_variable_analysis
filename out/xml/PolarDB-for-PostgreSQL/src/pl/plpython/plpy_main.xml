<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/pl/plpython/plpy_main.c"><comment type="block">/*
 * PL/Python main entry points
 *
 * src/pl/plpython/plpy_main.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/spi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpython.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_main.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_exec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_plpymodule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_procedure.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_subxactobject.h"</cpp:file></cpp:include>


<comment type="block">/*
 * exported functions
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
<comment type="block">/* Use separate names to avoid clash in pg_pltemplate */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>plpython_validator</name></cpp:macro> <cpp:value>plpython3_validator</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>plpython_call_handler</name></cpp:macro> <cpp:value>plpython3_call_handler</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>plpython_inline_handler</name></cpp:macro> <cpp:value>plpython3_inline_handler</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plpython_validator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plpython_call_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plpython_inline_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
<comment type="block">/* Define aliases plpython2_call_handler etc */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plpython2_validator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plpython2_call_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plpython2_inline_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>PLy_procedure_is_trigger</name><parameter_list>(<parameter><decl><type><name>Form_pg_proc</name></type> <name>procStruct</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>plpython_error_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>plpython_inline_error_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PLy_init_interp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>PLyExecutionContext</name> <modifier>*</modifier></type><name>PLy_push_execution_context</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>atomic_context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PLy_pop_execution_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* static state for Python library conflict detection */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>plpython_version_bitmask_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>plpython_version_bitmask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* initialize global variables */</comment>
<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>PLy_interp_globals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* this doesn't need to be global; use PLy_current_execution_context() */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PLyExecutionContext</name> <modifier>*</modifier></type><name>PLy_execution_contexts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name>		  <modifier>*</modifier><modifier>*</modifier></type><name>bitmask_ptr</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Set up a shared bitmask variable telling which Python version(s) are
	 * loaded into this process's address space.  If there's more than one, we
	 * cannot call into libpython for fear of causing crashes.  But postpone
	 * the actual failure for later, so that operations like pg_restore can
	 * load more than one plpython library so long as they don't try to do
	 * anything much with the language.
	 */</comment>
	<expr_stmt><expr><name>bitmask_ptr</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>find_rendezvous_variable</name><argument_list>(<argument><expr><literal type="string">"plpython_version_bitmask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>bitmask_ptr</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>		<comment type="block">/* am I the first? */</comment>
		<expr_stmt><expr><operator>*</operator><name>bitmask_ptr</name> <operator>=</operator> <operator>&amp;</operator><name>plpython_version_bitmask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* Retain pointer to the agreed-on shared variable ... */</comment>
	<expr_stmt><expr><name>plpython_version_bitmask_ptr</name> <operator>=</operator> <operator>*</operator><name>bitmask_ptr</name></expr>;</expr_stmt>
	<comment type="block">/* ... and announce my presence */</comment>
	<expr_stmt><expr><operator>*</operator><name>plpython_version_bitmask_ptr</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>PY_MAJOR_VERSION</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * This should be safe even in the presence of conflicting plpythons, and
	 * it's necessary to do it before possibly throwing a conflict error, or
	 * the error message won't get localized.
	 */</comment>
	<expr_stmt><expr><call><name>pg_bindtextdomain</name><argument_list>(<argument><expr><name>TEXTDOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Perform one-time setup of PL/Python, after checking for a conflict
 * with other versions of Python.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PLy_initialize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>inited</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Check for multiple Python libraries before actively doing anything with
	 * libpython.  This must be repeated on each entry to PL/Python, in case a
	 * conflicting library got loaded since we last looked.
	 *
	 * It is attractive to weaken this error from FATAL to ERROR, but there
	 * would be corner cases, so it seems best to be conservative.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>plpython_version_bitmask_ptr</name> <operator>!=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>PY_MAJOR_VERSION</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"multiple Python libraries are present in session"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Only one Python major version can be used in one session."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* The rest should only be done once per session */</comment>
	<if_stmt><if>if <condition>(<expr><name>inited</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
	<expr_stmt><expr><call><name>PyImport_AppendInittab</name><argument_list>(<argument><expr><literal type="string">"plpy"</literal></expr></argument>, <argument><expr><name>PyInit_plpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>Py_Initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
	<expr_stmt><expr><call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"plpy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>PLy_init_interp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PLy_init_plpy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"untrapped error in initialization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>init_procedure_caches</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>explicit_subtransactions</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>PLy_execution_contexts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This should be called only once, from PLy_initialize. Initialize the Python
 * interpreter and global data.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PLy_init_interp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_interp_safe_globals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>mainmod</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mainmod</name> <operator>=</operator> <call><name>PyImport_AddModule</name><argument_list>(<argument><expr><literal type="string">"__main__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>mainmod</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not import \"__main__\" module"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>mainmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>PLy_interp_globals</name> <operator>=</operator> <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>mainmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>PLy_interp_safe_globals</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>PLy_interp_safe_globals</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>PLy_interp_globals</name></expr></argument>, <argument><expr><literal type="string">"GD"</literal></expr></argument>, <argument><expr><name>PLy_interp_safe_globals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>mainmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>PLy_interp_globals</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not initialize globals"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>plpython_validator</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>funcoid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_proc</name></type> <name>procStruct</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_trigger</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckFunctionValidatorAccess</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_oid</name></name></expr></argument>, <argument><expr><name>funcoid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>check_function_bodies</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Do this only after making sure we need to do something */</comment>
	<expr_stmt><expr><call><name>PLy_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get the new function's pg_proc entry */</comment>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>PROCOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>funcoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for function %u"</literal></expr></argument>, <argument><expr><name>funcoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>procStruct</name> <operator>=</operator> <operator>(</operator><name>Form_pg_proc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>is_trigger</name> <operator>=</operator> <call><name>PLy_procedure_is_trigger</name><argument_list>(<argument><expr><name>procStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We can't validate triggers against any particular table ... */</comment>
	<expr_stmt><expr><call><name>PLy_procedure_get</name><argument_list>(<argument><expr><name>funcoid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>is_trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
<function><type><name>Datum</name></type>
<name>plpython2_validator</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* call plpython validator with our fcinfo so it gets our oid */</comment>
	<return>return <expr><call><name>plpython_validator</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* PY_MAJOR_VERSION &lt; 3 */</comment>

<function><type><name>Datum</name></type>
<name>plpython_call_handler</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>nonatomic</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyExecutionContext</name> <modifier>*</modifier></type><name>exec_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ErrorContextCallback</name></type> <name>plerrcontext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PLy_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>nonatomic</name> <operator>=</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>context</name></name> <operator>&amp;&amp;</operator>
		<call><name>IsA</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>CallContext</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>castNode</name><argument_list>(<argument><expr><name>CallContext</name></expr></argument>, <argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>atomic</name></expr>;</expr_stmt>

	<comment type="block">/* Note: SPI_finish() happens in plpy_exec.c, which is dubious design */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>SPI_connect_ext</name><argument_list>(<argument><expr><ternary><condition><expr><name>nonatomic</name></expr> ?</condition><then> <expr><name>SPI_OPT_NONATOMIC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SPI_OK_CONNECT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_connect failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Push execution context onto stack.  It is important that this get
	 * popped again, so avoid putting anything that could throw error between
	 * here and the PG_TRY.
	 */</comment>
	<expr_stmt><expr><name>exec_ctx</name> <operator>=</operator> <call><name>PLy_push_execution_context</name><argument_list>(<argument><expr><operator>!</operator><name>nonatomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>funcoid</name> <init>= <expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_oid</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PLyProcedure</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Setup error traceback support for ereport().  Note that the PG_TRY
		 * structure pops this for us again at exit, so we needn't do that
		 * explicitly, nor do we risk the callback getting called after we've
		 * destroyed the exec_ctx.
		 */</comment>
		<expr_stmt><expr><name><name>plerrcontext</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>plpython_error_callback</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>plerrcontext</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>exec_ctx</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>plerrcontext</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <name>error_context_stack</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>error_context_stack</name> <operator>=</operator> <operator>&amp;</operator><name>plerrcontext</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>CALLED_AS_TRIGGER</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Relation</name></type>	<name>tgrel</name> <init>= <expr><operator>(</operator><operator>(</operator><name>TriggerData</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>context</name></name><operator>)</operator><operator>-&gt;</operator><name>tg_relation</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>trv</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>PLy_procedure_get</name><argument_list>(<argument><expr><name>funcoid</name></expr></argument>, <argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>tgrel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>trv</name> <operator>=</operator> <call><name>PLy_exec_trigger</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>trv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>PLy_procedure_get</name><argument_list>(<argument><expr><name>funcoid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>PLy_exec_function</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PLy_pop_execution_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Destroy the execution context */</comment>
	<expr_stmt><expr><call><name>PLy_pop_execution_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
<function><type><name>Datum</name></type>
<name>plpython2_call_handler</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>plpython_call_handler</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* PY_MAJOR_VERSION &lt; 3 */</comment>

<function><type><name>Datum</name></type>
<name>plpython_inline_handler</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>InlineCodeBlock</name> <modifier>*</modifier></type><name>codeblock</name> <init>= <expr><operator>(</operator><name>InlineCodeBlock</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FunctionCallInfoData</name></type> <name>fake_fcinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name></type>	<name>flinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyProcedure</name></type> <name>proc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyExecutionContext</name> <modifier>*</modifier></type><name>exec_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ErrorContextCallback</name></type> <name>plerrcontext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PLy_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Note: SPI_finish() happens in plpy_exec.c, which is dubious design */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>SPI_connect_ext</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>codeblock</name><operator>-&gt;</operator><name>atomic</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>SPI_OPT_NONATOMIC</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SPI_OK_CONNECT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_connect failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fake_fcinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fake_fcinfo</name><operator>.</operator><name>flinfo</name></name> <operator>=</operator> <operator>&amp;</operator><name>flinfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>flinfo</name><operator>.</operator><name>fn_oid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>flinfo</name><operator>.</operator><name>fn_mcxt</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PLyProcedure</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>mcxt</name></name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
									  <argument><expr><literal type="string">"__plpython_inline_block"</literal></expr></argument>,
									  <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>pyname</name></name> <operator>=</operator> <call><name>MemoryContextStrdup</name><argument_list>(<argument><expr><name><name>proc</name><operator>.</operator><name>mcxt</name></name></expr></argument>, <argument><expr><literal type="string">"__plpython_inline_block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>langid</name></name> <operator>=</operator> <name><name>codeblock</name><operator>-&gt;</operator><name>langOid</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * This is currently sufficient to get PLy_exec_function to work, but
	 * someday we might need to be honest and use PLy_output_setup_func.
	 */</comment>
	<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>result</name><operator>.</operator><name>typoid</name></name> <operator>=</operator> <name>VOIDOID</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Push execution context onto stack.  It is important that this get
	 * popped again, so avoid putting anything that could throw error between
	 * here and the PG_TRY.
	 */</comment>
	<expr_stmt><expr><name>exec_ctx</name> <operator>=</operator> <call><name>PLy_push_execution_context</name><argument_list>(<argument><expr><name><name>codeblock</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<comment type="block">/*
		 * Setup error traceback support for ereport().
		 * plpython_inline_error_callback doesn't currently need exec_ctx, but
		 * for consistency with plpython_call_handler we do it the same way.
		 */</comment>
		<expr_stmt><expr><name><name>plerrcontext</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>plpython_inline_error_callback</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>plerrcontext</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>exec_ctx</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>plerrcontext</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <name>error_context_stack</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>error_context_stack</name> <operator>=</operator> <operator>&amp;</operator><name>plerrcontext</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PLy_procedure_compile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>, <argument><expr><name><name>codeblock</name><operator>-&gt;</operator><name>source_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name></name> <operator>=</operator> <operator>&amp;</operator><name>proc</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PLy_exec_function</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PLy_pop_execution_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PLy_procedure_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Destroy the execution context */</comment>
	<expr_stmt><expr><call><name>PLy_pop_execution_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Now clean up the transient procedure we made */</comment>
	<expr_stmt><expr><call><name>PLy_procedure_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
<function><type><name>Datum</name></type>
<name>plpython2_inline_handler</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>plpython_inline_handler</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* PY_MAJOR_VERSION &lt; 3 */</comment>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>PLy_procedure_is_trigger</name><parameter_list>(<parameter><decl><type><name>Form_pg_proc</name></type> <name>procStruct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>procStruct</name><operator>-&gt;</operator><name>prorettype</name></name> <operator>==</operator> <name>TRIGGEROID</name> <operator>||</operator>
			<operator>(</operator><name><name>procStruct</name><operator>-&gt;</operator><name>prorettype</name></name> <operator>==</operator> <name>OPAQUEOID</name> <operator>&amp;&amp;</operator>
			 <name><name>procStruct</name><operator>-&gt;</operator><name>pronargs</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>plpython_error_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PLyExecutionContext</name> <modifier>*</modifier></type><name>exec_ctx</name> <init>= <expr><operator>(</operator><name>PLyExecutionContext</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name><operator>-&gt;</operator><name>is_procedure</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>errcontext</name><argument_list>(<argument><expr><literal type="string">"PL/Python procedure \"%s\""</literal></expr></argument>,
					   <argument><expr><call><name>PLy_procedure_name</name><argument_list>(<argument><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>errcontext</name><argument_list>(<argument><expr><literal type="string">"PL/Python function \"%s\""</literal></expr></argument>,
					   <argument><expr><call><name>PLy_procedure_name</name><argument_list>(<argument><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>plpython_inline_error_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>errcontext</name><argument_list>(<argument><expr><literal type="string">"PL/Python anonymous code block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PLyExecutionContext</name> <modifier>*</modifier></type>
<name>PLy_current_execution_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>PLy_execution_contexts</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"no Python function is currently executing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>PLy_execution_contexts</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MemoryContext</name></type>
<name>PLy_get_scratch_context</name><parameter_list>(<parameter><decl><type><name>PLyExecutionContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * A scratch context might never be needed in a given plpython procedure,
	 * so allocate it on first request.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>scratch_ctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>scratch_ctx</name></name> <operator>=</operator>
			<call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopTransactionContext</name></expr></argument>,
								  <argument><expr><literal type="string">"PL/Python scratch context"</literal></expr></argument>,
								  <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name><name>context</name><operator>-&gt;</operator><name>scratch_ctx</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PLyExecutionContext</name> <modifier>*</modifier></type>
<name>PLy_push_execution_context</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>atomic_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PLyExecutionContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

	<comment type="block">/* Pick a memory context similar to what SPI uses. */</comment>
	<expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator><name>PLyExecutionContext</name> <operator>*</operator><operator>)</operator>
		<call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><ternary><condition><expr><name>atomic_context</name></expr> ?</condition><then> <expr><name>TopTransactionContext</name></expr> </then><else>: <expr><name>PortalContext</name></expr></else></ternary></expr></argument>,
						   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PLyExecutionContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>curr_proc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>scratch_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>PLy_execution_contexts</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>PLy_execution_contexts</name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	<return>return <expr><name>context</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>PLy_pop_execution_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PLyExecutionContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>PLy_execution_contexts</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"no Python function is currently executing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>PLy_execution_contexts</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>scratch_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>scratch_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
