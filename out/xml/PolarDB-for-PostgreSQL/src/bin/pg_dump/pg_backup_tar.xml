<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/bin/pg_dump/pg_backup_tar.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pg_backup_tar.c
 *
 *	This file is copied from the 'files' format file, but dumps data into
 *	one temp file then sends it to the output TAR archive.
 *
 *	The tar format also includes a 'restore.sql' script which is there for
 *	the benefit of humans. This script is never used by pg_restore.
 *
 *	NOTE: If you untar the created 'tar' file, the resulting files are
 *	compatible with the 'directory' format. Please keep the two formats in
 *	sync.
 *
 *	See the headers to pg_backup_directory &amp; pg_restore for more details.
 *
 * Copyright (c) 2000, Philip Warner
 *		Rights are granted to use this software in any way so long
 *		as this notice is not removed.
 *
 *	The author is not responsible for loss or damages that may
 *	result from it's use.
 *
 *
 * IDENTIFICATION
 *		src/bin/pg_dump/pg_backup_tar.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_backup_archiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_backup_tar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_backup_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/file_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fe_utils/string_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_ArchiveEntry</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_StartData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_WriteData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dLen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_EndData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>_WriteByte</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>_ReadByte</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_WriteBuf</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_ReadBuf</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_CloseArchive</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_PrintTocData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_WriteExtraToc</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_ReadExtraToc</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_PrintExtraToc</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_StartBlobs</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_StartBlob</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_EndBlob</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_EndBlobs</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_STD_BUF_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<decl_stmt><decl><type><name>gzFile</name></type>		<name>zFH</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>zFH</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>nFH</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>tarFH</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>tmpFH</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>targetFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgoff_t</name></type>		<name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgoff_t</name></type>		<name>fileLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl>;</decl_stmt>
}</block></struct></type> <name>TAR_MEMBER</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>hasSeek</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgoff_t</name></type>		<name>filePos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>blobToc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>tarFH</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgoff_t</name></type>		<name>tarFHpos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgoff_t</name></type>		<name>tarNextMember</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>FH</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>isSpecialScript</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>scriptTH</name></decl>;</decl_stmt>
}</block></struct></type> <name>lclContext</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>TH</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
}</block></struct></type> <name>lclTocEntry</name>;</typedef>

<comment type="block">/* translator: this is a module name */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modulename</name> <init>= <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"tar archiver"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_LoadBlobs</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>TAR_MEMBER</name> <modifier>*</modifier></type><name>tarOpen</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tarClose</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>TH</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__NOT_USED__</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>tarGets</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>tarPrintf</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> pg_attribute_printf<parameter_list>(</parameter_list>3<operator>,</operator> 4</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_tarAddFile</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>TAR_MEMBER</name> <modifier>*</modifier></type><name>_tarPositionTo</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>tarRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>tarWrite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_tarWriteHeader</name><parameter_list>(<parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>_tarGetHeader</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>_tarReadRaw</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>_scriptOut</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 *	Initializer
 */</comment>
<function><type><name>void</name></type>
<name>InitArchiveFmt_Tar</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<comment type="block">/* Assuming static functions, this can be copied for each format. */</comment>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>ArchiveEntryPtr</name></name> <operator>=</operator> <name>_ArchiveEntry</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>StartDataPtr</name></name> <operator>=</operator> <name>_StartData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>WriteDataPtr</name></name> <operator>=</operator> <name>_WriteData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>EndDataPtr</name></name> <operator>=</operator> <name>_EndData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>WriteBytePtr</name></name> <operator>=</operator> <name>_WriteByte</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>ReadBytePtr</name></name> <operator>=</operator> <name>_ReadByte</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>WriteBufPtr</name></name> <operator>=</operator> <name>_WriteBuf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>ReadBufPtr</name></name> <operator>=</operator> <name>_ReadBuf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>ClosePtr</name></name> <operator>=</operator> <name>_CloseArchive</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>ReopenPtr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>PrintTocDataPtr</name></name> <operator>=</operator> <name>_PrintTocData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>ReadExtraTocPtr</name></name> <operator>=</operator> <name>_ReadExtraToc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>WriteExtraTocPtr</name></name> <operator>=</operator> <name>_WriteExtraToc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>PrintExtraTocPtr</name></name> <operator>=</operator> <name>_PrintExtraToc</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>StartBlobsPtr</name></name> <operator>=</operator> <name>_StartBlobs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>StartBlobPtr</name></name> <operator>=</operator> <name>_StartBlob</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>EndBlobPtr</name></name> <operator>=</operator> <name>_EndBlob</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>EndBlobsPtr</name></name> <operator>=</operator> <name>_EndBlobs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>ClonePtr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>DeClonePtr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>WorkerJobDumpPtr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>WorkerJobRestorePtr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set up some special context used in compressing data.
	 */</comment>
	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lclContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filePos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>isSpecialScript</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Initialize LO buffering */</comment>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>lo_buf_size</name></name> <operator>=</operator> <name>LOBBUFSIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>lo_buf</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>LOBBUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now open the tar file, and load the TOC if we're in read mode.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>AH</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>archModeWrite</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>AH</name><operator>-&gt;</operator><name>fSpec</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>AH</name><operator>-&gt;</operator><name>fSpec</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>AH</name><operator>-&gt;</operator><name>fSpec</name></name></expr></argument>, <argument><expr><name>PG_BINARY_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
							  <argument><expr><literal type="string">"could not open TOC file \"%s\" for output: %s\n"</literal></expr></argument>,
							  <argument><expr><name><name>AH</name><operator>-&gt;</operator><name>fSpec</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
							  <argument><expr><literal type="string">"could not open TOC file for output: %s\n"</literal></expr></argument>,
							  <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFHpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * Make unbuffered since we will dup() it, and the buffers screw each
		 * other
		 */</comment>
		<comment type="block">/* setvbuf(ctx-&gt;tarFH, NULL, _IONBF, 0); */</comment>

		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hasSeek</name></name> <operator>=</operator> <call><name>checkSeek</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * We don't support compression because reading the files back is not
		 * possible since gzdopen uses buffered IO which totally screws file
		 * positioning.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>AH</name><operator>-&gt;</operator><name>compression</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
						  <argument><expr><literal type="string">"compression is not supported by tar archive format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>							<comment type="block">/* Read Mode */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>AH</name><operator>-&gt;</operator><name>fSpec</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>AH</name><operator>-&gt;</operator><name>fSpec</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>AH</name><operator>-&gt;</operator><name>fSpec</name></name></expr></argument>, <argument><expr><name>PG_BINARY_R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"could not open TOC file \"%s\" for input: %s\n"</literal></expr></argument>,
							  <argument><expr><name><name>AH</name><operator>-&gt;</operator><name>fSpec</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"could not open TOC file for input: %s\n"</literal></expr></argument>,
							  <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * Make unbuffered since we will dup() it, and the buffers screw each
		 * other
		 */</comment>
		<comment type="block">/* setvbuf(ctx-&gt;tarFH, NULL, _IONBF, 0); */</comment>

		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFHpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hasSeek</name></name> <operator>=</operator> <call><name>checkSeek</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Forcibly unmark the header as read since we use the lookahead
		 * buffer
		 */</comment>
		<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>readHeader</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>FH</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>tarOpen</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">"toc.dat"</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ReadHead</name><argument_list>(<argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ReadToc</name><argument_list>(<argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tarClose</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>FH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* Nothing else in the file... */</comment>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * - Start a new TOC entry
 *	 Setup the output file name.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_ArchiveEntry</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclTocEntry</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>fn</name><index>[<expr><name>K_STD_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>lclTocEntry</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lclTocEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>dataDumper</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name><name>AH</name><operator>-&gt;</operator><name>compression</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="string">"%d.dat"</literal></expr></argument>, <argument><expr><name><name>te</name><operator>-&gt;</operator><name>dumpId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="string">"%d.dat.gz"</literal></expr></argument>, <argument><expr><name><name>te</name><operator>-&gt;</operator><name>dumpId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="string">"%d.dat"</literal></expr></argument>, <argument><expr><name><name>te</name><operator>-&gt;</operator><name>dumpId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>TH</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>formatData</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_WriteExtraToc</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclTocEntry</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclTocEntry</name> <operator>*</operator><operator>)</operator> <name><name>te</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>WriteStr</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>WriteStr</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_ReadExtraToc</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclTocEntry</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclTocEntry</name> <operator>*</operator><operator>)</operator> <name><name>te</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>lclTocEntry</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lclTocEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>formatData</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>ReadStr</name><argument_list>(<argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>TH</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_PrintExtraToc</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclTocEntry</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclTocEntry</name> <operator>*</operator><operator>)</operator> <name><name>te</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>AH</name><operator>-&gt;</operator><name>public</name><operator>.</operator><name>verbose</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>filename</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ahprintf</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">"-- File: %s\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_StartData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclTocEntry</name> <modifier>*</modifier></type><name>tctx</name> <init>= <expr><operator>(</operator><name>lclTocEntry</name> <operator>*</operator><operator>)</operator> <name><name>te</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>TH</name></name> <operator>=</operator> <call><name>tarOpen</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TAR_MEMBER</name> <modifier>*</modifier></type>
<name>tarOpen</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>fmode</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>_tarPositionTo</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition>				<comment type="block">/* Not found */</comment>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>filename</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Couldn't find the requested file. Future: do SEEK(0) and
				 * retry.
				 */</comment>
				<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"could not find file \"%s\" in archive\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* Any file OK, none left, so return NULL */</comment>
				<return>return <expr><name>NULL</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>

		<if_stmt><if>if <condition>(<expr><name><name>AH</name><operator>-&gt;</operator><name>compression</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>nFH</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"compression is not supported by tar archive format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<comment type="block">/* tm-&gt;zFH = gzdopen(dup(fileno(ctx-&gt;tarFH)), "rb"); */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>nFH</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>old_umask</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>pg_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAR_MEMBER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * POSIX does not require, but permits, tmpfile() to restrict file
		 * permissions.  Given an OS crash after we write data, the filesystem
		 * might retain the data but forget tmpfile()'s unlink().  If so, the
		 * file mode protects confidentiality of the data written.
		 */</comment>
		<expr_stmt><expr><name>old_umask</name> <operator>=</operator> <call><name>umask</name><argument_list>(<argument><expr><name>S_IRWXG</name> <operator>|</operator> <name>S_IRWXO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tmpFH</name></name> <operator>=</operator> <call><name>tmpfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

		<comment type="block">/*
		 * On WIN32, tmpfile() generates a filename in the root directory,
		 * which requires administrative permissions on certain systems. Loop
		 * until we find a unique file name we can create.
		 */</comment>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>fd</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>_tempnam</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_temp_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>O_BINARY</name> <operator>|</operator>
					  <name>O_TEMPORARY</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>		<comment type="block">/* created a file */</comment>
			<block>{<block_content>
				<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tmpFH</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"w+b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* failure other than file exists */</comment>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tmpFH</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"could not generate temporary file name: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><name>old_umask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>

		<if_stmt><if>if <condition>(<expr><name><name>AH</name><operator>-&gt;</operator><name>compression</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fmode</name></expr></argument>, <argument><expr><literal type="string">"wb%d"</literal></expr></argument>, <argument><expr><name><name>AH</name><operator>-&gt;</operator><name>compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>zFH</name></name> <operator>=</operator> <call><name>gzdopen</name><argument_list>(<argument><expr><call><name>dup</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tmpFH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>zFH</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"could not open temporary file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>nFH</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tmpFH</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>nFH</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tmpFH</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>AH</name></name> <operator>=</operator> <name>AH</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>targetFile</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tarFH</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name></expr>;</expr_stmt>

	<return>return <expr><name>tm</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tarClose</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Close the GZ file since we dup'd. This will flush the buffers.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>AH</name><operator>-&gt;</operator><name>compression</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>GZCLOSE</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>zFH</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"could not close tar member\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>_tarAddFile</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>	<comment type="block">/* This will close the temp file */</comment>

	<comment type="block">/*
	 * else Nothing to do for normal read since we don't dup() normal file
	 * handle, and we don't use temp files.
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>targetFile</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>targetFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>nFH</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>zFH</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__NOT_USED__</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>tarGets</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>c</name> <init>= <expr><literal type="char">' '</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>eof</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Can't read past logical EOF */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name><name>th</name><operator>-&gt;</operator><name>fileLen</name></name> <operator>-</operator> <name><name>th</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>fileLen</name></name> <operator>-</operator> <name><name>th</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>_tarReadRaw</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>AH</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>th</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>eof</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>eof</name> <operator>&amp;&amp;</operator> <name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Just read bytes from the archive. This is the low level read routine
 * that is used for ALL reads on a tar file.
 */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>_tarReadRaw</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>avail</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>avail</name> <operator>=</operator> <name><name>AH</name><operator>-&gt;</operator><name>lookaheadLen</name></name> <operator>-</operator> <name><name>AH</name><operator>-&gt;</operator><name>lookaheadPos</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* We have some lookahead bytes to use */</comment>
		<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>		<comment type="block">/* Just use the lookahead buffer */</comment>
			<expr_stmt><expr><name>used</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>used</name> <operator>=</operator> <name>avail</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* Copy, and adjust buffer pos */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>AH</name><operator>-&gt;</operator><name>lookahead</name></name> <operator>+</operator> <name><name>AH</name><operator>-&gt;</operator><name>lookaheadPos</name></name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>lookaheadPos</name></name> <operator>+=</operator> <name>used</name></expr>;</expr_stmt>

		<comment type="block">/* Adjust required length */</comment>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>used</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Read the file if len &gt; 0 */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>fh</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name><operator>)</operator><index>[<expr><name>used</name></expr>]</index></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>READ_ERROR_EXIT</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>th</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>zFH</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GZREAD</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name><operator>)</operator><index>[<expr><name>used</name></expr>]</index></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>zFH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GZEOF</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>zFH</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
					<decl_stmt><decl><type><name>int</name></type>			<name>errnum</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><call><name>gzerror</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>zFH</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
								  <argument><expr><literal type="string">"could not read from input file: %s\n"</literal></expr></argument>,
								  <argument><expr><ternary><condition><expr><name>errnum</name> <operator>==</operator> <name>Z_ERRNO</name></expr> ?</condition><then> <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>errmsg</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
					<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
								  <argument><expr><literal type="string">"could not read from input file: %s\n"</literal></expr></argument>,
								  <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name><operator>)</operator><index>[<expr><name>used</name></expr>]</index></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>nFH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>nFH</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>READ_ERROR_EXIT</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>nFH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"internal error -- neither th nor fh specified in tarReadRaw()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFHpos</name></name> <operator>+=</operator> <name>res</name> <operator>+</operator> <name>used</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>res</name> <operator>+</operator> <name>used</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>tarRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>th</name><operator>-&gt;</operator><name>fileLen</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>th</name><operator>-&gt;</operator><name>fileLen</name></name> <operator>-</operator> <name><name>th</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_tarReadRaw</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>AH</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>th</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>tarWrite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>zFH</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GZWRITE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>zFH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>nFH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_WriteData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclTocEntry</name> <modifier>*</modifier></type><name>tctx</name> <init>= <expr><operator>(</operator><name>lclTocEntry</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>currToc</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>tarWrite</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dLen</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>TH</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>dLen</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>WRITE_ERROR_EXIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_EndData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclTocEntry</name> <modifier>*</modifier></type><name>tctx</name> <init>= <expr><operator>(</operator><name>lclTocEntry</name> <operator>*</operator><operator>)</operator> <name><name>te</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Close the file */</comment>
	<expr_stmt><expr><call><name>tarClose</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>TH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>TH</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Print data for a given file
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_PrintFileData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>cnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>th</name> <operator>=</operator> <call><name>tarOpen</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>FH</name></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>cnt</name> <operator>=</operator> <call><name>tarRead</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4095</literal></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ahwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>tarClose</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Print data for a given TOC entry
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_PrintTocData</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lclTocEntry</name> <modifier>*</modifier></type><name>tctx</name> <init>= <expr><operator>(</operator><name>lclTocEntry</name> <operator>*</operator><operator>)</operator> <name><name>te</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pos1</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tctx</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If we're writing the special restore.sql script, emit a suitable
	 * command to include each table's data from the corresponding file.
	 *
	 * In the COPY case this is a bit klugy because the regular COPY command
	 * was already printed before we get control.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>isSpecialScript</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>copyStmt</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Abort the COPY FROM stdin */</comment>
			<expr_stmt><expr><call><name>ahprintf</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">"\\.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * The COPY statement should look like "COPY ... FROM stdin;\n",
			 * see dumpTableData().
			 */</comment>
			<expr_stmt><expr><name>pos1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>te</name><operator>-&gt;</operator><name>copyStmt</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">13</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>pos1</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>te</name><operator>-&gt;</operator><name>copyStmt</name></name></expr></argument>, <argument><expr><literal type="string">"COPY "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
				<call><name>strcmp</name><argument_list>(<argument><expr><name><name>te</name><operator>-&gt;</operator><name>copyStmt</name></name> <operator>+</operator> <name>pos1</name></expr></argument>, <argument><expr><literal type="string">" FROM stdin;\n"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
							  <argument><expr><literal type="string">"unexpected COPY statement syntax: \"%s\"\n"</literal></expr></argument>,
							  <argument><expr><name><name>te</name><operator>-&gt;</operator><name>copyStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* Emit all but the FROM part ... */</comment>
			<expr_stmt><expr><call><name>ahwrite</name><argument_list>(<argument><expr><name><name>te</name><operator>-&gt;</operator><name>copyStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos1</name></expr></argument>, <argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* ... and insert modified FROM */</comment>
			<expr_stmt><expr><call><name>ahprintf</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">" FROM '$$PATH$$/%s';\n\n"</literal></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* --inserts mode, no worries, just include the data file */</comment>
			<expr_stmt><expr><call><name>ahprintf</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">"\\i $$PATH$$/%s\n\n"</literal></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>te</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><literal type="string">"BLOBS"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>_LoadBlobs</name><argument_list>(<argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>_PrintFileData</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_LoadBlobs</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>oid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>cnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>foundBlob</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>StartRestoreBlobs</name><argument_list>(<argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>th</name> <operator>=</operator> <call><name>tarOpen</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* Open next file */</comment>
	<while>while <condition>(<expr><name>th</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>FH</name></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>targetFile</name></name></expr></argument>, <argument><expr><literal type="string">"blob_"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>oid</name> <operator>=</operator> <call><name>atooid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>targetFile</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>oid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ahlog</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"restoring large object with OID %u\n"</literal></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>StartRestoreBlob</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name><name>AH</name><operator>-&gt;</operator><name>public</name><operator>.</operator><name>ropt</name><operator>-&gt;</operator><name>dropSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<while>while <condition>(<expr><operator>(</operator><name>cnt</name> <operator>=</operator> <call><name>tarRead</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4095</literal></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>buf</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ahwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></while>
				<expr_stmt><expr><call><name>EndRestoreBlob</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>foundBlob</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>tarClose</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>tarClose</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Once we have found the first blob, stop at the first non-blob
			 * entry (which will be 'blobs.toc').  This coding would eat all
			 * the rest of the archive if there are no blobs ... but this
			 * function shouldn't be called at all in that case.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>foundBlob</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>th</name> <operator>=</operator> <call><name>tarOpen</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>EndRestoreBlobs</name><argument_list>(<argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>_WriteByte</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>b</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>			<comment type="block">/* Avoid endian problems */</comment>

	<if_stmt><if>if <condition>(<expr><call><name>tarWrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>FH</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>WRITE_ERROR_EXIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filePos</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_ReadByte</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>tarRead</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>FH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* We already would have exited for errors on reads, must be EOF */</comment>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
					  <argument><expr><literal type="string">"could not read from input file: end of file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filePos</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_WriteBuf</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>tarWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>FH</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>WRITE_ERROR_EXIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filePos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_ReadBuf</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>tarRead</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>FH</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* We already would have exited for errors on reads, must be EOF */</comment>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
					  <argument><expr><literal type="string">"could not read from input file: end of file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filePos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_CloseArchive</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RestoreOptions</name> <modifier>*</modifier></type><name>ropt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RestoreOptions</name> <modifier>*</modifier></type><name>savRopt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DumpOptions</name> <modifier>*</modifier></type><name>savDopt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>savVerbose</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>AH</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>archModeWrite</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Write the Header &amp; TOC to the archive FIRST
		 */</comment>
		<expr_stmt><expr><name>th</name> <operator>=</operator> <call><name>tarOpen</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">"toc.dat"</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>FH</name></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WriteHead</name><argument_list>(<argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WriteToc</name><argument_list>(<argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tarClose</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* Not needed any more */</comment>

		<comment type="block">/*
		 * Now send the data (tables &amp; blobs)
		 */</comment>
		<expr_stmt><expr><call><name>WriteDataChunks</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Now this format wants to append a script which does a full restore
		 * if the files have been extracted.
		 */</comment>
		<expr_stmt><expr><name>th</name> <operator>=</operator> <call><name>tarOpen</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="string">"restore.sql"</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>tarPrintf</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="string">"--\n"</literal>
						 <literal type="string">"-- NOTE:\n"</literal>
						 <literal type="string">"--\n"</literal>
						 <literal type="string">"-- File paths need to be edited. Search for $$PATH$$ and\n"</literal>
						 <literal type="string">"-- replace it with the path to the directory containing\n"</literal>
						 <literal type="string">"-- the extracted data files.\n"</literal>
						 <literal type="string">"--\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>CustomOutPtr</name></name> <operator>=</operator> <name>_scriptOut</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>isSpecialScript</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scriptTH</name></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>ropt</name> <operator>=</operator> <call><name>NewRestoreOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ropt</name></expr></argument>, <argument><expr><name><name>AH</name><operator>-&gt;</operator><name>public</name><operator>.</operator><name>ropt</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RestoreOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ropt</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ropt</name><operator>-&gt;</operator><name>dropSchema</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ropt</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ropt</name><operator>-&gt;</operator><name>superuser</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ropt</name><operator>-&gt;</operator><name>suppressDumpWarnings</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>savDopt</name> <operator>=</operator> <name><name>AH</name><operator>-&gt;</operator><name>public</name><operator>.</operator><name>dopt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>savRopt</name> <operator>=</operator> <name><name>AH</name><operator>-&gt;</operator><name>public</name><operator>.</operator><name>ropt</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SetArchiveOptions</name><argument_list>(<argument><expr><operator>(</operator><name>Archive</name> <operator>*</operator><operator>)</operator> <name>AH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ropt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>savVerbose</name> <operator>=</operator> <name><name>AH</name><operator>-&gt;</operator><name>public</name><operator>.</operator><name>verbose</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>public</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>RestoreArchive</name><argument_list>(<argument><expr><operator>(</operator><name>Archive</name> <operator>*</operator><operator>)</operator> <name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SetArchiveOptions</name><argument_list>(<argument><expr><operator>(</operator><name>Archive</name> <operator>*</operator><operator>)</operator> <name>AH</name></expr></argument>, <argument><expr><name>savDopt</name></expr></argument>, <argument><expr><name>savRopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>public</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <name>savVerbose</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>tarClose</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>isSpecialScript</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * EOF marker for tar files is two blocks of NULLs.
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>WRITE_ERROR_EXIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="block">/* Sync the output file if one is defined */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>AH</name><operator>-&gt;</operator><name>dosync</name></name> <operator>&amp;&amp;</operator> <name><name>AH</name><operator>-&gt;</operator><name>fSpec</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fsync_fname</name><argument_list>(<argument><expr><name><name>AH</name><operator>-&gt;</operator><name>fSpec</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>AH</name><operator>-&gt;</operator><name>FH</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>_scriptOut</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>tarWrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scriptTH</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BLOB support
 */</comment>

<comment type="block">/*
 * Called by the archiver when starting to save all BLOB DATA (not schema).
 * This routine should save whatever format-specific information is needed
 * to read the BLOBs back into memory.
 *
 * It is called just prior to the dumper's DataDumper routine.
 *
 * Optional, but strongly recommended.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_StartBlobs</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>fname</name><index>[<expr><name>K_STD_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"blobs.toc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>blobToc</name></name> <operator>=</operator> <call><name>tarOpen</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Called by the archiver when the dumper calls StartBlob.
 *
 * Mandatory.
 *
 * Must save the passed OID for retrieval at restore-time.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_StartBlob</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lclTocEntry</name> <modifier>*</modifier></type><name>tctx</name> <init>= <expr><operator>(</operator><name>lclTocEntry</name> <operator>*</operator><operator>)</operator> <name><name>te</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>fname</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>sfx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>oid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"invalid OID for large object (%u)\n"</literal></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>AH</name><operator>-&gt;</operator><name>compression</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>sfx</name> <operator>=</operator> <literal type="string">".gz"</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>sfx</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"blob_%u.dat%s"</literal></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>sfx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tarPrintf</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blobToc</name></name></expr></argument>, <argument><expr><literal type="string">"%u %s\n"</literal></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>TH</name></name> <operator>=</operator> <call><name>tarOpen</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Called by the archiver when the dumper calls EndBlob.
 *
 * Optional.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_EndBlob</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclTocEntry</name> <modifier>*</modifier></type><name>tctx</name> <init>= <expr><operator>(</operator><name>lclTocEntry</name> <operator>*</operator><operator>)</operator> <name><name>te</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>tarClose</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>TH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Called by the archiver when finishing saving all BLOB DATA.
 *
 * Optional.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_EndBlobs</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TocEntry</name> <modifier>*</modifier></type><name>te</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Write out a fake zero OID to mark end-of-blobs. */</comment>
	<comment type="block">/* WriteInt(AH, 0); */</comment>

	<expr_stmt><expr><call><name>tarClose</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blobToc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<comment type="block">/*------------
 * TAR Support
 *------------
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tarPrintf</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>len</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>		<comment type="block">/* initial assumption about buffer size */</comment>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>cnt</name></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>va_list</name></type>		<name>args</name></decl>;</decl_stmt>

		<comment type="block">/* Allocate work buffer. */</comment>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Try to format the data. */</comment>
		<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>pvsnprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>				<comment type="block">/* success */</comment>

		<comment type="block">/* Release buffer and loop around to try again with larger len. */</comment>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>tarWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>cnt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>isValidTarHeader</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>sum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>chk</name> <init>= <expr><call><name>tarChecksum</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>read_tar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">148</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>!=</operator> <name>chk</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* POSIX tar format */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ustar\0"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">263</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"00"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* GNU tar format */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ustar  \0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* not-quite-POSIX format written by pre-9.3 pg_dump */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ustar00\0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Given the member, write the TAR header &amp; copy the file */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_tarAddFile</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>tmpFH</name></name></expr></init></decl>;</decl_stmt>	<comment type="block">/* Grab it for convenience */</comment>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">32768</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>cnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgoff_t</name></type>		<name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>i</name></decl>,
				<decl><type ref="prev"/><name>pad</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Find file len &amp; go back to start.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>fseeko</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"error during file seek: %s\n"</literal></expr></argument>,
					  <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>fileLen</name></name> <operator>=</operator> <call><name>ftello</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>fileLen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"could not determine seek position in archive file: %s\n"</literal></expr></argument>,
					  <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>fseeko</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"error during file seek: %s\n"</literal></expr></argument>,
					  <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>_tarWriteHeader</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>cnt</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>tarFH</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>cnt</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>WRITE_ERROR_EXIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>READ_ERROR_EXIT</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>		<comment type="block">/* This *should* delete it... */</comment>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"could not close temporary file: %s\n"</literal></expr></argument>,
					  <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name><name>th</name><operator>-&gt;</operator><name>fileLen</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>buf1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>,
					<decl><type ref="prev"/><name><name>buf2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>INT64_FORMAT</name></expr></argument>, <argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>INT64_FORMAT</name></expr></argument>, <argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <name><name>th</name><operator>-&gt;</operator><name>fileLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"actual file length (%s) does not match expected (%s)\n"</literal></expr></argument>,
					  <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>pad</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">511</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">511</literal><operator>)</operator> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pad</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>tarFH</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>WRITE_ERROR_EXIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFHpos</name></name> <operator>+=</operator> <name>len</name> <operator>+</operator> <name>pad</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Locate the file in the archive, read header and position to data */</comment>
<function><type><specifier>static</specifier> <name>TAR_MEMBER</name> <modifier>*</modifier></type>
<name>_tarPositionTo</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>pg_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAR_MEMBER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>header</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>i</name></decl>,
				<decl><type ref="prev"/><name>len</name></decl>,
				<decl><type ref="prev"/><name>blks</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>id</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>AH</name></name> <operator>=</operator> <name>AH</name></expr>;</expr_stmt>

	<comment type="block">/* Go to end of current file, if any */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFHpos</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>buf1</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>,
					<decl><type ref="prev"/><name><name>buf2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>INT64_FORMAT</name></expr></argument>, <argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tarFHpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>INT64_FORMAT</name></expr></argument>, <argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tarNextMember</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ahlog</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"moving from position %s to next member at file position %s\n"</literal></expr></argument>,
			  <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFHpos</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tarNextMember</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>_tarReadRaw</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></if></if_stmt>

	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>INT64_FORMAT</name></expr></argument>, <argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tarFHpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ahlog</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"now at file position %s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/* We are at the start of the file, or at the next member */</comment>

	<comment type="block">/* Get the header */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_tarGetHeader</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"could not find header for file \"%s\" in tar archive\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * We're just scanning the archive for the next file, so return
			 * null
			 */</comment>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>filename</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>targetFile</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ahlog</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"skipping tar member %s\n"</literal></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>targetFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>targetFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>TocIDRequired</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>REQ_DATA</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"restoring data out of order is not supported in this archive format: "</literal>
						  <literal type="string">"\"%s\" is required, but comes before \"%s\" in the archive file.\n"</literal></expr></argument>,
						  <argument><expr><name><name>th</name><operator>-&gt;</operator><name>targetFile</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Header doesn't match, so read to next header */</comment>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>th</name><operator>-&gt;</operator><name>fileLen</name></name> <operator>+</operator> <literal type="number">511</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">511</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* Padded length */</comment>
		<expr_stmt><expr><name>blks</name> <operator>=</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>		<comment type="block">/* # of 512 byte blocks */</comment>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>_tarReadRaw</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_tarGetHeader</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"could not find header for file \"%s\" in tar archive\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarNextMember</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tarFHpos</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>th</name><operator>-&gt;</operator><name>fileLen</name></name> <operator>+</operator> <literal type="number">511</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">511</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>th</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Read &amp; verify a header */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>_tarGetHeader</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lclContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>lclContext</name> <operator>*</operator><operator>)</operator> <name><name>AH</name><operator>-&gt;</operator><name>formatData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>h</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>tag</name><index>[<expr><literal type="number">100</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>chk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgoff_t</name></type>		<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgoff_t</name></type>		<name>hPos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>gotBlock</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>!</operator><name>gotBlock</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Save the pos for reporting purposes */</comment>
		<expr_stmt><expr><name>hPos</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tarFHpos</name></name></expr>;</expr_stmt>

		<comment type="block">/* Read a 512 byte block, return EOF, exit if short */</comment>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>_tarReadRaw</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* EOF */</comment>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">512</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
						  <argument><expr><call><name>ngettext</name><argument_list>(<argument><expr><literal type="string">"incomplete tar header found (%lu byte)\n"</literal></expr></argument>,
								   <argument><expr><literal type="string">"incomplete tar header found (%lu bytes)\n"</literal></expr></argument>,
								   <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Calc checksum */</comment>
		<expr_stmt><expr><name>chk</name> <operator>=</operator> <call><name>tarChecksum</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>read_tar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">148</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If the checksum failed, see if it is a null block. If so, silently
		 * continue to the next block.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>chk</name> <operator>==</operator> <name>sum</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>gotBlock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>gotBlock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Name field is 100 bytes, might not be null-terminated */</comment>
	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">100</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>read_tar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">124</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>posbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>lenbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>posbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>posbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>UINT64_FORMAT</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name><operator>)</operator> <name>hPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>lenbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lenbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>UINT64_FORMAT</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ahlog</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"TOC Entry %s at %s (length %s, checksum %d)\n"</literal></expr></argument>,
			  <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>posbuf</name></expr></argument>, <argument><expr><name>lenbuf</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>chk</name> <operator>!=</operator> <name>sum</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>posbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>posbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>posbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>UINT64_FORMAT</name></expr></argument>,
				 <argument><expr><operator>(</operator><name>uint64</name><operator>)</operator> <call><name>ftello</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tarFH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
					  <argument><expr><literal type="string">"corrupt tar header found in %s "</literal>
					  <literal type="string">"(expected %d, computed %d) file position %s\n"</literal></expr></argument>,
					  <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name>chk</name></expr></argument>, <argument><expr><name>posbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>targetFile</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>fileLen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>_tarWriteHeader</name><parameter_list>(<parameter><decl><type><name>TAR_MEMBER</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>h</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>tarCreateHeader</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>targetFile</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>fileLen</name></name></expr></argument>,
					<argument><expr><literal type="number">0600</literal></expr></argument>, <argument><expr><literal type="number">04000</literal></expr></argument>, <argument><expr><literal type="number">02000</literal></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Now write the completed header. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>tarFH</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">512</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>WRITE_ERROR_EXIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
