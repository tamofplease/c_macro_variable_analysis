<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/bin/pg_basebackup/walmethods.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * walmethods.c - implementations of different ways to write received wal
 *
 * NOTE! The caller must ensure that only one method is instantiated in
 *		 any given program, and that it's only instantiated once!
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *		  src/bin/pg_basebackup/walmethods.c
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/file_perm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/file_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/polar_fs_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"receivelog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streamutil.h"</cpp:file></cpp:include>

<comment type="block">/* Size of zlib buffer for .tar.gz */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZLIB_OUT_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_is_write_pfs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*-------------------------------------------------------------------------
 * WalDirectoryMethod - write wal to a directory looking like pg_wal
 *-------------------------------------------------------------------------
 */</comment>

<comment type="block">/*
 * Global static data for this method
 */</comment>
<typedef>typedef <type><struct>struct <name>DirectoryMethodData</name>
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>basedir</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>compression</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>sync</name></decl>;</decl_stmt>
}</block></struct></type> <name>DirectoryMethodData</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>DirectoryMethodData</name> <modifier>*</modifier></type><name>dir_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Local file handle
 */</comment>
<typedef>typedef <type><struct>struct <name>DirectoryMethodFile</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>		<name>currpos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pathname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fullpath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>temp_suffix</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<decl_stmt><decl><type><name>gzFile</name></type>		<name>gzfp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>DirectoryMethodFile</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dir_getlasterror</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Directory method always sets errno, so just use strerror */</comment>
	<return>return <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Walfile</name></type>
<name>dir_open_for_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>temp_suffix</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pad_to_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tmppath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DirectoryMethodFile</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<decl_stmt><decl><type><name>gzFile</name></type>		<name>gzfp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmppath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s%s%s"</literal></expr></argument>,
			 <argument><expr><name><name>dir_data</name><operator>-&gt;</operator><name>basedir</name></name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>dir_data</name><operator>-&gt;</operator><name>compression</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">".gz"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name>temp_suffix</name></expr> ?</condition><then> <expr><name>temp_suffix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Open a file for non-compressed as well as compressed files. Tracking
	 * the file descriptor is important for dir_sync() method as gzflush()
	 * does not do any system calls to fsync() to make changes permanent on
	 * disk.
	 */</comment>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>polar_open</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><name>pg_file_create_mode</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>dir_data</name><operator>-&gt;</operator><name>compression</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>gzfp</name> <operator>=</operator> <call><name>gzdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>gzfp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>gzsetparams</name><argument_list>(<argument><expr><name>gzfp</name></expr></argument>, <argument><expr><name><name>dir_data</name><operator>-&gt;</operator><name>compression</name></name></expr></argument>,
						<argument><expr><name>Z_DEFAULT_STRATEGY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gzclose</name><argument_list>(<argument><expr><name>gzfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Do pre-padding on non-compressed files */</comment>
	<if_stmt><if>if <condition>(<expr><name>pad_to_size</name> <operator>&amp;&amp;</operator> <name><name>dir_data</name><operator>-&gt;</operator><name>compression</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>polar_is_write_pfs</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PolarAlignedXLogBlock</name></type> <name>zerobuf</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>bytes</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>zerobuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,	<argument><expr><name>MAX_SEND_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bytes</name> <operator>&lt;</operator> <name>pad_to_size</name></expr>;</condition> <incr><expr><name>bytes</name> <operator>+=</operator> <name>MAX_SEND_SIZE</name></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>polar_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>zerobuf</name><operator>.</operator><name>data</name></name></expr></argument>,	<argument><expr><name>MAX_SEND_SIZE</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MAX_SEND_SIZE</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
						* If write didn't set errno, assume problem is no disk space.
						*/</comment>
					<expr_stmt><expr><name>errno</name> <operator>=</operator> <ternary><condition><expr><name>save_errno</name></expr> ?</condition><then> <expr><name>save_errno</name></expr> </then><else>: <expr><name>ENOSPC</name></expr></else></ternary></expr>;</expr_stmt>
					<return>return <expr><name>NULL</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>PGAlignedXLogBlock</name></type> <name>zerobuf</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>bytes</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>zerobuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bytes</name> <operator>&lt;</operator> <name>pad_to_size</name></expr>;</condition> <incr><expr><name>bytes</name> <operator>+=</operator> <name>XLOG_BLCKSZ</name></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>polar_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>zerobuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>XLOG_BLCKSZ</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XLOG_BLCKSZ</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					* If write didn't set errno, assume problem is no disk space.
					*/</comment>
					<expr_stmt><expr><name>errno</name> <operator>=</operator> <ternary><condition><expr><name>save_errno</name></expr> ?</condition><then> <expr><name>save_errno</name></expr> </then><else>: <expr><name>ENOSPC</name></expr></else></ternary></expr>;</expr_stmt>
					<return>return <expr><name>NULL</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>polar_lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * fsync WAL file and containing directory, to ensure the file is
	 * persistently created and zeroed (if padded). That's particularly
	 * important when using synchronous mode, where the file is modified and
	 * fsynced in-place, without a directory fsync.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dir_data</name><operator>-&gt;</operator><name>sync</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>polar_fsync_fname</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>polar_fsync_parent_path</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><name><name>dir_data</name><operator>-&gt;</operator><name>compression</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>gzclose</name><argument_list>(<argument><expr><name>gzfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>pg_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DirectoryMethodFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>dir_data</name><operator>-&gt;</operator><name>compression</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>gzfp</name></name> <operator>=</operator> <name>gzfp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>currpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pathname</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>fullpath</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>temp_suffix</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>temp_suffix</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>temp_suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>dir_write</name><parameter_list>(<parameter><decl><type><name>Walfile</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type>		<name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DirectoryMethodFile</name> <modifier>*</modifier></type><name>df</name> <init>= <expr><operator>(</operator><name>DirectoryMethodFile</name> <operator>*</operator><operator>)</operator> <name>f</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>dir_data</name><operator>-&gt;</operator><name>compression</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <call><name>gzwrite</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>gzfp</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>polar_write</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>currpos</name></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>off_t</name></type>
<name>dir_get_current_pos</name><parameter_list>(<parameter><decl><type><name>Walfile</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Use a cached value to prevent lots of reseeks */</comment>
	<return>return <expr><operator>(</operator><operator>(</operator><name>DirectoryMethodFile</name> <operator>*</operator><operator>)</operator> <name>f</name><operator>)</operator><operator>-&gt;</operator><name>currpos</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dir_close</name><parameter_list>(<parameter><decl><type><name>Walfile</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>WalCloseMethod</name></type> <name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DirectoryMethodFile</name> <modifier>*</modifier></type><name>df</name> <init>= <expr><operator>(</operator><name>DirectoryMethodFile</name> <operator>*</operator><operator>)</operator> <name>f</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tmppath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tmppath2</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>dir_data</name><operator>-&gt;</operator><name>compression</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>gzclose</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>gzfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>polar_close</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Build path to the current version of the file */</comment>
		<if_stmt><if>if <condition>(<expr><name>method</name> <operator>==</operator> <name>CLOSE_NORMAL</name> <operator>&amp;&amp;</operator> <name><name>df</name><operator>-&gt;</operator><name>temp_suffix</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * If we have a temp prefix, normal operation is to rename the
			 * file.
			 */</comment>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmppath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s%s%s"</literal></expr></argument>,
					 <argument><expr><name><name>dir_data</name><operator>-&gt;</operator><name>basedir</name></name></expr></argument>, <argument><expr><name><name>df</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>,
					 <argument><expr><ternary><condition><expr><name><name>dir_data</name><operator>-&gt;</operator><name>compression</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">".gz"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
					 <argument><expr><name><name>df</name><operator>-&gt;</operator><name>temp_suffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmppath2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmppath2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s%s"</literal></expr></argument>,
					 <argument><expr><name><name>dir_data</name><operator>-&gt;</operator><name>basedir</name></name></expr></argument>, <argument><expr><name><name>df</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>,
					 <argument><expr><ternary><condition><expr><name><name>dir_data</name><operator>-&gt;</operator><name>compression</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">".gz"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>polar_durable_rename</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>, <argument><expr><name>tmppath2</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>method</name> <operator>==</operator> <name>CLOSE_UNLINK</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Unlink the file once it's closed */</comment>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmppath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s%s%s"</literal></expr></argument>,
					 <argument><expr><name><name>dir_data</name><operator>-&gt;</operator><name>basedir</name></name></expr></argument>, <argument><expr><name><name>df</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>,
					 <argument><expr><ternary><condition><expr><name><name>dir_data</name><operator>-&gt;</operator><name>compression</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">".gz"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
					 <argument><expr><ternary><condition><expr><name><name>df</name><operator>-&gt;</operator><name>temp_suffix</name></name></expr> ?</condition><then> <expr><name><name>df</name><operator>-&gt;</operator><name>temp_suffix</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>polar_unlink</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * Else either CLOSE_NORMAL and no temp suffix, or
			 * CLOSE_NO_RENAME. In this case, fsync the file and containing
			 * directory if sync mode is requested.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>dir_data</name><operator>-&gt;</operator><name>sync</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>polar_fsync_fname</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>fullpath</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>polar_fsync_parent_path</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>fullpath</name></name></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>fullpath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>df</name><operator>-&gt;</operator><name>temp_suffix</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>temp_suffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dir_sync</name><parameter_list>(<parameter><decl><type><name>Walfile</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dir_data</name><operator>-&gt;</operator><name>sync</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>dir_data</name><operator>-&gt;</operator><name>compression</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>gzflush</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>DirectoryMethodFile</name> <operator>*</operator><operator>)</operator> <name>f</name><operator>)</operator><operator>-&gt;</operator><name>gzfp</name></expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><call><name>polar_fsync</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>DirectoryMethodFile</name> <operator>*</operator><operator>)</operator> <name>f</name><operator>)</operator><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>dir_get_file_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tmppath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmppath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>,
			 <argument><expr><name><name>dir_data</name><operator>-&gt;</operator><name>basedir</name></name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_stat</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>statbuf</name><operator>.</operator><name>st_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>dir_existsfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tmppath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>fd</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmppath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>,
			 <argument><expr><name><name>dir_data</name><operator>-&gt;</operator><name>basedir</name></name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>polar_open</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>dir_finish</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>dir_data</name><operator>-&gt;</operator><name>sync</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Files are fsynced when they are closed, but we need to fsync the
		 * directory entry here as well.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>polar_fsync_fname</name><argument_list>(<argument><expr><name><name>dir_data</name><operator>-&gt;</operator><name>basedir</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>polar_is_write_pfs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>WalWriteMethod</name> <modifier>*</modifier></type>
<name>CreateWalDirectoryMethod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>basedir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compression</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_pfs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WalWriteMethod</name> <modifier>*</modifier></type><name>method</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>polar_is_write_pfs</name> <operator>=</operator> <name>is_pfs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>method</name> <operator>=</operator> <call><name>pg_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WalWriteMethod</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>open_for_write</name></name> <operator>=</operator> <name>dir_open_for_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>dir_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>get_current_pos</name></name> <operator>=</operator> <name>dir_get_current_pos</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>get_file_size</name></name> <operator>=</operator> <name>dir_get_file_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>dir_close</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>sync</name></name> <operator>=</operator> <name>dir_sync</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>existsfile</name></name> <operator>=</operator> <name>dir_existsfile</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <name>dir_finish</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>getlasterror</name></name> <operator>=</operator> <name>dir_getlasterror</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>dir_data</name> <operator>=</operator> <call><name>pg_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DirectoryMethodData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dir_data</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <name>compression</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dir_data</name><operator>-&gt;</operator><name>basedir</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>basedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dir_data</name><operator>-&gt;</operator><name>sync</name></name> <operator>=</operator> <name>sync</name></expr>;</expr_stmt>

	<return>return <expr><name>method</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>FreeWalDirectoryMethod</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>dir_data</name><operator>-&gt;</operator><name>basedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>dir_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*-------------------------------------------------------------------------
 * WalTarMethod - write wal to a tar file containing pg_wal contents
 *-------------------------------------------------------------------------
 */</comment>

<typedef>typedef <type><struct>struct <name>TarMethodFile</name>
<block>{
	<decl_stmt><decl><type><name>off_t</name></type>		<name>ofs_start</name></decl>;</decl_stmt>		<comment type="block">/* Where does the *header* for this file start */</comment>
	<decl_stmt><decl><type><name>off_t</name></type>		<name>currpos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>header</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pathname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>pad_to_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>TarMethodFile</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TarMethodData</name>
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tarfilename</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>compression</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>sync</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TarMethodFile</name> <modifier>*</modifier></type><name>currentfile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>lasterror</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<decl_stmt><decl><type><name>z_streamp</name></type>	<name>zp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>zlibOut</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>TarMethodData</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>TarMethodData</name> <modifier>*</modifier></type><name>tar_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tar_clear_error</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>tar_data-&gt;lasterror[0] = '\0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tar_set_error</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strlcpy(tar_data-&gt;lasterror, _(msg), sizeof(tar_data-&gt;lasterror))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>tar_getlasterror</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * If a custom error is set, return that one. Otherwise, assume errno is
	 * set and return that one.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>lasterror</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>tar_data</name><operator>-&gt;</operator><name>lasterror</name></name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tar_write_compressed_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>||</operator> <name>flush</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>r</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>flush</name></expr> ?</condition><then> <expr><name>Z_FINISH</name></expr> </then><else>: <expr><name>Z_NO_FLUSH</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>Z_STREAM_ERROR</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>tar_set_error</name><argument_list>(<argument><expr><literal type="string">"could not compress data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>&lt;</operator> <name>ZLIB_OUT_SIZE</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type>		<name>len</name> <init>= <expr><name>ZLIB_OUT_SIZE</name> <operator>-</operator> <name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zlibOut</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * If write didn't set errno, assume problem is no disk space.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSPC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <name><name>tar_data</name><operator>-&gt;</operator><name>zlibOut</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name>ZLIB_OUT_SIZE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>Z_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>flush</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Reset the stream for writing */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>deflateReset</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>tar_set_error</name><argument_list>(<argument><expr><literal type="string">"could not reset compression stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>tar_write</name><parameter_list>(<parameter><decl><type><name>Walfile</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type>		<name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tar_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Tarfile will always be positioned at the end */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>TarMethodFile</name> <operator>*</operator><operator>)</operator> <name>f</name><operator>)</operator><operator>-&gt;</operator><name>currpos</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>r</name></expr>;</return>
	</block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tar_write_compressed_data</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>TarMethodFile</name> <operator>*</operator><operator>)</operator> <name>f</name><operator>)</operator><operator>-&gt;</operator><name>currpos</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
		<return>return <expr><name>count</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><else>else<block type="pseudo"><block_content>
		<comment type="block">/* Can't happen - compression enabled with no libz */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tar_write_padding_data</name><parameter_list>(<parameter><decl><type><name>TarMethodFile</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGAlignedXLogBlock</name></type> <name>zerobuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>bytesleft</name> <init>= <expr><name>bytes</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>zerobuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>bytesleft</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type>		<name>bytestowrite</name> <init>= <expr><call><name>Min</name><argument_list>(<argument><expr><name>bytesleft</name></expr></argument>, <argument><expr><name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ssize_t</name></type>		<name>r</name> <init>= <expr><call><name>tar_write</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>zerobuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>bytestowrite</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>bytesleft</name> <operator>-=</operator> <name>r</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Walfile</name></type>
<name>tar_open_for_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>temp_suffix</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pad_to_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tmppath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>tar_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We open the tar file only when we first try to write to it.
		 */</comment>
		<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>tarfilename</name></name></expr></argument>,
							<argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>,
							<argument><expr><name>pg_file_create_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name></name> <operator>=</operator> <operator>(</operator><name>z_streamp</name><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>z_stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>zalloc</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>zfree</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <name><name>tar_data</name><operator>-&gt;</operator><name>zlibOut</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name>ZLIB_OUT_SIZE</name></expr>;</expr_stmt>

			<comment type="block">/*
			 * Initialize deflation library. Adding the magic value 16 to the
			 * default 15 for the windowBits parameter makes the output be
			 * gzip instead of zlib.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>deflateInit2</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name></name></expr></argument>, <argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr></argument>, <argument><expr><name>Z_DEFLATED</name></expr></argument>, <argument><expr><literal type="number">15</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>Z_DEFAULT_STRATEGY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>tar_set_error</name><argument_list>(<argument><expr><literal type="string">"could not initialize compression library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>NULL</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/* There's no tar header itself, the file starts with regular files */</comment>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>tar_set_error</name><argument_list>(<argument><expr><literal type="string">"implementation error: tar files can't have more than one open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name> <operator>=</operator> <call><name>pg_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TarMethodFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmppath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>,
			 <argument><expr><name>pathname</name></expr></argument>, <argument><expr><ternary><condition><expr><name>temp_suffix</name></expr> ?</condition><then> <expr><name>temp_suffix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create a header with size set to 0 - we will fill out the size on close */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>tarCreateHeader</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>tmppath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TAR_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tar_set_error</name><argument_list>(<argument><expr><literal type="string">"could not create tar header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Flush existing data */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tar_write_compressed_data</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* Turn off compression for header */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>deflateParams</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>tar_set_error</name><argument_list>(<argument><expr><literal type="string">"could not change compression parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name><operator>-&gt;</operator><name>ofs_start</name></name> <operator>=</operator> <call><name>lseek</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name><operator>-&gt;</operator><name>ofs_start</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name><operator>-&gt;</operator><name>currpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">512</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<comment type="block">/* if write didn't set errno, assume problem is no disk space */</comment>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <ternary><condition><expr><name>save_errno</name></expr> ?</condition><then> <expr><name>save_errno</name></expr> </then><else>: <expr><name>ENOSPC</name></expr></else></ternary></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Write header through the zlib APIs but with no compression */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tar_write_compressed_data</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* Re-enable compression for the rest of the file */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>deflateParams</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name></name></expr></argument>, <argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>tar_set_error</name><argument_list>(<argument><expr><literal type="string">"could not change compression parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name><operator>-&gt;</operator><name>pathname</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Uncompressed files are padded on creation, but for compression we can't
	 * do that
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>pad_to_size</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name><operator>-&gt;</operator><name>pad_to_size</name></name> <operator>=</operator> <name>pad_to_size</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Uncompressed, so pad now */</comment>
			<expr_stmt><expr><call><name>tar_write_padding_data</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name></expr></argument>, <argument><expr><name>pad_to_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Seek back to start */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name><operator>-&gt;</operator><name>ofs_start</name></name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name><operator>-&gt;</operator><name>ofs_start</name></name> <operator>+</operator> <literal type="number">512</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name><operator>-&gt;</operator><name>currpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>tar_get_file_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tar_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Currently not used, so not supported */</comment>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>off_t</name></type>
<name>tar_get_current_pos</name><parameter_list>(<parameter><decl><type><name>Walfile</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tar_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><operator>(</operator><name>TarMethodFile</name> <operator>*</operator><operator>)</operator> <name>f</name><operator>)</operator><operator>-&gt;</operator><name>currpos</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tar_sync</name><parameter_list>(<parameter><decl><type><name>Walfile</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tar_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tar_data</name><operator>-&gt;</operator><name>sync</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Always sync the whole tarfile, because that's all we can do. This makes
	 * no sense on compressed files, so just ignore those.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>fsync</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tar_close</name><parameter_list>(<parameter><decl><type><name>Walfile</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>WalCloseMethod</name></type> <name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type>		<name>filesize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>padding</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TarMethodFile</name> <modifier>*</modifier></type><name>tf</name> <init>= <expr><operator>(</operator><name>TarMethodFile</name> <operator>*</operator><operator>)</operator> <name>f</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tar_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>method</name> <operator>==</operator> <name>CLOSE_UNLINK</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>tar_set_error</name><argument_list>(<argument><expr><literal type="string">"unlink not supported with compression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Unlink the file that we just wrote to the tar. We do this by
		 * truncating it to the start of the header. This is safe as we only
		 * allow writing of the very last file.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>ftruncate</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>tf</name><operator>-&gt;</operator><name>ofs_start</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Pad the file itself with zeroes if necessary. Note that this is
	 * different from the tar format padding -- this is the padding we asked
	 * for when the file was opened.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>tf</name><operator>-&gt;</operator><name>pad_to_size</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * A compressed tarfile is padded on close since we cannot know
			 * the size of the compressed output until the end.
			 */</comment>
			<decl_stmt><decl><type><name>size_t</name></type>		<name>sizeleft</name> <init>= <expr><name><name>tf</name><operator>-&gt;</operator><name>pad_to_size</name></name> <operator>-</operator> <name><name>tf</name><operator>-&gt;</operator><name>currpos</name></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>sizeleft</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tar_write_padding_data</name><argument_list>(<argument><expr><name>tf</name></expr></argument>, <argument><expr><name>sizeleft</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * An uncompressed tarfile was padded on creation, so just adjust
			 * the current position as if we seeked to the end.
			 */</comment>
			<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>currpos</name></name> <operator>=</operator> <name><name>tf</name><operator>-&gt;</operator><name>pad_to_size</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Get the size of the file, and pad the current data up to the nearest
	 * 512 byte boundary.
	 */</comment>
	<expr_stmt><expr><name>filesize</name> <operator>=</operator> <call><name>tar_get_current_pos</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>padding</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>filesize</name> <operator>+</operator> <literal type="number">511</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">511</literal><operator>)</operator> <operator>-</operator> <name>filesize</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>padding</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>zerobuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>zerobuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>tar_write</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>zerobuf</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>padding</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Flush the current buffer */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tar_write_compressed_data</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Now go back and update the header with the correct filesize and
	 * possibly also renaming the file. We overwrite the entire current header
	 * when done, including the checksum.
	 */</comment>
	<expr_stmt><expr><call><name>print_tar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tf</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">124</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>method</name> <operator>==</operator> <name>CLOSE_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>

		<comment type="block">/*
		 * We overwrite it with what it was before if we have no tempname,
		 * since we're going to write the buffer anyway.
		 */</comment>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tf</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name><name>tf</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>print_tar_number</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tf</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">148</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>tarChecksum</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>TarMethodFile</name> <operator>*</operator><operator>)</operator> <name>f</name><operator>)</operator><operator>-&gt;</operator><name>header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>tf</name><operator>-&gt;</operator><name>ofs_start</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>TarMethodFile</name> <operator>*</operator><operator>)</operator> <name>f</name><operator>)</operator><operator>-&gt;</operator><name>ofs_start</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>tf</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">512</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* if write didn't set errno, assume problem is no disk space */</comment>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSPC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Turn off compression */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>deflateParams</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>tar_set_error</name><argument_list>(<argument><expr><literal type="string">"could not change compression parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Overwrite the header, assuming the size will be the same */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tar_write_compressed_data</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* Turn compression back on */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>deflateParams</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name></name></expr></argument>, <argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>tar_set_error</name><argument_list>(<argument><expr><literal type="string">"could not change compression parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Move file pointer back down to end, so we can write the next file */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Always fsync on close, so the padding gets fsynced */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>tar_sync</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Clean up and done */</comment>
	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tar_existsfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tar_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* We only deal with new tarfiles, so nothing externally created exists */</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tar_finish</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>zerobuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>tar_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>tar_close</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>currentfile</name></name></expr></argument>, <argument><expr><name>CLOSE_NORMAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* A tarfile always ends with two empty blocks */</comment>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>zerobuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zerobuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>zerobuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zerobuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>zerobuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* if write didn't set errno, assume problem is no disk space */</comment>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSPC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tar_write_compressed_data</name><argument_list>(<argument><expr><name>zerobuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zerobuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* Also flush all data to make sure the gzip stream is finished */</comment>
		<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>true</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>r</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name></name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>Z_STREAM_ERROR</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>tar_set_error</name><argument_list>(<argument><expr><literal type="string">"could not compress data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>&lt;</operator> <name>ZLIB_OUT_SIZE</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>size_t</name></type>		<name>len</name> <init>= <expr><name>ZLIB_OUT_SIZE</name> <operator>-</operator> <name><name>tar_data</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zlibOut</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * If write didn't set errno, assume problem is no disk
					 * space.
					 */</comment>
					<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSPC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>Z_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><call><name>deflateEnd</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zp</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>tar_set_error</name><argument_list>(<argument><expr><literal type="string">"could not close compression stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* sync the empty blocks as well, since they're after the last file */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>sync</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>sync</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>fsync_fname</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>tarfilename</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>fsync_parent_path</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>tarfilename</name></name></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>WalWriteMethod</name> <modifier>*</modifier></type>
<name>CreateWalTarMethod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tarbase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compression</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sync</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WalWriteMethod</name> <modifier>*</modifier></type><name>method</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>compression</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">".tar.gz"</literal></expr> </then><else>: <expr><literal type="string">".tar"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>method</name> <operator>=</operator> <call><name>pg_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WalWriteMethod</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>open_for_write</name></name> <operator>=</operator> <name>tar_open_for_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>tar_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>get_current_pos</name></name> <operator>=</operator> <name>tar_get_current_pos</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>get_file_size</name></name> <operator>=</operator> <name>tar_get_file_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>tar_close</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>sync</name></name> <operator>=</operator> <name>tar_sync</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>existsfile</name></name> <operator>=</operator> <name>tar_existsfile</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <name>tar_finish</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>method</name><operator>-&gt;</operator><name>getlasterror</name></name> <operator>=</operator> <name>tar_getlasterror</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>tar_data</name> <operator>=</operator> <call><name>pg_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TarMethodData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>tarfilename</name></name> <operator>=</operator> <call><name>pg_malloc0</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tarbase</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>tarfilename</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>tarbase</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <name>compression</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>sync</name></name> <operator>=</operator> <name>sync</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>compression</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zlibOut</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>ZLIB_OUT_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>method</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>FreeWalTarMethod</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>tarfilename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>tar_data</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>tar_data</name><operator>-&gt;</operator><name>zlibOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>tar_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
