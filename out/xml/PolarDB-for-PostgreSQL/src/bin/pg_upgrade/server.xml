<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/bin/pg_upgrade/server.c"><comment type="block">/*
 *	server.c
 *
 *	database server functions
 *
 *	Copyright (c) 2010-2018, PostgreSQL Global Development Group
 *	src/bin/pg_upgrade/server.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fe_utils/connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fe_utils/string_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_upgrade.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>PGconn</name> <modifier>*</modifier></type><name>get_db_conn</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db_name</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * connectToServer()
 *
 *	Connects to the desired database on the designated server.
 *	If the connection attempt fails, this function logs an error
 *	message and calls exit() to kill the program.
 */</comment>
<function><type><name>PGconn</name> <modifier>*</modifier></type>
<name>connectToServer</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>get_db_conn</name><argument_list>(<argument><expr><name>cluster</name></expr></argument>, <argument><expr><name>db_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>PQstatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>, <argument><expr><literal type="string">"connection to database failed: %s"</literal></expr></argument>,
			   <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Failure, exiting\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ALWAYS_SECURE_SEARCH_PATH_SQL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * get_db_conn()
 *
 * get database connection, using named database + standard params for cluster
 */</comment>
<function><type><specifier>static</specifier> <name>PGconn</name> <modifier>*</modifier></type>
<name>get_db_conn</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PQExpBufferData</name></type> <name>conn_opts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

	<comment type="block">/* Build connection string with proper quoting */</comment>
	<expr_stmt><expr><call><name>initPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_opts</name></expr></argument>, <argument><expr><literal type="string">"dbname="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendConnStrVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_opts</name></expr></argument>, <argument><expr><name>db_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_opts</name></expr></argument>, <argument><expr><literal type="string">" user="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendConnStrVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_opts</name></expr></argument>, <argument><expr><name><name>os_info</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_opts</name></expr></argument>, <argument><expr><literal type="string">" port=%d"</literal></expr></argument>, <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cluster</name><operator>-&gt;</operator><name>sockdir</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_opts</name></expr></argument>, <argument><expr><literal type="string">" host="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendConnStrVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_opts</name></expr></argument>, <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>sockdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>PQconnectdb</name><argument_list>(<argument><expr><name><name>conn_opts</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>termPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * cluster_conn_opts()
 *
 * Return standard command-line options for connecting to this cluster when
 * using psql, pg_dump, etc.  Ideally this would match what get_db_conn()
 * sets, but the utilities we need aren't very consistent about the treatment
 * of database name options, so we leave that out.
 *
 * Result is valid until the next call to this function.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>cluster_conn_opts</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>PQExpBuffer</name></type> <name>buf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>createPQExpBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cluster</name><operator>-&gt;</operator><name>sockdir</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"--host "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendShellString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>sockdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendPQExpBufferChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"--port %d --username "</literal></expr></argument>, <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendShellString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>os_info</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * executeQueryOrDie()
 *
 *	Formats a query string from the given arguments and executes the
 *	resulting query.  If the query fails, this function logs an error
 *	message and calls exit() to kill the program.
 */</comment>
<function><type><name>PGresult</name> <modifier>*</modifier></type>
<name>executeQueryOrDie</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>query</name><index>[<expr><name>QUERY_ALLOC</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExecStatusType</name></type> <name>status</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"executing: %s\n"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>!=</operator> <name>PGRES_TUPLES_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>!=</operator> <name>PGRES_COMMAND_OK</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>, <argument><expr><literal type="string">"SQL command failed\n%s\n%s"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>,
			   <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Failure, exiting\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * get_major_server_version()
 *
 * gets the version (in unsigned int form) for the given datadir. Assumes
 * that datadir is an absolute path to a valid pgdata directory. The version
 * is retrieved by reading the PG_VERSION file.
 */</comment>
<function><type><name>uint32</name></type>
<name>get_major_server_version</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>version_fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>ver_filename</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>v1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>v2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ver_filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ver_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/PG_VERSION"</literal></expr></argument>,
			 <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>pgdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>version_fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>ver_filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not open version file \"%s\"\n"</literal></expr></argument>, <argument><expr><name>ver_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fscanf</name><argument_list>(<argument><expr><name>version_fd</name></expr></argument>, <argument><expr><literal type="string">"%63s"</literal></expr></argument>, <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>major_version_str</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
		<call><name>sscanf</name><argument_list>(<argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>major_version_str</name></name></expr></argument>, <argument><expr><literal type="string">"%d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not parse version file \"%s\"\n"</literal></expr></argument>, <argument><expr><name>ver_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>version_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>v1</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* old style, e.g. 9.6.1 */</comment>
		<return>return <expr><name>v1</name> <operator>*</operator> <literal type="number">10000</literal> <operator>+</operator> <name>v2</name> <operator>*</operator> <literal type="number">100</literal></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* new style, e.g. 10.1 */</comment>
		<return>return <expr><name>v1</name> <operator>*</operator> <literal type="number">10000</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>stop_postmaster_atexit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>stop_postmaster</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type>
<name>start_postmaster</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>report_and_exit_on_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>cmd</name><index>[<expr><name>MAXPGPATH</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>pg_ctl_return</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>socket_string</name><index>[<expr><name>MAXPGPATH</name> <operator>+</operator> <literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>exit_hook_registered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exit_hook_registered</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>stop_postmaster_atexit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>exit_hook_registered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>socket_string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>
	<comment type="block">/* prevent TCP/IP connections, restrict socket access */</comment>
	<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>socket_string</name></expr></argument>,
		   <argument><expr><literal type="string">" -c listen_addresses='' -c unix_socket_permissions=0700"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Have a sockdir?	Tell the postmaster. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cluster</name><operator>-&gt;</operator><name>sockdir</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>socket_string</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>socket_string</name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>socket_string</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>socket_string</name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><literal type="string">" -c %s='%s'"</literal></expr></argument>,
				 <argument><expr><ternary><condition><expr><operator>(</operator><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">903</literal><operator>)</operator></expr> ?</condition><then>
				 <expr><literal type="string">"unix_socket_directory"</literal></expr> </then><else>: <expr><literal type="string">"unix_socket_directories"</literal></expr></else></ternary></expr></argument>,
				 <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>sockdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Since PG 9.1, we have used -b to disable autovacuum.  For earlier
	 * releases, setting autovacuum=off disables cleanup vacuum and analyze,
	 * but freeze vacuums can still happen, so we set
	 * autovacuum_freeze_max_age to its maximum.
	 * (autovacuum_multixact_freeze_max_age was introduced after 9.1, so there
	 * is no need to set that.)  We assume all datfrozenxid and relfrozenxid
	 * values are less than a gap of 2000000000 from the current xid counter,
	 * so autovacuum will not touch them.
	 *
	 * Turn off durability requirements to improve object creation speed, and
	 * we only modify the new cluster, so only use it there.  If there is a
	 * crash, the new cluster has to be recreated anyway.  fsync=off is a big
	 * win on ext4.
	 *
	 * Force vacuum_defer_cleanup_age to 0 on the new cluster, so that
	 * vacuumdb --freeze actually freezes the tuples.
	 */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"\"%s/pg_ctl\" -w -l \"%s\" -D \"%s\" -o \"-p %d%s%s %s%s\" start"</literal></expr></argument>,
			 <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>bindir</name></name></expr></argument>, <argument><expr><name>SERVER_LOG_FILE</name></expr></argument>, <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>pgconfig</name></name></expr></argument>, <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
			 <argument><expr><ternary><condition><expr><operator>(</operator><name><name>cluster</name><operator>-&gt;</operator><name>controldata</name><operator>.</operator><name>cat_ver</name></name> <operator>&gt;=</operator>
			  <name>BINARY_UPGRADE_SERVER_FLAG_CAT_VER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" -b"</literal></expr> </then><else>:
			 <expr><literal type="string">" -c autovacuum=off -c autovacuum_freeze_max_age=2000000000"</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><operator>(</operator><name>cluster</name> <operator>==</operator> <operator>&amp;</operator><name>new_cluster</name><operator>)</operator></expr> ?</condition><then>
			 <expr><literal type="string">" -c synchronous_commit=off -c fsync=off -c full_page_writes=off -c vacuum_defer_cleanup_age=0"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>cluster</name><operator>-&gt;</operator><name>pgopts</name></name></expr> ?</condition><then> <expr><name><name>cluster</name><operator>-&gt;</operator><name>pgopts</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>socket_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Don't throw an error right away, let connecting throw the error because
	 * it might supply a reason for the failure.
	 */</comment>
	<expr_stmt><expr><name>pg_ctl_return</name> <operator>=</operator> <call><name>exec_prog</name><argument_list>(<argument><expr><name>SERVER_START_LOG_FILE</name></expr></argument>,
	<comment type="block">/* pass both file names if they differ */</comment>
							  <argument><expr><ternary><condition><expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>SERVER_LOG_FILE</name></expr></argument>,
									  <argument><expr><name>SERVER_START_LOG_FILE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
							  <expr><name>SERVER_LOG_FILE</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
							  <argument><expr><name>report_and_exit_on_error</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
							  <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Did it fail and we are just testing if the server could be started? */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pg_ctl_return</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>report_and_exit_on_error</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We set this here to make sure atexit() shuts down the server, but only
	 * if we started the server successfully.  We do it before checking for
	 * connectivity in case the server started but there is a connectivity
	 * failure.  If pg_ctl did not return success, we will exit below.
	 *
	 * Pre-9.1 servers do not have PQping(), so we could be leaving the server
	 * running if authentication was misconfigured, so someday we might went
	 * to be more aggressive about doing server shutdowns even if pg_ctl
	 * fails, but now (2013-08-14) it seems prudent to be cautious.  We don't
	 * want to shutdown a server that might have been accidentally started
	 * during the upgrade.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>pg_ctl_return</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>os_info</name><operator>.</operator><name>running_cluster</name></name> <operator>=</operator> <name>cluster</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * pg_ctl -w might have failed because the server couldn't be started, or
	 * there might have been a connection problem in _checking_ if the server
	 * has started.  Therefore, even if pg_ctl failed, we continue and test
	 * for connectivity in case we get a connection reason for the failure.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>conn</name> <operator>=</operator> <call><name>get_db_conn</name><argument_list>(<argument><expr><name>cluster</name></expr></argument>, <argument><expr><literal type="string">"template1"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		<call><name>PQstatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>, <argument><expr><literal type="string">"\nconnection to database failed: %s"</literal></expr></argument>,
			   <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>cluster</name> <operator>==</operator> <operator>&amp;</operator><name>old_cluster</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not connect to source postmaster started with the command:\n"</literal>
					 <literal type="string">"%s\n"</literal></expr></argument>,
					 <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not connect to target postmaster started with the command:\n"</literal>
					 <literal type="string">"%s\n"</literal></expr></argument>,
					 <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If pg_ctl failed, and the connection didn't fail, and
	 * report_and_exit_on_error is enabled, fail now.  This could happen if
	 * the server was already running.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pg_ctl_return</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>cluster</name> <operator>==</operator> <operator>&amp;</operator><name>old_cluster</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"pg_ctl failed to start the source server, or connection failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"pg_ctl failed to start the target server, or connection failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>stop_postmaster</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>in_atexit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>os_info</name><operator>.</operator><name>running_cluster</name></name> <operator>==</operator> <operator>&amp;</operator><name>old_cluster</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>cluster</name> <operator>=</operator> <operator>&amp;</operator><name>old_cluster</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>os_info</name><operator>.</operator><name>running_cluster</name></name> <operator>==</operator> <operator>&amp;</operator><name>new_cluster</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>cluster</name> <operator>=</operator> <operator>&amp;</operator><name>new_cluster</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return;</return></block_content></block></else></if_stmt>					<comment type="block">/* no cluster running */</comment>

	<expr_stmt><expr><call><name>exec_prog</name><argument_list>(<argument><expr><name>SERVER_STOP_LOG_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>!</operator><name>in_atexit</name></expr></argument>, <argument><expr><operator>!</operator><name>in_atexit</name></expr></argument>,
			  <argument><expr><literal type="string">"\"%s/pg_ctl\" -w -D \"%s\" -o \"%s\" %s stop"</literal></expr></argument>,
			  <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>bindir</name></name></expr></argument>, <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>pgconfig</name></name></expr></argument>,
			  <argument><expr><ternary><condition><expr><name><name>cluster</name><operator>-&gt;</operator><name>pgopts</name></name></expr> ?</condition><then> <expr><name><name>cluster</name><operator>-&gt;</operator><name>pgopts</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			  <argument><expr><ternary><condition><expr><name>in_atexit</name></expr> ?</condition><then> <expr><literal type="string">"-m fast"</literal></expr> </then><else>: <expr><literal type="string">"-m smart"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>os_info</name><operator>.</operator><name>running_cluster</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * check_pghost_envvar()
 *
 * Tests that PGHOST does not point to a non-local server
 */</comment>
<function><type><name>void</name></type>
<name>check_pghost_envvar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PQconninfoOption</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PQconninfoOption</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

	<comment type="block">/* Get valid libpq env vars from the PQconndefaults function */</comment>

	<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>PQconndefaults</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>option</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name><name>option</name><operator>-&gt;</operator><name>keyword</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>option</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>envvar</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>option</name><operator>-&gt;</operator><name>envvar</name></name></expr></argument>, <argument><expr><literal type="string">"PGHOST"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
							   <call><name>strcmp</name><argument_list>(<argument><expr><name><name>option</name><operator>-&gt;</operator><name>envvar</name></name></expr></argument>, <argument><expr><literal type="string">"PGHOSTADDR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name><name>option</name><operator>-&gt;</operator><name>envvar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<comment type="block">/* check for 'local' host values */</comment>
				<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
				 <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"::1"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"libpq environment variable %s has a non-local server value: %s\n"</literal></expr></argument>,
						 <argument><expr><name><name>option</name><operator>-&gt;</operator><name>envvar</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Free the memory that libpq allocated on our behalf */</comment>
	<expr_stmt><expr><call><name>PQconninfoFree</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
