<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/bin/pg_upgrade/tablespace.c"><comment type="block">/*
 *	tablespace.c
 *
 *	tablespace functions
 *
 *	Copyright (c) 2010-2018, PostgreSQL Global Development Group
 *	src/bin/pg_upgrade/tablespace.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_upgrade.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_tablespace_paths</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_tablespace_directory_suffix</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type>
<name>init_tablespaces</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>get_tablespace_paths</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>set_tablespace_directory_suffix</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_tablespace_directory_suffix</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>os_info</name><operator>.</operator><name>num_old_tablespaces</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>strcmp</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>tablespace_suffix</name></name></expr></argument>, <argument><expr><name><name>new_cluster</name><operator>.</operator><name>tablespace_suffix</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"Cannot upgrade to/from the same system catalog version when\n"</literal>
				 <literal type="string">"using tablespaces.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * get_tablespace_paths()
 *
 * Scans pg_tablespace and returns a malloc'ed array of all tablespace
 * paths. It's the caller's responsibility to free the array.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_tablespace_paths</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>connectToServer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>, <argument><expr><literal type="string">"template1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tblnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i_spclocation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>query</name><index>[<expr><name>QUERY_ALLOC</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"SELECT	%s "</literal>
			 <literal type="string">"FROM	pg_catalog.pg_tablespace "</literal>
			 <literal type="string">"WHERE	spcname != 'pg_default' AND "</literal>
			 <literal type="string">"		spcname != 'pg_global'"</literal></expr></argument>,
	<comment type="block">/* 9.2 removed the spclocation column */</comment>
			 <argument><expr><ternary><condition><expr><operator>(</operator><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">901</literal><operator>)</operator></expr> ?</condition><then>
			 <expr><literal type="string">"spclocation"</literal></expr> </then><else>: <expr><literal type="string">"pg_catalog.pg_tablespace_location(oid) AS spclocation"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>os_info</name><operator>.</operator><name>num_old_tablespaces</name></name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>os_info</name><operator>.</operator><name>old_tablespaces</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(
													  <argument><expr><name><name>os_info</name><operator>.</operator><name>num_old_tablespaces</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>os_info</name><operator>.</operator><name>old_tablespaces</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>i_spclocation</name> <operator>=</operator> <call><name>PQfnumber</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"spclocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>tblnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tblnum</name> <operator>&lt;</operator> <name><name>os_info</name><operator>.</operator><name>num_old_tablespaces</name></name></expr>;</condition> <incr><expr><name>tblnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statBuf</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>os_info</name><operator>.</operator><name>old_tablespaces</name><index>[<expr><name>tblnum</name></expr>]</index></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(
													<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>tblnum</name></expr></argument>, <argument><expr><name>i_spclocation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Check that the tablespace path exists and is a directory.
		 * Effectively, this is checking only for tables/indexes in
		 * non-existent tablespace directories.  Databases located in
		 * non-existent tablespaces already throw a backend error.
		 * Non-existent tablespace directories can occur when a data directory
		 * that contains user tablespaces is moved as part of pg_upgrade
		 * preparation and the symbolic links are not updated.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>os_info</name><operator>.</operator><name>old_tablespaces</name><index>[<expr><name>tblnum</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statBuf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>report_status</name><argument_list>(<argument><expr><name>PG_FATAL</name></expr></argument>,
							  <argument><expr><literal type="string">"tablespace directory \"%s\" does not exist\n"</literal></expr></argument>,
							  <argument><expr><name><name>os_info</name><operator>.</operator><name>old_tablespaces</name><index>[<expr><name>tblnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>report_status</name><argument_list>(<argument><expr><name>PG_FATAL</name></expr></argument>,
							  <argument><expr><literal type="string">"could not stat tablespace directory \"%s\": %s\n"</literal></expr></argument>,
							  <argument><expr><name><name>os_info</name><operator>.</operator><name>old_tablespaces</name><index>[<expr><name>tblnum</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>statBuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>report_status</name><argument_list>(<argument><expr><name>PG_FATAL</name></expr></argument>,
						  <argument><expr><literal type="string">"tablespace path \"%s\" is not a directory\n"</literal></expr></argument>,
						  <argument><expr><name><name>os_info</name><operator>.</operator><name>old_tablespaces</name><index>[<expr><name>tblnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_tablespace_directory_suffix</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">804</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>cluster</name><operator>-&gt;</operator><name>tablespace_suffix</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* This cluster has a version-specific subdirectory */</comment>

		<comment type="block">/* The leading slash is needed to start a new directory. */</comment>
		<expr_stmt><expr><name><name>cluster</name><operator>-&gt;</operator><name>tablespace_suffix</name></name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"/PG_%s_%d"</literal></expr></argument>,
											  <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>major_version_str</name></name></expr></argument>,
											  <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>controldata</name><operator>.</operator><name>cat_ver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
