<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/bin/pg_upgrade/parallel.c"><comment type="block">/*
 *	parallel.c
 *
 *	multi-process support
 *
 *	Copyright (c) 2010-2018, PostgreSQL Global Development Group
 *	src/bin/pg_upgrade/parallel.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_upgrade.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>parallel_jobs</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<comment type="block">/*
 *	Array holding all active threads.  There can't be any gaps/zeros so
 *	it can be passed to WaitForMultipleObjects().  We use two arrays
 *	so the thread_handles array can be passed to WaitForMultipleObjects().
 */</comment>
<decl_stmt><decl><type><name>HANDLE</name>	   <modifier>*</modifier></type><name>thread_handles</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>log_file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt_log_file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
}</block></struct></type> <name>exec_thread_arg</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>DbInfoArr</name>  <modifier>*</modifier></type><name>old_db_arr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DbInfoArr</name>  <modifier>*</modifier></type><name>new_db_arr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>old_pgdata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>new_pgdata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>old_tablespace</name></decl>;</decl_stmt>
}</block></struct></type> <name>transfer_thread_arg</name>;</typedef>

<decl_stmt><decl><type><name>exec_thread_arg</name> <modifier>*</modifier><modifier>*</modifier></type><name>exec_thread_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>transfer_thread_arg</name> <modifier>*</modifier><modifier>*</modifier></type><name>transfer_thread_args</name></decl>;</decl_stmt>

<comment type="block">/* track current thread_args struct so reap_child() can be used for all cases */</comment>
<decl_stmt><decl><type><name>void</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>cur_thread_args</name></decl>;</decl_stmt>

<function_decl><type><name>DWORD</name></type>		<name>win32_exec_prog</name><parameter_list>(<parameter><decl><type><name>exec_thread_arg</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DWORD</name></type>		<name>win32_transfer_all_new_dbs</name><parameter_list>(<parameter><decl><type><name>transfer_thread_arg</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 *	parallel_exec_prog
 *
 *	This has the same API as exec_prog, except it does parallel execution,
 *	and therefore must throw errors and doesn't return an error status.
 */</comment>
<function><type><name>void</name></type>
<name>parallel_exec_prog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>log_file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt_log_file</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>cmd</name><index>[<expr><name>MAX_STRING</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<decl_stmt><decl><type><name>pid_t</name></type>		<name>child</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>HANDLE</name></type>		<name>child</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>exec_thread_arg</name> <modifier>*</modifier></type><name>new_arg</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>user_opts</name><operator>.</operator><name>jobs</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* exit_on_error must be true to allow jobs */</comment>
		<expr_stmt><expr><call><name>exec_prog</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>, <argument><expr><name>opt_log_file</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* parallel */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>thread_handles</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>thread_handles</name> <operator>=</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name><name>user_opts</name><operator>.</operator><name>jobs</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>exec_thread_args</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>exec_thread_args</name> <operator>=</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name><name>user_opts</name><operator>.</operator><name>jobs</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>exec_thread_arg</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * For safety and performance, we keep the args allocated during
			 * the entire life of the process, and we don't free the args in a
			 * thread different from the one that allocated it.
			 */</comment>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>user_opts</name><operator>.</operator><name>jobs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>exec_thread_args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pg_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>exec_thread_arg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>cur_thread_args</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>exec_thread_args</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<comment type="block">/* harvest any dead children */</comment>
		<while>while <condition>(<expr><call><name>reap_child</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
			<empty_stmt>;</empty_stmt></block_content></block></while>

		<comment type="block">/* must we wait for a dead child? */</comment>
		<if_stmt><if>if <condition>(<expr><name>parallel_jobs</name> <operator>&gt;=</operator> <name><name>user_opts</name><operator>.</operator><name>jobs</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>reap_child</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* set this before we start the job */</comment>
		<expr_stmt><expr><name>parallel_jobs</name><operator>++</operator></expr>;</expr_stmt>

		<comment type="block">/* Ensure stdio state is quiesced before forking */</comment>
		<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/* use _exit to skip atexit() functions */</comment>
			<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><operator>!</operator><call><name>exec_prog</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>, <argument><expr><name>opt_log_file</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>child</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/* fork failed */</comment>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not create worker process: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<comment type="block">/* empty array element are always at the end */</comment>
		<expr_stmt><expr><name>new_arg</name> <operator>=</operator> <name><name>exec_thread_args</name><index>[<expr><name>parallel_jobs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/* Can only pass one pointer into the function, so use a struct */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>new_arg</name><operator>-&gt;</operator><name>log_file</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>new_arg</name><operator>-&gt;</operator><name>log_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>new_arg</name><operator>-&gt;</operator><name>log_file</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>new_arg</name><operator>-&gt;</operator><name>opt_log_file</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>new_arg</name><operator>-&gt;</operator><name>opt_log_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>new_arg</name><operator>-&gt;</operator><name>opt_log_file</name></name> <operator>=</operator> <ternary><condition><expr><name>opt_log_file</name></expr> ?</condition><then> <expr><call><name>pg_strdup</name><argument_list>(<argument><expr><name>opt_log_file</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>new_arg</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>new_arg</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>new_arg</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>child</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator> <call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>win32_exec_prog</name></expr></argument>,
										<argument><expr><name>new_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not create worker thread: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>thread_handles</name><index>[<expr><name>parallel_jobs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>

	<return>return;</return>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<function><type><name>DWORD</name></type>
<name>win32_exec_prog</name><parameter_list>(<parameter><decl><type><name>exec_thread_arg</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><call><name>exec_prog</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>log_file</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>opt_log_file</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* terminates thread */</comment>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 *	parallel_transfer_all_new_dbs
 *
 *	This has the same API as transfer_all_new_dbs, except it does parallel execution
 *	by transferring multiple tablespaces in parallel
 */</comment>
<function><type><name>void</name></type>
<name>parallel_transfer_all_new_dbs</name><parameter_list>(<parameter><decl><type><name>DbInfoArr</name> <modifier>*</modifier></type><name>old_db_arr</name></decl></parameter>, <parameter><decl><type><name>DbInfoArr</name> <modifier>*</modifier></type><name>new_db_arr</name></decl></parameter>,
							  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>old_pgdata</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>new_pgdata</name></decl></parameter>,
							  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>old_tablespace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<decl_stmt><decl><type><name>pid_t</name></type>		<name>child</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>HANDLE</name></type>		<name>child</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>transfer_thread_arg</name> <modifier>*</modifier></type><name>new_arg</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>user_opts</name><operator>.</operator><name>jobs</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>transfer_all_new_dbs</name><argument_list>(<argument><expr><name>old_db_arr</name></expr></argument>, <argument><expr><name>new_db_arr</name></expr></argument>, <argument><expr><name>old_pgdata</name></expr></argument>, <argument><expr><name>new_pgdata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* parallel */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>thread_handles</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>thread_handles</name> <operator>=</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name><name>user_opts</name><operator>.</operator><name>jobs</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>transfer_thread_args</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>transfer_thread_args</name> <operator>=</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name><name>user_opts</name><operator>.</operator><name>jobs</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>transfer_thread_arg</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * For safety and performance, we keep the args allocated during
			 * the entire life of the process, and we don't free the args in a
			 * thread different from the one that allocated it.
			 */</comment>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>user_opts</name><operator>.</operator><name>jobs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>transfer_thread_args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pg_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>transfer_thread_arg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>cur_thread_args</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>transfer_thread_args</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<comment type="block">/* harvest any dead children */</comment>
		<while>while <condition>(<expr><call><name>reap_child</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
			<empty_stmt>;</empty_stmt></block_content></block></while>

		<comment type="block">/* must we wait for a dead child? */</comment>
		<if_stmt><if>if <condition>(<expr><name>parallel_jobs</name> <operator>&gt;=</operator> <name><name>user_opts</name><operator>.</operator><name>jobs</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>reap_child</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* set this before we start the job */</comment>
		<expr_stmt><expr><name>parallel_jobs</name><operator>++</operator></expr>;</expr_stmt>

		<comment type="block">/* Ensure stdio state is quiesced before forking */</comment>
		<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>transfer_all_new_dbs</name><argument_list>(<argument><expr><name>old_db_arr</name></expr></argument>, <argument><expr><name>new_db_arr</name></expr></argument>, <argument><expr><name>old_pgdata</name></expr></argument>, <argument><expr><name>new_pgdata</name></expr></argument>,
								 <argument><expr><name>old_tablespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* if we take another exit path, it will be non-zero */</comment>
			<comment type="block">/* use _exit to skip atexit() functions */</comment>
			<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>child</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/* fork failed */</comment>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not create worker process: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<comment type="block">/* empty array element are always at the end */</comment>
		<expr_stmt><expr><name>new_arg</name> <operator>=</operator> <name><name>transfer_thread_args</name><index>[<expr><name>parallel_jobs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/* Can only pass one pointer into the function, so use a struct */</comment>
		<expr_stmt><expr><name><name>new_arg</name><operator>-&gt;</operator><name>old_db_arr</name></name> <operator>=</operator> <name>old_db_arr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new_arg</name><operator>-&gt;</operator><name>new_db_arr</name></name> <operator>=</operator> <name>new_db_arr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>new_arg</name><operator>-&gt;</operator><name>old_pgdata</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>new_arg</name><operator>-&gt;</operator><name>old_pgdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>new_arg</name><operator>-&gt;</operator><name>old_pgdata</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>old_pgdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>new_arg</name><operator>-&gt;</operator><name>new_pgdata</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>new_arg</name><operator>-&gt;</operator><name>new_pgdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>new_arg</name><operator>-&gt;</operator><name>new_pgdata</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>new_pgdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>new_arg</name><operator>-&gt;</operator><name>old_tablespace</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>new_arg</name><operator>-&gt;</operator><name>old_tablespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>new_arg</name><operator>-&gt;</operator><name>old_tablespace</name></name> <operator>=</operator> <ternary><condition><expr><name>old_tablespace</name></expr> ?</condition><then> <expr><call><name>pg_strdup</name><argument_list>(<argument><expr><name>old_tablespace</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

		<expr_stmt><expr><name>child</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator> <call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>win32_transfer_all_new_dbs</name></expr></argument>,
										<argument><expr><name>new_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not create worker thread: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>thread_handles</name><index>[<expr><name>parallel_jobs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>

	<return>return;</return>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<function><type><name>DWORD</name></type>
<name>win32_transfer_all_new_dbs</name><parameter_list>(<parameter><decl><type><name>transfer_thread_arg</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>transfer_all_new_dbs</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>old_db_arr</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>new_db_arr</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>old_pgdata</name></name></expr></argument>,
						 <argument><expr><name><name>args</name><operator>-&gt;</operator><name>new_pgdata</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>old_tablespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* terminates thread */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 *	collect status from a completed worker child
 */</comment>
<function><type><name>bool</name></type>
<name>reap_child</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>wait_for_child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<decl_stmt><decl><type><name>int</name></type>			<name>work_status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pid_t</name></type>		<name>child</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>int</name></type>			<name>thread_num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>res</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>user_opts</name><operator>.</operator><name>jobs</name></name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <name>parallel_jobs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>waitpid</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>work_status</name></expr></argument>, <argument><expr><ternary><condition><expr><name>wait_for_child</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>WNOHANG</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <operator>(</operator><name>pid_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"waitpid() failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* no children, or no dead children */</comment>
	<if_stmt><if>if <condition>(<expr><name>work_status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"child process exited abnormally: status %d\n"</literal></expr></argument>, <argument><expr><name>work_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* wait for one to finish */</comment>
	<expr_stmt><expr><name>thread_num</name> <operator>=</operator> <call><name>WaitForMultipleObjects</name><argument_list>(<argument><expr><name>parallel_jobs</name></expr></argument>, <argument><expr><name>thread_handles</name></expr></argument>,
										<argument><expr><name>false</name></expr></argument>, <argument><expr><ternary><condition><expr><name>wait_for_child</name></expr> ?</condition><then> <expr><name>INFINITE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>thread_num</name> <operator>==</operator> <name>WAIT_TIMEOUT</name> <operator>||</operator> <name>thread_num</name> <operator>==</operator> <name>WAIT_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* compute thread index in active_threads */</comment>
	<expr_stmt><expr><name>thread_num</name> <operator>-=</operator> <name>WAIT_OBJECT_0</name></expr>;</expr_stmt>

	<comment type="block">/* get the result */</comment>
	<expr_stmt><expr><call><name>GetExitCodeThread</name><argument_list>(<argument><expr><name><name>thread_handles</name><index>[<expr><name>thread_num</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"child worker exited abnormally: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* dispose of handle to stop leaks */</comment>
	<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>thread_handles</name><index>[<expr><name>thread_num</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Move last slot into dead child's position */</comment>
	<if_stmt><if>if <condition>(<expr><name>thread_num</name> <operator>!=</operator> <name>parallel_jobs</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>tmp_args</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>thread_handles</name><index>[<expr><name>thread_num</name></expr>]</index></name> <operator>=</operator> <name><name>thread_handles</name><index>[<expr><name>parallel_jobs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Move last active thead arg struct into the now-dead slot, and the
		 * now-dead slot to the end for reuse by the next thread. Though the
		 * thread struct is in use by another thread, we can safely swap the
		 * struct pointers within the array.
		 */</comment>
		<expr_stmt><expr><name>tmp_args</name> <operator>=</operator> <name><name>cur_thread_args</name><index>[<expr><name>thread_num</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cur_thread_args</name><index>[<expr><name>thread_num</name></expr>]</index></name> <operator>=</operator> <name><name>cur_thread_args</name><index>[<expr><name>parallel_jobs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cur_thread_args</name><index>[<expr><name>parallel_jobs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp_args</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* do this after job has been removed */</comment>
	<expr_stmt><expr><name>parallel_jobs</name><operator>--</operator></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
