<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/bin/pg_upgrade/relfilenode.c"><comment type="block">/*
 *	relfilenode.c
 *
 *	relfilenode functions
 *
 *	Copyright (c) 2010-2018, PostgreSQL Global Development Group
 *	src/bin/pg_upgrade/relfilenode.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_upgrade.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>transfer_single_new_db</name><parameter_list>(<parameter><decl><type><name>FileNameMap</name> <modifier>*</modifier></type><name>maps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>old_tablespace</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>transfer_relfile</name><parameter_list>(<parameter><decl><type><name>FileNameMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>vm_must_add_frozenbit</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * transfer_all_new_tablespaces()
 *
 * Responsible for upgrading all database. invokes routines to generate mappings and then
 * physically link the databases.
 */</comment>
<function><type><name>void</name></type>
<name>transfer_all_new_tablespaces</name><parameter_list>(<parameter><decl><type><name>DbInfoArr</name> <modifier>*</modifier></type><name>old_db_arr</name></decl></parameter>, <parameter><decl><type><name>DbInfoArr</name> <modifier>*</modifier></type><name>new_db_arr</name></decl></parameter>,
							 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>old_pgdata</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>new_pgdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>user_opts</name><operator>.</operator><name>transfer_mode</name></name> <operator>==</operator> <name>TRANSFER_MODE_LINK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>, <argument><expr><literal type="string">"Linking user relation files\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>, <argument><expr><literal type="string">"Copying user relation files\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * Transferring files by tablespace is tricky because a single database
	 * can use multiple tablespaces.  For non-parallel mode, we just pass a
	 * NULL tablespace path, which matches all tablespaces.  In parallel mode,
	 * we pass the default tablespace and all user-created tablespaces and let
	 * those operations happen in parallel.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>user_opts</name><operator>.</operator><name>jobs</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>parallel_transfer_all_new_dbs</name><argument_list>(<argument><expr><name>old_db_arr</name></expr></argument>, <argument><expr><name>new_db_arr</name></expr></argument>, <argument><expr><name>old_pgdata</name></expr></argument>,
									  <argument><expr><name>new_pgdata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>tblnum</name></decl>;</decl_stmt>

		<comment type="block">/* transfer default tablespace */</comment>
		<expr_stmt><expr><call><name>parallel_transfer_all_new_dbs</name><argument_list>(<argument><expr><name>old_db_arr</name></expr></argument>, <argument><expr><name>new_db_arr</name></expr></argument>, <argument><expr><name>old_pgdata</name></expr></argument>,
									  <argument><expr><name>new_pgdata</name></expr></argument>, <argument><expr><name>old_pgdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>tblnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tblnum</name> <operator>&lt;</operator> <name><name>os_info</name><operator>.</operator><name>num_old_tablespaces</name></name></expr>;</condition> <incr><expr><name>tblnum</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>parallel_transfer_all_new_dbs</name><argument_list>(<argument><expr><name>old_db_arr</name></expr></argument>,
										  <argument><expr><name>new_db_arr</name></expr></argument>,
										  <argument><expr><name>old_pgdata</name></expr></argument>,
										  <argument><expr><name>new_pgdata</name></expr></argument>,
										  <argument><expr><name><name>os_info</name><operator>.</operator><name>old_tablespaces</name><index>[<expr><name>tblnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<comment type="block">/* reap all children */</comment>
		<while>while <condition>(<expr><call><name>reap_child</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
			<empty_stmt>;</empty_stmt></block_content></block></while>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>end_progress_output</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>
</block_content>}</block></function>


<comment type="block">/*
 * transfer_all_new_dbs()
 *
 * Responsible for upgrading all database. invokes routines to generate mappings and then
 * physically link the databases.
 */</comment>
<function><type><name>void</name></type>
<name>transfer_all_new_dbs</name><parameter_list>(<parameter><decl><type><name>DbInfoArr</name> <modifier>*</modifier></type><name>old_db_arr</name></decl></parameter>, <parameter><decl><type><name>DbInfoArr</name> <modifier>*</modifier></type><name>new_db_arr</name></decl></parameter>,
					 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>old_pgdata</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>new_pgdata</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>old_tablespace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>old_dbnum</name></decl>,
				<decl><type ref="prev"/><name>new_dbnum</name></decl>;</decl_stmt>

	<comment type="block">/* Scan the old cluster databases and transfer their files */</comment>
	<for>for <control>(<init><expr><name>old_dbnum</name> <operator>=</operator> <name>new_dbnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
		 <condition><expr><name>old_dbnum</name> <operator>&lt;</operator> <name><name>old_db_arr</name><operator>-&gt;</operator><name>ndbs</name></name></expr>;</condition>
		 <incr><expr><name>old_dbnum</name><operator>++</operator></expr><operator>,</operator> <expr><name>new_dbnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DbInfo</name>	   <modifier>*</modifier></type><name>old_db</name> <init>= <expr><operator>&amp;</operator><name><name>old_db_arr</name><operator>-&gt;</operator><name>dbs</name><index>[<expr><name>old_dbnum</name></expr>]</index></name></expr></init></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>new_db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FileNameMap</name> <modifier>*</modifier></type><name>mappings</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>n_maps</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Advance past any databases that exist in the new cluster but not in
		 * the old, e.g. "postgres".  (The user might have removed the
		 * 'postgres' database from the old cluster.)
		 */</comment>
		<for>for <control>(<init>;</init> <condition><expr><name>new_dbnum</name> <operator>&lt;</operator> <name><name>new_db_arr</name><operator>-&gt;</operator><name>ndbs</name></name></expr>;</condition> <incr><expr><name>new_dbnum</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>new_db</name> <operator>=</operator> <operator>&amp;</operator><name><name>new_db_arr</name><operator>-&gt;</operator><name>dbs</name><index>[<expr><name>new_dbnum</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>old_db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>, <argument><expr><name><name>new_db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>new_dbnum</name> <operator>&gt;=</operator> <name><name>new_db_arr</name><operator>-&gt;</operator><name>ndbs</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"old database \"%s\" not found in the new cluster\n"</literal></expr></argument>,
					 <argument><expr><name><name>old_db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>mappings</name> <operator>=</operator> <call><name>gen_db_file_maps</name><argument_list>(<argument><expr><name>old_db</name></expr></argument>, <argument><expr><name>new_db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_maps</name></expr></argument>, <argument><expr><name>old_pgdata</name></expr></argument>,
									<argument><expr><name>new_pgdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n_maps</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>print_maps</name><argument_list>(<argument><expr><name>mappings</name></expr></argument>, <argument><expr><name>n_maps</name></expr></argument>, <argument><expr><name><name>new_db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>transfer_single_new_db</name><argument_list>(<argument><expr><name>mappings</name></expr></argument>, <argument><expr><name>n_maps</name></expr></argument>, <argument><expr><name>old_tablespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* We allocate something even for n_maps == 0 */</comment>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>mappings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * transfer_single_new_db()
 *
 * create links for mappings stored in "maps" array.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>transfer_single_new_db</name><parameter_list>(<parameter><decl><type><name>FileNameMap</name> <modifier>*</modifier></type><name>maps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>old_tablespace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>mapnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>vm_crashsafe_match</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>vm_must_add_frozenbit</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Do the old and new cluster disagree on the crash-safetiness of the vm
	 * files?  If so, do not copy them.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>old_cluster</name><operator>.</operator><name>controldata</name><operator>.</operator><name>cat_ver</name></name> <operator>&lt;</operator> <name>VISIBILITY_MAP_CRASHSAFE_CAT_VER</name> <operator>&amp;&amp;</operator>
		<name><name>new_cluster</name><operator>.</operator><name>controldata</name><operator>.</operator><name>cat_ver</name></name> <operator>&gt;=</operator> <name>VISIBILITY_MAP_CRASHSAFE_CAT_VER</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>vm_crashsafe_match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Do we need to rewrite visibilitymap?
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>old_cluster</name><operator>.</operator><name>controldata</name><operator>.</operator><name>cat_ver</name></name> <operator>&lt;</operator> <name>VISIBILITY_MAP_FROZEN_BIT_CAT_VER</name> <operator>&amp;&amp;</operator>
		<name><name>new_cluster</name><operator>.</operator><name>controldata</name><operator>.</operator><name>cat_ver</name></name> <operator>&gt;=</operator> <name>VISIBILITY_MAP_FROZEN_BIT_CAT_VER</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>vm_must_add_frozenbit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>mapnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mapnum</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>mapnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>old_tablespace</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
			<call><name>strcmp</name><argument_list>(<argument><expr><name><name>maps</name><index>[<expr><name>mapnum</name></expr>]</index></name><operator>.</operator><name>old_tablespace</name></expr></argument>, <argument><expr><name>old_tablespace</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* transfer primary file */</comment>
			<expr_stmt><expr><call><name>transfer_relfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>maps</name><index>[<expr><name>mapnum</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>vm_must_add_frozenbit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* fsm/vm files added in PG 8.4 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">804</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Copy/link any fsm and vm files, if they exist
				 */</comment>
				<expr_stmt><expr><call><name>transfer_relfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>maps</name><index>[<expr><name>mapnum</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"_fsm"</literal></expr></argument>, <argument><expr><name>vm_must_add_frozenbit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>vm_crashsafe_match</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>transfer_relfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>maps</name><index>[<expr><name>mapnum</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"_vm"</literal></expr></argument>, <argument><expr><name>vm_must_add_frozenbit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
 * transfer_relfile()
 *
 * Copy or link file from old cluster to new one.  If vm_must_add_frozenbit
 * is true, visibility map forks are converted and rewritten, even in link
 * mode.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>transfer_relfile</name><parameter_list>(<parameter><decl><type><name>FileNameMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_suffix</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>vm_must_add_frozenbit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>old_file</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>new_file</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>extent_suffix</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Now copy/link any related segments as well. Remember, PG breaks large
	 * files into 1GB segments, the first segment has no extension, subsequent
	 * segments are named relfilenode.1, relfilenode.2, relfilenode.3.
	 */</comment>
	<for>for <control>(<init><expr><name>segno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>segno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>segno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>extent_suffix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>extent_suffix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extent_suffix</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">".%d"</literal></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>old_file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>old_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s/%u/%u%s%s"</literal></expr></argument>,
				 <argument><expr><name><name>map</name><operator>-&gt;</operator><name>old_tablespace</name></name></expr></argument>,
				 <argument><expr><name><name>map</name><operator>-&gt;</operator><name>old_tablespace_suffix</name></name></expr></argument>,
				 <argument><expr><name><name>map</name><operator>-&gt;</operator><name>old_db_oid</name></name></expr></argument>,
				 <argument><expr><name><name>map</name><operator>-&gt;</operator><name>old_relfilenode</name></name></expr></argument>,
				 <argument><expr><name>type_suffix</name></expr></argument>,
				 <argument><expr><name>extent_suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>new_file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s/%u/%u%s%s"</literal></expr></argument>,
				 <argument><expr><name><name>map</name><operator>-&gt;</operator><name>new_tablespace</name></name></expr></argument>,
				 <argument><expr><name><name>map</name><operator>-&gt;</operator><name>new_tablespace_suffix</name></name></expr></argument>,
				 <argument><expr><name><name>map</name><operator>-&gt;</operator><name>new_db_oid</name></name></expr></argument>,
				 <argument><expr><name><name>map</name><operator>-&gt;</operator><name>new_relfilenode</name></name></expr></argument>,
				 <argument><expr><name>type_suffix</name></expr></argument>,
				 <argument><expr><name>extent_suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Is it an extent, fsm, or vm file? */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>type_suffix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>segno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Did file open fail? */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>old_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* File does not exist?  That's OK, just return */</comment>
				<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return;</return></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"error while checking for file existence \"%s.%s\" (\"%s\" to \"%s\"): %s\n"</literal></expr></argument>,
							 <argument><expr><name><name>map</name><operator>-&gt;</operator><name>nspname</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>, <argument><expr><name>old_file</name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>,
							 <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* If file is empty, just return */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>statbuf</name><operator>.</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>new_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Copying files might take some time, so give feedback. */</comment>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_STATUS</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>old_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>vm_must_add_frozenbit</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>type_suffix</name></expr></argument>, <argument><expr><literal type="string">"_vm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Need to rewrite visibility map format */</comment>
			<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"rewriting \"%s\" to \"%s\"\n"</literal></expr></argument>,
				   <argument><expr><name>old_file</name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rewriteVisibilityMap</name><argument_list>(<argument><expr><name>old_file</name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>nspname</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>user_opts</name><operator>.</operator><name>transfer_mode</name></name> <operator>==</operator> <name>TRANSFER_MODE_COPY</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"copying \"%s\" to \"%s\"\n"</literal></expr></argument>,
				   <argument><expr><name>old_file</name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>copyFile</name><argument_list>(<argument><expr><name>old_file</name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>nspname</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"linking \"%s\" to \"%s\"\n"</literal></expr></argument>,
				   <argument><expr><name>old_file</name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>linkFile</name><argument_list>(<argument><expr><name>old_file</name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>nspname</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
