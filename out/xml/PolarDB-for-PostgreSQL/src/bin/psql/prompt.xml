<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/bin/psql/prompt.c"><comment type="block">/*
 * psql - the PostgreSQL interactive terminal
 *
 * Copyright (c) 2000-2018, PostgreSQL Global Development Group
 *
 * src/bin/psql/prompt.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;win32.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prompt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"settings.h"</cpp:file></cpp:include>


<comment type="block">/*--------------------------
 * get_prompt
 *
 * Returns a statically allocated prompt made by interpolating certain
 * tcsh style escape sequences into pset.vars "PROMPT1|2|3".
 * (might not be completely multibyte safe)
 *
 * Defined interpolations are:
 * %M - database server "hostname.domainname", "[local]" for AF_UNIX
 *		sockets, "[local:/dir/name]" if not default
 * %m - like %M, but hostname only (before first dot), or always "[local]"
 * %p - backend pid
 * %&gt; - database server port number
 * %n - database user name
 * %/ - current database
 * %~ - like %/ but "~" when database name equals user name
 * %# - "#" if superuser, "&gt;" otherwise
 * %R - in prompt1 normally =, or ^ if single line mode,
 *			or a ! if session is not connected to a database;
 *		in prompt2 -, *, ', or ";
 *		in prompt3 nothing
 * %x - transaction status: empty, *, !, ? (unknown or no connection)
 * %l - The line number inside the current statement, starting from 1.
 * %? - the error code of the last query (not yet implemented)
 * %% - a percent sign
 *
 * %[0-9]		   - the character with the given decimal code
 * %0[0-7]		   - the character with the given octal code
 * %0x[0-9A-Fa-f]  - the character with the given hexadecimal code
 *
 * %`command`	   - The result of executing command in /bin/sh with trailing
 *					 newline stripped.
 * %:name:		   - The value of the psql variable 'name'
 * (those will not be rescanned for more escape sequences!)
 *
 * %[ ... %]	   - tell readline that the contained text is invisible
 *
 * If the application-wide prompts become NULL somehow, the returned string
 * will be empty (not NULL!).
 *--------------------------
 */</comment>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>get_prompt</name><parameter_list>(<parameter><decl><type><name>promptStatus_t</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PROMPT_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>destination</name><index>[<expr><name>MAX_PROMPT_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><name>MAX_PROMPT_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>esc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt_string</name> <init>= <expr><literal type="string">"? "</literal></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>status</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PROMPT_READY</name></expr>:</case>
			<expr_stmt><expr><name>prompt_string</name> <operator>=</operator> <name><name>pset</name><operator>.</operator><name>prompt1</name></name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>PROMPT_CONTINUE</name></expr>:</case>
		<case>case <expr><name>PROMPT_SINGLEQUOTE</name></expr>:</case>
		<case>case <expr><name>PROMPT_DOUBLEQUOTE</name></expr>:</case>
		<case>case <expr><name>PROMPT_DOLLARQUOTE</name></expr>:</case>
		<case>case <expr><name>PROMPT_COMMENT</name></expr>:</case>
		<case>case <expr><name>PROMPT_PAREN</name></expr>:</case>
			<expr_stmt><expr><name>prompt_string</name> <operator>=</operator> <name><name>pset</name><operator>.</operator><name>prompt2</name></name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>PROMPT_COPY</name></expr>:</case>
			<expr_stmt><expr><name>prompt_string</name> <operator>=</operator> <name><name>pset</name><operator>.</operator><name>prompt3</name></name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name><name>destination</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>prompt_string</name></expr>;</init>
		 <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</condition>
		 <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>esc</name></expr>)</condition>
		<block>{<block_content>
			<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
			<block>{<block_content>
					<comment type="block">/* Current database */</comment>
				<case>case <expr><literal type="char">'/'</literal></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>PQdb</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<break>break;</break>
				<case>case <expr><literal type="char">'~'</literal></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

						<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>PQdb</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PQuser</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
							<operator>(</operator><operator>(</operator><name>var</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGDATABASE"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><call><name>PQdb</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"~"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>PQdb</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
					</block_content>}</block></if></if_stmt>
					<break>break;</break>

					<comment type="block">/* DB server hostname (long/short) */</comment>
				<case>case <expr><literal type="char">'M'</literal></expr>:</case>
				<case>case <expr><literal type="char">'m'</literal></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><call><name>PQhost</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<comment type="block">/* INET socket */</comment>
						<if_stmt><if>if <condition>(<expr><name>host</name> <operator>&amp;&amp;</operator> <name><name>host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_absolute_path</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
						</block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>
						<comment type="block">/* UNIX socket */</comment>
						<else>else
						<block>{<block_content>
							<if_stmt><if>if <condition>(<expr><operator>!</operator><name>host</name>
								<operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>DEFAULT_PGSOCKET_DIR</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
								<operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"[local]"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
							<else>else<block type="pseudo"><block_content>
								<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"[local:%s]"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
						</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					</block_content>}</block></if></if_stmt>
					<break>break;</break>
					<comment type="block">/* DB server port number */</comment>
				<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>db</name></name> <operator>&amp;&amp;</operator> <call><name>PQport</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>PQport</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<break>break;</break>
					<comment type="block">/* DB server user name */</comment>
				<case>case <expr><literal type="char">'n'</literal></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>session_username</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<break>break;</break>
					<comment type="block">/* backend pid */</comment>
				<case>case <expr><literal type="char">'p'</literal></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int</name></type>			<name>pid</name> <init>= <expr><call><name>PQbackendPID</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<if_stmt><if>if <condition>(<expr><name>pid</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
					<break>break;</break>

				<case>case <expr><literal type="char">'0'</literal></expr>:</case>
				<case>case <expr><literal type="char">'1'</literal></expr>:</case>
				<case>case <expr><literal type="char">'2'</literal></expr>:</case>
				<case>case <expr><literal type="char">'3'</literal></expr>:</case>
				<case>case <expr><literal type="char">'4'</literal></expr>:</case>
				<case>case <expr><literal type="char">'5'</literal></expr>:</case>
				<case>case <expr><literal type="char">'6'</literal></expr>:</case>
				<case>case <expr><literal type="char">'7'</literal></expr>:</case>
					<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="char">'R'</literal></expr>:</case>
					<switch>switch <condition>(<expr><name>status</name></expr>)</condition>
					<block>{<block_content>
						<case>case <expr><name>PROMPT_READY</name></expr>:</case>
							<if_stmt><if>if <condition>(<expr><name>cstack</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>conditional_active</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'@'</literal></expr>;</expr_stmt></block_content></block></if>
							<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>db</name></name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'!'</literal></expr>;</expr_stmt></block_content></block></if>
							<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>singleline</name></name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt></block_content></block></if>
							<else>else<block type="pseudo"><block_content>
								<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
							<break>break;</break>
						<case>case <expr><name>PROMPT_CONTINUE</name></expr>:</case>
							<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>PROMPT_SINGLEQUOTE</name></expr>:</case>
							<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>PROMPT_DOUBLEQUOTE</name></expr>:</case>
							<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>PROMPT_DOLLARQUOTE</name></expr>:</case>
							<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>PROMPT_COMMENT</name></expr>:</case>
							<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>PROMPT_PAREN</name></expr>:</case>
							<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'('</literal></expr>;</expr_stmt>
							<break>break;</break>
						<default>default:</default>
							<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
							<break>break;</break>
					</block_content>}</block></switch>
					<break>break;</break>

				<case>case <expr><literal type="char">'x'</literal></expr>:</case>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>db</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<switch>switch <condition>(<expr><call><name>PQtransactionStatus</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<case>case <expr><name>PQTRANS_IDLE</name></expr>:</case>
								<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
								<break>break;</break>
							<case>case <expr><name>PQTRANS_ACTIVE</name></expr>:</case>
							<case>case <expr><name>PQTRANS_INTRANS</name></expr>:</case>
								<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
								<break>break;</break>
							<case>case <expr><name>PQTRANS_INERROR</name></expr>:</case>
								<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>
								<break>break;</break>
							<default>default:</default>
								<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
								<break>break;</break>
						</block_content>}</block></switch></block_content></block></else></if_stmt>
					<break>break;</break>

				<case>case <expr><literal type="char">'l'</literal></expr>:</case>
					<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>UINT64_FORMAT</name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>stmt_lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><literal type="char">'?'</literal></expr>:</case>
					<comment type="block">/* not here yet */</comment>
					<break>break;</break>

				<case>case <expr><literal type="char">'#'</literal></expr>:</case>
					<if_stmt><if>if <condition>(<expr><call><name>is_superuser</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<break>break;</break>

					<comment type="block">/* execute command */</comment>
				<case>case <expr><literal type="char">'`'</literal></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>pg_strdup</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int</name></type>			<name>cmdend</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>cmdend</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"`"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>file</name><index>[<expr><name>cmdend</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>fd</name></expr>)</condition>
						<block>{<block_content>
							<if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
							<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
						<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>cmdend</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block>

					<comment type="block">/* interpolate variable */</comment>
				<case>case <expr><literal type="char">':'</literal></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int</name></type>			<name>nameend</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>nameend</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>name</name><index>[<expr><name>nameend</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>GetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>nameend</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block>

				<case>case <expr><literal type="char">'['</literal></expr>:</case>
				<case>case <expr><literal type="char">']'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_READLINE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>RL_PROMPT_START_IGNORE</name></expr></argument>)</argument_list></call></expr></cpp:if>

					<comment type="block">/*
					 * readline &gt;=4.0 undocumented feature: non-printing
					 * characters in prompt strings must be marked as such, in
					 * order to properly display the line during editing.
					 */</comment>
					<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'['</literal><operator>)</operator></expr> ?</condition><then> <expr><name>RL_PROMPT_START_IGNORE</name></expr> </then><else>: <expr><name>RL_PROMPT_END_IGNORE</name></expr></else></ternary></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* USE_READLINE */</comment>
					<break>break;</break>

				<default>default:</default>
					<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<break>break;</break>

			</block_content>}</block></switch>
			<expr_stmt><expr><name>esc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>esc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>esc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>esc</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>strlcat</name><argument_list>(<argument><expr><name>destination</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>destination</name></expr>;</return>
</block_content>}</block></function>
</unit>
