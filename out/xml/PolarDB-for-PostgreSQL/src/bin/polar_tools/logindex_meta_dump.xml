<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/bin/polar_tools/logindex_meta_dump.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * logindex_meta_dump.c
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *	  src/bin/polar_tools/logindex_meta_dump.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_tools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_logindex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_logindex_internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"file-path"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'f'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"help"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'?'</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Dump logindex meta usage:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-f, --file_path  Specify logindex meta file path\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-?, --help show this help, then exit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> 
<name>logindex_meta_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>option</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>optindex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>succeed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_meta_t</name></type> <name>meta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_crc32</name></type> <name>crc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>option</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"f:?"</literal></expr></argument>, <argument><expr><name>long_options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optindex</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>option</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="char">'f'</literal></expr>:</case>
				<expr_stmt><expr><name>file_path</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'?'</literal></expr>:</case>
				<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>end</name>;</goto>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>file_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s\n"</literal></expr></argument>, <argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_index_meta_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>log_index_meta_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to read logindex meta\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>meta</name><operator>.</operator><name>crc</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>.</operator><name>magic</name></name> <operator>!=</operator> <name>LOG_INDEX_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"The magic number of meta file is incorrect, got %d, expect %d"</literal></expr></argument>,
			<argument><expr><name><name>meta</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><name>LOG_INDEX_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>LOG_INDEX_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"The version is incorrect, got %d, expect %d"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>LOG_INDEX_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>crc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>crc</name></name> <operator>=</operator> <call><name>log_index_calc_crc</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>meta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_index_meta_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>crc</name> <operator>!=</operator> <name><name>meta</name><operator>.</operator><name>crc</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"The crc is incorrect, got %u, expect %u"</literal></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"magic=%x version=%x max_table_id=%ld seg.no=%ld seg.max_lsn=%lx seg.max_id=%ld seg.min_id=%ld start_lsn=%lx max_lsn=%lx crc=%x\n"</literal></expr></argument>, 
		 <argument><expr><name><name>meta</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>max_idx_table_id</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>min_segment_info</name><operator>.</operator><name>segment_no</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>min_segment_info</name><operator>.</operator><name>max_lsn</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>min_segment_info</name><operator>.</operator><name>max_idx_table_id</name></name></expr></argument>, 
		 <argument><expr><name><name>meta</name><operator>.</operator><name>min_segment_info</name><operator>.</operator><name>min_idx_table_id</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>start_lsn</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>max_lsn</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

	<expr_stmt><expr><name>succeed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<label><name>end</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>file_path</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><name>succeed</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
