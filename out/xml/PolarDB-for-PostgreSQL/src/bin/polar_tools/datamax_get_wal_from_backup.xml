<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/bin/polar_tools/datamax_get_wal_from_backup.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * datamax_get_wal_from_backup.c - datamax get wal file from backup set
 * 
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *		  src/bin/polar_tools/datamax_get_wal_from_backup.c
 *-------------------------------------------------------------------------
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRONTEND</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogreader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogrecord.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_control.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/file_perm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/polar_fs_fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getopt_long.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_datamax/polar_datamax_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_tools.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>wal_segment_size</name> <init>= <expr><literal type="number">16</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>datamax_pfs_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>backup_pfs_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>polar_verify_xlog_private</name>
<block>{
	<decl_stmt><decl><type><name>TimeLineID</name></type>	<name>timeline</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> 		<modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>pfs_mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>startptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>endptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>endptr_reached</name></decl>;</decl_stmt>
}</block></struct></type> <name>polar_verify_xlog_private</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{<expr><literal type="string">"pgdata"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"backup_waldir"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'b'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"datamax_mode"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'M'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"backup_mode"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'m'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"polar_disk_name_datamax"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'N'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"polar_disk_name_backup"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'n'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"polar_storage_cluster_name"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'s'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"polar_hostid"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'i'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"help"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'?'</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DataMax get wal from backup usage:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-D, --pgdata=datamax_dir			Specify datamax data directory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-b, --backup_waldir=backup_dir  	Specify wal backup directory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-M, --datamax_mode=l|p 				Specify datamax storage mode, l for local_mode, p for pfs_mode, default l\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-m, --backup_mode=l|p				Specify backup storage mode, l for local_mode, p for pfs_mode, default l\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-N, --polar_disk_name_datamax=disk	Specify datamax polar_disk_name for pfs mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-n, --polar_disk_name_backup=disk	Specify backup polar_disk_name for pfs mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-s, --polar_storage_cluster_name=cluster_name  Specify polar_storage_cluster_name for pfs mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-i, --polar_hostid=host_id, 		Specify polar_host_id for pfs mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-?, --help show this help, then exit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>polar_validate_datamax_dir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datamax_datadir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>    <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stat_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dirs</name><index>[]</index></name> <init>=
	<expr><block>{
		<expr><name>POLAR_DATAMAX_DIR</name></expr>,
		<expr><name>POLAR_DATAMAX_WAL_DIR</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>dirs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>path</name><operator>)</operator></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>datamax_datadir</name></expr></argument>, <argument><expr><name><name>dirs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* check and create dir */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>polar_stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat_buf</name></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>stat_buf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path \"%s\" is not a directory: %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>polar_mkdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pg_dir_create_mode</name></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not create directory \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>polar_get_smallest_and_greatest_walfile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>waldir_path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pfs_mode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>smallest_walfile</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>greatest_walfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DIR</name>	 <modifier>*</modifier></type><name>xldir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>xlde</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>found_smallest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>found_greatest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>waldir_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: parameter wal directory path is NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>smallest_walfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: parameter smallest_walfile is null pointer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>greatest_walfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: parameter greatest_walfile is null pointer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>xldir</name> <operator>=</operator> <call><name>polar_opendir</name><argument_list>(<argument><expr><name>waldir_path</name></expr></argument>, <argument><expr><name>pfs_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>xlde</name> <operator>=</operator> <call><name>polar_readdir</name><argument_list>(<argument><expr><name>xldir</name></expr></argument>, <argument><expr><name>pfs_mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsXLogFileName</name><argument_list>(<argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* first found a valid wal file or found smaller wal file, update */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_smallest</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>smallest_walfile</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>found_smallest</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>smallest_walfile</name></expr></argument>, <argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* first found a valid wal file or found greater wal file, update */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_greatest</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>greatest_walfile</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>found_greatest</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>greatest_walfile</name></expr></argument>, <argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>polar_closedir</name><argument_list>(<argument><expr><name>xldir</name></expr></argument>, <argument><expr><name>pfs_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>smallest_walfile</name><index>[<expr><name>XLOG_FNAME_LEN</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>greatest_walfile</name><index>[<expr><name>XLOG_FNAME_LEN</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>found_smallest</name> <operator>&amp;</operator> <name>found_greatest</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>polar_copy_wal_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>src_dir</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>src_pfs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest_dir</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dest_pfs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_XLOG_SIZE_1MB</name></cpp:macro>  <cpp:value>1024 * 1024</cpp:value></cpp:define>

	<decl_stmt><decl><type><name>char</name></type> <name><name>src_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>dest_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>src_fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>dest_fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>nbytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>src_dir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dest_path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>dest_dir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>src_fd</name> <operator>=</operator> <call><name>polar_open</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>,  <argument><expr><name>pg_file_create_mode</name></expr></argument>, <argument><expr><name>src_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>src_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* create wal file in dest_dir */</comment>
	<expr_stmt><expr><name>dest_fd</name> <operator>=</operator> <call><name>polar_open</name><argument_list>(<argument><expr><name>dest_path</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><name>pg_file_create_mode</name></expr></argument>, <argument><expr><name>dest_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dest_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>POLAR_XLOG_SIZE_1MB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"allocate memory for buffer error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* copy wal data from src_file to dest_file */</comment>
	<for>for <control>(<init><expr><name>nbytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nbytes</name> <operator>&lt;</operator> <name>wal_segment_size</name></expr>;</condition> <incr><expr><name>nbytes</name> <operator>+=</operator> <name>POLAR_XLOG_SIZE_1MB</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>polar_read</name><argument_list>(<argument><expr><name>src_fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>POLAR_XLOG_SIZE_1MB</name></expr></argument>, <argument><expr><name>src_pfs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>POLAR_XLOG_SIZE_1MB</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*no cover line*/</comment>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>end</name>;</goto>
		</block_content>}</block></if></if_stmt>		
		<if_stmt><if>if <condition>(<expr><call><name>polar_write</name><argument_list>(<argument><expr><name>dest_fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>POLAR_XLOG_SIZE_1MB</name></expr></argument>, <argument><expr><name>dest_pfs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>POLAR_XLOG_SIZE_1MB</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*no cover line*/</comment>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not write to file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>end</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><call><name>polar_fsync</name><argument_list>(<argument><expr><name>dest_fd</name></expr></argument>, <argument><expr><name>dest_pfs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not fsync file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>	
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>end</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>src_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>src_fd</name></expr></argument>, <argument><expr><name>src_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>dest_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>dest_fd</name></expr></argument>, <argument><expr><name>dest_pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * read count bytes from a segment file, store the data in the passed buffer
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_xlog_read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>waldir</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pfs_mode</name></decl></parameter>, <parameter><decl><type><name>TimeLineID</name></type> <name>tli</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>start_ptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>  <name>recptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>        <name>nbytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><name>MAXFNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>read_file</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>XLogSegNo</name></type> <name>read_segNo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name>read_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>recptr</name> <operator>=</operator> <name>start_ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>nbytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type>      <name>start_off</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>         <name>seg_bytes</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>         <name>read_bytes</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>start_off</name> <operator>=</operator> <call><name>XLogSegmentOffset</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>read_file</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>XLByteInSeg</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>, <argument><expr><name>read_segNo</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* switch to a new segment */</comment>
			<if_stmt><if>if <condition>(<expr><name>read_file</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>read_file</name></expr></argument>, <argument><expr><name>pfs_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>XLByteToSeg</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>, <argument><expr><name>read_segNo</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="block">/* get the wal segment file path */</comment>
			<expr_stmt><expr><call><name>XLogFileName</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>tli</name></expr></argument>, <argument><expr><name>read_segNo</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>waldir</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>read_file</name> <operator>=</operator> <call><name>polar_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pfs_mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>err</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>read_off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* need to seek in the file */</comment>
		<if_stmt><if>if <condition>(<expr><name>read_off</name> <operator>!=</operator> <name>start_off</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>polar_lseek</name><argument_list>(<argument><expr><name>read_file</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name>start_off</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>, <argument><expr><name>pfs_mode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>XLogFileName</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>tli</name></expr></argument>, <argument><expr><name>read_segNo</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>waldir</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* report error */</comment>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not seek in file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>err</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>read_off</name> <operator>=</operator> <name>start_off</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* how many bytes are within this segment */</comment>
		<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&gt;</operator> <operator>(</operator><name>wal_segment_size</name> <operator>-</operator> <name>start_off</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>seg_bytes</name> <operator>=</operator> <name>wal_segment_size</name> <operator>-</operator> <name>start_off</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>seg_bytes</name> <operator>=</operator> <name>nbytes</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>read_bytes</name> <operator>=</operator> <call><name>polar_read</name><argument_list>(<argument><expr><name>read_file</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>seg_bytes</name></expr></argument>, <argument><expr><name>pfs_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>read_bytes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>XLogFileName</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>tli</name></expr></argument>, <argument><expr><name>read_segNo</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>waldir</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* report error */</comment>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read from file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>err</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* update state for read */</comment>
		<expr_stmt><expr><name>recptr</name> <operator>+=</operator> <name>read_bytes</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>read_off</name> <operator>+=</operator> <name>read_bytes</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nbytes</name> <operator>-=</operator> <name>read_bytes</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>read_bytes</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return;</return>

<label><name>err</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>read_file</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>read_file</name></expr></argument>, <argument><expr><name>pfs_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>read_file</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * XLogReader read_page callback
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>polar_xlog_read_page</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>target_page_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_len</name></decl></parameter>,
					 <parameter><decl><type><name>XLogRecPtr</name></type> <name>target_ptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>read_buff</name></decl></parameter>, <parameter><decl><type><name>TimeLineID</name> <modifier>*</modifier></type><name>cur_file_tli</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_verify_xlog_private</name> <modifier>*</modifier></type><name>private</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name>XLOG_BLCKSZ</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>target_page_ptr</name> <operator>+</operator> <name>XLOG_BLCKSZ</name> <operator>&lt;=</operator> <name><name>private</name><operator>-&gt;</operator><name>endptr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <name>XLOG_BLCKSZ</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>target_page_ptr</name> <operator>+</operator> <name>req_len</name> <operator>&lt;=</operator> <name><name>private</name><operator>-&gt;</operator><name>endptr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>private</name><operator>-&gt;</operator><name>endptr</name></name> <operator>-</operator> <name>target_page_ptr</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>endptr_reached</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>polar_xlog_read</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>private</name><operator>-&gt;</operator><name>pfs_mode</name></name></expr></argument>, <argument><expr><name><name>private</name><operator>-&gt;</operator><name>timeline</name></name></expr></argument>, <argument><expr><name>target_page_ptr</name></expr></argument>, <argument><expr><name>read_buff</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * verify the validation of walfile in backup_dir
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>polar_verify_walfile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>backup_dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>backup_smallest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>backup_greatest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>xlogreader_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_verify_xlog_private</name></type> <name>private</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecord</name>  <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>lsn_verify_from</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogSegNo</name></type>	<name>segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>errormsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* get the start_lsn and end_lsn we need to verify */</comment>
	<expr_stmt><expr><call><name>XLogFromFileName</name><argument_list>(<argument><expr><name>backup_smallest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>private</name><operator>.</operator><name>timeline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>segno</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XLogSegNoOffsetToRecPtr</name><argument_list>(<argument><expr><name>segno</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>, <argument><expr><name><name>private</name><operator>.</operator><name>startptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XLogFromFileName</name><argument_list>(<argument><expr><name>backup_greatest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>private</name><operator>.</operator><name>timeline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>segno</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XLogSegNoOffsetToRecPtr</name><argument_list>(<argument><expr><name>segno</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>, <argument><expr><name><name>private</name><operator>.</operator><name>endptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>private</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>backup_dir</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>private</name><operator>.</operator><name>pfs_mode</name></name> <operator>=</operator> <name>backup_pfs_mode</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>.</operator><name>endptr</name></name> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to verify wal: invalid endptr\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>xlogreader_state</name> <operator>=</operator> <call><name>XLogReaderAllocate</name><argument_list>(<argument><expr><name>wal_segment_size</name></expr></argument>, <argument><expr><name>polar_xlog_read_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xlogreader_state</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"allocate xlogreader fail, out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* first find a valid recptr to verify from */</comment>
	<expr_stmt><expr><name>lsn_verify_from</name> <operator>=</operator> <call><name>XLogFindNextRecord</name><argument_list>(<argument><expr><name>xlogreader_state</name></expr></argument>, <argument><expr><name><name>private</name><operator>.</operator><name>startptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>lsn_verify_from</name> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not find a valid record after %X/%X\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>private</name><operator>.</operator><name>startptr</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>private</name><operator>.</operator><name>startptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* verify the xlog record */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>record</name> <operator>=</operator> <call><name>XLogReadRecord</name><argument_list>(<argument><expr><name>xlogreader_state</name></expr></argument>, <argument><expr><name>lsn_verify_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* record is null or reach the end of valid xlog record */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>record</name> <operator>||</operator> <name><name>private</name><operator>.</operator><name>endptr_reached</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<comment type="block">/* after verified the first record, continue at next one */</comment>
		<expr_stmt><expr><name>lsn_verify_from</name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>errormsg</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>private</name><operator>.</operator><name>endptr_reached</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>errormsg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error in wal record at %X/%X:%s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><name><name>xlogreader_state</name><operator>-&gt;</operator><name>ReadRecPtr</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>xlogreader_state</name><operator>-&gt;</operator><name>ReadRecPtr</name></name></expr></argument>, <argument><expr><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>xlogreader_state</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>XLogReaderFree</name><argument_list>(<argument><expr><name>xlogreader_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pg_crc32c</name></type>
<name>polar_calc_meta_crc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_crc32c</name></type> <name>crc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>crc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>polar_update_datamax_meta_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datamax_datadir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>backup_smallest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>backup_greatest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>datamax_meta_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stat_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_datamax_meta_data_t</name></type> <name>meta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_crc32c</name></type> <name>crc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>datamax_meta_fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeLineID</name></type> <name>tmp_tli</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>tmp_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogSegNo</name></type> <name>tmp_segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>create_meta</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>datamax_meta_path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s/%s"</literal></expr></argument>, <argument><expr><name>datamax_datadir</name></expr></argument>, <argument><expr><name>POLAR_DATAMAX_DIR</name></expr></argument>, <argument><expr><name>POLAR_DATAMAX_META_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* read meta data */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>polar_stat</name><argument_list>(<argument><expr><name>datamax_meta_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat_buf</name></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* create the meta file if it doesn't exist */</comment>
		<expr_stmt><expr><name>datamax_meta_fd</name> <operator>=</operator> <call><name>polar_open</name><argument_list>(<argument><expr><name>datamax_meta_path</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><name>pg_file_create_mode</name></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>datamax_meta_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*no cover line*/</comment>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not create file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>datamax_meta_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>end</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>create_meta</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>		
		<comment type="block">/* init meta data */</comment>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_datamax_meta_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>POLAR_DATAMAX_MAGIC</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>POLAR_DATAMAX_VERSION</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>datamax_meta_fd</name> <operator>=</operator> <call><name>polar_open</name><argument_list>(<argument><expr><name>datamax_meta_path</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><name>pg_file_create_mode</name></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>datamax_meta_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>datamax_meta_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>end</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>polar_read</name><argument_list>(<argument><expr><name>datamax_meta_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_datamax_meta_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_datamax_meta_data_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*no cover line*/</comment>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>datamax_meta_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>end</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* verify the mata if it exists already	*/</comment>
		<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>.</operator><name>magic</name></name> <operator>!=</operator> <name>POLAR_DATAMAX_MAGIC</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The magic number of meta file is incorrect, got %d, expect %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><name>POLAR_DATAMAX_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>end</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>POLAR_DATAMAX_VERSION</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The version is incorrect, got %d, expect %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>POLAR_DATAMAX_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>end</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* check crc value */</comment>
		<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>meta</name><operator>.</operator><name>crc</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>crc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>crc</name></name> <operator>=</operator> <call><name>polar_calc_meta_crc</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>meta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_datamax_meta_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>crc</name> <operator>!=</operator> <name><name>meta</name><operator>.</operator><name>crc</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"The crc is incorrect, got %u, expect %u"</literal></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>end</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	
	<comment type="block">/* update min received info */</comment>
	<if_stmt><if>if <condition>(<expr><name>backup_smallest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>	
		<expr_stmt><expr><call><name>XLogFromFileName</name><argument_list>(<argument><expr><name>backup_smallest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_tli</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_segno</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XLogSegNoOffsetToRecPtr</name><argument_list>(<argument><expr><name>tmp_segno</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>, <argument><expr><name>tmp_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>.</operator><name>min_received_lsn</name></name> <operator>==</operator> <name>InvalidXLogRecPtr</name> <operator>||</operator> <name>tmp_lsn</name> <operator>&lt;</operator> <name><name>meta</name><operator>.</operator><name>min_received_lsn</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>min_received_lsn</name></name> <operator>=</operator> <name>tmp_lsn</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>min_timeline_id</name></name> <operator>=</operator> <name>tmp_tli</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"update meta min timeline id:%d, min received lsn:%lX\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>min_timeline_id</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>min_received_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* update last received info */</comment>
	<if_stmt><if>if <condition>(<expr><name>backup_greatest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>XLogFromFileName</name><argument_list>(<argument><expr><name>backup_greatest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_tli</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_segno</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XLogSegNoOffsetToRecPtr</name><argument_list>(<argument><expr><name>tmp_segno</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>, <argument><expr><name>tmp_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp_lsn</name> <operator>&gt;</operator> <name><name>meta</name><operator>.</operator><name>last_received_lsn</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>last_received_lsn</name></name> <operator>=</operator> <name>tmp_lsn</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>last_timeline_id</name></name> <operator>=</operator> <name>tmp_tli</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>last_valid_received_lsn</name></name> <operator>=</operator> <name><name>meta</name><operator>.</operator><name>last_received_lsn</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"update meta last timeline id:%d, last received lsn:%lX, last valid received lsn:%lX\n"</literal></expr></argument>)</argument_list></call></expr></argument>, 
				<argument><expr><name><name>meta</name><operator>.</operator><name>last_timeline_id</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>last_received_lsn</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>last_valid_received_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* caculate new meta crc value */</comment>
	<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>crc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>crc</name></name> <operator>=</operator> <call><name>polar_calc_meta_crc</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>meta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_datamax_meta_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* update meta file */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>polar_lseek</name><argument_list>(<argument><expr><name>datamax_meta_fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not seek in file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>datamax_meta_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_write</name><argument_list>(<argument><expr><name>datamax_meta_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_datamax_meta_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_datamax_meta_data_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not write to file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>datamax_meta_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_fsync</name><argument_list>(<argument><expr><name>datamax_meta_fd</name></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not fsync file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>datamax_meta_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>end</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>datamax_meta_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>datamax_meta_fd</name></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>create_meta</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_unlink</name><argument_list>(<argument><expr><name>datamax_meta_path</name></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * copy wal file from backup_dir to datamax_datadir
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>polar_datamax_copy_wal_from_backup</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>backup_dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datamax_datadir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>backup_smallest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>backup_greatest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>datamax_waldir</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DIR</name>	 <modifier>*</modifier></type><name>xldir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>xlde</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>getwal_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* get current smallest and biggest wal segment file in backup waldir */</comment>
	<expr_stmt><expr><name>backup_smallest</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>XLOG_FNAME_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>backup_smallest</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"allocate memory for backup_smallest error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>backup_greatest</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>XLOG_FNAME_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>backup_greatest</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"allocate memory for backup_greatest error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>getwal_ret</name> <operator>=</operator> <call><name>polar_get_smallest_and_greatest_walfile</name><argument_list>(<argument><expr><name>backup_dir</name></expr></argument>, <argument><expr><name>backup_pfs_mode</name></expr></argument>, <argument><expr><name>backup_smallest</name></expr></argument>, <argument><expr><name>backup_greatest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>getwal_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to get smallest and greatest walfile in backup waldir, invalid parameter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>getwal_ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"there is no wal file in backup set, no need to copy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"backup_set smallest_walfile:%s, greatest_walfile:%s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backup_smallest</name></expr></argument>, <argument><expr><name>backup_greatest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* verify the wal file in backup_waldir */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"check the validation of wal in backup_set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_verify_walfile</name><argument_list>(<argument><expr><name>backup_dir</name></expr></argument>, <argument><expr><name>backup_smallest</name></expr></argument>, <argument><expr><name>backup_greatest</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"invalid walfile in backup_waldir \"%s\"\n"</literal></expr></argument>, <argument><expr><name>backup_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* after checking the validation of wal in backup_dir, copy them to datamax_waldir */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"wal in backup_set is valid, copy them to datamax datadir\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>datamax_waldir</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>datamax_datadir</name></expr></argument>, <argument><expr><name>POLAR_DATAMAX_WAL_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>xldir</name> <operator>=</operator> <call><name>polar_opendir</name><argument_list>(<argument><expr><name>backup_dir</name></expr></argument>, <argument><expr><name>backup_pfs_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>xlde</name> <operator>=</operator> <call><name>polar_readdir</name><argument_list>(<argument><expr><name>xldir</name></expr></argument>, <argument><expr><name>backup_pfs_mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsXLogFileName</name><argument_list>(<argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"copy file %s from %s to %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name>backup_dir</name></expr></argument>, <argument><expr><name>datamax_waldir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>polar_copy_wal_file</name><argument_list>(<argument><expr><name>backup_dir</name></expr></argument>, <argument><expr><name>backup_pfs_mode</name></expr></argument>, <argument><expr><name>datamax_waldir</name></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>, <argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"copy wal file %s from %s to %s error\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>xlde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name>backup_dir</name></expr></argument>, <argument><expr><name>datamax_waldir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>end</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/* update meta file of datamax */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"update datamax meta file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_update_datamax_meta_file</name><argument_list>(<argument><expr><name>datamax_datadir</name></expr></argument>, <argument><expr><name>backup_smallest</name></expr></argument>, <argument><expr><name>backup_greatest</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to update datamax meta file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>end</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>backup_smallest</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>backup_smallest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>backup_greatest</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>backup_greatest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>xldir</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_closedir</name><argument_list>(<argument><expr><name>xldir</name></expr></argument>, <argument><expr><name>backup_pfs_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>polar_get_wal_segment_size</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>control_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ControlFileData</name> <modifier>*</modifier></type><name>control_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>wal_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_crc32c</name></type>	<name>crc_value</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>control_data</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ControlFileData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>control_data</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"allocate memory for control_data error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>polar_open</name><argument_list>(<argument><expr><name>control_file</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><name>pg_file_create_mode</name></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>control_file</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>control_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ControlFileData</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ControlFileData</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read datamax control file \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>control_file</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>	

	<comment type="block">/* check the CRC */</comment>
	<expr_stmt><expr><name>crc_value</name> <operator>=</operator> <call><name>polar_calc_meta_crc</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>control_data</name></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ControlFileData</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EQ_CRC32C</name><argument_list>(<argument><expr><name>crc_value</name></expr></argument>, <argument><expr><name><name>control_data</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to check crc, expected %X but got %X\n"</literal></expr></argument>, <argument><expr><name><name>control_data</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><name>crc_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Make sure the control file is valid byte order */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>control_data</name><operator>-&gt;</operator><name>pg_control_version</name></name> <operator>%</operator> <literal type="number">65536</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<name><name>control_data</name><operator>-&gt;</operator><name>pg_control_version</name></name> <operator>/</operator> <literal type="number">65536</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*no cover line*/</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"WARNING: possible byte ordering mismatch\n"</literal>
				 <literal type="string">"The byte ordering used to store the pg_control file might not match the one\n"</literal>
				 <literal type="string">"used by this program.  In that case the results below would be incorrect, and\n"</literal>
				 <literal type="string">"the PostgreSQL installation would be incompatible with this data directory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>	
	<comment type="block">/* return wal segment size */</comment>
	<expr_stmt><expr><name>wal_size</name> <operator>=</operator> <name><name>control_data</name><operator>-&gt;</operator><name>xlog_seg_size</name></name></expr>;</expr_stmt>

<label><name>end</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>control_data</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>control_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>wal_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>datamax_get_wal_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>option</name></decl>, <decl><type ref="prev"/><name>optindex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>datamax_datadir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>backup_waldir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>polar_storage_cluster_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>polar_disk_name_datamax</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>polar_disk_name_backup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>polar_hostid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>datamax_control_filepath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>	
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stat_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>init_datamax_fs</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>init_backup_fs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>succeed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>option</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"D:b:M:m:N:n:s:i:?"</literal></expr></argument>, <argument><expr><name>long_options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optindex</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>option</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="char">'D'</literal></expr>:</case>
				<expr_stmt><expr><name>datamax_datadir</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'b'</literal></expr>:</case>
				<expr_stmt><expr><name>backup_waldir</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'M'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"l"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>datamax_pfs_mode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"pfs"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>datamax_pfs_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
							<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid storage mode \"%s\", must be \"local\" or \"pfs\"\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<goto>goto <name>end</name>;</goto>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'m'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"l"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>backup_pfs_mode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"pfs"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>backup_pfs_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
							<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid storage mode \"%s\", must be \"local\" or \"pfs\"\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<goto>goto <name>end</name>;</goto>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'N'</literal></expr>:</case>
				<expr_stmt><expr><name>polar_disk_name_datamax</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'n'</literal></expr>:</case>
				<expr_stmt><expr><name>polar_disk_name_backup</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'s'</literal></expr>:</case>
				<expr_stmt><expr><name>polar_storage_cluster_name</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'i'</literal></expr>:</case>
				<expr_stmt><expr><name>polar_hostid</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'?'</literal></expr>:</case>
				<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>end</name>;</goto>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<comment type="block">/* check parameter for pfs mode */</comment>
	<if_stmt><if>if <condition>(<expr><name>datamax_pfs_mode</name> <operator>||</operator> <name>backup_pfs_mode</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* default value of polar_storage_cluster_name is polarstore if not specified, so it can be NULL */</comment> 
		<if_stmt><if>if <condition>(<expr><name>polar_hostid</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"polar_hostid need to be specified in pfs mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>end</name>;</goto>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>polar_disk_name_datamax</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>polar_disk_name_backup</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"polar_disk_name (datamax or backup) need to be specified in pfs mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>end</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* init fs for datamax dir, use polar_disk_name_backup if polar_disk_name_datamax not specified */</comment>
	<if_stmt><if>if <condition>(<expr><name>polar_disk_name_datamax</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>polar_disk_name_datamax</name> <operator>=</operator> <name>polar_disk_name_backup</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>polar_fs_init</name><argument_list>(<argument><expr><name>datamax_pfs_mode</name></expr></argument>, <argument><expr><name>polar_storage_cluster_name</name></expr></argument>, <argument><expr><name>polar_disk_name_datamax</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>init_datamax_fs</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* only init backup fs when polar_disk_name_backup is not the same as polar_disk_name_datamax */</comment>
	<if_stmt><if>if <condition>(<expr><name>polar_disk_name_backup</name>	<operator>&amp;&amp;</operator> <name>polar_disk_name_datamax</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>polar_disk_name_backup</name></expr></argument>, <argument><expr><name>polar_disk_name_datamax</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_fs_init</name><argument_list>(<argument><expr><name>backup_pfs_mode</name></expr></argument>, <argument><expr><name>polar_storage_cluster_name</name></expr></argument>, <argument><expr><name>polar_disk_name_backup</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>init_backup_fs</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>datamax_datadir</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"datamax data directory is NULL, need to be specified validly\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_stat</name><argument_list>(<argument><expr><name>datamax_datadir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat_buf</name></expr></argument>, <argument><expr><name>datamax_pfs_mode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"datamax_datadir doesn't exist\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>backup_waldir</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"backup wal directory is NULL, need to be specified validly\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>polar_stat</name><argument_list>(<argument><expr><name>backup_waldir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat_buf</name></expr></argument>, <argument><expr><name>backup_pfs_mode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"backup wal directory doesn't exist\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* validate polar_datamax dir */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>polar_validate_datamax_dir</name><argument_list>(<argument><expr><name>datamax_datadir</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"validate polar_datamax dir error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* get wal segment size from pg_control file */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>datamax_control_filepath</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/global/pg_control"</literal></expr></argument>, <argument><expr><name>datamax_datadir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>wal_segment_size</name> <operator>=</operator> <call><name>polar_get_wal_segment_size</name><argument_list>(<argument><expr><name>datamax_control_filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* verify wal segment size */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidWalSegSize</name><argument_list>(<argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"WAL segment size must be a power of two between 1 MB and 1 GB, but the control file specifies %d byte\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* copy wal file from backup_waldir to datamax_waldir */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>polar_datamax_copy_wal_from_backup</name><argument_list>(<argument><expr><name>backup_waldir</name></expr></argument>, <argument><expr><name>datamax_datadir</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>succeed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>init_datamax_fs</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_fs_destory</name><argument_list>(<argument><expr><name>datamax_pfs_mode</name></expr></argument>, <argument><expr><name>polar_disk_name_datamax</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>init_backup_fs</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_fs_destory</name><argument_list>(<argument><expr><name>backup_pfs_mode</name></expr></argument>, <argument><expr><name>polar_disk_name_backup</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><name>succeed</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function></unit>
