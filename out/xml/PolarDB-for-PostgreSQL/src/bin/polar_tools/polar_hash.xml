<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/bin/polar_tools/polar_hash.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_hash.c
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2021, Alibaba Group Holding limited
 *
 * IDENTIFICATION
 *	  src/bin/polar_tools/polar_hash.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_tools.h"</cpp:file></cpp:include>

<function><type><name>uint32</name></type>
<name>hash_any</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>int</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>register</specifier> <name>uint32</name></type> <name>a</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>,
				<decl><type ref="prev"/><name>c</name></decl>,
				<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

	<comment type="block">/* Set up the internal state */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <literal type="number">0x9e3779b9</literal> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">3923095</literal></expr>;</expr_stmt>

	<comment type="block">/* If the source pointer is word-aligned, we use word-wide fetches */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>k</name> <operator>&amp;</operator> <name>UINT32_ALIGN_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Code path for aligned source data */</comment>
		<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>uint32</name> <modifier>*</modifier></type><name>ka</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>k</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* handle most of the key */</comment>
		<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ka</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* handle the last 11 bytes */</comment>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ka</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Code path for non-aligned source data */</comment>

		<comment type="block">/* handle most of the key */</comment>
		<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
			<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* handle the last 11 bytes */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>final</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* report the result */</comment>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * hash_any_extended() -- hash into a 64-bit value, using an optional seed
 *		k		: the key (the unaligned variable-length array of bytes)
 *		len		: the length of the key, counting by bytes
 *		seed	: a 64-bit seed (0 means no seed)
 *
 * Returns a uint64 value.  Otherwise similar to hash_any.
 */</comment>
<function><type><name>uint64</name></type>
<name>hash_any_extended</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>int</name></type> <name>keylen</name></decl></parameter>,
				  <parameter><decl><type><name>uint64</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>register</specifier> <name>uint32</name></type> <name>a</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>,
				<decl><type ref="prev"/><name>c</name></decl>,
				<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

	<comment type="block">/* Set up the internal state */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <literal type="number">0x9e3779b9</literal> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">3923095</literal></expr>;</expr_stmt>

	<comment type="block">/* If the seed is non-zero, use it to perturb the internal state. */</comment>
	<if_stmt><if>if <condition>(<expr><name>seed</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * In essence, the seed is treated as part of the data being hashed,
		 * but for simplicity, we pretend that it's padded with four bytes of
		 * zeroes so that the seed constitutes a 12-byte chunk.
		 */</comment>
		<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>seed</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <name>seed</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If the source pointer is word-aligned, we use word-wide fetches */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>k</name> <operator>&amp;</operator> <name>UINT32_ALIGN_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Code path for aligned source data */</comment>
		<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>uint32</name> <modifier>*</modifier></type><name>ka</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>k</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* handle most of the key */</comment>
		<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ka</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* handle the last 11 bytes */</comment>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ka</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Code path for non-aligned source data */</comment>

		<comment type="block">/* handle most of the key */</comment>
		<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
			<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* handle the last 11 bytes */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>final</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* report the result */</comment>
	<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
