<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/interfaces/ecpg/pgtypeslib/numeric.c"><comment type="block">/* src/interfaces/ecpg/pgtypeslib/numeric.c */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_error.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Max</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>				<cpp:value>((x) &gt; (y) ? (x) : (y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Min</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>				<cpp:value>((x) &lt; (y) ? (x) : (y))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_var</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>				<cpp:value>memset(v,0,sizeof(numeric))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>digitbuf_alloc</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((NumericDigit *) pgtypes_alloc(size))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>digitbuf_free</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro>		\
	   <cpp:value>do { \
				 if ((buf) != NULL) \
						  free(buf); \
		  } while (0)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_numeric.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<comment type="block">/* ----------
 * apply_typmod() -
 *
 *	Do bounds checking and rounding according to the attributes
 *	typmod field.
 * ----------
 */</comment>
static int
apply_typmod(numeric *var, long typmod)
{
	int			precision;
	int			scale;
	int			maxweight;
	int			i;

	<comment type="block">/* Do nothing if we have a default typmod (-1) */</comment>
	if (typmod &lt; (long) (VARHDRSZ))
		return 0;

	typmod -= VARHDRSZ;
	precision = (typmod &gt;&gt; 16) &amp; 0xffff;
	scale = typmod &amp; 0xffff;
	maxweight = precision - scale;

	<comment type="block">/* Round to target scale */</comment>
	i = scale + var-&gt;weight + 1;
	if (i &gt;= 0 &amp;&amp; var-&gt;ndigits &gt; i)
	{
		int			carry = (var-&gt;digits[i] &gt; 4) ? 1 : 0;

		var-&gt;ndigits = i;

		while (carry)
		{
			carry += var-&gt;digits[--i];
			var-&gt;digits[i] = carry % 10;
			carry /= 10;
		}

		if (i &lt; 0)
		{
			var-&gt;digits--;
			var-&gt;ndigits++;
			var-&gt;weight++;
		}
	}
	else
		var-&gt;ndigits = Max(0, Min(i, var-&gt;ndigits));

	<comment type="block">/*
	 * Check for overflow - note we can't do this before rounding, because
	 * rounding could raise the weight.  Also note that the var's weight could
	 * be inflated by leading zeroes, which will be stripped before storage
	 * but perhaps might not have been yet. In any case, we must recognize a
	 * true zero, whose weight doesn't mean anything.
	 */</comment>
	if (var-&gt;weight &gt;= maxweight)
	{
		<comment type="block">/* Determine true weight; and check for all-zero result */</comment>
		int			tweight = var-&gt;weight;

		for (i = 0; i &lt; var-&gt;ndigits; i++)
		{
			if (var-&gt;digits[i])
				break;
			tweight--;
		}

		if (tweight &gt;= maxweight &amp;&amp; i &lt; var-&gt;ndigits)
		{
			errno = PGTYPES_NUM_OVERFLOW;
			return -1;
		}
	}

	var-&gt;rscale = scale;
	var-&gt;dscale = scale;
	return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* ----------
 *	alloc_var() -
 *
 *	 Allocate a digit buffer of ndigits digits (plus a spare digit for rounding)
 * ----------
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>alloc_var</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndigits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>digitbuf_free</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>digitbuf_alloc</name><argument_list>(<argument><expr><name>ndigits</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>digits</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>=</operator> <name>ndigits</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>numeric</name> <modifier>*</modifier></type>
<name>PGTYPESnumeric_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>numeric</name>    <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>var</name> <operator>=</operator> <operator>(</operator><name>numeric</name> <operator>*</operator><operator>)</operator> <call><name>pgtypes_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>alloc_var</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>var</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>decimal</name> <modifier>*</modifier></type>
<name>PGTYPESdecimal_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>decimal</name>    <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>var</name> <operator>=</operator> <operator>(</operator><name>decimal</name> <operator>*</operator><operator>)</operator> <call><name>pgtypes_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decimal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decimal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>var</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------
 * set_var_from_str()
 *
 *	Parse a string and put the number into a variable
 * ----------
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_var_from_str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>have_dp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"NaN"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_NAN</name></expr>;</expr_stmt>

		<comment type="block">/* Should be nothing left but spaces */</comment>
		<while>while <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_BAD_NUMERIC</name></expr>;</expr_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>alloc_var</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>dscale</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="char">'+'</literal></expr>:</case>
			<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><literal type="char">'-'</literal></expr>:</case>
			<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_NEG</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>have_dp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_BAD_NUMERIC</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_dp</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>weight</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>dscale</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>have_dp</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_BAD_NUMERIC</name></expr>;</expr_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>have_dp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<break>break;</break></block_content></block></else></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

	<comment type="block">/* Handle exponent, if any */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>long</name></type>		<name>exponent</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>exponent</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>endptr</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_BAD_NUMERIC</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator> <operator>=</operator> <name>endptr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>exponent</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal> <operator>||</operator> <name>exponent</name> <operator>&lt;=</operator> <operator>-</operator><operator>(</operator><name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_BAD_NUMERIC</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>weight</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>exponent</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>dscale</name></name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>exponent</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>dest</name><operator>-&gt;</operator><name>dscale</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>dscale</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Should be nothing left but spaces */</comment>
	<while>while <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_BAD_NUMERIC</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Strip any leading zeroes */</comment>
	<while>while <condition>(<expr><name><name>dest</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>dest</name><operator>-&gt;</operator><name>digits</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name><name>dest</name><operator>-&gt;</operator><name>digits</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name><name>dest</name><operator>-&gt;</operator><name>weight</name></name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name><name>dest</name><operator>-&gt;</operator><name>ndigits</name></name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name><name>dest</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>rscale</name></name> <operator>=</operator> <name><name>dest</name><operator>-&gt;</operator><name>dscale</name></name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ----------
 * get_str_from_var() -
 *
 *	Convert a var to text representation (guts of numeric_out).
 *	CAUTION: var's contents may be modified by rounding!
 * ----------
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_str_from_var</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>d</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_NAN</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pgtypes_alloc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"NaN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>str</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Check if we must round up before printing the value and do so.
	 */</comment>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>dscale</name> <operator>+</operator> <name><name>var</name><operator>-&gt;</operator><name>weight</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>var</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>&gt;</operator> <name>i</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>carry</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>carry</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>carry</name> <operator>+=</operator> <name><name>var</name><operator>-&gt;</operator><name>digits</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>carry</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>carry</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>digits</name></name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ndigits</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>weight</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>Min</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>ndigits</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * Allocate space for the result
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pgtypes_alloc</name><argument_list>(<argument><expr><call><name>Max</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dscale</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Max</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Output a dash for negative values
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_NEG</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Output all digits before the decimal point
	 */</comment>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name><name>var</name><operator>-&gt;</operator><name>weight</name></name> <operator>&amp;&amp;</operator> <name>d</name> <operator>&lt;</operator> <name><name>var</name><operator>-&gt;</operator><name>ndigits</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>d</name><operator>++</operator></expr>]</index></name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * If requested, output a decimal point and all the digits that follow it.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>dscale</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <operator>-</operator><name>dscale</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name><name>var</name><operator>-&gt;</operator><name>weight</name></name> <operator>&amp;&amp;</operator> <name>d</name> <operator>&lt;</operator> <name><name>var</name><operator>-&gt;</operator><name>ndigits</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>d</name><operator>++</operator></expr>]</index></name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * terminate the string and return it
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>numeric</name> <modifier>*</modifier></type>
<name>PGTYPESnumeric_from_asc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>numeric</name>    <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>(</operator><name>numeric</name> <operator>*</operator><operator>)</operator> <call><name>pgtypes_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>realptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>endptr</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>endptr</name></expr> </then><else>: <expr><operator>&amp;</operator><name>realptr</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>set_var_from_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>PGTYPESnumeric_to_asc</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>numeric</name>    <modifier>*</modifier></type><name>numcopy</name> <init>= <expr><call><name>PGTYPESnumeric_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>numcopy</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PGTYPESnumeric_copy</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>numcopy</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>numcopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dscale</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dscale</name> <operator>=</operator> <name><name>num</name><operator>-&gt;</operator><name>dscale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* get_str_from_var may change its argument */</comment>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>get_str_from_var</name><argument_list>(<argument><expr><name>numcopy</name></expr></argument>, <argument><expr><name>dscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>numcopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------
 * zero_var() -
 *
 *	Set a variable to ZERO.
 *	Note: rscale and dscale are not touched.
 * ----------
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>zero_var</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>digitbuf_free</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>digits</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>			<comment type="block">/* by convention; doesn't really matter */</comment>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt>	<comment type="block">/* anything but NAN... */</comment>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>PGTYPESnumeric_free</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>digitbuf_free</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>PGTYPESdecimal_free</name><parameter_list>(<parameter><decl><type><name>decimal</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------
 * cmp_abs() -
 *
 *	Compare the absolute values of var1 and var2
 *	Returns:	-1 for ABS(var1) &lt; ABS(var2)
 *				0  for ABS(var1) == ABS(var2)
 *				1  for ABS(var1) &gt; ABS(var2)
 * ----------
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp_abs</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var1</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>w1</name> <init>= <expr><name><name>var1</name><operator>-&gt;</operator><name>weight</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>w2</name> <init>= <expr><name><name>var2</name><operator>-&gt;</operator><name>weight</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>stat</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>w1</name> <operator>&gt;</operator> <name>w2</name> <operator>&amp;&amp;</operator> <name>i1</name> <operator>&lt;</operator> <name><name>var1</name><operator>-&gt;</operator><name>ndigits</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>var1</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i1</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>w1</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<while>while <condition>(<expr><name>w2</name> <operator>&gt;</operator> <name>w1</name> <operator>&amp;&amp;</operator> <name>i2</name> <operator>&lt;</operator> <name><name>var2</name><operator>-&gt;</operator><name>ndigits</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>var2</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i2</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>w2</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>w1</name> <operator>==</operator> <name>w2</name></expr>)</condition>
	<block>{<block_content>
		<while>while <condition>(<expr><name>i1</name> <operator>&lt;</operator> <name><name>var1</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>&amp;&amp;</operator> <name>i2</name> <operator>&lt;</operator> <name><name>var2</name><operator>-&gt;</operator><name>ndigits</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>stat</name> <operator>=</operator> <name><name>var1</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i1</name><operator>++</operator></expr>]</index></name> <operator>-</operator> <name><name>var2</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i2</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>stat</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>stat</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>i1</name> <operator>&lt;</operator> <name><name>var1</name><operator>-&gt;</operator><name>ndigits</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>var1</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i1</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<while>while <condition>(<expr><name>i2</name> <operator>&lt;</operator> <name><name>var2</name><operator>-&gt;</operator><name>ndigits</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>var2</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i2</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ----------
 * add_abs() -
 *
 *	Add the absolute values of two variables into result.
 *	result might point to one of the operands without danger.
 * ----------
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>add_abs</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var1</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var2</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NumericDigit</name> <modifier>*</modifier></type><name>res_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NumericDigit</name> <modifier>*</modifier></type><name>res_digits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_ndigits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_weight</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_rscale</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_dscale</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>i1</name></decl>,
				<decl><type ref="prev"/><name>i2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* copy these values into local vars for speed in inner loop */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>var1ndigits</name> <init>= <expr><name><name>var1</name><operator>-&gt;</operator><name>ndigits</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>var2ndigits</name> <init>= <expr><name><name>var2</name><operator>-&gt;</operator><name>ndigits</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NumericDigit</name> <modifier>*</modifier></type><name>var1digits</name> <init>= <expr><name><name>var1</name><operator>-&gt;</operator><name>digits</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NumericDigit</name> <modifier>*</modifier></type><name>var2digits</name> <init>= <expr><name><name>var2</name><operator>-&gt;</operator><name>digits</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>res_weight</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>var1</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>res_rscale</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>var1</name><operator>-&gt;</operator><name>rscale</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>rscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res_dscale</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>var1</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res_ndigits</name> <operator>=</operator> <name>res_rscale</name> <operator>+</operator> <name>res_weight</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res_ndigits</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res_ndigits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res_buf</name> <operator>=</operator> <call><name>digitbuf_alloc</name><argument_list>(<argument><expr><name>res_ndigits</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>res_digits</name> <operator>=</operator> <name>res_buf</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>i1</name> <operator>=</operator> <name>res_rscale</name> <operator>+</operator> <name><name>var1</name><operator>-&gt;</operator><name>weight</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i2</name> <operator>=</operator> <name>res_rscale</name> <operator>+</operator> <name><name>var2</name><operator>-&gt;</operator><name>weight</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>res_ndigits</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>i1</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>i2</name><operator>--</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i1</name> <operator>&lt;</operator> <name>var1ndigits</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>carry</name> <operator>+=</operator> <name><name>var1digits</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>i2</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i2</name> <operator>&lt;</operator> <name>var2ndigits</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>carry</name> <operator>+=</operator> <name><name>var2digits</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>carry</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>res_digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>carry</name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>res_digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>carry</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<while>while <condition>(<expr><name>res_ndigits</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>res_digits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res_digits</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>res_weight</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>res_ndigits</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<while>while <condition>(<expr><name>res_ndigits</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>res_digits</name><index>[<expr><name>res_ndigits</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res_ndigits</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

	<if_stmt><if>if <condition>(<expr><name>res_ndigits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res_weight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>digitbuf_free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>=</operator> <name>res_ndigits</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>res_buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>digits</name></name> <operator>=</operator> <name>res_digits</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name>res_weight</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>rscale</name></name> <operator>=</operator> <name>res_rscale</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>dscale</name></name> <operator>=</operator> <name>res_dscale</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ----------
 * sub_abs() -
 *
 *	Subtract the absolute value of var2 from the absolute value of var1
 *	and store in result. result might point to one of the operands
 *	without danger.
 *
 *	ABS(var1) MUST BE GREATER OR EQUAL ABS(var2) !!!
 * ----------
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>sub_abs</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var1</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var2</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NumericDigit</name> <modifier>*</modifier></type><name>res_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NumericDigit</name> <modifier>*</modifier></type><name>res_digits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_ndigits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_weight</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_rscale</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_dscale</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>i1</name></decl>,
				<decl><type ref="prev"/><name>i2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>borrow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* copy these values into local vars for speed in inner loop */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>var1ndigits</name> <init>= <expr><name><name>var1</name><operator>-&gt;</operator><name>ndigits</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>var2ndigits</name> <init>= <expr><name><name>var2</name><operator>-&gt;</operator><name>ndigits</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NumericDigit</name> <modifier>*</modifier></type><name>var1digits</name> <init>= <expr><name><name>var1</name><operator>-&gt;</operator><name>digits</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NumericDigit</name> <modifier>*</modifier></type><name>var2digits</name> <init>= <expr><name><name>var2</name><operator>-&gt;</operator><name>digits</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>res_weight</name> <operator>=</operator> <name><name>var1</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res_rscale</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>var1</name><operator>-&gt;</operator><name>rscale</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>rscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res_dscale</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>var1</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res_ndigits</name> <operator>=</operator> <name>res_rscale</name> <operator>+</operator> <name>res_weight</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res_ndigits</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res_ndigits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res_buf</name> <operator>=</operator> <call><name>digitbuf_alloc</name><argument_list>(<argument><expr><name>res_ndigits</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>res_digits</name> <operator>=</operator> <name>res_buf</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>i1</name> <operator>=</operator> <name>res_rscale</name> <operator>+</operator> <name><name>var1</name><operator>-&gt;</operator><name>weight</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i2</name> <operator>=</operator> <name>res_rscale</name> <operator>+</operator> <name><name>var2</name><operator>-&gt;</operator><name>weight</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>res_ndigits</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>i1</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>i2</name><operator>--</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i1</name> <operator>&lt;</operator> <name>var1ndigits</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>borrow</name> <operator>+=</operator> <name><name>var1digits</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>i2</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i2</name> <operator>&lt;</operator> <name>var2ndigits</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>borrow</name> <operator>-=</operator> <name><name>var2digits</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>borrow</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>res_digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>borrow</name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>res_digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>borrow</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<while>while <condition>(<expr><name>res_ndigits</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>res_digits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res_digits</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>res_weight</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>res_ndigits</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<while>while <condition>(<expr><name>res_ndigits</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>res_digits</name><index>[<expr><name>res_ndigits</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res_ndigits</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

	<if_stmt><if>if <condition>(<expr><name>res_ndigits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res_weight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>digitbuf_free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>=</operator> <name>res_ndigits</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>res_buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>digits</name></name> <operator>=</operator> <name>res_digits</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name>res_weight</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>rscale</name></name> <operator>=</operator> <name>res_rscale</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>dscale</name></name> <operator>=</operator> <name>res_dscale</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------
 * add_var() -
 *
 *	Full version of add functionality on variable level (handling signs).
 *	result might point to one of the operands too without danger.
 * ----------
 */</comment>
<function><type><name>int</name></type>
<name>PGTYPESnumeric_add</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var1</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var2</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Decide on the signs of the two variables what to do
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>var1</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_POS</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>var2</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_POS</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Both are positive result = +(ABS(var1) + ABS(var2))
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>add_abs</name><argument_list>(<argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * var1 is positive, var2 is negative Must compare absolute values
			 */</comment>
			<switch>switch <condition>(<expr><call><name>cmp_abs</name><argument_list>(<argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><literal type="number">0</literal></expr>:</case>
					<comment type="block">/* ----------
					 * ABS(var1) == ABS(var2)
					 * result = ZERO
					 * ----------
					 */</comment>
					<expr_stmt><expr><call><name>zero_var</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>rscale</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>var1</name><operator>-&gt;</operator><name>rscale</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>rscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>dscale</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>var1</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><literal type="number">1</literal></expr>:</case>
					<comment type="block">/* ----------
					 * ABS(var1) &gt; ABS(var2)
					 * result = +(ABS(var1) - ABS(var2))
					 * ----------
					 */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>sub_abs</name><argument_list>(<argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
					<comment type="block">/* ----------
					 * ABS(var1) &lt; ABS(var2)
					 * result = -(ABS(var2) - ABS(var1))
					 * ----------
					 */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>sub_abs</name><argument_list>(<argument><expr><name>var2</name></expr></argument>, <argument><expr><name>var1</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_NEG</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>var2</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_POS</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* ----------
			 * var1 is negative, var2 is positive
			 * Must compare absolute values
			 * ----------
			 */</comment>
			<switch>switch <condition>(<expr><call><name>cmp_abs</name><argument_list>(<argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><literal type="number">0</literal></expr>:</case>
					<comment type="block">/* ----------
					 * ABS(var1) == ABS(var2)
					 * result = ZERO
					 * ----------
					 */</comment>
					<expr_stmt><expr><call><name>zero_var</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>rscale</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>var1</name><operator>-&gt;</operator><name>rscale</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>rscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>dscale</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>var1</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><literal type="number">1</literal></expr>:</case>
					<comment type="block">/* ----------
					 * ABS(var1) &gt; ABS(var2)
					 * result = -(ABS(var1) - ABS(var2))
					 * ----------
					 */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>sub_abs</name><argument_list>(<argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_NEG</name></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
					<comment type="block">/* ----------
					 * ABS(var1) &lt; ABS(var2)
					 * result = +(ABS(var2) - ABS(var1))
					 * ----------
					 */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>sub_abs</name><argument_list>(<argument><expr><name>var2</name></expr></argument>, <argument><expr><name>var1</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* ----------
			 * Both are negative
			 * result = -(ABS(var1) + ABS(var2))
			 * ----------
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>add_abs</name><argument_list>(<argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_NEG</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ----------
 * sub_var() -
 *
 *	Full version of sub functionality on variable level (handling signs).
 *	result might point to one of the operands too without danger.
 * ----------
 */</comment>
<function><type><name>int</name></type>
<name>PGTYPESnumeric_sub</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var1</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var2</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Decide on the signs of the two variables what to do
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>var1</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_POS</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>var2</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_NEG</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* ----------
			 * var1 is positive, var2 is negative
			 * result = +(ABS(var1) + ABS(var2))
			 * ----------
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>add_abs</name><argument_list>(<argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* ----------
			 * Both are positive
			 * Must compare absolute values
			 * ----------
			 */</comment>
			<switch>switch <condition>(<expr><call><name>cmp_abs</name><argument_list>(<argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><literal type="number">0</literal></expr>:</case>
					<comment type="block">/* ----------
					 * ABS(var1) == ABS(var2)
					 * result = ZERO
					 * ----------
					 */</comment>
					<expr_stmt><expr><call><name>zero_var</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>rscale</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>var1</name><operator>-&gt;</operator><name>rscale</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>rscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>dscale</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>var1</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><literal type="number">1</literal></expr>:</case>
					<comment type="block">/* ----------
					 * ABS(var1) &gt; ABS(var2)
					 * result = +(ABS(var1) - ABS(var2))
					 * ----------
					 */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>sub_abs</name><argument_list>(<argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
					<comment type="block">/* ----------
					 * ABS(var1) &lt; ABS(var2)
					 * result = -(ABS(var2) - ABS(var1))
					 * ----------
					 */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>sub_abs</name><argument_list>(<argument><expr><name>var2</name></expr></argument>, <argument><expr><name>var1</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_NEG</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>var2</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_NEG</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* ----------
			 * Both are negative
			 * Must compare absolute values
			 * ----------
			 */</comment>
			<switch>switch <condition>(<expr><call><name>cmp_abs</name><argument_list>(<argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><literal type="number">0</literal></expr>:</case>
					<comment type="block">/* ----------
					 * ABS(var1) == ABS(var2)
					 * result = ZERO
					 * ----------
					 */</comment>
					<expr_stmt><expr><call><name>zero_var</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>rscale</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>var1</name><operator>-&gt;</operator><name>rscale</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>rscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>dscale</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>var1</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><literal type="number">1</literal></expr>:</case>
					<comment type="block">/* ----------
					 * ABS(var1) &gt; ABS(var2)
					 * result = -(ABS(var1) - ABS(var2))
					 * ----------
					 */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>sub_abs</name><argument_list>(<argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_NEG</name></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
					<comment type="block">/* ----------
					 * ABS(var1) &lt; ABS(var2)
					 * result = +(ABS(var2) - ABS(var1))
					 * ----------
					 */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>sub_abs</name><argument_list>(<argument><expr><name>var2</name></expr></argument>, <argument><expr><name>var1</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* ----------
			 * var1 is negative, var2 is positive
			 * result = -(ABS(var1) + ABS(var2))
			 * ----------
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>add_abs</name><argument_list>(<argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_NEG</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------
 * mul_var() -
 *
 *	Multiplication on variable level. Product of var1 * var2 is stored
 *	in result.  Accuracy of result is determined by global_rscale.
 * ----------
 */</comment>
<function><type><name>int</name></type>
<name>PGTYPESnumeric_mul</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var1</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var2</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NumericDigit</name> <modifier>*</modifier></type><name>res_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NumericDigit</name> <modifier>*</modifier></type><name>res_digits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_ndigits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_weight</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_sign</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>ri</name></decl>,
				<decl><type ref="prev"/><name>i1</name></decl>,
				<decl><type ref="prev"/><name>i2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>global_rscale</name> <init>= <expr><name><name>var1</name><operator>-&gt;</operator><name>rscale</name></name> <operator>+</operator> <name><name>var2</name><operator>-&gt;</operator><name>rscale</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>res_weight</name> <operator>=</operator> <name><name>var1</name><operator>-&gt;</operator><name>weight</name></name> <operator>+</operator> <name><name>var2</name><operator>-&gt;</operator><name>weight</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>res_ndigits</name> <operator>=</operator> <name><name>var1</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>+</operator> <name><name>var2</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>var1</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name><name>var2</name><operator>-&gt;</operator><name>sign</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res_sign</name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>res_sign</name> <operator>=</operator> <name>NUMERIC_NEG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res_buf</name> <operator>=</operator> <call><name>digitbuf_alloc</name><argument_list>(<argument><expr><name>res_ndigits</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>res_digits</name> <operator>=</operator> <name>res_buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>res_digits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>res_ndigits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ri</name> <operator>=</operator> <name>res_ndigits</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i1</name> <operator>=</operator> <name><name>var1</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i1</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i1</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>--</operator><name>ri</name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i2</name> <operator>=</operator> <name><name>var2</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i2</name><operator>--</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>res_digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>var1</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>*</operator> <name><name>var2</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>res_digits</name><index>[<expr><name>i</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>sum</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>sum</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>res_digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>res_weight</name> <operator>+</operator> <name>global_rscale</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>res_ndigits</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>sum</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>res_digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>res_ndigits</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>sum</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>res_digits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>res_digits</name><index>[<expr><name>i</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>sum</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>sum</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>res_ndigits</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>res_digits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res_digits</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>res_weight</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>res_ndigits</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<while>while <condition>(<expr><name>res_ndigits</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>res_digits</name><index>[<expr><name>res_ndigits</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res_ndigits</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

	<if_stmt><if>if <condition>(<expr><name>res_ndigits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res_sign</name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>res_weight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>digitbuf_free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>res_buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>digits</name></name> <operator>=</operator> <name>res_digits</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>=</operator> <name>res_ndigits</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name>res_weight</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>rscale</name></name> <operator>=</operator> <name>global_rscale</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>res_sign</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>dscale</name></name> <operator>=</operator> <name><name>var1</name><operator>-&gt;</operator><name>dscale</name></name> <operator>+</operator> <name><name>var2</name><operator>-&gt;</operator><name>dscale</name></name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Default scale selection for division
 *
 * Returns the appropriate display scale for the division result,
 * and sets global_rscale to the result scale to use during div_var.
 *
 * Note that this must be called before div_var.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>select_div_scale</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var1</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>weight1</name></decl>,
				<decl><type ref="prev"/><name>weight2</name></decl>,
				<decl><type ref="prev"/><name>qweight</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NumericDigit</name></type> <name>firstdigit1</name></decl>,
				<decl><type ref="prev"/><name>firstdigit2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_dscale</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * The result scale of a division isn't specified in any SQL standard. For
	 * PostgreSQL we select a display scale that will give at least
	 * NUMERIC_MIN_SIG_DIGITS significant digits, so that numeric gives a
	 * result no less accurate than float8; but use a scale not less than
	 * either input's display scale.
	 */</comment>

	<comment type="block">/* Get the actual (normalized) weight and first digit of each input */</comment>

	<expr_stmt><expr><name>weight1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>				<comment type="block">/* values to use if var1 is zero */</comment>
	<expr_stmt><expr><name>firstdigit1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>var1</name><operator>-&gt;</operator><name>ndigits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>firstdigit1</name> <operator>=</operator> <name><name>var1</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>firstdigit1</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>weight1</name> <operator>=</operator> <name><name>var1</name><operator>-&gt;</operator><name>weight</name></name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>weight2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>				<comment type="block">/* values to use if var2 is zero */</comment>
	<expr_stmt><expr><name>firstdigit2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>var2</name><operator>-&gt;</operator><name>ndigits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>firstdigit2</name> <operator>=</operator> <name><name>var2</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>firstdigit2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>weight2</name> <operator>=</operator> <name><name>var2</name><operator>-&gt;</operator><name>weight</name></name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Estimate weight of quotient.  If the two first digits are equal, we
	 * can't be sure, but assume that var1 is less than var2.
	 */</comment>
	<expr_stmt><expr><name>qweight</name> <operator>=</operator> <name>weight1</name> <operator>-</operator> <name>weight2</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>firstdigit1</name> <operator>&lt;=</operator> <name>firstdigit2</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>qweight</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Select display scale */</comment>
	<expr_stmt><expr><name>res_dscale</name> <operator>=</operator> <name>NUMERIC_MIN_SIG_DIGITS</name> <operator>-</operator> <name>qweight</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res_dscale</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name>res_dscale</name></expr></argument>, <argument><expr><name><name>var1</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res_dscale</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name>res_dscale</name></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res_dscale</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name>res_dscale</name></expr></argument>, <argument><expr><name>NUMERIC_MIN_DISPLAY_SCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res_dscale</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>res_dscale</name></expr></argument>, <argument><expr><name>NUMERIC_MAX_DISPLAY_SCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Select result scale */</comment>
	<expr_stmt><expr><operator>*</operator><name>rscale</name> <operator>=</operator> <name>res_dscale</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

	<return>return <expr><name>res_dscale</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PGTYPESnumeric_div</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var1</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var2</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NumericDigit</name> <modifier>*</modifier></type><name>res_digits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_ndigits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_sign</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_weight</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>numeric</name></type>		<name>dividend</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>numeric</name></type>		<name><name>divisor</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ndigits_tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>weight_tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>rscale_tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ri</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>guess</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>first_have</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>first_div</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>first_nextdigit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>stat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>rscale</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_dscale</name> <init>= <expr><call><name>select_div_scale</name><argument_list>(<argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rscale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>err</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NumericDigit</name> <modifier>*</modifier></type><name>tmp_buf</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * First of all division by zero check
	 */</comment>
	<expr_stmt><expr><name>ndigits_tmp</name> <operator>=</operator> <name><name>var2</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ndigits_tmp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_DIVIDE_ZERO</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Determine the result sign, weight and number of digits to calculate
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>var1</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name><name>var2</name><operator>-&gt;</operator><name>sign</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res_sign</name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>res_sign</name> <operator>=</operator> <name>NUMERIC_NEG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name>res_weight</name> <operator>=</operator> <name><name>var1</name><operator>-&gt;</operator><name>weight</name></name> <operator>-</operator> <name><name>var2</name><operator>-&gt;</operator><name>weight</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>res_ndigits</name> <operator>=</operator> <name>rscale</name> <operator>+</operator> <name>res_weight</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res_ndigits</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res_ndigits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Now result zero check
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>var1</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>zero_var</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>rscale</name></name> <operator>=</operator> <name>rscale</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Initialize local variables
	 */</comment>
	<expr_stmt><expr><call><name>init_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dividend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>init_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>divisor</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/*
	 * Make a copy of the divisor which has one leading zero digit
	 */</comment>
	<expr_stmt><expr><name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ndigits</name> <operator>=</operator> <name>ndigits_tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rscale</name> <operator>=</operator> <name><name>var2</name><operator>-&gt;</operator><name>ndigits</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sign</name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buf</name> <operator>=</operator> <call><name>digitbuf_alloc</name><argument_list>(<argument><expr><name>ndigits_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>digits</name> <operator>=</operator> <name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>digits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>digits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name><name>var2</name><operator>-&gt;</operator><name>digits</name></name></expr></argument>, <argument><expr><name>ndigits_tmp</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Make a copy of the dividend
	 */</comment>
	<expr_stmt><expr><name><name>dividend</name><operator>.</operator><name>ndigits</name></name> <operator>=</operator> <name><name>var1</name><operator>-&gt;</operator><name>ndigits</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dividend</name><operator>.</operator><name>weight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dividend</name><operator>.</operator><name>rscale</name></name> <operator>=</operator> <name><name>var1</name><operator>-&gt;</operator><name>ndigits</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dividend</name><operator>.</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dividend</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>digitbuf_alloc</name><argument_list>(<argument><expr><name><name>var1</name><operator>-&gt;</operator><name>ndigits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dividend</name><operator>.</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>dividend</name><operator>.</operator><name>digits</name></name> <operator>=</operator> <name><name>dividend</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dividend</name><operator>.</operator><name>digits</name></name></expr></argument>, <argument><expr><name><name>var1</name><operator>-&gt;</operator><name>digits</name></name></expr></argument>, <argument><expr><name><name>var1</name><operator>-&gt;</operator><name>ndigits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Setup the result. Do the allocation in a temporary buffer first, so we
	 * don't free result-&gt;buf unless we have successfully allocated a buffer
	 * to replace it with.
	 */</comment>
	<expr_stmt><expr><name>tmp_buf</name> <operator>=</operator> <call><name>digitbuf_alloc</name><argument_list>(<argument><expr><name>res_ndigits</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tmp_buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>digitbuf_free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>tmp_buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res_digits</name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>digits</name></name> <operator>=</operator> <name>res_digits</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>=</operator> <name>res_ndigits</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name>res_weight</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>rscale</name></name> <operator>=</operator> <name>rscale</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>res_sign</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res_digits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>first_div</name> <operator>=</operator> <name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>digits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ndigits_tmp</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>first_div</name> <operator>+=</operator> <name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>digits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>first_have</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>first_nextdigit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>weight_tmp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rscale_tmp</name> <operator>=</operator> <name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rscale</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ri</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ri</name> <operator>&lt;=</operator> <name>res_ndigits</name></expr>;</condition> <incr><expr><name>ri</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>first_have</name> <operator>=</operator> <name>first_have</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>first_nextdigit</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>first_nextdigit</name> <operator>&lt;</operator> <name><name>dividend</name><operator>.</operator><name>ndigits</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>first_have</name> <operator>+=</operator> <name><name>dividend</name><operator>.</operator><name>digits</name><index>[<expr><name>first_nextdigit</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>first_nextdigit</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>guess</name> <operator>=</operator> <operator>(</operator><name>first_have</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>/</operator> <name>first_div</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>guess</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>guess</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<while>while <condition>(<expr><name>guess</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>divisor</name><index>[<expr><name>guess</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>long</name></type>		<name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>divisor</name><index>[<expr><name>guess</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>divisor</name><index>[<expr><name>guess</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>=</operator> <call><name>digitbuf_alloc</name><argument_list>(<argument><expr><name><name>divisor</name><index>[<expr><name>guess</name></expr>]</index></name><operator>.</operator><name>ndigits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>divisor</name><index>[<expr><name>guess</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>divisor</name><index>[<expr><name>guess</name></expr>]</index></name><operator>.</operator><name>digits</name> <operator>=</operator> <name><name>divisor</name><index>[<expr><name>guess</name></expr>]</index></name><operator>.</operator><name>buf</name></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ndigits</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>divisor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>guess</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>divisor</name><index>[<expr><name>guess</name></expr>]</index></name><operator>.</operator><name><name>digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sum</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>sum</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>divisor</name><index>[<expr><name>guess</name></expr>]</index></name><operator>.</operator><name>weight</name> <operator>=</operator> <name>weight_tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>divisor</name><index>[<expr><name>guess</name></expr>]</index></name><operator>.</operator><name>rscale</name> <operator>=</operator> <name>rscale_tmp</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>cmp_abs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dividend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>divisor</name><index>[<expr><name>guess</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>stat</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>guess</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><name><name>res_digits</name><index>[<expr><name>ri</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>guess</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>stat</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ri</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>weight_tmp</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>rscale_tmp</name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>guess</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>sub_abs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dividend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>divisor</name><index>[<expr><name>guess</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dividend</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>first_nextdigit</name> <operator>=</operator> <name><name>dividend</name><operator>.</operator><name>weight</name></name> <operator>-</operator> <name>weight_tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>first_have</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>first_nextdigit</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>first_nextdigit</name> <operator>&lt;</operator> <name><name>dividend</name><operator>.</operator><name>ndigits</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>first_have</name> <operator>=</operator> <name><name>dividend</name><operator>.</operator><name>digits</name><index>[<expr><name>first_nextdigit</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>first_nextdigit</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>=</operator> <name>ri</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ri</name> <operator>==</operator> <name>res_ndigits</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>carry</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>res_digits</name><index>[<expr><name>ri</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>=</operator> <name>ri</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>res_digits</name><index>[<expr><name>ri</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>carry</name> <operator>&amp;&amp;</operator> <name>ri</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>carry</name> <operator>+=</operator> <name><name>res_digits</name><index>[<expr><operator>--</operator><name>ri</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>res_digits</name><index>[<expr><name>ri</name></expr>]</index></name> <operator>=</operator> <name>carry</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>carry</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>digits</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>digits</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>weight</name></name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>ndigits</name></name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<while>while <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name><name>result</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>ndigits</name></name><operator>)</operator><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>dscale</name></name> <operator>=</operator> <name>res_dscale</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>					<comment type="block">/* if we've made it this far, return success */</comment>

<label><name>done</name>:</label>

	<comment type="block">/*
	 * Tidy up
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dividend</name><operator>.</operator><name>buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>digitbuf_free</name><argument_list>(<argument><expr><name><name>dividend</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>divisor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>digitbuf_free</name><argument_list>(<argument><expr><name><name>divisor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>PGTYPESnumeric_cmp</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var1</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* use cmp_abs function to calculate the result */</comment>

	<comment type="block">/* both are positive: normal comparison with cmp_abs */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>var1</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_POS</name> <operator>&amp;&amp;</operator> <name><name>var2</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_POS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>cmp_abs</name><argument_list>(<argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* both are negative: return the inverse of the normal comparison */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>var1</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_NEG</name> <operator>&amp;&amp;</operator> <name><name>var2</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_NEG</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * instead of inverting the result, we invert the parameter ordering
		 */</comment>
		<return>return <expr><call><name>cmp_abs</name><argument_list>(<argument><expr><name>var2</name></expr></argument>, <argument><expr><name>var1</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* one is positive, one is negative: trivial */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>var1</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_POS</name> <operator>&amp;&amp;</operator> <name><name>var2</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_NEG</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>var1</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_NEG</name> <operator>&amp;&amp;</operator> <name><name>var2</name><operator>-&gt;</operator><name>sign</name></name> <operator>==</operator> <name>NUMERIC_POS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_BAD_NUMERIC</name></expr>;</expr_stmt>
	<return>return <expr><name>INT_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PGTYPESnumeric_from_int</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>int</name></type> <name>int_val</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* implicit conversion */</comment>
	<decl_stmt><decl><type><name>signed</name> <name>long</name> <name>int</name></type> <name>long_int</name> <init>= <expr><name>int_val</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>PGTYPESnumeric_from_long</name><argument_list>(<argument><expr><name>long_int</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PGTYPESnumeric_from_long</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>int</name></type> <name>long_val</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* calculate the size of the long int number */</comment>
	<comment type="block">/* a number n needs log_10 n digits */</comment>

	<comment type="block">/*
	 * however we multiply by 10 each time and compare instead of calculating
	 * the logarithm
	 */</comment>

	<decl_stmt><decl><type><name>int</name></type>			<name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>signed</name> <name>long</name> <name>int</name></type> <name>abs_long_val</name> <init>= <expr><name>long_val</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>signed</name> <name>long</name> <name>int</name></type> <name>extract</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>signed</name> <name>long</name> <name>int</name></type> <name>reach_limit</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>abs_long_val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>abs_long_val</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_NEG</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>NUMERIC_POS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>reach_limit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>reach_limit</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>reach_limit</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>abs_long_val</name> <operator>&amp;&amp;</operator> <name>reach_limit</name> <operator>&lt;=</operator> <name>LONG_MAX</name> <operator>/</operator> <literal type="number">10</literal></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name>reach_limit</name> <operator>&gt;</operator> <name>LONG_MAX</name> <operator>/</operator> <literal type="number">10</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* add the first digit and a .0 */</comment>
		<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* always add a .0 */</comment>
		<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>reach_limit</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* POALR */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>alloc_var</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <name>reach_limit</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>rscale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>dscale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>extract</name> <operator>=</operator> <name>abs_long_val</name> <operator>-</operator> <operator>(</operator><name>abs_long_val</name> <operator>%</operator> <name>reach_limit</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>extract</name> <operator>/</operator> <name>reach_limit</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>abs_long_val</name> <operator>-=</operator> <name>extract</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>reach_limit</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * we can abandon if abs_long_val reaches 0, because the memory is
		 * initialized properly and filled with '0', so converting 10000 in
		 * only one step is no problem
		 */</comment>
	</block_content>}</block> while <condition>(<expr><name>abs_long_val</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PGTYPESnumeric_copy</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>zero_var</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>rscale</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>rscale</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>dscale</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>dscale</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>alloc_var</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>ndigits</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>ndigits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PGTYPESnumeric_from_double</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buffer</name><index>[<expr><name>DBL_DIG</name> <operator>+</operator> <literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>numeric</name>    <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%.*g"</literal></expr></argument>, <argument><expr><name>DBL_DIG</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>PGTYPESnumeric_from_asc</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPESnumeric_copy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>numericvar_to_double</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>numeric</name>    <modifier>*</modifier></type><name>varcopy</name> <init>= <expr><call><name>PGTYPESnumeric_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>varcopy</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PGTYPESnumeric_copy</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>varcopy</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>varcopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_str_from_var</name><argument_list>(<argument><expr><name>varcopy</name></expr></argument>, <argument><expr><name><name>varcopy</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>varcopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * strtod does not reset errno to 0 in case of success.
	 */</comment>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_UNDERFLOW</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_OVERFLOW</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* can't free tmp yet, endptr points still into it */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* shouldn't happen ... */</comment>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_BAD_NUMERIC</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>dp</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PGTYPESnumeric_to_double</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>nv</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>tmp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>numericvar_to_double</name><argument_list>(<argument><expr><name>nv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>dp</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PGTYPESnumeric_to_int</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>nv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type>		<name>l</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_long</name><argument_list>(<argument><expr><name>nv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>l</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><name>INT_MAX</name> <operator>||</operator> <name>l</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_OVERFLOW</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>l</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PGTYPESnumeric_to_long</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>nv</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name>nv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>lp</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>endptr</name> <operator>==</operator> <name>s</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* this should not happen actually */</comment>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>lp</name> <operator>==</operator> <name>LONG_MIN</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_UNDERFLOW</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_OVERFLOW</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PGTYPESnumeric_to_decimal</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>decimal</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>&gt;</operator> <name>DECSIZE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_NUM_OVERFLOW</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>rscale</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>rscale</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>dscale</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>dscale</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ndigits</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>ndigits</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>ndigits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PGTYPESnumeric_from_decimal</name><parameter_list>(<parameter><decl><type><name>decimal</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>zero_var</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>rscale</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>rscale</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>dscale</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>dscale</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>alloc_var</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>ndigits</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>ndigits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>digits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
