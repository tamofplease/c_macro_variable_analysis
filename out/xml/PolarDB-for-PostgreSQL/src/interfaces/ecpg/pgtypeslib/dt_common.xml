<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/interfaces/ecpg/pgtypeslib/dt_common.c"><comment type="block">/* src/interfaces/ecpg/pgtypeslib/dt_common.c */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_timestamp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type>			<name><name>day_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">31</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name>long</name></type> <name>AbsoluteTime</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>datetkn</name></type> <name><name>datetktbl</name><index>[]</index></name> <init>= <expr><block>{
<comment type="block">/*	text, token, lexval */</comment>
	<expr><block>{<expr><name>EARLY</name></expr>, <expr><name>RESERV</name></expr>, <expr><name>DTK_EARLY</name></expr>}</block></expr>, <comment type="block">/* "-infinity" reserved for "early time" */</comment>
	<expr><block>{<expr><literal type="string">"acsst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">37800</literal></expr>}</block></expr>,		<comment type="block">/* Cent. Australia */</comment>
	<expr><block>{<expr><literal type="string">"acst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">14400</literal></expr>}</block></expr>,		<comment type="block">/* Atlantic/Porto Acre */</comment>
	<expr><block>{<expr><literal type="string">"act"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">18000</literal></expr>}</block></expr>,		<comment type="block">/* Atlantic/Porto Acre */</comment>
	<expr><block>{<expr><name>DA_D</name></expr>, <expr><name>ADBC</name></expr>, <expr><name>AD</name></expr>}</block></expr>,			<comment type="block">/* "ad" for years &gt;= 0 */</comment>
	<expr><block>{<expr><literal type="string">"adt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">10800</literal></expr>}</block></expr>,		<comment type="block">/* Atlantic Daylight Time */</comment>
	<expr><block>{<expr><literal type="string">"aesst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">39600</literal></expr>}</block></expr>,		<comment type="block">/* E. Australia */</comment>
	<expr><block>{<expr><literal type="string">"aest"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">36000</literal></expr>}</block></expr>,		<comment type="block">/* Australia Eastern Std Time */</comment>
	<expr><block>{<expr><literal type="string">"aft"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">16200</literal></expr>}</block></expr>,			<comment type="block">/* Kabul */</comment>
	<expr><block>{<expr><literal type="string">"ahst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">36000</literal></expr>}</block></expr>,		<comment type="block">/* Alaska-Hawaii Std Time */</comment>
	<expr><block>{<expr><literal type="string">"akdt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">28800</literal></expr>}</block></expr>,		<comment type="block">/* Alaska Daylight Time */</comment>
	<expr><block>{<expr><literal type="string">"akst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">32400</literal></expr>}</block></expr>,		<comment type="block">/* Alaska Standard Time */</comment>
	<expr><block>{<expr><literal type="string">"allballs"</literal></expr>, <expr><name>RESERV</name></expr>, <expr><name>DTK_ZULU</name></expr>}</block></expr>, <comment type="block">/* 00:00:00 */</comment>
	<expr><block>{<expr><literal type="string">"almst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">25200</literal></expr>}</block></expr>,		<comment type="block">/* Almaty Savings Time */</comment>
	<expr><block>{<expr><literal type="string">"almt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">21600</literal></expr>}</block></expr>,		<comment type="block">/* Almaty Time */</comment>
	<expr><block>{<expr><literal type="string">"am"</literal></expr>, <expr><name>AMPM</name></expr>, <expr><name>AM</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"amst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">18000</literal></expr>}</block></expr>,		<comment type="block">/* Armenia Summer Time (Yerevan) */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	{"amst", DTZ, -10800},		<comment type="block">/* Porto Velho */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"amt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">14400</literal></expr>}</block></expr>,			<comment type="block">/* Armenia Time (Yerevan) */</comment>
	<expr><block>{<expr><literal type="string">"anast"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">46800</literal></expr>}</block></expr>,		<comment type="block">/* Anadyr Summer Time (Russia) */</comment>
	<expr><block>{<expr><literal type="string">"anat"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">43200</literal></expr>}</block></expr>,		<comment type="block">/* Anadyr Time (Russia) */</comment>
	<expr><block>{<expr><literal type="string">"apr"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"april"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	aqtst
	aqtt
	arst
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"art"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">10800</literal></expr>}</block></expr>,		<comment type="block">/* Argentina Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	ashst
	ast							<comment type="block">/* Atlantic Standard Time, Arabia Standard
								 * Time, Acre Standard Time */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"ast"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">14400</literal></expr>}</block></expr>,		<comment type="block">/* Atlantic Std Time (Canada) */</comment>
	<expr><block>{<expr><literal type="string">"at"</literal></expr>, <expr><name>IGNORE_DTF</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,		<comment type="block">/* "at" (throwaway) */</comment>
	<expr><block>{<expr><literal type="string">"aug"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"august"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"awsst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">32400</literal></expr>}</block></expr>,		<comment type="block">/* W. Australia */</comment>
	<expr><block>{<expr><literal type="string">"awst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">28800</literal></expr>}</block></expr>,		<comment type="block">/* W. Australia */</comment>
	<expr><block>{<expr><literal type="string">"awt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">10800</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"azost"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,			<comment type="block">/* Azores Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"azot"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">3600</literal></expr>}</block></expr>,		<comment type="block">/* Azores Time */</comment>
	<expr><block>{<expr><literal type="string">"azst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">18000</literal></expr>}</block></expr>,		<comment type="block">/* Azerbaijan Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"azt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">14400</literal></expr>}</block></expr>,			<comment type="block">/* Azerbaijan Time */</comment>
	<expr><block>{<expr><name>DB_C</name></expr>, <expr><name>ADBC</name></expr>, <expr><name>BC</name></expr>}</block></expr>,			<comment type="block">/* "bc" for years &lt; 0 */</comment>
	<expr><block>{<expr><literal type="string">"bdst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">7200</literal></expr>}</block></expr>,			<comment type="block">/* British Double Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"bdt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">21600</literal></expr>}</block></expr>,			<comment type="block">/* Dacca */</comment>
	<expr><block>{<expr><literal type="string">"bnt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">28800</literal></expr>}</block></expr>,			<comment type="block">/* Brunei Darussalam Time */</comment>
	<expr><block>{<expr><literal type="string">"bort"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">28800</literal></expr>}</block></expr>,		<comment type="block">/* Borneo Time (Indonesia) */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	bortst
	bost
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"bot"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">14400</literal></expr>}</block></expr>,		<comment type="block">/* Bolivia Time */</comment>
	<expr><block>{<expr><literal type="string">"bra"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">10800</literal></expr>}</block></expr>,		<comment type="block">/* Brazil Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	brst
	brt
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"bst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">3600</literal></expr>}</block></expr>,			<comment type="block">/* British Summer Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	{"bst", TZ, -10800},		<comment type="block">/* Brazil Standard Time */</comment>
	{"bst", DTZ, -39600},		<comment type="block">/* Bering Summer Time */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"bt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">10800</literal></expr>}</block></expr>,			<comment type="block">/* Baghdad Time */</comment>
	<expr><block>{<expr><literal type="string">"btt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">21600</literal></expr>}</block></expr>,			<comment type="block">/* Bhutan Time */</comment>
	<expr><block>{<expr><literal type="string">"cadt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">37800</literal></expr>}</block></expr>,		<comment type="block">/* Central Australian DST */</comment>
	<expr><block>{<expr><literal type="string">"cast"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">34200</literal></expr>}</block></expr>,		<comment type="block">/* Central Australian ST */</comment>
	<expr><block>{<expr><literal type="string">"cat"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">36000</literal></expr>}</block></expr>,		<comment type="block">/* Central Alaska Time */</comment>
	<expr><block>{<expr><literal type="string">"cct"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">28800</literal></expr>}</block></expr>,			<comment type="block">/* China Coast Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	{"cct", TZ, 23400},			<comment type="block">/* Indian Cocos (Island) Time */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"cdt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">18000</literal></expr>}</block></expr>,		<comment type="block">/* Central Daylight Time */</comment>
	<expr><block>{<expr><literal type="string">"cest"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">7200</literal></expr>}</block></expr>,		<comment type="block">/* Central European Dayl.Time */</comment>
	<expr><block>{<expr><literal type="string">"cet"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">3600</literal></expr>}</block></expr>,			<comment type="block">/* Central European Time */</comment>
	<expr><block>{<expr><literal type="string">"cetdst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">7200</literal></expr>}</block></expr>,		<comment type="block">/* Central European Dayl.Time */</comment>
	<expr><block>{<expr><literal type="string">"chadt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">49500</literal></expr>}</block></expr>,		<comment type="block">/* Chatham Island Daylight Time (13:45) */</comment>
	<expr><block>{<expr><literal type="string">"chast"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">45900</literal></expr>}</block></expr>,		<comment type="block">/* Chatham Island Time (12:45) */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	ckhst
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"ckt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">43200</literal></expr>}</block></expr>,			<comment type="block">/* Cook Islands Time */</comment>
	<expr><block>{<expr><literal type="string">"clst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">10800</literal></expr>}</block></expr>,		<comment type="block">/* Chile Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"clt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">14400</literal></expr>}</block></expr>,		<comment type="block">/* Chile Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	cost
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"cot"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">18000</literal></expr>}</block></expr>,		<comment type="block">/* Columbia Time */</comment>
	<expr><block>{<expr><literal type="string">"cst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">21600</literal></expr>}</block></expr>,		<comment type="block">/* Central Standard Time */</comment>
	<expr><block>{<expr><name>DCURRENT</name></expr>, <expr><name>RESERV</name></expr>, <expr><name>DTK_CURRENT</name></expr>}</block></expr>,	<comment type="block">/* "current" is always now */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	cvst
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"cvt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">25200</literal></expr>}</block></expr>,			<comment type="block">/* Christmas Island Time (Indian Ocean) */</comment>
	<expr><block>{<expr><literal type="string">"cxt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">25200</literal></expr>}</block></expr>,			<comment type="block">/* Christmas Island Time (Indian Ocean) */</comment>
	<expr><block>{<expr><literal type="string">"d"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_DAY</name></expr>}</block></expr>,		<comment type="block">/* "day of month" for ISO input */</comment>
	<expr><block>{<expr><literal type="string">"davt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">25200</literal></expr>}</block></expr>,		<comment type="block">/* Davis Time (Antarctica) */</comment>
	<expr><block>{<expr><literal type="string">"ddut"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">36000</literal></expr>}</block></expr>,		<comment type="block">/* Dumont-d'Urville Time (Antarctica) */</comment>
	<expr><block>{<expr><literal type="string">"dec"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"december"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"dnt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">3600</literal></expr>}</block></expr>,			<comment type="block">/* Dansk Normal Tid */</comment>
	<expr><block>{<expr><literal type="string">"dow"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_DOW</name></expr>}</block></expr>,	<comment type="block">/* day of week */</comment>
	<expr><block>{<expr><literal type="string">"doy"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_DOY</name></expr>}</block></expr>,	<comment type="block">/* day of year */</comment>
	<expr><block>{<expr><literal type="string">"dst"</literal></expr>, <expr><name>DTZMOD</name></expr>, <expr><name>SECS_PER_HOUR</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	{"dusst", DTZ, 21600},		<comment type="block">/* Dushanbe Summer Time */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"easst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">18000</literal></expr>}</block></expr>,		<comment type="block">/* Easter Island Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"east"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">21600</literal></expr>}</block></expr>,		<comment type="block">/* Easter Island Time */</comment>
	<expr><block>{<expr><literal type="string">"eat"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">10800</literal></expr>}</block></expr>,			<comment type="block">/* East Africa Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	{"east", DTZ, 14400},		<comment type="block">/* Indian Antananarivo Savings Time */</comment>
	{"eat", TZ, 10800},			<comment type="block">/* Indian Antananarivo Time */</comment>
	{"ect", TZ, -14400},		<comment type="block">/* Eastern Caribbean Time */</comment>
	{"ect", TZ, -18000},		<comment type="block">/* Ecuador Time */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"edt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">14400</literal></expr>}</block></expr>,		<comment type="block">/* Eastern Daylight Time */</comment>
	<expr><block>{<expr><literal type="string">"eest"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">10800</literal></expr>}</block></expr>,		<comment type="block">/* Eastern Europe Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"eet"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">7200</literal></expr>}</block></expr>,			<comment type="block">/* East. Europe, USSR Zone 1 */</comment>
	<expr><block>{<expr><literal type="string">"eetdst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">10800</literal></expr>}</block></expr>,		<comment type="block">/* Eastern Europe Daylight Time */</comment>
	<expr><block>{<expr><literal type="string">"egst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,			<comment type="block">/* East Greenland Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"egt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">3600</literal></expr>}</block></expr>,			<comment type="block">/* East Greenland Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	ehdt
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><name>EPOCH</name></expr>, <expr><name>RESERV</name></expr>, <expr><name>DTK_EPOCH</name></expr>}</block></expr>, <comment type="block">/* "epoch" reserved for system epoch time */</comment>
	<expr><block>{<expr><literal type="string">"est"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">18000</literal></expr>}</block></expr>,		<comment type="block">/* Eastern Standard Time */</comment>
	<expr><block>{<expr><literal type="string">"feb"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"february"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"fjst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">46800</literal></expr>}</block></expr>,		<comment type="block">/* Fiji Summer Time (13 hour offset!) */</comment>
	<expr><block>{<expr><literal type="string">"fjt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">43200</literal></expr>}</block></expr>,		<comment type="block">/* Fiji Time */</comment>
	<expr><block>{<expr><literal type="string">"fkst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">10800</literal></expr>}</block></expr>,		<comment type="block">/* Falkland Islands Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"fkt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">7200</literal></expr>}</block></expr>,			<comment type="block">/* Falkland Islands Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	fnst
	fnt
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"fri"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"friday"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"fst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">3600</literal></expr>}</block></expr>,			<comment type="block">/* French Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"fwt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">7200</literal></expr>}</block></expr>,			<comment type="block">/* French Winter Time  */</comment>
	<expr><block>{<expr><literal type="string">"galt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">21600</literal></expr>}</block></expr>,		<comment type="block">/* Galapagos Time */</comment>
	<expr><block>{<expr><literal type="string">"gamt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">32400</literal></expr>}</block></expr>,		<comment type="block">/* Gambier Time */</comment>
	<expr><block>{<expr><literal type="string">"gest"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">18000</literal></expr>}</block></expr>,		<comment type="block">/* Georgia Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"get"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">14400</literal></expr>}</block></expr>,			<comment type="block">/* Georgia Time */</comment>
	<expr><block>{<expr><literal type="string">"gft"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">10800</literal></expr>}</block></expr>,		<comment type="block">/* French Guiana Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	ghst
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"gilt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">43200</literal></expr>}</block></expr>,		<comment type="block">/* Gilbert Islands Time */</comment>
	<expr><block>{<expr><literal type="string">"gmt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,				<comment type="block">/* Greenwish Mean Time */</comment>
	<expr><block>{<expr><literal type="string">"gst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">36000</literal></expr>}</block></expr>,			<comment type="block">/* Guam Std Time, USSR Zone 9 */</comment>
	<expr><block>{<expr><literal type="string">"gyt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">14400</literal></expr>}</block></expr>,		<comment type="block">/* Guyana Time */</comment>
	<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_HOUR</name></expr>}</block></expr>,		<comment type="block">/* "hour" */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	hadt
	hast
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"hdt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">32400</literal></expr>}</block></expr>,		<comment type="block">/* Hawaii/Alaska Daylight Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	hkst
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"hkt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">28800</literal></expr>}</block></expr>,			<comment type="block">/* Hong Kong Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	{"hmt", TZ, 10800},			<comment type="block">/* Hellas ? ? */</comment>
	hovst
	hovt
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"hst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">36000</literal></expr>}</block></expr>,		<comment type="block">/* Hawaii Std Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	hwt
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"ict"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">25200</literal></expr>}</block></expr>,			<comment type="block">/* Indochina Time */</comment>
	<expr><block>{<expr><literal type="string">"idle"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">43200</literal></expr>}</block></expr>,		<comment type="block">/* Intl. Date Line, East */</comment>
	<expr><block>{<expr><literal type="string">"idlw"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">43200</literal></expr>}</block></expr>,		<comment type="block">/* Intl. Date Line, West */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	idt							<comment type="block">/* Israeli, Iran, Indian Daylight Time */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><name>LATE</name></expr>, <expr><name>RESERV</name></expr>, <expr><name>DTK_LATE</name></expr>}</block></expr>,	<comment type="block">/* "infinity" reserved for "late time" */</comment>
	<expr><block>{<expr><name>INVALID</name></expr>, <expr><name>RESERV</name></expr>, <expr><name>DTK_INVALID</name></expr>}</block></expr>, <comment type="block">/* "invalid" reserved for bad time */</comment>
	<expr><block>{<expr><literal type="string">"iot"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">18000</literal></expr>}</block></expr>,			<comment type="block">/* Indian Chagos Time */</comment>
	<expr><block>{<expr><literal type="string">"irkst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">32400</literal></expr>}</block></expr>,		<comment type="block">/* Irkutsk Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"irkt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">28800</literal></expr>}</block></expr>,		<comment type="block">/* Irkutsk Time */</comment>
	<expr><block>{<expr><literal type="string">"irt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">12600</literal></expr>}</block></expr>,			<comment type="block">/* Iran Time */</comment>
	<expr><block>{<expr><literal type="string">"isodow"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_ISODOW</name></expr>}</block></expr>,	<comment type="block">/* ISO day of week, Sunday == 7 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	isst
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"ist"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">7200</literal></expr>}</block></expr>,			<comment type="block">/* Israel */</comment>
	<expr><block>{<expr><literal type="string">"it"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">12600</literal></expr>}</block></expr>,			<comment type="block">/* Iran Time */</comment>
	<expr><block>{<expr><literal type="string">"j"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_JULIAN</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"jan"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"january"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"javt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">25200</literal></expr>}</block></expr>,		<comment type="block">/* Java Time (07:00? see JT) */</comment>
	<expr><block>{<expr><literal type="string">"jayt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">32400</literal></expr>}</block></expr>,		<comment type="block">/* Jayapura Time (Indonesia) */</comment>
	<expr><block>{<expr><literal type="string">"jd"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_JULIAN</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"jst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">32400</literal></expr>}</block></expr>,			<comment type="block">/* Japan Std Time,USSR Zone 8 */</comment>
	<expr><block>{<expr><literal type="string">"jt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">27000</literal></expr>}</block></expr>,			<comment type="block">/* Java Time (07:30? see JAVT) */</comment>
	<expr><block>{<expr><literal type="string">"jul"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"julian"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_JULIAN</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"july"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"jun"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"june"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"kdt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">36000</literal></expr>}</block></expr>,		<comment type="block">/* Korea Daylight Time */</comment>
	<expr><block>{<expr><literal type="string">"kgst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">21600</literal></expr>}</block></expr>,		<comment type="block">/* Kyrgyzstan Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"kgt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">18000</literal></expr>}</block></expr>,			<comment type="block">/* Kyrgyzstan Time */</comment>
	<expr><block>{<expr><literal type="string">"kost"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">43200</literal></expr>}</block></expr>,		<comment type="block">/* Kosrae Time */</comment>
	<expr><block>{<expr><literal type="string">"krast"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">25200</literal></expr>}</block></expr>,		<comment type="block">/* Krasnoyarsk Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"krat"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">28800</literal></expr>}</block></expr>,		<comment type="block">/* Krasnoyarsk Standard Time */</comment>
	<expr><block>{<expr><literal type="string">"kst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">32400</literal></expr>}</block></expr>,			<comment type="block">/* Korea Standard Time */</comment>
	<expr><block>{<expr><literal type="string">"lhdt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">39600</literal></expr>}</block></expr>,		<comment type="block">/* Lord Howe Daylight Time, Australia */</comment>
	<expr><block>{<expr><literal type="string">"lhst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">37800</literal></expr>}</block></expr>,		<comment type="block">/* Lord Howe Standard Time, Australia */</comment>
	<expr><block>{<expr><literal type="string">"ligt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">36000</literal></expr>}</block></expr>,		<comment type="block">/* From Melbourne, Australia */</comment>
	<expr><block>{<expr><literal type="string">"lint"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">50400</literal></expr>}</block></expr>,		<comment type="block">/* Line Islands Time (Kiribati; +14 hours!) */</comment>
	<expr><block>{<expr><literal type="string">"lkt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">21600</literal></expr>}</block></expr>,			<comment type="block">/* Lanka Time */</comment>
	<expr><block>{<expr><literal type="string">"m"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MONTH</name></expr>}</block></expr>,	<comment type="block">/* "month" for ISO input */</comment>
	<expr><block>{<expr><literal type="string">"magst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">43200</literal></expr>}</block></expr>,		<comment type="block">/* Magadan Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"magt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">39600</literal></expr>}</block></expr>,		<comment type="block">/* Magadan Time */</comment>
	<expr><block>{<expr><literal type="string">"mar"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"march"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"mart"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">34200</literal></expr>}</block></expr>,		<comment type="block">/* Marquesas Time */</comment>
	<expr><block>{<expr><literal type="string">"mawt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">21600</literal></expr>}</block></expr>,		<comment type="block">/* Mawson, Antarctica */</comment>
	<expr><block>{<expr><literal type="string">"may"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"mdt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">21600</literal></expr>}</block></expr>,		<comment type="block">/* Mountain Daylight Time */</comment>
	<expr><block>{<expr><literal type="string">"mest"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">7200</literal></expr>}</block></expr>,		<comment type="block">/* Middle Europe Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"met"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">3600</literal></expr>}</block></expr>,			<comment type="block">/* Middle Europe Time */</comment>
	<expr><block>{<expr><literal type="string">"metdst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">7200</literal></expr>}</block></expr>,		<comment type="block">/* Middle Europe Daylight Time */</comment>
	<expr><block>{<expr><literal type="string">"mewt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">3600</literal></expr>}</block></expr>,			<comment type="block">/* Middle Europe Winter Time */</comment>
	<expr><block>{<expr><literal type="string">"mez"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">3600</literal></expr>}</block></expr>,			<comment type="block">/* Middle Europe Zone */</comment>
	<expr><block>{<expr><literal type="string">"mht"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">43200</literal></expr>}</block></expr>,			<comment type="block">/* Kwajalein */</comment>
	<expr><block>{<expr><literal type="string">"mm"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MINUTE</name></expr>}</block></expr>,	<comment type="block">/* "minute" for ISO input */</comment>
	<expr><block>{<expr><literal type="string">"mmt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">23400</literal></expr>}</block></expr>,			<comment type="block">/* Myannar Time */</comment>
	<expr><block>{<expr><literal type="string">"mon"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"monday"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	most
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"mpt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">36000</literal></expr>}</block></expr>,			<comment type="block">/* North Mariana Islands Time */</comment>
	<expr><block>{<expr><literal type="string">"msd"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">14400</literal></expr>}</block></expr>,		<comment type="block">/* Moscow Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"msk"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">10800</literal></expr>}</block></expr>,			<comment type="block">/* Moscow Time */</comment>
	<expr><block>{<expr><literal type="string">"mst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">25200</literal></expr>}</block></expr>,		<comment type="block">/* Mountain Standard Time */</comment>
	<expr><block>{<expr><literal type="string">"mt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">30600</literal></expr>}</block></expr>,			<comment type="block">/* Moluccas Time */</comment>
	<expr><block>{<expr><literal type="string">"mut"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">14400</literal></expr>}</block></expr>,			<comment type="block">/* Mauritius Island Time */</comment>
	<expr><block>{<expr><literal type="string">"mvt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">18000</literal></expr>}</block></expr>,			<comment type="block">/* Maldives Island Time */</comment>
	<expr><block>{<expr><literal type="string">"myt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">28800</literal></expr>}</block></expr>,			<comment type="block">/* Malaysia Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	ncst
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"nct"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">39600</literal></expr>}</block></expr>,			<comment type="block">/* New Caledonia Time */</comment>
	<expr><block>{<expr><literal type="string">"ndt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">9000</literal></expr>}</block></expr>,		<comment type="block">/* Nfld. Daylight Time */</comment>
	<expr><block>{<expr><literal type="string">"nft"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">12600</literal></expr>}</block></expr>,		<comment type="block">/* Newfoundland Standard Time */</comment>
	<expr><block>{<expr><literal type="string">"nor"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">3600</literal></expr>}</block></expr>,			<comment type="block">/* Norway Standard Time */</comment>
	<expr><block>{<expr><literal type="string">"nov"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"november"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"novst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">25200</literal></expr>}</block></expr>,		<comment type="block">/* Novosibirsk Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"novt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">21600</literal></expr>}</block></expr>,		<comment type="block">/* Novosibirsk Standard Time */</comment>
	<expr><block>{<expr><name>NOW</name></expr>, <expr><name>RESERV</name></expr>, <expr><name>DTK_NOW</name></expr>}</block></expr>,		<comment type="block">/* current transaction time */</comment>
	<expr><block>{<expr><literal type="string">"npt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">20700</literal></expr>}</block></expr>,			<comment type="block">/* Nepal Standard Time (GMT-5:45) */</comment>
	<expr><block>{<expr><literal type="string">"nst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">12600</literal></expr>}</block></expr>,		<comment type="block">/* Nfld. Standard Time */</comment>
	<expr><block>{<expr><literal type="string">"nt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">39600</literal></expr>}</block></expr>,			<comment type="block">/* Nome Time */</comment>
	<expr><block>{<expr><literal type="string">"nut"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">39600</literal></expr>}</block></expr>,		<comment type="block">/* Niue Time */</comment>
	<expr><block>{<expr><literal type="string">"nzdt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">46800</literal></expr>}</block></expr>,		<comment type="block">/* New Zealand Daylight Time */</comment>
	<expr><block>{<expr><literal type="string">"nzst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">43200</literal></expr>}</block></expr>,		<comment type="block">/* New Zealand Standard Time */</comment>
	<expr><block>{<expr><literal type="string">"nzt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">43200</literal></expr>}</block></expr>,			<comment type="block">/* New Zealand Time */</comment>
	<expr><block>{<expr><literal type="string">"oct"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"october"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"omsst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">25200</literal></expr>}</block></expr>,		<comment type="block">/* Omsk Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"omst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">21600</literal></expr>}</block></expr>,		<comment type="block">/* Omsk Time */</comment>
	<expr><block>{<expr><literal type="string">"on"</literal></expr>, <expr><name>IGNORE_DTF</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,		<comment type="block">/* "on" (throwaway) */</comment>
	<expr><block>{<expr><literal type="string">"pdt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">25200</literal></expr>}</block></expr>,		<comment type="block">/* Pacific Daylight Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	pest
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"pet"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">18000</literal></expr>}</block></expr>,		<comment type="block">/* Peru Time */</comment>
	<expr><block>{<expr><literal type="string">"petst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">46800</literal></expr>}</block></expr>,		<comment type="block">/* Petropavlovsk-Kamchatski Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"pett"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">43200</literal></expr>}</block></expr>,		<comment type="block">/* Petropavlovsk-Kamchatski Time */</comment>
	<expr><block>{<expr><literal type="string">"pgt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">36000</literal></expr>}</block></expr>,			<comment type="block">/* Papua New Guinea Time */</comment>
	<expr><block>{<expr><literal type="string">"phot"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">46800</literal></expr>}</block></expr>,		<comment type="block">/* Phoenix Islands (Kiribati) Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	phst
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"pht"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">28800</literal></expr>}</block></expr>,			<comment type="block">/* Philippine Time */</comment>
	<expr><block>{<expr><literal type="string">"pkt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">18000</literal></expr>}</block></expr>,			<comment type="block">/* Pakistan Time */</comment>
	<expr><block>{<expr><literal type="string">"pm"</literal></expr>, <expr><name>AMPM</name></expr>, <expr><name>PM</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"pmdt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">7200</literal></expr>}</block></expr>,		<comment type="block">/* Pierre &amp; Miquelon Daylight Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	pmst
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"pont"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">39600</literal></expr>}</block></expr>,		<comment type="block">/* Ponape Time (Micronesia) */</comment>
	<expr><block>{<expr><literal type="string">"pst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">28800</literal></expr>}</block></expr>,		<comment type="block">/* Pacific Standard Time */</comment>
	<expr><block>{<expr><literal type="string">"pwt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">32400</literal></expr>}</block></expr>,			<comment type="block">/* Palau Time */</comment>
	<expr><block>{<expr><literal type="string">"pyst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">10800</literal></expr>}</block></expr>,		<comment type="block">/* Paraguay Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"pyt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">14400</literal></expr>}</block></expr>,		<comment type="block">/* Paraguay Time */</comment>
	<expr><block>{<expr><literal type="string">"ret"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">14400</literal></expr>}</block></expr>,		<comment type="block">/* Reunion Island Time */</comment>
	<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_SECOND</name></expr>}</block></expr>,	<comment type="block">/* "seconds" for ISO input */</comment>
	<expr><block>{<expr><literal type="string">"sadt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">37800</literal></expr>}</block></expr>,		<comment type="block">/* S. Australian Dayl. Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	samst
	samt
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"sast"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">34200</literal></expr>}</block></expr>,		<comment type="block">/* South Australian Std Time */</comment>
	<expr><block>{<expr><literal type="string">"sat"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"saturday"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	sbt
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"sct"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">14400</literal></expr>}</block></expr>,		<comment type="block">/* Mahe Island Time */</comment>
	<expr><block>{<expr><literal type="string">"sep"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"sept"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"september"</literal></expr>, <expr><name>MONTH</name></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"set"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">3600</literal></expr>}</block></expr>,			<comment type="block">/* Seychelles Time ?? */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	sgt
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"sst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">7200</literal></expr>}</block></expr>,			<comment type="block">/* Swedish Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"sun"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"sunday"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"swt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">3600</literal></expr>}</block></expr>,			<comment type="block">/* Swedish Winter Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	syot
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"t"</literal></expr>, <expr><name>ISOTIME</name></expr>, <expr><name>DTK_TIME</name></expr>}</block></expr>,	<comment type="block">/* Filler for ISO time fields */</comment>
	<expr><block>{<expr><literal type="string">"tft"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">18000</literal></expr>}</block></expr>,			<comment type="block">/* Kerguelen Time */</comment>
	<expr><block>{<expr><literal type="string">"that"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">36000</literal></expr>}</block></expr>,		<comment type="block">/* Tahiti Time */</comment>
	<expr><block>{<expr><literal type="string">"thu"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"thur"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"thurs"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"thursday"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"tjt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">18000</literal></expr>}</block></expr>,			<comment type="block">/* Tajikistan Time */</comment>
	<expr><block>{<expr><literal type="string">"tkt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">36000</literal></expr>}</block></expr>,		<comment type="block">/* Tokelau Time */</comment>
	<expr><block>{<expr><literal type="string">"tmt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">18000</literal></expr>}</block></expr>,			<comment type="block">/* Turkmenistan Time */</comment>
	<expr><block>{<expr><name>TODAY</name></expr>, <expr><name>RESERV</name></expr>, <expr><name>DTK_TODAY</name></expr>}</block></expr>, <comment type="block">/* midnight */</comment>
	<expr><block>{<expr><name>TOMORROW</name></expr>, <expr><name>RESERV</name></expr>, <expr><name>DTK_TOMORROW</name></expr>}</block></expr>,	<comment type="block">/* tomorrow midnight */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	tost
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"tot"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">46800</literal></expr>}</block></expr>,			<comment type="block">/* Tonga Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	tpt
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"truk"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">36000</literal></expr>}</block></expr>,		<comment type="block">/* Truk Time */</comment>
	<expr><block>{<expr><literal type="string">"tue"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"tues"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"tuesday"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"tvt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">43200</literal></expr>}</block></expr>,			<comment type="block">/* Tuvalu Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	uct
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"ulast"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">32400</literal></expr>}</block></expr>,		<comment type="block">/* Ulan Bator Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"ulat"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">28800</literal></expr>}</block></expr>,		<comment type="block">/* Ulan Bator Time */</comment>
	<expr><block>{<expr><literal type="string">"undefined"</literal></expr>, <expr><name>RESERV</name></expr>, <expr><name>DTK_INVALID</name></expr>}</block></expr>, <comment type="block">/* pre-v6.1 invalid time */</comment>
	<expr><block>{<expr><literal type="string">"ut"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"utc"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"uyst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">7200</literal></expr>}</block></expr>,		<comment type="block">/* Uruguay Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"uyt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">10800</literal></expr>}</block></expr>,		<comment type="block">/* Uruguay Time */</comment>
	<expr><block>{<expr><literal type="string">"uzst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">21600</literal></expr>}</block></expr>,		<comment type="block">/* Uzbekistan Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"uzt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">18000</literal></expr>}</block></expr>,			<comment type="block">/* Uzbekistan Time */</comment>
	<expr><block>{<expr><literal type="string">"vet"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">14400</literal></expr>}</block></expr>,		<comment type="block">/* Venezuela Time */</comment>
	<expr><block>{<expr><literal type="string">"vlast"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">39600</literal></expr>}</block></expr>,		<comment type="block">/* Vladivostok Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"vlat"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">36000</literal></expr>}</block></expr>,		<comment type="block">/* Vladivostok Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	vust
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"vut"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">39600</literal></expr>}</block></expr>,			<comment type="block">/* Vanuata Time */</comment>
	<expr><block>{<expr><literal type="string">"wadt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">28800</literal></expr>}</block></expr>,		<comment type="block">/* West Australian DST */</comment>
	<expr><block>{<expr><literal type="string">"wakt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">43200</literal></expr>}</block></expr>,		<comment type="block">/* Wake Time */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	warst
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="string">"wast"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">25200</literal></expr>}</block></expr>,		<comment type="block">/* West Australian Std Time */</comment>
	<expr><block>{<expr><literal type="string">"wat"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">3600</literal></expr>}</block></expr>,			<comment type="block">/* West Africa Time */</comment>
	<expr><block>{<expr><literal type="string">"wdt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">32400</literal></expr>}</block></expr>,		<comment type="block">/* West Australian DST */</comment>
	<expr><block>{<expr><literal type="string">"wed"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"wednesday"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"weds"</literal></expr>, <expr><name>DOW</name></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"west"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">3600</literal></expr>}</block></expr>,		<comment type="block">/* Western Europe Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"wet"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,				<comment type="block">/* Western Europe */</comment>
	<expr><block>{<expr><literal type="string">"wetdst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">3600</literal></expr>}</block></expr>,		<comment type="block">/* Western Europe Daylight Savings Time */</comment>
	<expr><block>{<expr><literal type="string">"wft"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">43200</literal></expr>}</block></expr>,			<comment type="block">/* Wallis and Futuna Time */</comment>
	<expr><block>{<expr><literal type="string">"wgst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">7200</literal></expr>}</block></expr>,		<comment type="block">/* West Greenland Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"wgt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">10800</literal></expr>}</block></expr>,		<comment type="block">/* West Greenland Time */</comment>
	<expr><block>{<expr><literal type="string">"wst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">28800</literal></expr>}</block></expr>,			<comment type="block">/* West Australian Standard Time */</comment>
	<expr><block>{<expr><literal type="string">"y"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_YEAR</name></expr>}</block></expr>,		<comment type="block">/* "year" for ISO input */</comment>
	<expr><block>{<expr><literal type="string">"yakst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">36000</literal></expr>}</block></expr>,		<comment type="block">/* Yakutsk Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"yakt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">32400</literal></expr>}</block></expr>,		<comment type="block">/* Yakutsk Time */</comment>
	<expr><block>{<expr><literal type="string">"yapt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">36000</literal></expr>}</block></expr>,		<comment type="block">/* Yap Time (Micronesia) */</comment>
	<expr><block>{<expr><literal type="string">"ydt"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><operator>-</operator><literal type="number">28800</literal></expr>}</block></expr>,		<comment type="block">/* Yukon Daylight Time */</comment>
	<expr><block>{<expr><literal type="string">"yekst"</literal></expr>, <expr><name>DTZ</name></expr>, <expr><literal type="number">21600</literal></expr>}</block></expr>,		<comment type="block">/* Yekaterinburg Summer Time */</comment>
	<expr><block>{<expr><literal type="string">"yekt"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">18000</literal></expr>}</block></expr>,		<comment type="block">/* Yekaterinburg Time */</comment>
	<expr><block>{<expr><name>YESTERDAY</name></expr>, <expr><name>RESERV</name></expr>, <expr><name>DTK_YESTERDAY</name></expr>}</block></expr>, <comment type="block">/* yesterday midnight */</comment>
	<expr><block>{<expr><literal type="string">"yst"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">32400</literal></expr>}</block></expr>,		<comment type="block">/* Yukon Standard Time */</comment>
	<expr><block>{<expr><literal type="string">"z"</literal></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,				<comment type="block">/* time zone tag per ISO-8601 */</comment>
	<expr><block>{<expr><literal type="string">"zp4"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">14400</literal></expr>}</block></expr>,		<comment type="block">/* UTC +4  hours. */</comment>
	<expr><block>{<expr><literal type="string">"zp5"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">18000</literal></expr>}</block></expr>,		<comment type="block">/* UTC +5  hours. */</comment>
	<expr><block>{<expr><literal type="string">"zp6"</literal></expr>, <expr><name>TZ</name></expr>, <expr><operator>-</operator><literal type="number">21600</literal></expr>}</block></expr>,		<comment type="block">/* UTC +6  hours. */</comment>
	<expr><block>{<expr><name>ZULU</name></expr>, <expr><name>TZ</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,				<comment type="block">/* UTC */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>datetkn</name></type> <name><name>deltatktbl</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* text, token, lexval */</comment>
	<expr><block>{<expr><literal type="string">"@"</literal></expr>, <expr><name>IGNORE_DTF</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,		<comment type="block">/* postgres relative prefix */</comment>
	<expr><block>{<expr><name>DAGO</name></expr>, <expr><name>AGO</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,				<comment type="block">/* "ago" indicates negative time offset */</comment>
	<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_CENTURY</name></expr>}</block></expr>,	<comment type="block">/* "century" relative */</comment>
	<expr><block>{<expr><literal type="string">"cent"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_CENTURY</name></expr>}</block></expr>,	<comment type="block">/* "century" relative */</comment>
	<expr><block>{<expr><literal type="string">"centuries"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_CENTURY</name></expr>}</block></expr>,	<comment type="block">/* "centuries" relative */</comment>
	<expr><block>{<expr><name>DCENTURY</name></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_CENTURY</name></expr>}</block></expr>, <comment type="block">/* "century" relative */</comment>
	<expr><block>{<expr><literal type="string">"d"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_DAY</name></expr>}</block></expr>,		<comment type="block">/* "day" relative */</comment>
	<expr><block>{<expr><name>DDAY</name></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_DAY</name></expr>}</block></expr>,		<comment type="block">/* "day" relative */</comment>
	<expr><block>{<expr><literal type="string">"days"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_DAY</name></expr>}</block></expr>,	<comment type="block">/* "days" relative */</comment>
	<expr><block>{<expr><literal type="string">"dec"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_DECADE</name></expr>}</block></expr>, <comment type="block">/* "decade" relative */</comment>
	<expr><block>{<expr><name>DDECADE</name></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_DECADE</name></expr>}</block></expr>,	<comment type="block">/* "decade" relative */</comment>
	<expr><block>{<expr><literal type="string">"decades"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_DECADE</name></expr>}</block></expr>, <comment type="block">/* "decades" relative */</comment>
	<expr><block>{<expr><literal type="string">"decs"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_DECADE</name></expr>}</block></expr>,	<comment type="block">/* "decades" relative */</comment>
	<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_HOUR</name></expr>}</block></expr>,		<comment type="block">/* "hour" relative */</comment>
	<expr><block>{<expr><name>DHOUR</name></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_HOUR</name></expr>}</block></expr>,	<comment type="block">/* "hour" relative */</comment>
	<expr><block>{<expr><literal type="string">"hours"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_HOUR</name></expr>}</block></expr>, <comment type="block">/* "hours" relative */</comment>
	<expr><block>{<expr><literal type="string">"hr"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_HOUR</name></expr>}</block></expr>,	<comment type="block">/* "hour" relative */</comment>
	<expr><block>{<expr><literal type="string">"hrs"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_HOUR</name></expr>}</block></expr>,	<comment type="block">/* "hours" relative */</comment>
	<expr><block>{<expr><name>INVALID</name></expr>, <expr><name>RESERV</name></expr>, <expr><name>DTK_INVALID</name></expr>}</block></expr>, <comment type="block">/* reserved for invalid time */</comment>
	<expr><block>{<expr><literal type="string">"m"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MINUTE</name></expr>}</block></expr>,	<comment type="block">/* "minute" relative */</comment>
	<expr><block>{<expr><literal type="string">"microsecon"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MICROSEC</name></expr>}</block></expr>,	<comment type="block">/* "microsecond" relative */</comment>
	<expr><block>{<expr><literal type="string">"mil"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MILLENNIUM</name></expr>}</block></expr>, <comment type="block">/* "millennium" relative */</comment>
	<expr><block>{<expr><literal type="string">"millennia"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MILLENNIUM</name></expr>}</block></expr>,	<comment type="block">/* "millennia" relative */</comment>
	<expr><block>{<expr><name>DMILLENNIUM</name></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MILLENNIUM</name></expr>}</block></expr>,	<comment type="block">/* "millennium" relative */</comment>
	<expr><block>{<expr><literal type="string">"millisecon"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MILLISEC</name></expr>}</block></expr>,	<comment type="block">/* relative */</comment>
	<expr><block>{<expr><literal type="string">"mils"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MILLENNIUM</name></expr>}</block></expr>,	<comment type="block">/* "millennia" relative */</comment>
	<expr><block>{<expr><literal type="string">"min"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MINUTE</name></expr>}</block></expr>, <comment type="block">/* "minute" relative */</comment>
	<expr><block>{<expr><literal type="string">"mins"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MINUTE</name></expr>}</block></expr>,	<comment type="block">/* "minutes" relative */</comment>
	<expr><block>{<expr><name>DMINUTE</name></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MINUTE</name></expr>}</block></expr>,	<comment type="block">/* "minute" relative */</comment>
	<expr><block>{<expr><literal type="string">"minutes"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MINUTE</name></expr>}</block></expr>, <comment type="block">/* "minutes" relative */</comment>
	<expr><block>{<expr><literal type="string">"mon"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MONTH</name></expr>}</block></expr>,	<comment type="block">/* "months" relative */</comment>
	<expr><block>{<expr><literal type="string">"mons"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MONTH</name></expr>}</block></expr>, <comment type="block">/* "months" relative */</comment>
	<expr><block>{<expr><name>DMONTH</name></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MONTH</name></expr>}</block></expr>, <comment type="block">/* "month" relative */</comment>
	<expr><block>{<expr><literal type="string">"months"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MONTH</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"ms"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MILLISEC</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"msec"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MILLISEC</name></expr>}</block></expr>,
	<expr><block>{<expr><name>DMILLISEC</name></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MILLISEC</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"mseconds"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MILLISEC</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"msecs"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MILLISEC</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"qtr"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_QUARTER</name></expr>}</block></expr>,	<comment type="block">/* "quarter" relative */</comment>
	<expr><block>{<expr><name>DQUARTER</name></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_QUARTER</name></expr>}</block></expr>, <comment type="block">/* "quarter" relative */</comment>
	<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_SECOND</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"sec"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_SECOND</name></expr>}</block></expr>,
	<expr><block>{<expr><name>DSECOND</name></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_SECOND</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"seconds"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_SECOND</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"secs"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_SECOND</name></expr>}</block></expr>,
	<expr><block>{<expr><name>DTIMEZONE</name></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_TZ</name></expr>}</block></expr>, <comment type="block">/* "timezone" time offset */</comment>
	<expr><block>{<expr><literal type="string">"timezone_h"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_TZ_HOUR</name></expr>}</block></expr>, <comment type="block">/* timezone hour units */</comment>
	<expr><block>{<expr><literal type="string">"timezone_m"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_TZ_MINUTE</name></expr>}</block></expr>,	<comment type="block">/* timezone minutes units */</comment>
	<expr><block>{<expr><literal type="string">"undefined"</literal></expr>, <expr><name>RESERV</name></expr>, <expr><name>DTK_INVALID</name></expr>}</block></expr>, <comment type="block">/* pre-v6.1 invalid time */</comment>
	<expr><block>{<expr><literal type="string">"us"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MICROSEC</name></expr>}</block></expr>,	<comment type="block">/* "microsecond" relative */</comment>
	<expr><block>{<expr><literal type="string">"usec"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MICROSEC</name></expr>}</block></expr>,	<comment type="block">/* "microsecond" relative */</comment>
	<expr><block>{<expr><name>DMICROSEC</name></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MICROSEC</name></expr>}</block></expr>,	<comment type="block">/* "microsecond" relative */</comment>
	<expr><block>{<expr><literal type="string">"useconds"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MICROSEC</name></expr>}</block></expr>,	<comment type="block">/* "microseconds" relative */</comment>
	<expr><block>{<expr><literal type="string">"usecs"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_MICROSEC</name></expr>}</block></expr>, <comment type="block">/* "microseconds" relative */</comment>
	<expr><block>{<expr><literal type="string">"w"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_WEEK</name></expr>}</block></expr>,		<comment type="block">/* "week" relative */</comment>
	<expr><block>{<expr><name>DWEEK</name></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_WEEK</name></expr>}</block></expr>,	<comment type="block">/* "week" relative */</comment>
	<expr><block>{<expr><literal type="string">"weeks"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_WEEK</name></expr>}</block></expr>, <comment type="block">/* "weeks" relative */</comment>
	<expr><block>{<expr><literal type="string">"y"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_YEAR</name></expr>}</block></expr>,		<comment type="block">/* "year" relative */</comment>
	<expr><block>{<expr><name>DYEAR</name></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_YEAR</name></expr>}</block></expr>,	<comment type="block">/* "year" relative */</comment>
	<expr><block>{<expr><literal type="string">"years"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_YEAR</name></expr>}</block></expr>, <comment type="block">/* "years" relative */</comment>
	<expr><block>{<expr><literal type="string">"yr"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_YEAR</name></expr>}</block></expr>,	<comment type="block">/* "year" relative */</comment>
	<expr><block>{<expr><literal type="string">"yrs"</literal></expr>, <expr><name>UNITS</name></expr>, <expr><name>DTK_YEAR</name></expr>}</block></expr>,	<comment type="block">/* "years" relative */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>szdatetktbl</name> <init>= <expr><call><name>lengthof</name><argument_list>(<argument><expr><name>datetktbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>szdeltatktbl</name> <init>= <expr><call><name>lengthof</name><argument_list>(<argument><expr><name>deltatktbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>datetkn</name> <modifier>*</modifier></type><name><name>datecache</name><index>[<expr><name>MAXDATEFIELDS</name></expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>datetkn</name> <modifier>*</modifier></type><name><name>deltacache</name><index>[<expr><name>MAXDATEFIELDS</name></expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name><name>months</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"Jan"</literal></expr>, <expr><literal type="string">"Feb"</literal></expr>, <expr><literal type="string">"Mar"</literal></expr>, <expr><literal type="string">"Apr"</literal></expr>, <expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"Jun"</literal></expr>, <expr><literal type="string">"Jul"</literal></expr>, <expr><literal type="string">"Aug"</literal></expr>, <expr><literal type="string">"Sep"</literal></expr>, <expr><literal type="string">"Oct"</literal></expr>, <expr><literal type="string">"Nov"</literal></expr>, <expr><literal type="string">"Dec"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name><name>days</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"Sunday"</literal></expr>, <expr><literal type="string">"Monday"</literal></expr>, <expr><literal type="string">"Tuesday"</literal></expr>, <expr><literal type="string">"Wednesday"</literal></expr>, <expr><literal type="string">"Thursday"</literal></expr>, <expr><literal type="string">"Friday"</literal></expr>, <expr><literal type="string">"Saturday"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name><name>pgtypes_date_weekdays_short</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"Sun"</literal></expr>, <expr><literal type="string">"Mon"</literal></expr>, <expr><literal type="string">"Tue"</literal></expr>, <expr><literal type="string">"Wed"</literal></expr>, <expr><literal type="string">"Thu"</literal></expr>, <expr><literal type="string">"Fri"</literal></expr>, <expr><literal type="string">"Sat"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name><name>pgtypes_date_months</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"January"</literal></expr>, <expr><literal type="string">"February"</literal></expr>, <expr><literal type="string">"March"</literal></expr>, <expr><literal type="string">"April"</literal></expr>, <expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"June"</literal></expr>, <expr><literal type="string">"July"</literal></expr>, <expr><literal type="string">"August"</literal></expr>, <expr><literal type="string">"September"</literal></expr>, <expr><literal type="string">"October"</literal></expr>, <expr><literal type="string">"November"</literal></expr>, <expr><literal type="string">"December"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>datetkn</name> <modifier>*</modifier></type>
<name>datebsearch</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>datetkn</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>nel</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>datetkn</name>    <modifier>*</modifier></type><name>last</name> <init>= <expr><name>base</name> <operator>+</operator> <name>nel</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>position</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

		<while>while <condition>(<expr><name>last</name> <operator>&gt;=</operator> <name>base</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>position</name> <operator>=</operator> <name>base</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>last</name> <operator>-</operator> <name>base</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<comment type="block">/* precheck the first character for a bit of extra speed */</comment>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>position</name><operator>-&gt;</operator><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* use strncmp so that we match truncated tokens */</comment>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>position</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>TOKMAXLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>position</name></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>last</name> <operator>=</operator> <name>position</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>base</name> <operator>=</operator> <name>position</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* DecodeUnits()
 * Decode text string using lookup table.
 * This routine supports time interval decoding.
 */</comment>
<function><type><name>int</name></type>
<name>DecodeUnits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lowtoken</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>datetkn</name>    <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

	<comment type="block">/* use strncmp so that we match truncated tokens */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>deltacache</name><index>[<expr><name>field</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<call><name>strncmp</name><argument_list>(<argument><expr><name>lowtoken</name></expr></argument>, <argument><expr><name><name>deltacache</name><index>[<expr><name>field</name></expr>]</index></name><operator>-&gt;</operator><name>token</name></expr></argument>, <argument><expr><name>TOKMAXLEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>deltacache</name><index>[<expr><name>field</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>datebsearch</name><argument_list>(<argument><expr><name>lowtoken</name></expr></argument>, <argument><expr><name>deltatktbl</name></expr></argument>, <argument><expr><name>szdeltatktbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>deltacache</name><index>[<expr><name>field</name></expr>]</index></name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>UNKNOWN_FIELD</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* DecodeUnits() */</comment>

<comment type="block">/*
 * Calendar time to Julian date conversions.
 * Julian date is commonly used in astronomical applications,
 *	since it is numerically accurate and computationally simple.
 * The algorithms here will accurately convert between Julian day
 *	and calendar date for all non-negative Julian days
 *	(i.e. from Nov 24, -4713 on).
 *
 * These routines will be used by other date/time packages
 * - thomas 97/02/25
 *
 * Rewritten to eliminate overflow problems. This now allows the
 * routines to work correctly for all Julian day counts from
 * 0 to 2147483647	(Nov 24, -4713 to Jun 3, 5874898) assuming
 * a 32-bit integer. Longer types should also work to the limits
 * of their precision.
 */</comment>

<function><type><name>int</name></type>
<name>date2j</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>julian</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>century</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>m</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">4800</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>m</name> <operator>+=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">4799</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>century</name> <operator>=</operator> <name>y</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>julian</name> <operator>=</operator> <name>y</name> <operator>*</operator> <literal type="number">365</literal> <operator>-</operator> <literal type="number">32167</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>julian</name> <operator>+=</operator> <name>y</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>century</name> <operator>+</operator> <name>century</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>julian</name> <operator>+=</operator> <literal type="number">7834</literal> <operator>*</operator> <name>m</name> <operator>/</operator> <literal type="number">256</literal> <operator>+</operator> <name>d</name></expr>;</expr_stmt>

	<return>return <expr><name>julian</name></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* date2j() */</comment>

<function><type><name>void</name></type>
<name>j2date</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>year</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>month</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>day</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>julian</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>quad</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>extra</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>y</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>julian</name> <operator>=</operator> <name>jd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>julian</name> <operator>+=</operator> <literal type="number">32044</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>quad</name> <operator>=</operator> <name>julian</name> <operator>/</operator> <literal type="number">146097</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>extra</name> <operator>=</operator> <operator>(</operator><name>julian</name> <operator>-</operator> <name>quad</name> <operator>*</operator> <literal type="number">146097</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>julian</name> <operator>+=</operator> <literal type="number">60</literal> <operator>+</operator> <name>quad</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>extra</name> <operator>/</operator> <literal type="number">146097</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>quad</name> <operator>=</operator> <name>julian</name> <operator>/</operator> <literal type="number">1461</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>julian</name> <operator>-=</operator> <name>quad</name> <operator>*</operator> <literal type="number">1461</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name> <operator>=</operator> <name>julian</name> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">1461</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>julian</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>y</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>julian</name> <operator>+</operator> <literal type="number">305</literal><operator>)</operator> <operator>%</operator> <literal type="number">365</literal></expr> </then><else>: <expr><operator>(</operator><name>julian</name> <operator>+</operator> <literal type="number">306</literal><operator>)</operator> <operator>%</operator> <literal type="number">366</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">123</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>quad</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>year</name> <operator>=</operator> <name>y</name> <operator>-</operator> <literal type="number">4800</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>quad</name> <operator>=</operator> <name>julian</name> <operator>*</operator> <literal type="number">2141</literal> <operator>/</operator> <literal type="number">65536</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>day</name> <operator>=</operator> <name>julian</name> <operator>-</operator> <literal type="number">7834</literal> <operator>*</operator> <name>quad</name> <operator>/</operator> <literal type="number">256</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>month</name> <operator>=</operator> <operator>(</operator><name>quad</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator> <operator>%</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<return>return;</return>
</block_content>}</block></function>								<comment type="block">/* j2date() */</comment>

<comment type="block">/* DecodeSpecial()
 * Decode text string using lookup table.
 * Implement a cache lookup since it is likely that dates
 *	will be related in format.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>DecodeSpecial</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lowtoken</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>datetkn</name>    <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

	<comment type="block">/* use strncmp so that we match truncated tokens */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>datecache</name><index>[<expr><name>field</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<call><name>strncmp</name><argument_list>(<argument><expr><name>lowtoken</name></expr></argument>, <argument><expr><name><name>datecache</name><index>[<expr><name>field</name></expr>]</index></name><operator>-&gt;</operator><name>token</name></expr></argument>, <argument><expr><name>TOKMAXLEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>datecache</name><index>[<expr><name>field</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tp</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>datebsearch</name><argument_list>(<argument><expr><name>lowtoken</name></expr></argument>, <argument><expr><name>datetktbl</name></expr></argument>, <argument><expr><name>szdatetktbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>datecache</name><index>[<expr><name>field</name></expr>]</index></name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>UNKNOWN_FIELD</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* DecodeSpecial() */</comment>

<comment type="block">/* EncodeDateOnly()
 * Encode date as local time.
 */</comment>
<function><type><name>void</name></type>
<name>EncodeDateOnly</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>EuroDates</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&lt;=</operator> <name>MONTHS_PER_YEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>style</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>USE_ISO_DATES</name></expr>:</case>
			<comment type="block">/* compatible with ISO date formats */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%04d-%02d-%02d"</literal></expr></argument>,
						<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%04d-%02d-%02d %s"</literal></expr></argument>,
						<argument><expr><operator>-</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><literal type="string">"BC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>USE_SQL_DATES</name></expr>:</case>
			<comment type="block">/* compatible with Oracle/Ingres date formats */</comment>
			<if_stmt><if>if <condition>(<expr><name>EuroDates</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%02d/%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%02d/%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"/%04d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"/%04d %s"</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"BC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>USE_GERMAN_DATES</name></expr>:</case>
			<comment type="block">/* German-style date format */</comment>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%02d.%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">".%04d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">".%04d %s"</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"BC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>USE_POSTGRES_DATES</name></expr>:</case>
		<default>default:</default>
			<comment type="block">/* traditional date-only style for Postgres */</comment>
			<if_stmt><if>if <condition>(<expr><name>EuroDates</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%02d-%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%02d-%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"-%04d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"-%04d %s"</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"BC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>TrimTrailingZeros</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* chop off trailing zeros... but leave at least 2 fractional digits */</comment>
	<while>while <condition>(<expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* EncodeDateTime()
 * Encode date and time interpreted as local time.
 *
 * tm and fsec are the value to encode, print_tz determines whether to include
 * a time zone (the difference between timestamp and timestamptz types), tz is
 * the numeric time zone offset, tzn is the textual time zone, which if
 * specified will be used instead of tz by some styles, style is the date
 * style, str is where to write the output.
 *
 * Supported date styles:
 *	Postgres - day mon hh:mm:ss yyyy tz
 *	SQL - mm/dd/yyyy hh:mm:ss.ss tz
 *	ISO - yyyy-mm-dd hh:mm:ss+/-tz
 *	German - dd.mm.yyyy hh:mm:ss tz
 * Variants (affects order of month and day for Postgres and SQL styles):
 *	US - mm/dd/yyyy
 *	European - dd/mm/yyyy
 */</comment>
<function><type><name>void</name></type>
<name>EncodeDateTime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>fsec_t</name></type> <name>fsec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_tz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tzn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>EuroDates</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>day</name></decl>,
				<decl><type ref="prev"/><name>hour</name></decl>,
				<decl><type ref="prev"/><name>min</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Negative tm_isdst means we have no valid time zone translation.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>print_tz</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>style</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>USE_ISO_DATES</name></expr>:</case>
			<comment type="block">/* Compatible with ISO-8601 date formats */</comment>

			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%04d-%02d-%02d %02d:%02d"</literal></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr> </then><else>: <expr><operator>-</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></argument>,
					<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Print fractional seconds if any.  The field widths here should
			 * be at least equal to MAX_TIMESTAMP_PRECISION.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>fsec</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">":%02d.%06d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>TrimTrailingZeros</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">":%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" BC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>print_tz</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>hour</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>tz</name> <operator>/</operator> <name>SECS_PER_HOUR</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>min</name> <operator>=</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>MINS_PER_HOUR</name><operator>)</operator> <operator>%</operator> <name>MINS_PER_HOUR</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>min</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%+03d:%02d"</literal></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%+03d"</literal></expr></argument>, <argument><expr><name>hour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>USE_SQL_DATES</name></expr>:</case>
			<comment type="block">/* Compatible with Oracle/Ingres date formats */</comment>

			<if_stmt><if>if <condition>(<expr><name>EuroDates</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%02d/%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%02d/%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"/%04d %02d:%02d"</literal></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr> </then><else>: <expr><operator>-</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></argument>,
					<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Print fractional seconds if any.  The field widths here should
			 * be at least equal to MAX_TIMESTAMP_PRECISION.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>fsec</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">":%02d.%06d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>TrimTrailingZeros</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">":%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" BC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * Note: the uses of %.*s in this function would be risky if the
			 * timezone names ever contain non-ASCII characters.  However, all
			 * TZ abbreviations in the IANA database are plain ASCII.
			 */</comment>

			<if_stmt><if>if <condition>(<expr><name>print_tz</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>tzn</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" %.*s"</literal></expr></argument>, <argument><expr><name>MAXTZLEN</name></expr></argument>, <argument><expr><name>tzn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>hour</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>tz</name> <operator>/</operator> <name>SECS_PER_HOUR</name><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>min</name> <operator>=</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>MINS_PER_HOUR</name><operator>)</operator> <operator>%</operator> <name>MINS_PER_HOUR</name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>min</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%+03d:%02d"</literal></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%+03d"</literal></expr></argument>, <argument><expr><name>hour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>USE_GERMAN_DATES</name></expr>:</case>
			<comment type="block">/* German variant on European style */</comment>

			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%02d.%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">".%04d %02d:%02d"</literal></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr> </then><else>: <expr><operator>-</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></argument>,
					<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Print fractional seconds if any.  The field widths here should
			 * be at least equal to MAX_TIMESTAMP_PRECISION.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>fsec</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">":%02d.%06d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>TrimTrailingZeros</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">":%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" BC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>print_tz</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>tzn</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" %.*s"</literal></expr></argument>, <argument><expr><name>MAXTZLEN</name></expr></argument>, <argument><expr><name>tzn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>hour</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>tz</name> <operator>/</operator> <name>SECS_PER_HOUR</name><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>min</name> <operator>=</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>MINS_PER_HOUR</name><operator>)</operator> <operator>%</operator> <name>MINS_PER_HOUR</name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>min</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%+03d:%02d"</literal></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%+03d"</literal></expr></argument>, <argument><expr><name>hour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>USE_POSTGRES_DATES</name></expr>:</case>
		<default>default:</default>
			<comment type="block">/* Backward-compatible with traditional Postgres abstime dates */</comment>

			<expr_stmt><expr><name>day</name> <operator>=</operator> <call><name>date2j</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>day</name> <operator>+</operator> <call><name>date2j</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>days</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>EuroDates</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"%02d %3s"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>months</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"%3s %02d"</literal></expr></argument>, <argument><expr><name><name>months</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">" %02d:%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Print fractional seconds if any.  The field widths here should
			 * be at least equal to MAX_TIMESTAMP_PRECISION.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>fsec</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">":%02d.%06d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>TrimTrailingZeros</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">":%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" %04d"</literal></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr> </then><else>: <expr><operator>-</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" BC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>print_tz</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>tzn</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" %.*s"</literal></expr></argument>, <argument><expr><name>MAXTZLEN</name></expr></argument>, <argument><expr><name>tzn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/*
					 * We have a time zone, but no string version. Use the
					 * numeric form, but be sure to include a leading space to
					 * avoid formatting something which would be rejected by
					 * the date/time parser later. - thomas 2001-10-19
					 */</comment>
					<expr_stmt><expr><name>hour</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>tz</name> <operator>/</operator> <name>SECS_PER_HOUR</name><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>min</name> <operator>=</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>MINS_PER_HOUR</name><operator>)</operator> <operator>%</operator> <name>MINS_PER_HOUR</name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>min</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" %+03d:%02d"</literal></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" %+03d"</literal></expr></argument>, <argument><expr><name>hour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>GetEpochTime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name>  <modifier>*</modifier></type><name>t0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type>		<name>epoch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>t0</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name><name>t0</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>t0</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>t0</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>t0</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <name><name>t0</name><operator>-&gt;</operator><name>tm_min</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>t0</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>;</expr_stmt>

		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* GetEpochTime() */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>abstime2tm</name><parameter_list>(<parameter><decl><type><name>AbsoluteTime</name></type> <name>_time</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tzp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tzn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>time_t</name></type>		<name>time</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator> <name>_time</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name>  <modifier>*</modifier></type><name>tx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tzp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>tx</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>(</operator><name>time_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>tx</name> <operator>=</operator> <call><name>gmtime</name><argument_list>(<argument><expr><operator>(</operator><name>time_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tx</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_TS_BAD_TIMESTAMP</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_min</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TM_ZONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_gmtoff</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_zone</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_zone</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tzp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We have a brute force time zone per SQL99? Then use it without
		 * change since we have already rotated to the time zone.
		 */</comment>
		<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>=</operator> <operator>-</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>	<comment type="block">/* tm_gmtoff is Sun/DEC-ism */</comment>

		<comment type="block">/*
		 * FreeBSD man pages indicate that this should work - tgl 97/04/23
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>tzn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Copy no more than MAXTZLEN bytes of timezone to tzn, in case it
			 * contains an error message, which doesn't fit in the buffer
			 */</comment>
			<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><operator>*</operator><name>tzn</name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_zone</name></name></expr></argument>, <argument><expr><name>MAXTZLEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_zone</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAXTZLEN</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INT_TIMEZONE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if_stmt><if>if <condition>(<expr><name>tzp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>TIMEZONE_GLOBAL</name> <operator>-</operator> <name>SECS_PER_HOUR</name></expr> </then><else>: <expr><name>TIMEZONE_GLOBAL</name></expr></else></ternary></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>tzn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Copy no more than MAXTZLEN bytes of timezone to tzn, in case it
			 * contains an error message, which doesn't fit in the buffer
			 */</comment>
			<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><operator>*</operator><name>tzn</name></expr></argument>, <argument><expr><name><name>TZNAME_GLOBAL</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>MAXTZLEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>TZNAME_GLOBAL</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAXTZLEN</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* not (HAVE_TM_ZONE || HAVE_INT_TIMEZONE) */</comment>
	<if_stmt><if>if <condition>(<expr><name>tzp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* default to UTC */</comment>
		<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tzn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>tzn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GetCurrentDateTime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>tz</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>abstime2tm</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tz</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt2time</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>hour</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>, <parameter><decl><type><name>fsec_t</name> <modifier>*</modifier></type><name>fsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>time</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>time</name> <operator>=</operator> <name>jd</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>hour</name> <operator>=</operator> <name>time</name> <operator>/</operator> <name>USECS_PER_HOUR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>time</name> <operator>-=</operator> <operator>(</operator><operator>*</operator><name>hour</name><operator>)</operator> <operator>*</operator> <name>USECS_PER_HOUR</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>time</name> <operator>/</operator> <name>USECS_PER_MINUTE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>time</name> <operator>-=</operator> <operator>(</operator><operator>*</operator><name>min</name><operator>)</operator> <operator>*</operator> <name>USECS_PER_MINUTE</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>sec</name> <operator>=</operator> <name>time</name> <operator>/</operator> <name>USECS_PER_SEC</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>fsec</name> <operator>=</operator> <name>time</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>sec</name> <operator>*</operator> <name>USECS_PER_SEC</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>								<comment type="block">/* dt2time() */</comment>



<comment type="block">/* DecodeNumberField()
 * Interpret numeric string as a concatenated date or time field.
 * Use the context of previously decoded fields to help with
 * the interpretation.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>DecodeNumberField</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fmask</name></decl></parameter>,
				  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tmask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>fsec_t</name> <modifier>*</modifier></type><name>fsec</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is2digits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Have a decimal point? Then this is a date or something with a seconds
	 * field...
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>fstr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

		<comment type="block">/*
		 * OK, we have at most six digits to care about. Let's construct a
		 * string with those digits, zero-padded on the right, and then do the
		 * conversion to an integer.
		 *
		 * XXX This truncates the seventh digit, unlike rounding it as the
		 * backend does.
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>fstr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> ?</condition><then> <expr><operator>*</operator><name>cp</name><operator>++</operator></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><name><name>fstr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>fsec</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>fstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* No decimal point and no complete date yet? */</comment>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <name>DTK_DATE_M</name><operator>)</operator> <operator>!=</operator> <name>DTK_DATE_M</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* yyyymmdd? */</comment>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <name>DTK_DATE_M</name></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><name>DTK_DATE</name></expr>;</return>
		</block_content>}</block></if>
		<comment type="block">/* yymmdd? */</comment>
		<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <name>DTK_DATE_M</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>is2digits</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

			<return>return <expr><name>DTK_DATE</name></expr>;</return>
		</block_content>}</block></if>
		<comment type="block">/* yyddd? */</comment>
		<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <name>DTK_DATE_M</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>is2digits</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

			<return>return <expr><name>DTK_DATE</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* not all time fields are specified? */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <name>DTK_TIME_M</name><operator>)</operator> <operator>!=</operator> <name>DTK_TIME_M</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* hhmmss */</comment>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <name>DTK_TIME_M</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><name>DTK_TIME</name></expr>;</return>
		</block_content>}</block></if>
		<comment type="block">/* hhmm? */</comment>
		<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <name>DTK_TIME_M</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><name>DTK_TIME</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* DecodeNumberField() */</comment>


<comment type="block">/* DecodeNumber()
 * Interpret plain numeric field as a date value in context.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>DecodeNumber</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fmask</name></decl></parameter>,
			 <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tmask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>fsec_t</name> <modifier>*</modifier></type><name>fsec</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is2digits</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>EuroDates</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * More than two digits? Then could be a date or a run-together time:
		 * 2001.360 20011225 040506.789
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>-</operator> <name>str</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>DecodeNumberField</name><argument_list>(<argument><expr><name>flen</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>fmask</name> <operator>|</operator> <name>DTK_DATE_M</name><operator>)</operator></expr></argument>,
									 <argument><expr><name>tmask</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>, <argument><expr><name>is2digits</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>fsec</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Special case day of year? */</comment>
	<if_stmt><if>if <condition>(<expr><name>flen</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>YEAR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>val</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;=</operator> <literal type="number">366</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <operator>(</operator><call><name>DTK_M</name><argument_list>(<argument><expr><name>DOY</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>MONTH</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>DAY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><call><name>date2j</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
			   <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block" format="doxygen">/***
	 * Enough digits to be unequivocal year? Used to test for 4 digits or
	 * more, but we now test first for a three-digit doy so anything
	 * bigger than two digits had better be an explicit year.
	 * - thomas 1999-01-09
	 * Back to requiring a 4 digit year. We accept a two digit
	 * year farther down. - thomas 2000-03-28
	 ***/</comment>
	<if type="elseif">else if <condition>(<expr><name>flen</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>YEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* already have a year? then see if we can substitute... */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>YEAR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>DAY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
			<name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;=</operator> <literal type="number">31</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>DAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* already have year? then could be month */</comment>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>YEAR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>MONTH</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>val</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;=</operator> <name>MONTHS_PER_YEAR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>MONTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* no year and EuroDates enabled? then could be day */</comment>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>EuroDates</name> <operator>||</operator> <operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>MONTH</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
			 <operator>!</operator><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>YEAR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>DAY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
			 <name>val</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;=</operator> <literal type="number">31</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>DAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>MONTH</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>val</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;=</operator> <name>MONTHS_PER_YEAR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>MONTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>DAY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>val</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;=</operator> <literal type="number">31</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>DAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/*
	 * Check for 2 or 4 or more digits, but currently we reach here only if
	 * two digits. - thomas 2000-03-28
	 */</comment>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>YEAR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flen</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator> <name>flen</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>YEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

		<comment type="block">/* adjust ONLY if exactly two digits... */</comment>
		<expr_stmt><expr><operator>*</operator><name>is2digits</name> <operator>=</operator> <operator>(</operator><name>flen</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* DecodeNumber() */</comment>

<comment type="block">/* DecodeDate()
 * Decode date string which includes delimiters.
 * Insist on a complete set of fields.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>DecodeDate</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fmask</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tmask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>EuroDates</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>fsec_t</name></type>		<name>fsec</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>			<name>nf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>bc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is2digits</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>type</name></decl>,
				<decl><type ref="prev"/><name>val</name></decl>,
				<decl><type ref="prev"/><name>dmask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name><name>field</name><index>[<expr><name>MAXDATEFIELDS</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* parse this string... */</comment>
	<while>while <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>nf</name> <operator>&lt;</operator> <name>MAXDATEFIELDS</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* skip field separators */</comment>
		<while>while <condition>(<expr><operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

		<expr_stmt><expr><name><name>field</name><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<while>while <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Just get rid of any non-digit, non-alpha characters... */</comment>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>str</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>nf</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	<comment type="block">/* don't allow too many fields */</comment>
	if (nf &gt; 3)
		return -1;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* look first for text fields, since that will be unambiguous month */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nf</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>DecodeSpecial</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>IGNORE_DTF</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>dmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>MONTH</name></expr>:</case>
					<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><name>ADBC</name></expr>:</case>
					<expr_stmt><expr><name>bc</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>==</operator> <name>BC</name><operator>)</operator></expr>;</expr_stmt>
					<break>break;</break>

				<default>default:</default>
					<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></switch>
			<if_stmt><if>if <condition>(<expr><name>fmask</name> <operator>&amp;</operator> <name>dmask</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>fmask</name> <operator>|=</operator> <name>dmask</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>|=</operator> <name>dmask</name></expr>;</expr_stmt>

			<comment type="block">/* mark this field as being completed */</comment>
			<expr_stmt><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* now pick up remaining numeric fields */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nf</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>DecodeNumber</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fmask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmask</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is2digits</name></expr></argument>, <argument><expr><name>EuroDates</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>fmask</name> <operator>&amp;</operator> <name>dmask</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>fmask</name> <operator>|=</operator> <name>dmask</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>|=</operator> <name>dmask</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><call><name>DTK_M</name><argument_list>(<argument><expr><name>DOY</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>TZ</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>DTK_DATE_M</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* there is no year zero in AD/BC notation; i.e. "1 BC" == year 0 */</comment>
	<if_stmt><if>if <condition>(<expr><name>bc</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>is2digits</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;</operator> <literal type="number">70</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+=</operator> <literal type="number">2000</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+=</operator> <literal type="number">1900</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* DecodeDate() */</comment>


<comment type="block">/* DecodeTime()
 * Decode time string which includes delimiters.
 * Only check the lower limit on hours, since this same code
 *	can be used to represent time spans.
 */</comment>
<function><type><name>int</name></type>
<name>DecodeTime</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tmask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>fsec_t</name> <modifier>*</modifier></type><name>fsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>tmask</name> <operator>=</operator> <name>DTK_TIME_M</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>str</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>fsec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>str</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>fsec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type>		<name><name>fstr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

			<comment type="block">/*
			 * OK, we have at most six digits to care about. Let's construct a
			 * string with those digits, zero-padded on the right, and then do
			 * the conversion to an integer.
			 *
			 * XXX This truncates the seventh digit, unlike rounding it as the
			 * backend does.
			 */</comment>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>fstr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> ?</condition><then> <expr><operator>*</operator><name>cp</name><operator>++</operator></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><name><name>fstr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>fsec</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>fstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* do a sanity check */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>&gt;</operator> <literal type="number">59</literal> <operator>||</operator>
		<name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>&gt;</operator> <literal type="number">59</literal> <operator>||</operator> <operator>*</operator><name>fsec</name> <operator>&gt;=</operator> <name>USECS_PER_SEC</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* DecodeTime() */</comment>

<comment type="block">/* DecodeTimezone()
 * Interpret string as a numeric timezone.
 *
 * Note: we allow timezone offsets up to 13:59.  There are places that
 * use +1300 summer time.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>DecodeTimezone</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tzp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>tz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hr</name></decl>,
				<decl><type ref="prev"/><name>min</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

	<comment type="block">/* assume leading character is "+" or "-" */</comment>
	<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* explicit delimiter? */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>cp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* otherwise, might have run things together... */</comment>
	<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>min</name> <operator>&gt;=</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>hr</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>hr</name></expr></argument> &gt;</argument_list></name> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>tz</name> <operator>=</operator> <operator>(</operator><name>hr</name> <operator>*</operator> <name>MINS_PER_HOUR</name> <operator>+</operator> <name>min</name><operator>)</operator> <operator>*</operator> <name>SECS_PER_MINUTE</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>tz</name> <operator>=</operator> <operator>-</operator><name>tz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>=</operator> <operator>-</operator><name>tz</name></expr>;</expr_stmt>
	<return>return <expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* DecodeTimezone() */</comment>


<comment type="block">/* DecodePosixTimezone()
 * Interpret string as a POSIX-compatible timezone:
 *	PST-hh:mm
 *	PST+h
 * - thomas 2000-03-15
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>DecodePosixTimezone</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tzp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>val</name></decl>,
				<decl><type ref="prev"/><name>tz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>delim</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

	<if_stmt><if>if <condition>(<expr><call><name>DecodeTimezone</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>delim</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>DecodeSpecial</name><argument_list>(<argument><expr><name>MAXDATEFIELDS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name>delim</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DTZ</name></expr>:</case>
		<case>case <expr><name>TZ</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>val</name> <operator>+</operator> <name>tz</name><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* DecodePosixTimezone() */</comment>

<comment type="block">/* ParseDateTime()
 * Break string into tokens based on a date/time context.
 * Several field types are assigned:
 *	DTK_NUMBER - digits and (possibly) a decimal point
 *	DTK_DATE - digits and two delimiters, or digits and text
 *	DTK_TIME - digits, colon delimiters, and possibly a decimal point
 *	DTK_STRING - text (no digits)
 *	DTK_SPECIAL - leading "+" or "-" followed by text
 *	DTK_TZ - leading "+" or "-" followed by digits
 * Note that some field types can hold unexpected items:
 *	DTK_NUMBER can hold date fields (yy.ddd)
 *	DTK_STRING can hold months (January) and time zones (PST)
 *	DTK_DATE can hold Posix time zones (GMT-8)
 *
 * The "lowstr" work buffer must have at least strlen(timestr) + MAXDATEFIELDS
 * bytes of space.  On output, field[] entries will point into it.
 * The field[] and ftype[] arrays must have at least MAXDATEFIELDS entries.
 */</comment>
<function><type><name>int</name></type>
<name>ParseDateTime</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>timestr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lowstr</name></decl></parameter>,
			  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ftype</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>numfields</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>nf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>lp</name> <init>= <expr><name>lowstr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>endstr</name> <operator>=</operator> <name>timestr</name></expr>;</expr_stmt>
	<comment type="block">/* outer loop through fields */</comment>
	<while>while <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Record start of current field */</comment>
		<if_stmt><if>if <condition>(<expr><name>nf</name> <operator>&gt;=</operator> <name>MAXDATEFIELDS</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>field</name><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name>lp</name></expr>;</expr_stmt>

		<comment type="block">/* leading digit? then date or time */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

			<comment type="block">/* time field? */</comment>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>ftype</name><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name>DTK_TIME</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
				<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator>
					   <operator>(</operator><operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
			</block_content>}</block></if>
			<comment type="block">/* date field? allow embedded text month */</comment>
			<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* save delimiting character to use later */</comment>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dp</name> <init>= <expr><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
				<comment type="block">/* second field is all digits? then no embedded text month */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>ftype</name><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>dp</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>DTK_NUMBER</name></expr> </then><else>: <expr><name>DTK_DATE</name></expr></else></ternary></expr>;</expr_stmt>
					<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

					<comment type="block">/*
					 * insist that the delimiters match to get a three-field
					 * date.
					 */</comment>
					<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <operator>*</operator><name>dp</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>ftype</name><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name>DTK_DATE</name></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
						<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <operator>*</operator><name>dp</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>ftype</name><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name>DTK_DATE</name></expr>;</expr_stmt>
					<while>while <condition>(<expr><call><name>isalnum</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <operator>*</operator><name>dp</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>pg_tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>

			<comment type="block">/*
			 * otherwise, number only and will determine year, month, day, or
			 * concatenated fields later...
			 */</comment>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>ftype</name><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name>DTK_NUMBER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<comment type="block">/* Leading decimal point? Then fractional seconds... */</comment>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

			<expr_stmt><expr><name><name>ftype</name><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name>DTK_NUMBER</name></expr>;</expr_stmt>
		</block_content>}</block></if>

		<comment type="block">/*
		 * text? then date string, month, day of week, special, or timezone
		 */</comment>
		<if type="elseif">else if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ftype</name><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name>DTK_STRING</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>pg_tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>pg_tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

			<comment type="block">/*
			 * Full date string with leading text month? Could also be a POSIX
			 * time zone...
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dp</name> <init>= <expr><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>ftype</name><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name>DTK_DATE</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
				<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <operator>*</operator><name>dp</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<comment type="block">/* skip leading spaces */</comment>
		<if type="elseif">else if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if>
		<comment type="block">/* sign? then special or numeric timezone */</comment>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			<comment type="block">/* soak up leading whitespace */</comment>
			<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
			<comment type="block">/* numeric timezone? */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>ftype</name><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name>DTK_TZ</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
				<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator>
					   <operator>(</operator><operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
			</block_content>}</block></if>
			<comment type="block">/* special? */</comment>
			<if type="elseif">else if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>ftype</name><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name>DTK_SPECIAL</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>pg_tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while>while <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>pg_tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
			</block_content>}</block></if>
			<comment type="block">/* otherwise something wrong... */</comment>
			<else>else<block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<comment type="block">/* ignore punctuation but use as delimiter */</comment>
		<if type="elseif">else if <condition>(<expr><call><name>ispunct</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>endstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>

		</block_content>}</block></if>
		<comment type="block">/* otherwise, something is not right... */</comment>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

		<comment type="block">/* force in a delimiter after each field */</comment>
		<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>nf</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><operator>*</operator><name>numfields</name> <operator>=</operator> <name>nf</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* ParseDateTime() */</comment>


<comment type="block">/* DecodeDateTime()
 * Interpret previously parsed fields for general date and time.
 * Return 0 if full date, 1 if only time, and -1 if problems.
 *		External format(s):
 *				"&lt;weekday&gt; &lt;month&gt;-&lt;day&gt;-&lt;year&gt; &lt;hour&gt;:&lt;minute&gt;:&lt;second&gt;"
 *				"Fri Feb-7-1997 15:23:27"
 *				"Feb-7-1997 15:23:27"
 *				"2-7-1997 15:23:27"
 *				"1997-2-7 15:23:27"
 *				"1997.038 15:23:27"		(day of year 1-366)
 *		Also supports input in compact time:
 *				"970207 152327"
 *				"97038 152327"
 *				"20011225T040506.789-07"
 *
 * Use the system-provided functions to get the current time zone
 *	if not specified in the input string.
 * If the date is outside the time_t system-supported time range,
 *	then assume UTC time zone. - thomas 1997-05-27
 */</comment>
<function><type><name>int</name></type>
<name>DecodeDateTime</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ftype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nf</name></decl></parameter>,
			   <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dtype</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>fsec_t</name> <modifier>*</modifier></type><name>fsec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>EuroDates</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>fmask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>tmask</name></decl>,
				<decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ptype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>		<comment type="block">/* "prefix type" for ISO y2001m02d04 format */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>mer</name> <init>= <expr><name>HR24</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>haveTextMonth</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is2digits</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>bc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>tzp</name> <init>= <expr><operator>&amp;</operator><name>t</name></expr></init></decl>;</decl_stmt>

	<comment type="block" format="doxygen">/***
	 * We'll insist on at least all of the date fields, but initialize the
	 * remaining fields in case they are not set later...
	 ***/</comment>
	<expr_stmt><expr><operator>*</operator><name>dtype</name> <operator>=</operator> <name>DTK_DATE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>fsec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* don't know daylight savings time status apriori */</comment>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tzp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nf</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name><name>ftype</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>DTK_DATE</name></expr>:</case>
				<comment type="block" format="doxygen">/***
				 * Integral julian day with attached time zone?
				 * All other forms with JD will be separated into
				 * distinct fields, so we handle just this case here.
				 ***/</comment>
				<if_stmt><if>if <condition>(<expr><name>ptype</name> <operator>==</operator> <name>DTK_JULIAN</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>val</name></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name>tzp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

					<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

					<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* Get the time zone from the end of the string */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>DecodeTimezone</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>tzp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

					<expr_stmt><expr><name>tmask</name> <operator>=</operator> <name>DTK_DATE_M</name> <operator>|</operator> <name>DTK_TIME_M</name> <operator>|</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>TZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>ptype</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if>
				<comment type="block" format="doxygen">/***
				 * Already have a date? Then this might be a POSIX time
				 * zone with an embedded dash (e.g. "PST-3" == "EST") or
				 * a run-together time with trailing time zone (e.g. hhmmss-zz).
				 * - thomas 2001-12-25
				 ***/</comment>
				<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <name>DTK_DATE_M</name><operator>)</operator> <operator>==</operator> <name>DTK_DATE_M</name><operator>)</operator>
						 <operator>||</operator> <operator>(</operator><name>ptype</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* No time zone accepted? Then quit... */</comment>
					<if_stmt><if>if <condition>(<expr><name>tzp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ptype</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

						<if_stmt><if>if <condition>(<expr><name>ptype</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/* Sanity check; should not fail this test */</comment>
							<if_stmt><if>if <condition>(<expr><name>ptype</name> <operator>!=</operator> <name>DTK_TIME</name></expr>)</condition><block type="pseudo"><block_content>
								<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
							<expr_stmt><expr><name>ptype</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>

						<comment type="block">/*
						 * Starts with a digit but we already have a time
						 * field? Then we are in trouble with a date and time
						 * already...
						 */</comment>
						<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <name>DTK_TIME_M</name><operator>)</operator> <operator>==</operator> <name>DTK_TIME_M</name></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

						<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

						<comment type="block">/* Get the time zone from the end of the string */</comment>
						<if_stmt><if>if <condition>(<expr><call><name>DecodeTimezone</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>tzp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
						<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

						<comment type="block">/*
						 * Then read the rest of the field as a concatenated
						 * time
						 */</comment>
						<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ftype</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>DecodeNumberField</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fmask</name></expr></argument>,
														  <argument><expr><operator>&amp;</operator><name>tmask</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is2digits</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

						<comment type="block">/*
						 * modify tmask after returning from
						 * DecodeNumberField()
						 */</comment>
						<expr_stmt><expr><name>tmask</name> <operator>|=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>TZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><call><name>DecodePosixTimezone</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tzp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

						<expr_stmt><expr><name><name>ftype</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>DTK_TZ</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>TZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>DecodeDate</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fmask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmask</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>EuroDates</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>DTK_TIME</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>DecodeTime</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmask</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

				<comment type="block">/*
				 * Check upper limit on hours; other limits checked in
				 * DecodeTime()
				 */</comment>
				<comment type="block">/* test for &gt; 24:00:00 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&gt;</operator> <literal type="number">24</literal> <operator>||</operator>
					<operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>==</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>DTK_TZ</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type>			<name>tz</name></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name>tzp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><call><name>DecodeTimezone</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

					<comment type="block">/*
					 * Already have a time zone? Then maybe this is the second
					 * field of a POSIX time: EST+3 (equivalent to PST)
					 */</comment>
					<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>TZ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
						<name><name>ftype</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>DTK_TZ</name> <operator>&amp;&amp;</operator>
						<call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name><name>field</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>-=</operator> <name>tz</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>tmask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>=</operator> <name>tz</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>TZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block>
				<break>break;</break>

			<case>case <expr><name>DTK_NUMBER</name></expr>:</case>

				<comment type="block">/*
				 * Was this an "ISO date" with embedded field labels? An
				 * example is "y2001m02d04" - thomas 2001-02-04
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>ptype</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>val</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * only a few kinds are allowed to have an embedded
					 * decimal
					 */</comment>
					<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
						<switch>switch <condition>(<expr><name>ptype</name></expr>)</condition>
						<block>{<block_content>
							<case>case <expr><name>DTK_JULIAN</name></expr>:</case>
							<case>case <expr><name>DTK_TIME</name></expr>:</case>
							<case>case <expr><name>DTK_SECOND</name></expr>:</case>
								<break>break;</break>
							<default>default:</default>
								<return>return <expr><literal type="number">1</literal></expr>;</return>
								<break>break;</break>
						</block_content>}</block></switch></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

					<switch>switch <condition>(<expr><name>ptype</name></expr>)</condition>
					<block>{<block_content>
						<case>case <expr><name>DTK_YEAR</name></expr>:</case>
							<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>YEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>

						<case>case <expr><name>DTK_MONTH</name></expr>:</case>

							<comment type="block">/*
							 * already have a month and hour? then assume
							 * minutes
							 */</comment>
							<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>MONTH</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
								<operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>HOUR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
								<expr_stmt><expr><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>MINUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></if>
							<else>else
							<block>{<block_content>
								<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
								<expr_stmt><expr><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>MONTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></else></if_stmt>
							<break>break;</break>

						<case>case <expr><name>DTK_DAY</name></expr>:</case>
							<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>DAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>

						<case>case <expr><name>DTK_HOUR</name></expr>:</case>
							<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>HOUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>

						<case>case <expr><name>DTK_MINUTE</name></expr>:</case>
							<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>MINUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>

						<case>case <expr><name>DTK_SECOND</name></expr>:</case>
							<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
							<block>{<block_content>
								<decl_stmt><decl><type><name>double</name></type>		<name>frac</name></decl>;</decl_stmt>

								<expr_stmt><expr><name>frac</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
									<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
								<expr_stmt><expr><operator>*</operator><name>fsec</name> <operator>=</operator> <name>frac</name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
							</block_content>}</block></if></if_stmt>
							<break>break;</break>

						<case>case <expr><name>DTK_TZ</name></expr>:</case>
							<expr_stmt><expr><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>TZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<if_stmt><if>if <condition>(<expr><call><name>DecodeTimezone</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tzp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
								<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
							<break>break;</break>

						<case>case <expr><name>DTK_JULIAN</name></expr>:</case>
							<comment type="block" format="doxygen">/***
							 * previous field was a label for "julian date"?
							 ***/</comment>
							<expr_stmt><expr><name>tmask</name> <operator>=</operator> <name>DTK_DATE_M</name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<comment type="block">/* fractional Julian Day? */</comment>
							<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
							<block>{<block_content>
								<decl_stmt><decl><type><name>double</name></type>		<name>time</name></decl>;</decl_stmt>

								<expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
									<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

								<expr_stmt><expr><name>tmask</name> <operator>|=</operator> <name>DTK_TIME_M</name></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>dt2time</name><argument_list>(<argument><expr><operator>(</operator><name>time</name> <operator>*</operator> <name>USECS_PER_DAY</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></if></if_stmt>
							<break>break;</break>

						<case>case <expr><name>DTK_TIME</name></expr>:</case>
							<comment type="block">/* previous field was "t" for ISO time */</comment>
							<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ftype</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>DecodeNumberField</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>fmask</name> <operator>|</operator> <name>DTK_DATE_M</name><operator>)</operator></expr></argument>,
															  <argument><expr><operator>&amp;</operator><name>tmask</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is2digits</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
								<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

							<if_stmt><if>if <condition>(<expr><name>tmask</name> <operator>!=</operator> <name>DTK_TIME_M</name></expr>)</condition><block type="pseudo"><block_content>
								<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
							<break>break;</break>

						<default>default:</default>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
							<break>break;</break>
					</block_content>}</block></switch>

					<expr_stmt><expr><name>ptype</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>dtype</name> <operator>=</operator> <name>DTK_DATE</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>flen</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>flen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* Embedded decimal and no date yet? */</comment>
					<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <name>DTK_DATE_M</name><operator>)</operator></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><call><name>DecodeDate</name><argument_list>(<argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fmask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmask</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>EuroDates</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					</block_content>}</block></if>
					<comment type="block">/* embedded decimal and several digits before? */</comment>
					<if type="elseif">else if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>flen</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/*
						 * Interpret as a concatenated date or time Set the
						 * type field to allow decoding other fields later.
						 * Example: 20011223 or 040506
						 */</comment>
						<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ftype</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>DecodeNumberField</name><argument_list>(<argument><expr><name>flen</name></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fmask</name></expr></argument>,
														  <argument><expr><operator>&amp;</operator><name>tmask</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is2digits</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name>flen</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ftype</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>DecodeNumberField</name><argument_list>(<argument><expr><name>flen</name></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fmask</name></expr></argument>,
														  <argument><expr><operator>&amp;</operator><name>tmask</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is2digits</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					</block_content>}</block></if>
					<comment type="block">/* otherwise it is a single date/time field... */</comment>
					<if type="elseif">else if <condition>(<expr><call><name>DecodeNumber</name><argument_list>(<argument><expr><name>flen</name></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fmask</name></expr></argument>,
										  <argument><expr><operator>&amp;</operator><name>tmask</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is2digits</name></expr></argument>, <argument><expr><name>EuroDates</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><name>DTK_STRING</name></expr>:</case>
			<case>case <expr><name>DTK_SPECIAL</name></expr>:</case>
				<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>DecodeSpecial</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>IGNORE_DTF</name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>RESERV</name></expr>:</case>
						<switch>switch <condition>(<expr><name>val</name></expr>)</condition>
						<block>{<block_content>
							<case>case <expr><name>DTK_NOW</name></expr>:</case>
								<expr_stmt><expr><name>tmask</name> <operator>=</operator> <operator>(</operator><name>DTK_DATE_M</name> <operator>|</operator> <name>DTK_TIME_M</name> <operator>|</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>TZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
								<expr_stmt><expr><operator>*</operator><name>dtype</name> <operator>=</operator> <name>DTK_DATE</name></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>GetCurrentDateTime</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<break>break;</break>

							<case>case <expr><name>DTK_YESTERDAY</name></expr>:</case>
								<expr_stmt><expr><name>tmask</name> <operator>=</operator> <name>DTK_DATE_M</name></expr>;</expr_stmt>
								<expr_stmt><expr><operator>*</operator><name>dtype</name> <operator>=</operator> <name>DTK_DATE</name></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>GetCurrentDateTime</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><call><name>date2j</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
								<break>break;</break>

							<case>case <expr><name>DTK_TODAY</name></expr>:</case>
								<expr_stmt><expr><name>tmask</name> <operator>=</operator> <name>DTK_DATE_M</name></expr>;</expr_stmt>
								<expr_stmt><expr><operator>*</operator><name>dtype</name> <operator>=</operator> <name>DTK_DATE</name></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>GetCurrentDateTime</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
								<break>break;</break>

							<case>case <expr><name>DTK_TOMORROW</name></expr>:</case>
								<expr_stmt><expr><name>tmask</name> <operator>=</operator> <name>DTK_DATE_M</name></expr>;</expr_stmt>
								<expr_stmt><expr><operator>*</operator><name>dtype</name> <operator>=</operator> <name>DTK_DATE</name></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>GetCurrentDateTime</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><call><name>date2j</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
								<break>break;</break>

							<case>case <expr><name>DTK_ZULU</name></expr>:</case>
								<expr_stmt><expr><name>tmask</name> <operator>=</operator> <operator>(</operator><name>DTK_TIME_M</name> <operator>|</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>TZ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
								<expr_stmt><expr><operator>*</operator><name>dtype</name> <operator>=</operator> <name>DTK_DATE</name></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
								<if_stmt><if>if <condition>(<expr><name>tzp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
									<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
								<break>break;</break>

							<default>default:</default>
								<expr_stmt><expr><operator>*</operator><name>dtype</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
						</block_content>}</block></switch>

						<break>break;</break>

					<case>case <expr><name>MONTH</name></expr>:</case>

						<comment type="block">/*
						 * already have a (numeric) month? then see if we can
						 * substitute...
						 */</comment>
						<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>MONTH</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>haveTextMonth</name> <operator>&amp;&amp;</operator>
							<operator>!</operator><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>DAY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&lt;=</operator> <literal type="number">31</literal></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>;</expr_stmt>
							<expr_stmt><expr><name>tmask</name> <operator>=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>DAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name>haveTextMonth</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>DTZMOD</name></expr>:</case>

						<comment type="block">/*
						 * daylight savings time modifier (solves "MET DST"
						 * syntax)
						 */</comment>
						<expr_stmt><expr><name>tmask</name> <operator>|=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>DTZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>tzp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
						<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>-=</operator> <name>val</name></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>DTZ</name></expr>:</case>

						<comment type="block">/*
						 * set mask for TZ here _or_ check for DTZ later when
						 * getting default timezone
						 */</comment>
						<expr_stmt><expr><name>tmask</name> <operator>|=</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>TZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>tzp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
						<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>=</operator> <operator>-</operator><name>val</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>ftype</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>DTK_TZ</name></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>TZ</name></expr>:</case>
						<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>tzp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
						<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>=</operator> <operator>-</operator><name>val</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>ftype</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>DTK_TZ</name></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>IGNORE_DTF</name></expr>:</case>
						<break>break;</break>

					<case>case <expr><name>AMPM</name></expr>:</case>
						<expr_stmt><expr><name>mer</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>ADBC</name></expr>:</case>
						<expr_stmt><expr><name>bc</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>==</operator> <name>BC</name><operator>)</operator></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>DOW</name></expr>:</case>
						<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>UNITS</name></expr>:</case>
						<expr_stmt><expr><name>tmask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>ptype</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>ISOTIME</name></expr>:</case>

						<comment type="block">/*
						 * This is a filler field "t" indicating that the next
						 * field is time. Try to verify that this is sensible.
						 */</comment>
						<expr_stmt><expr><name>tmask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

						<comment type="block">/* No preceding date? Then quit... */</comment>
						<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <name>DTK_DATE_M</name><operator>)</operator> <operator>!=</operator> <name>DTK_DATE_M</name></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

						<comment type="block" format="doxygen">/***
						 * We will need one of the following fields:
						 *	DTK_NUMBER should be hhmmss.fff
						 *	DTK_TIME should be hh:mm:ss.fff
						 *	DTK_DATE should be hhmmss-zz
						 ***/</comment>
						<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>nf</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator>
							<operator>(</operator><name><name>ftype</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>DTK_NUMBER</name> <operator>&amp;&amp;</operator>
							 <name><name>ftype</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>DTK_TIME</name> <operator>&amp;&amp;</operator>
							 <name><name>ftype</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>DTK_DATE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

						<expr_stmt><expr><name>ptype</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
						<break>break;</break>

					<default>default:</default>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
				</block_content>}</block></switch>
				<break>break;</break>

			<default>default:</default>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>tmask</name> <operator>&amp;</operator> <name>fmask</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>fmask</name> <operator>|=</operator> <name>tmask</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* there is no year zero in AD/BC notation; i.e. "1 BC" == year 0 */</comment>
	<if_stmt><if>if <condition>(<expr><name>bc</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>is2digits</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;</operator> <literal type="number">70</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+=</operator> <literal type="number">2000</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+=</operator> <literal type="number">1900</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mer</name> <operator>!=</operator> <name>HR24</name> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>mer</name> <operator>==</operator> <name>AM</name> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>mer</name> <operator>==</operator> <name>PM</name> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>!=</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* do additional checking for full date specs... */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dtype</name> <operator>==</operator> <name>DTK_DATE</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <name>DTK_DATE_M</name><operator>)</operator> <operator>!=</operator> <name>DTK_DATE_M</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <name>DTK_TIME_M</name><operator>)</operator> <operator>==</operator> <name>DTK_TIME_M</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * check for valid day of month, now that we know for sure the month
		 * and year...
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&gt;</operator> <name><name>day_tab</name><index>[<expr><call><name>isleap</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * backend tried to find local timezone here but we don't use the
		 * result afterwards anyway so we only check for this error: daylight
		 * savings time modifier but no standard timezone?
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <name>DTK_DATE_M</name><operator>)</operator> <operator>==</operator> <name>DTK_DATE_M</name> <operator>&amp;&amp;</operator> <name>tzp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>TZ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fmask</name> <operator>&amp;</operator> <call><name>DTK_M</name><argument_list>(<argument><expr><name>DTZMOD</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* DecodeDateTime() */</comment>

<comment type="block">/* Function works as follows:
 *
 *
 * */</comment>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>find_end_token</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * str: here is28the day12the hour fmt: here is%dthe day%hthe hour
	 *
	 * we extract the 28, we read the percent sign and the type "d" then this
	 * functions gets called as find_end_token("28the day12the hour", "the
	 * day%hthehour")
	 *
	 * fmt points to "the day%hthehour", next_percent points to %hthehour and
	 * we have to find a match for everything between these positions ("the
	 * day"). We look for "the day" in str and know that the pattern we are
	 * about to scan ends where this string starts (right after the "28")
	 *
	 * At the end, *fmt is '\0' and *str isn't. end_position then is
	 * unchanged.
	 */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>end_position</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>next_percent</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>subst_location</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>scan_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>last_char</name></decl>;</decl_stmt>

	<comment type="block">/* are we at the end? */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>fmt</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>end_position</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
		<return>return <expr><name>end_position</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* not at the end */</comment>
	<while>while <condition>(<expr><name><name>fmt</name><index>[<expr><name>scan_offset</name></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <name><name>fmt</name><index>[<expr><name>scan_offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * there is no delimiter, skip to the next delimiter if we're reading
		 * a number and then something that is not a number "9:15pm", we might
		 * be able to recover with the strtol end pointer. Go for the next
		 * percent sign
		 */</comment>
		<expr_stmt><expr><name>scan_offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>next_percent</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>fmt</name> <operator>+</operator> <name>scan_offset</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>next_percent</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * we don't want to allocate extra memory, so we temporarily set the
		 * '%' sign to '\0' and call strstr However since we allow whitespace
		 * to float around everything, we have to shorten the pattern until we
		 * reach a non-whitespace character
		 */</comment>

		<expr_stmt><expr><name>subst_location</name> <operator>=</operator> <name>next_percent</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>*</operator><operator>(</operator><name>subst_location</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>subst_location</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>fmt</name> <operator>+</operator> <name>scan_offset</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>subst_location</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
		<expr_stmt><expr><name>last_char</name> <operator>=</operator> <operator>*</operator><name>subst_location</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>subst_location</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * the haystack is the str and the needle is the original fmt but it
		 * ends at the position where the next percent sign would be
		 */</comment>

		<comment type="block">/*
		 * There is one special case. Imagine: str = " 2", fmt = "%d %...",
		 * since we want to allow blanks as "dynamic" padding we have to
		 * accept this. Now, we are called with a fmt of " %..." and look for
		 * " " in str. We find it at the first position and never read the
		 * 2...
		 */</comment>
		<while>while <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		<expr_stmt><expr><name>end_position</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>fmt</name> <operator>+</operator> <name>scan_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>subst_location</name> <operator>=</operator> <name>last_char</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * there is no other percent sign. So everything up to the end has to
		 * match.
		 */</comment>
		<expr_stmt><expr><name>end_position</name> <operator>=</operator> <name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end_position</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * maybe we have the following case:
		 *
		 * str = "4:15am" fmt = "%M:%S %p"
		 *
		 * at this place we could have
		 *
		 * str = "15am" fmt = " %p"
		 *
		 * and have set fmt to " " because overwrote the % sign with a NULL
		 *
		 * In this case where we would have to match a space but can't find
		 * it, set end_position to the end of the string
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fmt</name> <operator>+</operator> <name>scan_offset</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>fmt</name> <operator>+</operator> <name>scan_offset</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>subst_location</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>end_position</name> <operator>=</operator> <name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>end_position</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pgtypes_defmt_scan</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>un_fmt_comb</name></name> <modifier>*</modifier></type><name>scan_val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scan_type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pstr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pfmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * scan everything between pstr and pstr_end. This is not including the
	 * last character so we might set it to '\0' for the parsing
	 */</comment>

	<decl_stmt><decl><type><name>char</name></type>		<name>last_char</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pstr_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>strtol_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>pstr</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pstr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><name>pstr_end</name> <operator>=</operator> <call><name>find_end_token</name><argument_list>(<argument><expr><operator>*</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pstr_end</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* there was an error, no match */</comment>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>last_char</name> <operator>=</operator> <operator>*</operator><name>pstr_end</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>pstr_end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>scan_type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGTYPES_TYPE_UINT</name></expr>:</case>

			<comment type="block">/*
			 * numbers may be blank-padded, this is the only deviation from
			 * the fmt-string we accept
			 */</comment>
			<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>pstr</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>scan_val</name><operator>-&gt;</operator><name>uint_val</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><operator>*</operator><name>pstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtol_end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>PGTYPES_TYPE_UINT_LONG</name></expr>:</case>
			<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>pstr</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>scan_val</name><operator>-&gt;</operator><name>luint_val</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>int</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><operator>*</operator><name>pstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtol_end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>PGTYPES_TYPE_STRING_MALLOCED</name></expr>:</case>
			<expr_stmt><expr><name><name>scan_val</name><operator>-&gt;</operator><name>str_val</name></name> <operator>=</operator> <call><name>pgtypes_strdup</name><argument_list>(<argument><expr><operator>*</operator><name>pstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>scan_val</name><operator>-&gt;</operator><name>str_val</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<if_stmt><if>if <condition>(<expr><name>strtol_end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>strtol_end</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>pstr</name> <operator>=</operator> <name>strtol_end</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>pstr</name> <operator>=</operator> <name>pstr_end</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>pstr_end</name> <operator>=</operator> <name>last_char</name></expr>;</expr_stmt>
	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* XXX range checking */</comment>
<function><type><name>int</name></type>
<name>PGTYPEStimestamp_defmt_scan</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>timestamp</name> <modifier>*</modifier></type> <name>d</name></decl></parameter>,
							<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>year</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>month</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>day</name></decl></parameter>,
							<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>hour</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>minute</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>second</name></decl></parameter>,
							<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>union</name> <name>un_fmt_comb</name></name></type> <name>scan_val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>scan_type</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pstr</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pfmt</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>err</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>	<name>tm</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pfmt</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pstr</name> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>pfmt</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>*</operator><name>pfmt</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		<while>while <condition>(<expr><operator>*</operator><name>pstr</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>pstr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pfmt</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pfmt</name> <operator>==</operator> <operator>*</operator><name>pstr</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>pstr</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* Error: no match */</comment>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<return>return <expr><name>err</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* here *pfmt equals '%' */</comment>
		<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><operator>*</operator><name>pfmt</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="char">'a'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>

				<comment type="block">/*
				 * we parse the day and see if it is a week day but we do not
				 * check if the week day really matches the date
				 */</comment>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<while>while <condition>(<expr><name><name>pgtypes_date_weekdays_short</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>pgtypes_date_weekdays_short</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>pstr</name></expr></argument>,
								<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pgtypes_date_weekdays_short</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* found it */</comment>
						<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>pstr</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pgtypes_date_weekdays_short</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></while>
				<break>break;</break>
			<case>case <expr><literal type="char">'A'</literal></expr>:</case>
				<comment type="block">/* see note above */</comment>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<while>while <condition>(<expr><name><name>days</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>days</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>pstr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>days</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* found it */</comment>
						<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>pstr</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>days</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></while>
				<break>break;</break>
			<case>case <expr><literal type="char">'b'</literal></expr>:</case>
			<case>case <expr><literal type="char">'h'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<while>while <condition>(<expr><name><name>months</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>months</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>pstr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>months</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* found it */</comment>
						<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>pstr</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>months</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>month</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></while>
				<break>break;</break>
			<case>case <expr><literal type="char">'B'</literal></expr>:</case>
				<comment type="block">/* see note above */</comment>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<while>while <condition>(<expr><name><name>pgtypes_date_months</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>pgtypes_date_months</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>pstr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pgtypes_date_months</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* found it */</comment>
						<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>pstr</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pgtypes_date_months</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>month</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></while>
				<break>break;</break>
			<case>case <expr><literal type="char">'c'</literal></expr>:</case>
				<comment type="block">/* XXX */</comment>
				<break>break;</break>
			<case>case <expr><literal type="char">'C'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>year</name> <operator>=</operator> <name><name>scan_val</name><operator>.</operator><name>uint_val</name></name> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'d'</literal></expr>:</case>
			<case>case <expr><literal type="char">'e'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>day</name> <operator>=</operator> <name><name>scan_val</name><operator>.</operator><name>uint_val</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'D'</literal></expr>:</case>

				<comment type="block">/*
				 * we have to concatenate the strings in order to be able to
				 * find the end of the substitution
				 */</comment>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>pgtypes_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"%m/%d/%y"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"%m/%d/%y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>err</name></expr>;</return>
			<case>case <expr><literal type="char">'m'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>month</name> <operator>=</operator> <name><name>scan_val</name><operator>.</operator><name>uint_val</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'y'</literal></expr>:</case>
			<case>case <expr><literal type="char">'g'</literal></expr>:</case>			<comment type="block">/* XXX difference to y (ISO) */</comment>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>year</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* not yet set */</comment>
					<expr_stmt><expr><operator>*</operator><name>year</name> <operator>=</operator> <name><name>scan_val</name><operator>.</operator><name>uint_val</name></name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>year</name> <operator>+=</operator> <name><name>scan_val</name><operator>.</operator><name>uint_val</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>year</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>year</name> <operator>+=</operator> <literal type="number">1900</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'G'</literal></expr>:</case>
				<comment type="block">/* XXX difference to %V (ISO) */</comment>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>year</name> <operator>=</operator> <name><name>scan_val</name><operator>.</operator><name>uint_val</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'H'</literal></expr>:</case>
			<case>case <expr><literal type="char">'I'</literal></expr>:</case>
			<case>case <expr><literal type="char">'k'</literal></expr>:</case>
			<case>case <expr><literal type="char">'l'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>hour</name> <operator>+=</operator> <name><name>scan_val</name><operator>.</operator><name>uint_val</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'j'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * XXX what should we do with that? We could say that it's
				 * sufficient if we have the year and the day within the year
				 * to get at least a specific day.
				 */</comment>
				<break>break;</break>
			<case>case <expr><literal type="char">'M'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>minute</name> <operator>=</operator> <name><name>scan_val</name><operator>.</operator><name>uint_val</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'n'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pstr</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>pstr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'p'</literal></expr>:</case>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"am"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>hour</name> <operator>+=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>pstr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"a.m."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>hour</name> <operator>+=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>pstr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"pm"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>hour</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>pstr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"p.m."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>hour</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>pstr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'P'</literal></expr>:</case>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"AM"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>hour</name> <operator>+=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>pstr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"A.M."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>hour</name> <operator>+=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>pstr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"PM"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>hour</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>pstr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"P.M."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>hour</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>pstr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'r'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>pgtypes_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"%I:%M:%S %p"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"%I:%M:%S %p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>err</name></expr>;</return>
			<case>case <expr><literal type="char">'R'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>pgtypes_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"%H:%M"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"%H:%M"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>err</name></expr>;</return>
			<case>case <expr><literal type="char">'s'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_LONG</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* number of seconds in scan_val.luint_val */</comment>
				<block>{<block_content>
					<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name>  <modifier>*</modifier></type><name>tms</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>time_t</name></type>		<name>et</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator> <name><name>scan_val</name><operator>.</operator><name>luint_val</name></name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name>tms</name> <operator>=</operator> <call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>et</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>tms</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>year</name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>month</name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>day</name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>hour</name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>minute</name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>tm_min</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>second</name> <operator>=</operator> <name><name>tms</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="char">'S'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>second</name> <operator>=</operator> <name><name>scan_val</name><operator>.</operator><name>uint_val</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'t'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pstr</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>pstr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'T'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>pgtypes_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>err</name></expr>;</return>
			<case>case <expr><literal type="char">'u'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>scan_val</name><operator>.</operator><name>uint_val</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>scan_val</name><operator>.</operator><name>uint_val</name></name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'U'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>scan_val</name><operator>.</operator><name>uint_val</name></name> <operator>&gt;</operator> <literal type="number">53</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'V'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>scan_val</name><operator>.</operator><name>uint_val</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>scan_val</name><operator>.</operator><name>uint_val</name></name> <operator>&gt;</operator> <literal type="number">53</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'w'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>scan_val</name><operator>.</operator><name>uint_val</name></name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'W'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>scan_val</name><operator>.</operator><name>uint_val</name></name> <operator>&gt;</operator> <literal type="number">53</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'x'</literal></expr>:</case>
			<case>case <expr><literal type="char">'X'</literal></expr>:</case>
				<comment type="block">/* XXX */</comment>
				<break>break;</break>
			<case>case <expr><literal type="char">'Y'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>year</name> <operator>=</operator> <name><name>scan_val</name><operator>.</operator><name>uint_val</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'z'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_STRING_MALLOCED</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>DecodeTimezone</name><argument_list>(<argument><expr><name><name>scan_val</name><operator>.</operator><name>str_val</name></name></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>scan_val</name><operator>.</operator><name>str_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_type</name> <operator>=</operator> <name>PGTYPES_TYPE_STRING_MALLOCED</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pgtypes_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_val</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>, <argument><expr><name>pfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * XXX use DecodeSpecial instead?  Do we need strcasecmp
					 * here?
					 */</comment>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>szdatetktbl</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>datetktbl</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TZ</name> <operator>||</operator> <name><name>datetktbl</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>DTZ</name><operator>)</operator> <operator>&amp;&amp;</operator>
							<call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>datetktbl</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>token</name></expr></argument>,
										  <argument><expr><name><name>scan_val</name><operator>.</operator><name>str_val</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><operator>*</operator><name>tz</name> <operator>=</operator> <operator>-</operator><name><name>datetktbl</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
							<break>break;</break>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></for>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>scan_val</name><operator>.</operator><name>str_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'+'</literal></expr>:</case>
				<comment type="block">/* XXX */</comment>
				<break>break;</break>
			<case>case <expr><literal type="char">'%'</literal></expr>:</case>
				<expr_stmt><expr><name>pfmt</name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pstr</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>pstr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>second</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>second</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>minute</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>minute</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>hour</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>hour</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>day</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>day</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>month</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>month</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>year</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>year</name> <operator>=</operator> <literal type="number">1970</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>second</name> <operator>&gt;</operator> <literal type="number">59</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>second</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>minute</name> <operator>&gt;</operator> <literal type="number">59</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>minute</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>hour</name> <operator>&gt;</operator> <literal type="number">24</literal> <operator>||</operator>		<comment type="block">/* test for &gt; 24:00:00 */</comment>
			<operator>(</operator><operator>*</operator><name>hour</name> <operator>==</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>minute</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>second</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>hour</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>month</name> <operator>&gt;</operator> <name>MONTHS_PER_YEAR</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>month</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>day</name> <operator>&gt;</operator> <name><name>day_tab</name><index>[<expr><call><name>isleap</name><argument_list>(<argument><expr><operator>*</operator><name>year</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><operator>*</operator><name>month</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>day</name> <operator>=</operator> <name><name>day_tab</name><index>[<expr><call><name>isleap</name><argument_list>(<argument><expr><operator>*</operator><name>year</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><operator>*</operator><name>month</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <operator>*</operator><name>second</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <operator>*</operator><name>minute</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <operator>*</operator><name>hour</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <operator>*</operator><name>day</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <operator>*</operator><name>month</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <operator>*</operator><name>year</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>tm2timestamp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tz</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* XXX: 1900 is compiled in as the base for years */</comment>
</unit>
