<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/interfaces/ecpg/ecpglib/data.c"><comment type="block">/* src/interfaces/ecpg/ecpglib/data.c */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTGRES_ECPG_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpglib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgerrno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlca.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_interval.h"</cpp:file></cpp:include>

<comment type="block">/* returns true if character c is a delimiter for the given array type */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>array_delimiter</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ARRAY_TYPE</name></name></type> <name>isarray</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>isarray</name> <operator>==</operator> <name>ECPG_ARRAY_ARRAY</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>isarray</name> <operator>==</operator> <name>ECPG_ARRAY_VECTOR</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* returns true if character c marks the boundary for the given array type */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>array_boundary</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ARRAY_TYPE</name></name></type> <name>isarray</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>isarray</name> <operator>==</operator> <name>ECPG_ARRAY_ARRAY</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>isarray</name> <operator>==</operator> <name>ECPG_ARRAY_VECTOR</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* returns true if some garbage is found at the end of the scanned string */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>garbage_left</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ARRAY_TYPE</name></name></type> <name>isarray</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>scan_length</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>COMPAT_MODE</name></name></type> <name>compat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * INFORMIX allows for selecting a numeric into an int, the result is
	 * truncated
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>isarray</name> <operator>==</operator> <name>ECPG_ARRAY_NONE</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>INFORMIX_MODE</name><argument_list>(<argument><expr><name>compat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>scan_length</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* skip invalid characters */</comment>
			<do>do
			<block>{<block_content>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>scan_length</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block> while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>*</operator><name>scan_length</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>scan_length</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>scan_length</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>ECPG_IS_ARRAY</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>array_delimiter</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>*</operator><operator>*</operator><name>scan_length</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>array_boundary</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>*</operator><operator>*</operator><name>scan_length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* stolen code from src/backend/utils/adt/float.c */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32</name></type> <name><name>nan</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0x7fffffff</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAN</name></cpp:macro> <cpp:value>(*(const double *) nan)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>get_float8_infinity</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>INFINITY</name></cpp:ifdef>
	<return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <name>INFINITY</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>HUGE_VAL</name> <operator>*</operator> <name>HUGE_VAL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>get_float8_nan</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* (double) NAN doesn't work on some NetBSD/MIPS releases */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
	<return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <name>NAN</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">0.0</literal> <operator>/</operator> <literal type="number">0.0</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_special_value</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>retval</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"NaN"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>retval</name> <operator>=</operator> <call><name>get_float8_nan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"Infinity"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>retval</name> <operator>=</operator> <call><name>get_float8_infinity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"-Infinity"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>retval</name> <operator>=</operator> <operator>-</operator><call><name>get_float8_infinity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ecpg_get_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>results</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>act_tuple</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>act_field</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>,
			  <parameter><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>ind_type</name></decl></parameter>,
			  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ind</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>varcharsize</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>,
			  <parameter><decl><type><name>long</name></type> <name>ind_offset</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ARRAY_TYPE</name></name></type> <name>isarray</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>COMPAT_MODE</name></name></type> <name>compat</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_indicator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pval</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><name>act_field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>binary</name> <init>= <expr><call><name>PQfformat</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>act_field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>size</name> <init>= <expr><call><name>PQgetlength</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><name>act_field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>value_for_indicator</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>log_offset</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_OUT_OF_MEMORY</name></expr></argument>,
				   <argument><expr><name>ECPG_SQLSTATE_ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If we are running in a regression test, do not log the offset variable,
	 * it depends on the machine's alignment.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>ecpg_internal_regression_mode</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>log_offset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>log_offset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_get_data on line %d: RESULT: %s offset: %ld; array: %s\n"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pval</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>binary</name></expr> ?</condition><then> <expr><literal type="string">"BINARY"</literal></expr> </then><else>: <expr><name>pval</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"EMPTY"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>log_offset</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>ECPG_IS_ARRAY</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* pval is a pointer to the value */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pval</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * This should never happen because we already checked that we found
		 * at least one tuple, but let's play it safe.
		 */</comment>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_NOT_FOUND</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_NO_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* We will have to decode the value */</comment>

	<comment type="block">/*
	 * check for null value and set indicator accordingly, i.e. -1 if NULL and
	 * 0 if not
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PQgetisnull</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><name>act_field</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>value_for_indicator</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>ind_type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPGt_short</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>value_for_indicator</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_int</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>value_for_indicator</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>value_for_indicator</name></expr>;</expr_stmt>
			<break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG_INT</name></cpp:ifdef>
		<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>value_for_indicator</name></expr>;</expr_stmt>
			<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_LONG_LONG_INT */</comment>
		<case>case <expr><name>ECPGt_NO_INDICATOR</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>value_for_indicator</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>force_indicator</name> <operator>==</operator> <name>false</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * Informix has an additional way to specify NULLs note
					 * that this uses special values to denote NULL
					 */</comment>
					<expr_stmt><expr><call><name>ECPGset_noind_null</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_MISSING_INDICATOR</name></expr></argument>,
							   <argument><expr><name>ECPG_SQLSTATE_NULL_VALUE_NO_INDICATOR_PARAMETER</name></expr></argument>,
							   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_UNSUPPORTED</name></expr></argument>,
					   <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>,
					   <argument><expr><call><name>ecpg_type_name</name><argument_list>(<argument><expr><name>ind_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>value_for_indicator</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* let's check if it really is an array if it should be one */</comment>
	<if_stmt><if>if <condition>(<expr><name>isarray</name> <operator>==</operator> <name>ECPG_ARRAY_ARRAY</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pval</name> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_DATA_NOT_ARRAY</name></expr></argument>,
					   <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>ECPGt_char</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_char</name></expr>:</case>
			<case>case <expr><name>ECPGt_varchar</name></expr>:</case>
			<case>case <expr><name>ECPGt_string</name></expr>:</case>
				<break>break;</break>

			<default>default:</default>
				<expr_stmt><expr><name>pval</name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>

	<do>do
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>binary</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>varcharsize</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>varcharsize</name> <operator>*</operator> <name>offset</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>, <argument><expr><name>varcharsize</name> <operator>*</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>varcharsize</name> <operator>*</operator> <name>offset</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* truncation */</comment>
					<switch>switch <condition>(<expr><name>ind_type</name></expr>)</condition>
					<block>{<block_content>
						<case>case <expr><name>ECPGt_short</name></expr>:</case>
						<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
							<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>ECPGt_int</name></expr>:</case>
						<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
							<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>ECPGt_long</name></expr>:</case>
						<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
							<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
							<break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG_INT</name></cpp:ifdef>
						<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
						<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
							<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
							<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_LONG_LONG_INT */</comment>
						<default>default:</default>
							<break>break;</break>
					</block_content>}</block></switch>
					<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlwarn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sqlca</name><operator>-&gt;</operator><name>sqlwarn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'W'</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>pval</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
			<block>{<block_content>
					<decl_stmt><decl><type><name>long</name></type>		<name>res</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ures</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>double</name></type>		<name>dres</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>scan_length</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>numeric</name>    <modifier>*</modifier></type><name>nres</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>date</name></type>		<name>ddres</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>timestamp</name></type>	<name>tres</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>interval</name>   <modifier>*</modifier></type><name>ires</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>endptr</name></decl>,
								<decl><type ref="prev"/><name>endchar</name></decl>;</decl_stmt>

				<case>case <expr><name>ECPGt_short</name></expr>:</case>
				<case>case <expr><name>ECPGt_int</name></expr>:</case>
				<case>case <expr><name>ECPGt_long</name></expr>:</case>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>pval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>garbage_left</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_INT_FORMAT</name></expr></argument>,
								   <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>false</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>pval</name> <operator>=</operator> <name>scan_length</name></expr>;</expr_stmt>

					<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
					<block>{<block_content>
						<case>case <expr><name>ECPGt_short</name></expr>:</case>
							<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <name>res</name></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>ECPGt_int</name></expr>:</case>
							<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>res</name></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>ECPGt_long</name></expr>:</case>
							<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>res</name></expr>;</expr_stmt>
							<break>break;</break>
						<default>default:</default>
							<comment type="block">/* Cannot happen */</comment>
							<break>break;</break>
					</block_content>}</block></switch>
					<break>break;</break>

				<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
				<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
				<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
					<expr_stmt><expr><name>ures</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>pval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>garbage_left</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_UINT_FORMAT</name></expr></argument>,
								   <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>false</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>pval</name> <operator>=</operator> <name>scan_length</name></expr>;</expr_stmt>

					<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
					<block>{<block_content>
						<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
							<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>ures</name></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
							<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>ures</name></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
							<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>ures</name></expr>;</expr_stmt>
							<break>break;</break>
						<default>default:</default>
							<comment type="block">/* Cannot happen */</comment>
							<break>break;</break>
					</block_content>}</block></switch>
					<break>break;</break>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG_INT</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRTOLL</name></cpp:ifdef>
				<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
					<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>pval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>garbage_left</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_INT_FORMAT</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>false</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>pval</name> <operator>=</operator> <name>scan_length</name></expr>;</expr_stmt>

					<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_STRTOLL */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRTOULL</name></cpp:ifdef>
				<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
					<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>pval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>garbage_left</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_UINT_FORMAT</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>false</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>pval</name> <operator>=</operator> <name>scan_length</name></expr>;</expr_stmt>

					<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_STRTOULL */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_LONG_LONG_INT */</comment>

				<case>case <expr><name>ECPGt_float</name></expr>:</case>
				<case>case <expr><name>ECPGt_double</name></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name>isarray</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pval</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>pval</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_special_value</name><argument_list>(<argument><expr><name>pval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dres</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>dres</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>pval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><name>isarray</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>scan_length</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>scan_length</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<comment type="block">/* no special INFORMIX treatment for floats */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>garbage_left</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>, <argument><expr><name>ECPG_COMPAT_PGSQL</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_FLOAT_FORMAT</name></expr></argument>,
								   <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>false</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>pval</name> <operator>=</operator> <name>scan_length</name></expr>;</expr_stmt>

					<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
					<block>{<block_content>
						<case>case <expr><name>ECPGt_float</name></expr>:</case>
							<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>dres</name></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>ECPGt_double</name></expr>:</case>
							<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>dres</name></expr>;</expr_stmt>
							<break>break;</break>
						<default>default:</default>
							<comment type="block">/* Cannot happen */</comment>
							<break>break;</break>
					</block_content>}</block></switch>
					<break>break;</break>

				<case>case <expr><name>ECPGt_bool</name></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>pval</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name><name>pval</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>pval</name><operator>++</operator></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name><name>pval</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>pval</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>pval</name><operator>++</operator></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name><name>pval</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>PQgetisnull</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><name>act_field</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* NULL is valid */</comment>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_CONVERT_BOOL</name></expr></argument>,
							   <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
					<break>break;</break>

				<case>case <expr><name>ECPGt_char</name></expr>:</case>
				<case>case <expr><name>ECPGt_unsigned_char</name></expr>:</case>
				<case>case <expr><name>ECPGt_string</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator></expr></init></decl>;</decl_stmt>

						<comment type="block">/*
						 * If varcharsize is unknown and the offset is that of
						 * char *, then this variable represents the array of
						 * character pointers. So, use extra indirection.
						 */</comment>
						<if_stmt><if>if <condition>(<expr><name>varcharsize</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>offset</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>str</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<if_stmt><if>if <condition>(<expr><name>varcharsize</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>varcharsize</name> <operator>&gt;</operator> <name>size</name></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/*
							 * compatibility mode, blank pad and null
							 * terminate char array
							 */</comment>
							<if_stmt><if>if <condition>(<expr><call><name>ORACLE_MODE</name><argument_list>(<argument><expr><name>compat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>ECPGt_char</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>ECPGt_unsigned_char</name><operator>)</operator></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>varcharsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>str</name><index>[<expr><name>varcharsize</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

								<comment type="block">/*
								 * compatibility mode empty string gets -1
								 * indicator but no warning
								 */</comment>
								<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
								<block>{<block_content>
									<comment type="block">/* truncation */</comment>
									<switch>switch <condition>(<expr><name>ind_type</name></expr>)</condition>
									<block>{<block_content>
										<case>case <expr><name>ECPGt_short</name></expr>:</case>
										<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
											<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
											<break>break;</break>
										<case>case <expr><name>ECPGt_int</name></expr>:</case>
										<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
											<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
											<break>break;</break>
										<case>case <expr><name>ECPGt_long</name></expr>:</case>
										<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
											<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
											<break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG_INT</name></cpp:ifdef>
										<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
										<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
											<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
											<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_LONG_LONG_INT */</comment>
										<default>default:</default>
											<break>break;</break>
									</block_content>}</block></switch>
								</block_content>}</block></if></if_stmt>
							</block_content>}</block></if>
							<else>else
							<block>{<block_content>
								<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></else></if_stmt>
							<comment type="block">/* do the rtrim() */</comment>
							<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ECPGt_string</name></expr>)</condition>
							<block>{<block_content>
								<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>last</name> <init>= <expr><name>str</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

								<while>while <condition>(<expr><name>last</name> <operator>&gt;</operator> <name>str</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>last</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>last</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
								<block>{<block_content>
									<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
									<expr_stmt><expr><name>last</name><operator>--</operator></expr>;</expr_stmt>
								</block_content>}</block></while>
							</block_content>}</block></if></if_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>, <argument><expr><name>varcharsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							<comment type="block">/* compatibility mode, null terminate char array */</comment>
							<if_stmt><if>if <condition>(<expr><call><name>ORACLE_MODE</name><argument_list>(<argument><expr><name>compat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>varcharsize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>size</name></expr>)</condition>
							<block>{<block_content>
								<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ECPGt_char</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>ECPGt_unsigned_char</name></expr>)</condition><block type="pseudo"><block_content>
									<expr_stmt><expr><name><name>str</name><index>[<expr><name>varcharsize</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
							</block_content>}</block></if></if_stmt>

							<if_stmt><if>if <condition>(<expr><name>varcharsize</name> <operator>&lt;</operator> <name>size</name> <operator>||</operator> <operator>(</operator><call><name>ORACLE_MODE</name><argument_list>(<argument><expr><name>compat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>varcharsize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>size</name><operator>)</operator></expr>)</condition>
							<block>{<block_content>
								<comment type="block">/* truncation */</comment>
								<switch>switch <condition>(<expr><name>ind_type</name></expr>)</condition>
								<block>{<block_content>
									<case>case <expr><name>ECPGt_short</name></expr>:</case>
									<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
										<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
										<break>break;</break>
									<case>case <expr><name>ECPGt_int</name></expr>:</case>
									<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
										<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
										<break>break;</break>
									<case>case <expr><name>ECPGt_long</name></expr>:</case>
									<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
										<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
										<break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG_INT</name></cpp:ifdef>
									<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
									<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
										<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
										<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_LONG_LONG_INT */</comment>
									<default>default:</default>
										<break>break;</break>
								</block_content>}</block></switch>
								<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlwarn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sqlca</name><operator>-&gt;</operator><name>sqlwarn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'W'</literal></expr>;</expr_stmt>
							</block_content>}</block></if></if_stmt>
						</block_content>}</block></else></if_stmt>
						<expr_stmt><expr><name>pval</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
					</block_content>}</block>
					<break>break;</break>

				<case>case <expr><name>ECPGt_varchar</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name><name>struct</name> <name>ECPGgeneric_varchar</name></name> <modifier>*</modifier></type><name>variable</name> <init>=
						<expr><operator>(</operator>struct <name>ECPGgeneric_varchar</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name><name>variable</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>varcharsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>variable</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>, <argument><expr><name>pval</name></expr></argument>, <argument><expr><name><name>variable</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>variable</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>, <argument><expr><name>pval</name></expr></argument>, <argument><expr><name>varcharsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							<if_stmt><if>if <condition>(<expr><name><name>variable</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>varcharsize</name></expr>)</condition>
							<block>{<block_content>
								<comment type="block">/* truncation */</comment>
								<switch>switch <condition>(<expr><name>ind_type</name></expr>)</condition>
								<block>{<block_content>
									<case>case <expr><name>ECPGt_short</name></expr>:</case>
									<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
										<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name><name>variable</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
										<break>break;</break>
									<case>case <expr><name>ECPGt_int</name></expr>:</case>
									<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
										<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name><name>variable</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
										<break>break;</break>
									<case>case <expr><name>ECPGt_long</name></expr>:</case>
									<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
										<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name><name>variable</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
										<break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG_INT</name></cpp:ifdef>
									<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
									<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
										<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ind</name> <operator>+</operator> <name>ind_offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name><name>variable</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
										<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_LONG_LONG_INT */</comment>
									<default>default:</default>
										<break>break;</break>
								</block_content>}</block></switch>
								<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlwarn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sqlca</name><operator>-&gt;</operator><name>sqlwarn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'W'</literal></expr>;</expr_stmt>

								<expr_stmt><expr><name><name>variable</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>varcharsize</name></expr>;</expr_stmt>
							</block_content>}</block></if></if_stmt>
						</block_content>}</block></else></if_stmt>
						<expr_stmt><expr><name>pval</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
					</block_content>}</block>
					<break>break;</break>

				<case>case <expr><name>ECPGt_decimal</name></expr>:</case>
				<case>case <expr><name>ECPGt_numeric</name></expr>:</case>
					<for>for <control>(<init><expr><name>endptr</name> <operator>=</operator> <name>pval</name></expr>;</init> <condition><expr><operator>*</operator><name>endptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>;</condition> <incr><expr><name>endptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
					<expr_stmt><expr><name>endchar</name> <operator>=</operator> <operator>*</operator><name>endptr</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>nres</name> <operator>=</operator> <call><name>PGTYPESnumeric_from_asc</name><argument_list>(<argument><expr><name>pval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <name>endchar</name></expr>;</expr_stmt>

					<comment type="block">/* did we get an error? */</comment>
					<if_stmt><if>if <condition>(<expr><name>nres</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_get_data on line %d: RESULT %s; errno %d\n"</literal></expr></argument>,
								 <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><call><name>INFORMIX_MODE</name><argument_list>(<argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/*
							 * Informix wants its own NULL value here instead
							 * of an error
							 */</comment>
							<expr_stmt><expr><name>nres</name> <operator>=</operator> <call><name>PGTYPESnumeric_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
							<if_stmt><if>if <condition>(<expr><name>nres</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><call><name>ECPGset_noind_null</name><argument_list>(<argument><expr><name>ECPGt_numeric</name></expr></argument>, <argument><expr><name>nres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
							<else>else
							<block>{<block_content>
								<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_OUT_OF_MEMORY</name></expr></argument>,
										   <argument><expr><name>ECPG_SQLSTATE_ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<return>return <expr><name>false</name></expr>;</return>
							</block_content>}</block></else></if_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_NUMERIC_FORMAT</name></expr></argument>,
									   <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isarray</name> <operator>&amp;&amp;</operator> <call><name>garbage_left</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_NUMERIC_FORMAT</name></expr></argument>,
									   <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></else></if_stmt>
					<expr_stmt><expr><name>pval</name> <operator>=</operator> <name>scan_length</name></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ECPGt_numeric</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>PGTYPESnumeric_copy</name><argument_list>(<argument><expr><name>nres</name></expr></argument>, <argument><expr><operator>(</operator><name>numeric</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>PGTYPESnumeric_to_decimal</name><argument_list>(<argument><expr><name>nres</name></expr></argument>, <argument><expr><operator>(</operator><name>decimal</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>nres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><name>ECPGt_interval</name></expr>:</case>
					<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pval</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>pval</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<for>for <control>(<init><expr><name>endptr</name> <operator>=</operator> <name>pval</name></expr>;</init> <condition><expr><operator>*</operator><name>endptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>;</condition> <incr><expr><name>endptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
					<expr_stmt><expr><name>endchar</name> <operator>=</operator> <operator>*</operator><name>endptr</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>ires</name> <operator>=</operator> <call><name>PGTYPESinterval_from_asc</name><argument_list>(<argument><expr><name>pval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <name>endchar</name></expr>;</expr_stmt>

					<comment type="block">/* did we get an error? */</comment>
					<if_stmt><if>if <condition>(<expr><name>ires</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_get_data on line %d: RESULT %s; errno %d\n"</literal></expr></argument>,
								 <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><call><name>INFORMIX_MODE</name><argument_list>(<argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/*
							 * Informix wants its own NULL value here instead
							 * of an error
							 */</comment>
							<expr_stmt><expr><name>ires</name> <operator>=</operator> <operator>(</operator><name>interval</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ires</name></expr>)</condition><block type="pseudo"><block_content>
								<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

							<expr_stmt><expr><call><name>ECPGset_noind_null</name><argument_list>(<argument><expr><name>ECPGt_interval</name></expr></argument>, <argument><expr><name>ires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_INTERVAL_FORMAT</name></expr></argument>,
									   <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scan_length</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>scan_length</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isarray</name> <operator>&amp;&amp;</operator> <call><name>garbage_left</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_INTERVAL_FORMAT</name></expr></argument>,
									   <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></else></if_stmt>
					<expr_stmt><expr><name>pval</name> <operator>=</operator> <name>scan_length</name></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>PGTYPESinterval_copy</name><argument_list>(<argument><expr><name>ires</name></expr></argument>, <argument><expr><operator>(</operator><name>interval</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><name>ECPGt_date</name></expr>:</case>
					<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pval</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>pval</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<for>for <control>(<init><expr><name>endptr</name> <operator>=</operator> <name>pval</name></expr>;</init> <condition><expr><operator>*</operator><name>endptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>;</condition> <incr><expr><name>endptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
					<expr_stmt><expr><name>endchar</name> <operator>=</operator> <operator>*</operator><name>endptr</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>ddres</name> <operator>=</operator> <call><name>PGTYPESdate_from_asc</name><argument_list>(<argument><expr><name>pval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <name>endchar</name></expr>;</expr_stmt>

					<comment type="block">/* did we get an error? */</comment>
					<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_get_data on line %d: RESULT %s; errno %d\n"</literal></expr></argument>,
								 <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><call><name>INFORMIX_MODE</name><argument_list>(<argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/*
							 * Informix wants its own NULL value here instead
							 * of an error
							 */</comment>
							<expr_stmt><expr><call><name>ECPGset_noind_null</name><argument_list>(<argument><expr><name>ECPGt_date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ddres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_DATE_FORMAT</name></expr></argument>,
									   <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scan_length</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>scan_length</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isarray</name> <operator>&amp;&amp;</operator> <call><name>garbage_left</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_DATE_FORMAT</name></expr></argument>,
									   <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></else></if_stmt>

					<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>date</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>ddres</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>pval</name> <operator>=</operator> <name>scan_length</name></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><name>ECPGt_timestamp</name></expr>:</case>
					<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pval</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>pval</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<for>for <control>(<init><expr><name>endptr</name> <operator>=</operator> <name>pval</name></expr>;</init> <condition><expr><operator>*</operator><name>endptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>;</condition> <incr><expr><name>endptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
					<expr_stmt><expr><name>endchar</name> <operator>=</operator> <operator>*</operator><name>endptr</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>tres</name> <operator>=</operator> <call><name>PGTYPEStimestamp_from_asc</name><argument_list>(<argument><expr><name>pval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <name>endchar</name></expr>;</expr_stmt>

					<comment type="block">/* did we get an error? */</comment>
					<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_get_data on line %d: RESULT %s; errno %d\n"</literal></expr></argument>,
								 <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><call><name>INFORMIX_MODE</name><argument_list>(<argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/*
							 * Informix wants its own NULL value here instead
							 * of an error
							 */</comment>
							<expr_stmt><expr><call><name>ECPGset_noind_null</name><argument_list>(<argument><expr><name>ECPGt_timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_TIMESTAMP_FORMAT</name></expr></argument>,
									   <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scan_length</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>scan_length</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isarray</name> <operator>&amp;&amp;</operator> <call><name>garbage_left</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scan_length</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_TIMESTAMP_FORMAT</name></expr></argument>,
									   <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></else></if_stmt>

					<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>timestamp</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>var</name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name>act_tuple</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>tres</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>pval</name> <operator>=</operator> <name>scan_length</name></expr>;</expr_stmt>
					<break>break;</break>

				<default>default:</default>
					<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_UNSUPPORTED</name></expr></argument>,
							   <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>,
							   <argument><expr><call><name>ecpg_type_name</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
					<break>break;</break>
			</block_content>}</block></switch>
			<if_stmt><if>if <condition>(<expr><call><name>ECPG_IS_ARRAY</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>bool</name></type>		<name>string</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

				<comment type="block">/* set array to next entry */</comment>
				<expr_stmt><expr><operator>++</operator><name>act_tuple</name></expr>;</expr_stmt>

				<comment type="block">/* set pval to the next entry */</comment>

				<comment type="block">/*
				 * *pval != '\0' should not be needed, but is used as a safety
				 * guard
				 */</comment>
				<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>pval</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>string</name> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>array_delimiter</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>*</operator><name>pval</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>array_boundary</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>*</operator><name>pval</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>pval</name></expr></incr>)</control><block type="pseudo"><block_content>
					<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pval</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>string</name> <operator>=</operator> <ternary><condition><expr><name>string</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

				<if_stmt><if>if <condition>(<expr><call><name>array_delimiter</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>*</operator><name>pval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>++</operator><name>pval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block> while <condition>(<expr><operator>*</operator><name>pval</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>array_boundary</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>, <argument><expr><operator>*</operator><name>pval</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
