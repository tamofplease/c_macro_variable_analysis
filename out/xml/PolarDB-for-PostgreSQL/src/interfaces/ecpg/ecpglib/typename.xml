<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/interfaces/ecpg/ecpglib/typename.c"><comment type="block">/* src/interfaces/ecpg/ecpglib/typename.c */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTGRES_ECPG_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type_d.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpglib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqltypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql3types.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This function is used to generate the correct type names.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ecpg_type_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>typ</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>typ</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPGt_char</name></expr>:</case>
		<case>case <expr><name>ECPGt_string</name></expr>:</case>
			<return>return <expr><literal type="string">"char"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_unsigned_char</name></expr>:</case>
			<return>return <expr><literal type="string">"unsigned char"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_short</name></expr>:</case>
			<return>return <expr><literal type="string">"short"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
			<return>return <expr><literal type="string">"unsigned short"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_int</name></expr>:</case>
			<return>return <expr><literal type="string">"int"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
			<return>return <expr><literal type="string">"unsigned int"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_long</name></expr>:</case>
			<return>return <expr><literal type="string">"long"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
			<return>return <expr><literal type="string">"unsigned long"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
			<return>return <expr><literal type="string">"long long"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
			<return>return <expr><literal type="string">"unsigned long long"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_float</name></expr>:</case>
			<return>return <expr><literal type="string">"float"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_double</name></expr>:</case>
			<return>return <expr><literal type="string">"double"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_bool</name></expr>:</case>
			<return>return <expr><literal type="string">"bool"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_varchar</name></expr>:</case>
			<return>return <expr><literal type="string">"varchar"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_char_variable</name></expr>:</case>
			<return>return <expr><literal type="string">"char"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_decimal</name></expr>:</case>
			<return>return <expr><literal type="string">"decimal"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_numeric</name></expr>:</case>
			<return>return <expr><literal type="string">"numeric"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_date</name></expr>:</case>
			<return>return <expr><literal type="string">"date"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_timestamp</name></expr>:</case>
			<return>return <expr><literal type="string">"timestamp"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_interval</name></expr>:</case>
			<return>return <expr><literal type="string">"interval"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_const</name></expr>:</case>
			<return>return <expr><literal type="string">"Const"</literal></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<return>return <expr><literal type="string">""</literal></expr>;</return>					<comment type="block">/* keep MSC compiler happy */</comment>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ecpg_dynamic_type</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BOOLOID</name></expr>:</case>
			<return>return <expr><name>SQL3_BOOLEAN</name></expr>;</return>	<comment type="block">/* bool */</comment>
		<case>case <expr><name>INT2OID</name></expr>:</case>
			<return>return <expr><name>SQL3_SMALLINT</name></expr>;</return>	<comment type="block">/* int2 */</comment>
		<case>case <expr><name>INT4OID</name></expr>:</case>
			<return>return <expr><name>SQL3_INTEGER</name></expr>;</return>	<comment type="block">/* int4 */</comment>
		<case>case <expr><name>TEXTOID</name></expr>:</case>
			<return>return <expr><name>SQL3_CHARACTER</name></expr>;</return>	<comment type="block">/* text */</comment>
		<case>case <expr><name>FLOAT4OID</name></expr>:</case>
			<return>return <expr><name>SQL3_REAL</name></expr>;</return>	<comment type="block">/* float4 */</comment>
		<case>case <expr><name>FLOAT8OID</name></expr>:</case>
			<return>return <expr><name>SQL3_DOUBLE_PRECISION</name></expr>;</return>	<comment type="block">/* float8 */</comment>
		<case>case <expr><name>BPCHAROID</name></expr>:</case>
			<return>return <expr><name>SQL3_CHARACTER</name></expr>;</return>	<comment type="block">/* bpchar */</comment>
		<case>case <expr><name>VARCHAROID</name></expr>:</case>
			<return>return <expr><name>SQL3_CHARACTER_VARYING</name></expr>;</return>	<comment type="block">/* varchar */</comment>
		<case>case <expr><name>DATEOID</name></expr>:</case>
			<return>return <expr><name>SQL3_DATE_TIME_TIMESTAMP</name></expr>;</return>	<comment type="block">/* date */</comment>
		<case>case <expr><name>TIMEOID</name></expr>:</case>
			<return>return <expr><name>SQL3_DATE_TIME_TIMESTAMP</name></expr>;</return>	<comment type="block">/* time */</comment>
		<case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
			<return>return <expr><name>SQL3_DATE_TIME_TIMESTAMP</name></expr>;</return>	<comment type="block">/* datetime */</comment>
		<case>case <expr><name>NUMERICOID</name></expr>:</case>
			<return>return <expr><name>SQL3_NUMERIC</name></expr>;</return>	<comment type="block">/* numeric */</comment>
		<default>default:</default>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>sqlda_dynamic_type</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>COMPAT_MODE</name></name></type> <name>compat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CHAROID</name></expr>:</case>
		<case>case <expr><name>VARCHAROID</name></expr>:</case>
		<case>case <expr><name>BPCHAROID</name></expr>:</case>
		<case>case <expr><name>TEXTOID</name></expr>:</case>
			<return>return <expr><name>ECPGt_char</name></expr>;</return>
		<case>case <expr><name>INT2OID</name></expr>:</case>
			<return>return <expr><name>ECPGt_short</name></expr>;</return>
		<case>case <expr><name>INT4OID</name></expr>:</case>
			<return>return <expr><name>ECPGt_int</name></expr>;</return>
		<case>case <expr><name>FLOAT8OID</name></expr>:</case>
			<return>return <expr><name>ECPGt_double</name></expr>;</return>
		<case>case <expr><name>FLOAT4OID</name></expr>:</case>
			<return>return <expr><name>ECPGt_float</name></expr>;</return>
		<case>case <expr><name>NUMERICOID</name></expr>:</case>
			<return>return <expr><ternary><condition><expr><call><name>INFORMIX_MODE</name><argument_list>(<argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ECPGt_decimal</name></expr> </then><else>: <expr><name>ECPGt_numeric</name></expr></else></ternary></expr>;</return>
		<case>case <expr><name>DATEOID</name></expr>:</case>
			<return>return <expr><name>ECPGt_date</name></expr>;</return>
		<case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
		<case>case <expr><name>TIMESTAMPTZOID</name></expr>:</case>
			<return>return <expr><name>ECPGt_timestamp</name></expr>;</return>
		<case>case <expr><name>INTERVALOID</name></expr>:</case>
			<return>return <expr><name>ECPGt_interval</name></expr>;</return>
		<case>case <expr><name>INT8OID</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG_INT_64</name></cpp:ifdef>
			<return>return <expr><name>ECPGt_long_long</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_INT_64</name></cpp:ifdef>
			<return>return <expr><name>ECPGt_long</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<comment type="block">/* Unhandled types always return a string */</comment>
		<default>default:</default>
			<return>return <expr><name>ECPGt_char</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
