<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/interfaces/ecpg/ecpglib/descriptor.c"><comment type="block">/* dynamic SQL support routines
 *
 * src/interfaces/ecpg/ecpglib/descriptor.c
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTGRES_ECPG_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type_d.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpg-pthread-win32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpglib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgerrno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlca.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlda.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql3types.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>descriptor_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* We manage descriptors separately for each thread. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type> <name>descriptor_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>descriptor_once</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>descriptor_deallocate_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>descriptor_destructor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>descriptor_deallocate_all</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>descriptor_key_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>descriptor_key</name></expr></argument>, <argument><expr><name>descriptor_destructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type>
<name>get_descriptors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>descriptor_once</name></expr></argument>, <argument><expr><name>descriptor_key_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator>struct <name>descriptor</name> <operator>*</operator><operator>)</operator> <call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>descriptor_key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_descriptors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>descriptor_key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>all_descriptors</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_descriptors</name><parameter_list>()</parameter_list></cpp:macro>		<cpp:value>(all_descriptors)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_descriptors</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>do { all_descriptors = (value); } while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* old internal convenience function that might go away later */</comment>
<function><type><specifier>static</specifier> <name>PGresult</name> <modifier>*</modifier></type>
<name>ecpg_result_by_descriptor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>ecpg_find_desc</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>desc</name><operator>-&gt;</operator><name>result</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>ecpg_dynamic_type_DDT</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DATEOID</name></expr>:</case>
			<return>return <expr><name>SQL3_DDT_DATE</name></expr>;</return>
		<case>case <expr><name>TIMEOID</name></expr>:</case>
			<return>return <expr><name>SQL3_DDT_TIME</name></expr>;</return>
		<case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
			<return>return <expr><name>SQL3_DDT_TIMESTAMP</name></expr>;</return>
		<case>case <expr><name>TIMESTAMPTZOID</name></expr>:</case>
			<return>return <expr><name>SQL3_DDT_TIMESTAMP_WITH_TIME_ZONE</name></expr>;</return>
		<case>case <expr><name>TIMETZOID</name></expr>:</case>
			<return>return <expr><name>SQL3_DDT_TIME_WITH_TIME_ZONE</name></expr>;</return>
		<default>default:</default>
			<return>return <expr><name>SQL3_DDT_ILLEGAL</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ECPGget_desc_header</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc_name</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>ECPGresult</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_OUT_OF_MEMORY</name></expr></argument>,
				   <argument><expr><name>ECPG_SQLSTATE_ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ecpg_init_sqlca</name><argument_list>(<argument><expr><name>sqlca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ECPGresult</name> <operator>=</operator> <call><name>ecpg_result_by_descriptor</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>desc_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ECPGresult</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <call><name>PQnfields</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGget_desc_header: found %d attributes\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>get_int_item</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>vartype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>vartype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPGt_short</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name>var</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_int</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>var</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_long</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <name>var</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator> <name>var</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <name>var</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator> <name>var</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG_INT</name></cpp:ifdef>
		<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <name>var</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <name>var</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_LONG_LONG_INT */</comment>
		<case>case <expr><name>ECPGt_float</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name>var</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_double</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>var</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_VAR_NOT_NUMERIC</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_RESTRICTED_DATA_TYPE_ATTRIBUTE_VIOLATION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>set_int_item</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>vartype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>vartype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPGt_short</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>short</name> <operator>*</operator><operator>)</operator> <name>var</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_int</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator> <name>var</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_long</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>long</name> <operator>*</operator><operator>)</operator> <name>var</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator> <name>var</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <name>var</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator> <name>var</name></expr>;</expr_stmt>
			<break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG_INT</name></cpp:ifdef>
		<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <name>var</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <name>var</name></expr>;</expr_stmt>
			<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_LONG_LONG_INT */</comment>
		<case>case <expr><name>ECPGt_float</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator> <name>var</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_double</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>double</name> <operator>*</operator><operator>)</operator> <name>var</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_VAR_NOT_NUMERIC</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_RESTRICTED_DATA_TYPE_ATTRIBUTE_VIOLATION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>get_char_item</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>vartype</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>varcharsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>vartype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPGt_char</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_char</name></expr>:</case>
		<case>case <expr><name>ECPGt_string</name></expr>:</case>
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>varcharsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_varchar</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name><name>struct</name> <name>ECPGgeneric_varchar</name></name> <modifier>*</modifier></type><name>variable</name> <init>=
				<expr><operator>(</operator>struct <name>ECPGgeneric_varchar</name> <operator>*</operator><operator>)</operator> <name>var</name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>varcharsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>variable</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>variable</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>varcharsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><name><name>variable</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>varcharsize</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>variable</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>varcharsize</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>variable</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>varcharsize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_VAR_NOT_CHAR</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_RESTRICTED_DATA_TYPE_ATTRIBUTE_VIOLATION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_IF_NO_DATA</name></cpp:macro>	<cpp:value>if (ntuples &lt; 1) \
				{ \
					va_end(args); \
					ecpg_raise(lineno, ECPG_NOT_FOUND, ECPG_SQLSTATE_NO_DATA, NULL); \
					return false; \
				}</cpp:value></cpp:define>

<function><type><name>bool</name></type>
<name>ECPGget_desc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>ECPGresult</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>enum</name> <name>ECPGdtype</name></name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ntuples</name></decl>,
				<decl><type ref="prev"/><name>act_tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name></type> <name>data_var</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_OUT_OF_MEMORY</name></expr></argument>,
				   <argument><expr><name>ECPG_SQLSTATE_ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_init_sqlca</name><argument_list>(<argument><expr><name>sqlca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ECPGresult</name> <operator>=</operator> <call><name>ecpg_result_by_descriptor</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>desc_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ECPGresult</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ntuples</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>index</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>index</name></expr></argument> &gt;</argument_list></name> <call><name>PQnfields</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_INVALID_DESCRIPTOR_INDEX</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_INVALID_DESCRIPTOR_INDEX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGget_desc: reading items for tuple %d\n"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>--</operator><name>index</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>enum <name>ECPGdtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data_var</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>data_var</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ECPGt_EORT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>ind_type</name></name> <operator>=</operator> <name>ECPGt_NO_INDICATOR</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>type</name> <operator>!=</operator> <name>ECPGd_EODT</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>type_str</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type>		<name>varcharsize</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type>		<name>offset</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type>		<name>arrsize</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>vartype</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>vartype</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>enum <name>ECPGttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>varcharsize</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>arrsize</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><operator>(</operator><name>ECPGd_indicator</name><operator>)</operator></expr>:</case>
				<expr_stmt><expr><name>RETURN_IF_NO_DATA</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>ind_type</name></name> <operator>=</operator> <name>vartype</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>ind_pointer</name></name> <operator>=</operator> <name>var</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>ind_varcharsize</name></name> <operator>=</operator> <name>varcharsize</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>ind_arrsize</name></name> <operator>=</operator> <name>arrsize</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>ind_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>data_var</name><operator>.</operator><name>ind_arrsize</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>data_var</name><operator>.</operator><name>ind_varcharsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>ind_value</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name><name>data_var</name><operator>.</operator><name>ind_pointer</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>ind_value</name></name> <operator>=</operator> <name><name>data_var</name><operator>.</operator><name>ind_pointer</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_data</name></expr>:</case>
				<expr_stmt><expr><name>RETURN_IF_NO_DATA</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>vartype</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <name>var</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>varcharsize</name></name> <operator>=</operator> <name>varcharsize</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>arrsize</name></name> <operator>=</operator> <name>arrsize</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>data_var</name><operator>.</operator><name>arrsize</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>data_var</name><operator>.</operator><name>varcharsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name><name>data_var</name><operator>.</operator><name>pointer</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name><name>data_var</name><operator>.</operator><name>pointer</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_name</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_char_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vartype</name></expr></argument>, <argument><expr><call><name>PQfname</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>varcharsize</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGget_desc: NAME = %s\n"</literal></expr></argument>, <argument><expr><call><name>PQfname</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_nullable</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vartype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<break>break;</break>

			<case>case <expr><name>ECPGd_key_member</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vartype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<break>break;</break>

			<case>case <expr><name>ECPGd_scale</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vartype</name></expr></argument>, <argument><expr><operator>(</operator><call><name>PQfmod</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGget_desc: SCALE = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>PQfmod</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_precision</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vartype</name></expr></argument>, <argument><expr><call><name>PQfmod</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGget_desc: PRECISION = %d\n"</literal></expr></argument>, <argument><expr><call><name>PQfmod</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_octet</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vartype</name></expr></argument>, <argument><expr><call><name>PQfsize</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGget_desc: OCTET_LENGTH = %d\n"</literal></expr></argument>, <argument><expr><call><name>PQfsize</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_length</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vartype</name></expr></argument>, <argument><expr><call><name>PQfmod</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGget_desc: LENGTH = %d\n"</literal></expr></argument>, <argument><expr><call><name>PQfmod</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_type</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vartype</name></expr></argument>, <argument><expr><call><name>ecpg_dynamic_type</name><argument_list>(<argument><expr><call><name>PQftype</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGget_desc: TYPE = %d\n"</literal></expr></argument>, <argument><expr><call><name>ecpg_dynamic_type</name><argument_list>(<argument><expr><call><name>PQftype</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_di_code</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vartype</name></expr></argument>, <argument><expr><call><name>ecpg_dynamic_type_DDT</name><argument_list>(<argument><expr><call><name>PQftype</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGget_desc: TYPE = %d\n"</literal></expr></argument>, <argument><expr><call><name>ecpg_dynamic_type_DDT</name><argument_list>(<argument><expr><call><name>PQftype</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_cardinality</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vartype</name></expr></argument>, <argument><expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGget_desc: CARDINALITY = %d\n"</literal></expr></argument>, <argument><expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_ret_length</name></expr>:</case>
			<case>case <expr><name>ECPGd_ret_octet</name></expr>:</case>

				<expr_stmt><expr><name>RETURN_IF_NO_DATA</name></expr>;</expr_stmt>

				<comment type="block">/*
				 * this is like ECPGstore_result
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>arrsize</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ntuples</name> <operator>&gt;</operator> <name>arrsize</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGget_desc on line %d: incorrect number of matches; %d don't fit into array of %ld\n"</literal></expr></argument>,
							 <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>, <argument><expr><name>arrsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_TOO_MANY_MATCHES</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_CARDINALITY_VIOLATION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* allocate storage if needed */</comment>
				<if_stmt><if>if <condition>(<expr><name>arrsize</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>mem</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_auto_alloc</name><argument_list>(<argument><expr><name>offset</name> <operator>*</operator> <name>ntuples</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mem</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>false</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>var</name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>var</name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<for>for <control>(<init><expr><name>act_tuple</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>act_tuple</name> <operator>&lt;</operator> <name>ntuples</name></expr>;</condition> <incr><expr><name>act_tuple</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vartype</name></expr></argument>, <argument><expr><call><name>PQgetlength</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>false</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>var</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>var</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGget_desc: RETURNED[%d] = %d\n"</literal></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><call><name>PQgetlength</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				<break>break;</break>

			<default>default:</default>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>type_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>type_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_UNKNOWN_DESCRIPTOR_ITEM</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><name>type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>enum <name>ECPGdtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>data_var</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_EORT</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>statement</name></name></type> <name>stmt</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>stmt</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stmt</name><operator>.</operator><name>lineno</name></name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>

		<comment type="block">/* Make sure we do NOT honor the locale for numeric input */</comment>
		<comment type="block">/* since the database gives the standard decimal point */</comment>
		<comment type="block">/* (see comments in execute.c) */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_USELOCALE</name></cpp:ifdef>
		<expr_stmt><expr><name><name>stmt</name><operator>.</operator><name>clocale</name></name> <operator>=</operator> <call><name>newlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC_MASK</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><operator>(</operator><name>locale_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>.</operator><name>clocale</name></name> <operator>!=</operator> <operator>(</operator><name>locale_t</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>stmt</name><operator>.</operator><name>oldlocale</name></name> <operator>=</operator> <call><name>uselocale</name><argument_list>(<argument><expr><name><name>stmt</name><operator>.</operator><name>clocale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE__CONFIGTHREADLOCALE</name></cpp:ifdef>
		<expr_stmt><expr><name><name>stmt</name><operator>.</operator><name>oldthreadlocale</name></name> <operator>=</operator> <call><name>_configthreadlocale</name><argument_list>(<argument><expr><name>_ENABLE_PER_THREAD_LOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name>stmt</name><operator>.</operator><name>oldlocale</name></name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/* desperate try to guess something sensible */</comment>
		<expr_stmt><expr><name><name>stmt</name><operator>.</operator><name>connection</name></name> <operator>=</operator> <call><name>ecpg_get_connection</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_store_result</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_USELOCALE</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>.</operator><name>oldlocale</name></name> <operator>!=</operator> <operator>(</operator><name>locale_t</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>uselocale</name><argument_list>(<argument><expr><name><name>stmt</name><operator>.</operator><name>oldlocale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>.</operator><name>clocale</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>freelocale</name><argument_list>(<argument><expr><name><name>stmt</name><operator>.</operator><name>clocale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>.</operator><name>oldlocale</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>.</operator><name>oldlocale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>.</operator><name>oldlocale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE__CONFIGTHREADLOCALE</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>.</operator><name>oldthreadlocale</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>_configthreadlocale</name><argument_list>(<argument><expr><name><name>stmt</name><operator>.</operator><name>oldthreadlocale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>data_var</name><operator>.</operator><name>ind_type</name></name> <operator>!=</operator> <name>ECPGt_NO_INDICATOR</name> <operator>&amp;&amp;</operator> <name><name>data_var</name><operator>.</operator><name>ind_pointer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

		<comment type="block">/*
		 * ind_type != NO_INDICATOR should always have ind_pointer != NULL but
		 * since this might be changed manually in the .c file let's play it
		 * safe
		 */</comment>
	<block>{<block_content>
		<comment type="block">/*
		 * this is like ECPGstore_result but since we don't have a data
		 * variable at hand, we can't call it
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>data_var</name><operator>.</operator><name>ind_arrsize</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ntuples</name> <operator>&gt;</operator> <name><name>data_var</name><operator>.</operator><name>ind_arrsize</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGget_desc on line %d: incorrect number of matches (indicator); %d don't fit into array of %ld\n"</literal></expr></argument>,
					 <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>, <argument><expr><name><name>data_var</name><operator>.</operator><name>ind_arrsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_TOO_MANY_MATCHES</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_CARDINALITY_VIOLATION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* allocate storage if needed */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>data_var</name><operator>.</operator><name>ind_arrsize</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>data_var</name><operator>.</operator><name>ind_value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>mem</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_auto_alloc</name><argument_list>(<argument><expr><name><name>data_var</name><operator>.</operator><name>ind_offset</name></name> <operator>*</operator> <name>ntuples</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mem</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>data_var</name><operator>.</operator><name>ind_pointer</name></name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>ind_value</name></name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<for>for <control>(<init><expr><name>act_tuple</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>act_tuple</name> <operator>&lt;</operator> <name>ntuples</name></expr>;</condition> <incr><expr><name>act_tuple</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name><name>data_var</name><operator>.</operator><name>ind_value</name></name></expr></argument>, <argument><expr><name><name>data_var</name><operator>.</operator><name>ind_type</name></name></expr></argument>, <argument><expr><operator>-</operator><call><name>PQgetisnull</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>data_var</name><operator>.</operator><name>ind_value</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>data_var</name><operator>.</operator><name>ind_value</name></name> <operator>+</operator> <name><name>data_var</name><operator>.</operator><name>ind_offset</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGget_desc: INDICATOR[%d] = %d\n"</literal></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><operator>-</operator><call><name>PQgetisnull</name><argument_list>(<argument><expr><name>ECPGresult</name></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ntuples</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RETURN_IF_NO_DATA</name></cpp:undef>

<function><type><name>bool</name></type>
<name>ECPGset_desc_header</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>ecpg_find_desc</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>desc_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ECPGset_desc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>descriptor_item</name></name> <modifier>*</modifier></type><name>desc_item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>ecpg_find_desc</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>desc_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>desc_item</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>items</name></name></expr>;</init> <condition><expr><name>desc_item</name></expr>;</condition> <incr><expr><name>desc_item</name> <operator>=</operator> <name><name>desc_item</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>desc_item</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>desc_item</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>desc_item</name> <operator>=</operator> <operator>(</operator>struct <name>descriptor_item</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>desc_item</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc_item</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>desc_item</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>desc_item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>items</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <name>desc_item</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>var</name> <operator>=</operator> <operator>(</operator>struct <name>variable</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>variable</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>enum</name> <name>ECPGdtype</name></name></type> <name>itemtype</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tobeinserted</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>itemtype</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>enum <name>ECPGdtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>itemtype</name> <operator>==</operator> <name>ECPGd_EODT</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>enum <name>ECPGttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>pointer</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>pointer</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>pointer</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/*
		 * negative values are used to indicate an array without given bounds
		 */</comment>
		<comment type="block">/* reset to zero for us */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>itemtype</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>ECPGd_data</name></expr>:</case>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_store_input</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tobeinserted</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>false</name></expr>;</return>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>desc_item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* free() takes care of a
												 * potential NULL value */</comment>
					<expr_stmt><expr><name><name>desc_item</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>tobeinserted</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>tobeinserted</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>ECPGd_indicator</name></expr>:</case>
				<expr_stmt><expr><call><name>set_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desc_item</name><operator>-&gt;</operator><name>indicator</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_length</name></expr>:</case>
				<expr_stmt><expr><call><name>set_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desc_item</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_precision</name></expr>:</case>
				<expr_stmt><expr><call><name>set_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desc_item</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_scale</name></expr>:</case>
				<expr_stmt><expr><call><name>set_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desc_item</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_type</name></expr>:</case>
				<expr_stmt><expr><call><name>set_int_item</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desc_item</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<default>default:</default>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name></type>		<name><name>type_str</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>type_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>type_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>itemtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_UNKNOWN_DESCRIPTOR_ITEM</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><name>type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block>
		</block_content>}</block></switch>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free the descriptor and items in it. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>descriptor_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>descriptor_item</name></name> <modifier>*</modifier></type><name>desc_item</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>desc_item</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>items</name></name></expr>;</init> <condition><expr><name>desc_item</name></expr>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>descriptor_item</name></name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>desc_item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>di</name> <operator>=</operator> <name>desc_item</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>desc_item</name> <operator>=</operator> <name><name>desc_item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ECPGdeallocate_desc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ECPG_OUT_OF_MEMORY</name></expr></argument>,
				   <argument><expr><name>ECPG_SQLSTATE_ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ecpg_init_sqlca</name><argument_list>(<argument><expr><name>sqlca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>desc</name> <operator>=</operator> <call><name>get_descriptors</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</init> <condition><expr><name>desc</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>desc</name></expr><operator>,</operator> <expr><name>desc</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>set_descriptors</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><call><name>descriptor_free</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ECPG_UNKNOWN_DESCRIPTOR</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_INVALID_SQL_DESCRIPTOR_NAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>

<comment type="block">/* Deallocate all descriptors in the list */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>descriptor_deallocate_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>list</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>descriptor_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* ENABLE_THREAD_SAFETY */</comment>

<function><type><name>bool</name></type>
<name>ECPGallocate_desc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ECPG_OUT_OF_MEMORY</name></expr></argument>,
				   <argument><expr><name>ECPG_SQLSTATE_ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ecpg_init_sqlca</name><argument_list>(<argument><expr><name>sqlca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>new</name> <operator>=</operator> <operator>(</operator>struct <name>descriptor</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>descriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>get_descriptors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>PQmakeEmptyPGresult</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new</name><operator>-&gt;</operator><name>result</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_descriptors</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Find descriptor with name in the connection. */</comment>
<function><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type>
<name>ecpg_find_desc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>desc</name> <operator>=</operator> <call><name>get_descriptors</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>desc</name></expr>;</condition> <incr><expr><name>desc</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>desc</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ECPG_UNKNOWN_DESCRIPTOR</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_INVALID_SQL_DESCRIPTOR_NAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>				<comment type="block">/* not found */</comment>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ECPGdescribe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compat</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stmt_name</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>prepared_statement</name></name> <modifier>*</modifier></type><name>prep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>args</name></decl>;</decl_stmt>

	<comment type="block">/* DESCRIBE INPUT is not yet supported */</comment>
	<if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ECPG_UNSUPPORTED</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"DESCRIBE INPUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>ecpg_get_connection</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>con</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ECPG_NO_CONN</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_CONNECTION_DOES_NOT_EXIST</name></expr></argument>,
				   <argument><expr><ternary><condition><expr><name>connection_name</name></expr> ?</condition><then> <expr><name>connection_name</name></expr> </then><else>: <expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>prep</name> <operator>=</operator> <call><name>ecpg_find_prepared_statement</name><argument_list>(<argument><expr><name>stmt_name</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prep</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ECPG_INVALID_STMT</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_INVALID_SQL_STATEMENT_NAME</name></expr></argument>, <argument><expr><name>stmt_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>stmt_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>type</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

		<comment type="block">/* variable type */</comment>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>enum <name>ECPGttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ECPGt_EORT</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/* rest of variable parameters */</comment>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* skip args */</comment>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* variable indicator */</comment>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>enum <name>ECPGttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* skip args */</comment>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>ECPGt_descriptor</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>name</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>ecpg_find_desc</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>

					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQdescribePrepared</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>stmt_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_check_PQresult</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>result</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>
			<case>case <expr><name>ECPGt_sqlda</name></expr>:</case>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>INFORMIX_MODE</name><argument_list>(<argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_compat</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>_sqlda</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_compat</name></name> <modifier>*</modifier></type><name>sqlda</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQdescribePrepared</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>stmt_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_check_PQresult</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<break>break;</break></block_content></block></if></if_stmt>

						<expr_stmt><expr><name>sqlda</name> <operator>=</operator> <call><name>ecpg_build_compat_sqlda</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>sqlda</name></expr>)</condition>
						<block>{<block_content>
							<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_compat</name></name> <modifier>*</modifier></type><name>sqlda_old</name> <init>= <expr><operator>*</operator><name>_sqlda</name></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_compat</name></name> <modifier>*</modifier></type><name>sqlda_old1</name></decl>;</decl_stmt>

							<while>while <condition>(<expr><name>sqlda_old</name></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><name>sqlda_old1</name> <operator>=</operator> <name><name>sqlda_old</name><operator>-&gt;</operator><name>desc_next</name></name></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sqlda_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name>sqlda_old</name> <operator>=</operator> <name>sqlda_old1</name></expr>;</expr_stmt>
							</block_content>}</block></while>

							<expr_stmt><expr><operator>*</operator><name>_sqlda</name> <operator>=</operator> <name>sqlda</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>

						<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_struct</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>_sqlda</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_struct</name></name> <modifier>*</modifier></type><name>sqlda</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQdescribePrepared</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>stmt_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_check_PQresult</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<break>break;</break></block_content></block></if></if_stmt>

						<expr_stmt><expr><name>sqlda</name> <operator>=</operator> <call><name>ecpg_build_native_sqlda</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>sqlda</name></expr>)</condition>
						<block>{<block_content>
							<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_struct</name></name> <modifier>*</modifier></type><name>sqlda_old</name> <init>= <expr><operator>*</operator><name>_sqlda</name></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_struct</name></name> <modifier>*</modifier></type><name>sqlda_old1</name></decl>;</decl_stmt>

							<while>while <condition>(<expr><name>sqlda_old</name></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><name>sqlda_old1</name> <operator>=</operator> <name><name>sqlda_old</name><operator>-&gt;</operator><name>desc_next</name></name></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sqlda_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name>sqlda_old</name> <operator>=</operator> <name>sqlda_old1</name></expr>;</expr_stmt>
							</block_content>}</block></while>

							<expr_stmt><expr><operator>*</operator><name>_sqlda</name> <operator>=</operator> <name>sqlda</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>

						<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
					<break>break;</break>
				</block_content>}</block>
			<default>default:</default>
				<comment type="block">/* nothing else may come */</comment>
				<empty_stmt>;</empty_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
