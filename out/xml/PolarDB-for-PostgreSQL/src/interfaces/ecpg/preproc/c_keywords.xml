<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/interfaces/ecpg/preproc/c_keywords.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * c_keywords.c
 *	  lexical token lookup for reserved words in postgres embedded SQL
 *
 * src/interfaces/ecpg/preproc/c_keywords.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preproc.h"</cpp:file></cpp:include>

<comment type="block">/*
 * List of (keyword-name, keyword-token-value) pairs.
 *
 * !!WARNING!!: This list must be sorted, because binary
 *		 search is used to locate entries.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ScanKeyword</name></type> <name><name>ScanCKeywords</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* name, value, category */</comment>

	<comment type="block">/*
	 * category is not needed in ecpg, it is only here so we can share the
	 * data structure with the backend
	 */</comment>
	<expr><block>{<expr><literal type="string">"VARCHAR"</literal></expr>, <expr><name>VARCHAR</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"auto"</literal></expr>, <expr><name>S_AUTO</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"bool"</literal></expr>, <expr><name>SQL_BOOL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"char"</literal></expr>, <expr><name>CHAR_P</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"const"</literal></expr>, <expr><name>S_CONST</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"enum"</literal></expr>, <expr><name>ENUM_P</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"extern"</literal></expr>, <expr><name>S_EXTERN</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"float"</literal></expr>, <expr><name>FLOAT_P</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"hour"</literal></expr>, <expr><name>HOUR_P</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"int"</literal></expr>, <expr><name>INT_P</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"long"</literal></expr>, <expr><name>SQL_LONG</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"minute"</literal></expr>, <expr><name>MINUTE_P</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"month"</literal></expr>, <expr><name>MONTH_P</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"register"</literal></expr>, <expr><name>S_REGISTER</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"second"</literal></expr>, <expr><name>SECOND_P</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"short"</literal></expr>, <expr><name>SQL_SHORT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"signed"</literal></expr>, <expr><name>SQL_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"static"</literal></expr>, <expr><name>S_STATIC</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"struct"</literal></expr>, <expr><name>SQL_STRUCT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"to"</literal></expr>, <expr><name>TO</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"typedef"</literal></expr>, <expr><name>S_TYPEDEF</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"union"</literal></expr>, <expr><name>UNION</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"unsigned"</literal></expr>, <expr><name>SQL_UNSIGNED</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"varchar"</literal></expr>, <expr><name>VARCHAR</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"volatile"</literal></expr>, <expr><name>S_VOLATILE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"year"</literal></expr>, <expr><name>YEAR_P</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * Do a binary search using plain strcmp() comparison.  This is much like
 * ScanKeywordLookup(), except we want case-sensitive matching.
 */</comment>
<function><type><specifier>const</specifier> <name>ScanKeyword</name> <modifier>*</modifier></type>
<name>ScanCKeywordLookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ScanKeyword</name> <modifier>*</modifier></type><name>low</name> <init>= <expr><operator>&amp;</operator><name><name>ScanCKeywords</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ScanKeyword</name> <modifier>*</modifier></type><name>high</name> <init>= <expr><operator>&amp;</operator><name><name>ScanCKeywords</name><index>[<expr><call><name>lengthof</name><argument_list>(<argument><expr><name>ScanCKeywords</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>low</name> <operator>&lt;=</operator> <name>high</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>ScanKeyword</name> <modifier>*</modifier></type><name>middle</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>difference</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>middle</name> <operator>=</operator> <name>low</name> <operator>+</operator> <operator>(</operator><name>high</name> <operator>-</operator> <name>low</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>difference</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>middle</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>difference</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>middle</name></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>difference</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>low</name> <operator>=</operator> <name>middle</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>high</name> <operator>=</operator> <name>middle</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
