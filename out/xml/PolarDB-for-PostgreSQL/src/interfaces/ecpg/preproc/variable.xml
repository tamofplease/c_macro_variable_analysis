<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/interfaces/ecpg/preproc/variable.c"><comment type="block">/* src/interfaces/ecpg/preproc/variable.c */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>allvariables</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type>
<name>new_variable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>brace_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator>struct <name>variable</name> <operator>*</operator><operator>)</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>variable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>brace_level</name></name> <operator>=</operator> <name>brace_level</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>allvariables</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>allvariables</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

	<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type>
<name>find_struct_member</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ECPGstruct_member</name></name> <modifier>*</modifier></type><name>members</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>brace_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>strpbrk</name><argument_list>(<argument><expr><operator>++</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">".-["</literal></expr></argument>)</argument_list></call></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>,
				<decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>next</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>members</name></expr>;</condition> <incr><expr><name>members</name> <operator>=</operator> <name><name>members</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>members</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* found the end */</comment>
				<switch>switch <condition>(<expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>ECPGt_array</name></expr>:</case>
						<return>return <expr><call><name>new_variable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ECPGmake_array_type</name><argument_list>(<argument><expr><call><name>ECPGmake_simple_type</name><argument_list>(<argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>brace_level</name></expr></argument>)</argument_list></call></expr>;</return>
					<case>case <expr><name>ECPGt_struct</name></expr>:</case>
					<case>case <expr><name>ECPGt_union</name></expr>:</case>
						<return>return <expr><call><name>new_variable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ECPGmake_struct_type</name><argument_list>(<argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type_name</name></name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>struct_sizeof</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>brace_level</name></expr></argument>)</argument_list></call></expr>;</return>
					<default>default:</default>
						<return>return <expr><call><name>new_variable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ECPGmake_simple_type</name><argument_list>(<argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>brace_level</name></expr></argument>)</argument_list></call></expr>;</return>
				</block_content>}</block></switch>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type>			<name>count</name></decl>;</decl_stmt>

					<comment type="block">/*
					 * We don't care about what's inside the array braces so
					 * just eat up the character
					 */</comment>
					<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name>next</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>count</name></expr>;</condition> <incr><expr><name>end</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<switch>switch <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition>
						<block>{<block_content>
							<case>case <expr><literal type="char">'['</literal></expr>:</case>
								<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
								<break>break;</break>
							<case>case <expr><literal type="char">']'</literal></expr>:</case>
								<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
								<break>break;</break>
							<default>default:</default>
								<break>break;</break>
						</block_content>}</block></switch>
					</block_content>}</block></for>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>end</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<switch>switch <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><literal type="char">'\0'</literal></expr>:</case>	<comment type="block">/* found the end, but this time it has to be
								 * an array element */</comment>
						<if_stmt><if>if <condition>(<expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_array</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"incorrectly formed variable \"%s\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<switch>switch <condition>(<expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
						<block>{<block_content>
							<case>case <expr><name>ECPGt_array</name></expr>:</case>
								<return>return <expr><call><name>new_variable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ECPGmake_array_type</name><argument_list>(<argument><expr><call><name>ECPGmake_simple_type</name><argument_list>(<argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>brace_level</name></expr></argument>)</argument_list></call></expr>;</return>
							<case>case <expr><name>ECPGt_struct</name></expr>:</case>
							<case>case <expr><name>ECPGt_union</name></expr>:</case>
								<return>return <expr><call><name>new_variable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ECPGmake_struct_type</name><argument_list>(<argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type_name</name></name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>struct_sizeof</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>brace_level</name></expr></argument>)</argument_list></call></expr>;</return>
							<default>default:</default>
								<return>return <expr><call><name>new_variable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ECPGmake_simple_type</name><argument_list>(<argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>brace_level</name></expr></argument>)</argument_list></call></expr>;</return>
						</block_content>}</block></switch>
						<break>break;</break>
					<case>case <expr><literal type="char">'-'</literal></expr>:</case>
						<if_stmt><if>if <condition>(<expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_array</name></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><call><name>find_struct_member</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>++</operator><name>end</name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr></argument>, <argument><expr><name>brace_level</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<return>return <expr><call><name>find_struct_member</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>++</operator><name>end</name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr></argument>, <argument><expr><name>brace_level</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
						<break>break;</break>
						<break>break;</break>
					<case>case <expr><literal type="char">'.'</literal></expr>:</case>
						<if_stmt><if>if <condition>(<expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_array</name></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><call><name>find_struct_member</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr></argument>, <argument><expr><name>brace_level</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<return>return <expr><call><name>find_struct_member</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>members</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr></argument>, <argument><expr><name>brace_level</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
						<break>break;</break>
					<default>default:</default>
						<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"incorrectly formed variable \"%s\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type>
<name>find_struct</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>c</name> <init>= <expr><operator>*</operator><name>next</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* first get the mother structure entry */</comment>
	<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_variable</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_array</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"variable \"%s\" is not a pointer"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_struct</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_union</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"variable \"%s\" is not a pointer to a structure or a union"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* restore the name, we will need it later */</comment>
		<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

		<return>return <expr><call><name>find_struct_member</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>++</operator><name>end</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>brace_level</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>end</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_struct</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_union</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"variable \"%s\" is neither a structure nor a union"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* restore the name, we will need it later */</comment>
			<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

			<return>return <expr><call><name>find_struct_member</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>brace_level</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_array</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"variable \"%s\" is not an array"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_struct</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_union</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"variable \"%s\" is not a pointer to a structure or a union"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* restore the name, we will need it later */</comment>
			<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

			<return>return <expr><call><name>find_struct_member</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>brace_level</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type>
<name>find_simple</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>allvariables</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Note that this function will end the program in case of an unknown */</comment>
<comment type="block">/* variable */</comment>
<function><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type>
<name>find_variable</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>next</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>count</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">".[-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * We don't care about what's inside the array braces so just eat
			 * up the characters
			 */</comment>
			<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name>next</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>count</name></expr>;</condition> <incr><expr><name>end</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<switch>switch <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><literal type="char">'['</literal></expr>:</case>
						<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">']'</literal></expr>:</case>
						<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<break>break;</break>
				</block_content>}</block></switch>
			</block_content>}</block></for>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_struct</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type>		<name>c</name> <init>= <expr><operator>*</operator><name>next</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_simple</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"variable \"%s\" is not declared"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
				<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>ECPGt_array</name></expr>:</case>
						<return>return <expr><call><name>new_variable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ECPGmake_array_type</name><argument_list>(<argument><expr><call><name>ECPGmake_simple_type</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>brace_level</name></name></expr></argument>)</argument_list></call></expr>;</return>
					<case>case <expr><name>ECPGt_struct</name></expr>:</case>
					<case>case <expr><name>ECPGt_union</name></expr>:</case>
						<return>return <expr><call><name>new_variable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ECPGmake_struct_type</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type_name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>struct_sizeof</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>brace_level</name></name></expr></argument>)</argument_list></call></expr>;</return>
					<default>default:</default>
						<return>return <expr><call><name>new_variable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ECPGmake_simple_type</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>brace_level</name></name></expr></argument>)</argument_list></call></expr>;</return>
				</block_content>}</block></switch>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_struct</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_simple</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"variable \"%s\" is not declared"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>remove_typedefs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>brace_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>typedefs</name></name> <modifier>*</modifier></type><name>p</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>prev</name> <operator>=</operator> <name>types</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition><incr/>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>brace_level</name></name> <operator>&gt;=</operator> <name>brace_level</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* remove it */</comment>
			<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>types</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>types</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type_enum</name></name> <operator>==</operator> <name>ECPGt_struct</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type_enum</name></name> <operator>==</operator> <name>ECPGt_union</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>struct_member_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>types</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <name>types</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><name>prev</name></expr> ?</condition><then> <expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>remove_variables</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>brace_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>p</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>prev</name> <operator>=</operator> <name>allvariables</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition><incr/>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>brace_level</name></name> <operator>&gt;=</operator> <name>brace_level</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* is it still referenced by a cursor? */</comment>
			<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>cur</name></expr>;</init> <condition><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name><name>struct</name> <name>arguments</name></name> <modifier>*</modifier></type><name>varptr</name></decl>,
						   <decl><type ref="prev"><modifier>*</modifier></type><name>prevvar</name></decl>;</decl_stmt>

				<for>for <control>(<init><expr><name>varptr</name> <operator>=</operator> <name>prevvar</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>argsinsert</name></name></expr>;</init> <condition><expr><name>varptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>varptr</name> <operator>=</operator> <name><name>varptr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name><name>varptr</name><operator>-&gt;</operator><name>variable</name></name></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* remove from list */</comment>
						<if_stmt><if>if <condition>(<expr><name>varptr</name> <operator>==</operator> <name><name>ptr</name><operator>-&gt;</operator><name>argsinsert</name></name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>argsinsert</name></name> <operator>=</operator> <name><name>varptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>prevvar</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>varptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
				<for>for <control>(<init><expr><name>varptr</name> <operator>=</operator> <name>prevvar</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>argsresult</name></name></expr>;</init> <condition><expr><name>varptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>varptr</name> <operator>=</operator> <name><name>varptr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name><name>varptr</name><operator>-&gt;</operator><name>variable</name></name></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* remove from list */</comment>
						<if_stmt><if>if <condition>(<expr><name>varptr</name> <operator>==</operator> <name><name>ptr</name><operator>-&gt;</operator><name>argsresult</name></name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>argsresult</name></name> <operator>=</operator> <name><name>varptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>prevvar</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>varptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
			</block_content>}</block></for>

			<comment type="block">/* remove it */</comment>
			<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>allvariables</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>allvariables</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><call><name>ECPGfree_type</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>allvariables</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <name>allvariables</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><name>prev</name></expr> ?</condition><then> <expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
 * Here are the variables that need to be handled on every request.
 * These are of two kinds: input and output.
 * I will make two lists for them.
 */</comment>

<decl_stmt><decl><type><name><name>struct</name> <name>arguments</name></name> <modifier>*</modifier></type><name>argsinsert</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>arguments</name></name> <modifier>*</modifier></type><name>argsresult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>reset_variables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>argsinsert</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>argsresult</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Insert a new variable into our request list.
 * Note: The list is dumped from the end,
 * so we have to add new entries at the beginning */</comment>
<function><type><name>void</name></type>
<name>add_variable_to_head</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>arguments</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>ind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>arguments</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator>struct <name>arguments</name> <operator>*</operator><operator>)</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>arguments</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>variable</name></name> <operator>=</operator> <name>var</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>indicator</name></name> <operator>=</operator> <name>ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Append a new variable to our request list. */</comment>
<function><type><name>void</name></type>
<name>add_variable_to_tail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>arguments</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>ind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>arguments</name></name> <modifier>*</modifier></type><name>p</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>new</name> <init>= <expr><operator>(</operator>struct <name>arguments</name> <operator>*</operator><operator>)</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>arguments</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</init> <condition><expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>variable</name></name> <operator>=</operator> <name>var</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>indicator</name></name> <operator>=</operator> <name>ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>remove_variable_from_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>arguments</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>arguments</name></name> <modifier>*</modifier></type><name>p</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>variable</name></name> <operator>==</operator> <name>var</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Dump out a list of all the variable on this list.
   This is a recursive function that works from the end of the list and
   deletes the list as we go on.
 */</comment>
<function><type><name>void</name></type>
<name>dump_variables</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>arguments</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str_zero</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>str_zero</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The list is build up from the beginning so lets first dump the end of
	 * the list:
	 */</comment>

	<expr_stmt><expr><call><name>dump_variables</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Then the current element and its indicator */</comment>
	<expr_stmt><expr><call><name>ECPGdump_a_type</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>variable</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>variable</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>variable</name><operator>-&gt;</operator><name>brace_level</name></name></expr></argument>,
					<argument><expr><name><name>list</name><operator>-&gt;</operator><name>indicator</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>indicator</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>indicator</name><operator>-&gt;</operator><name>brace_level</name></name></expr></argument>,
					<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str_zero</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Then release the list element. */</comment>
	<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>check_indicator</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* make sure this is a valid indicator variable */</comment>
	<switch>switch <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>ECPGstruct_member</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

		<case>case <expr><name>ECPGt_short</name></expr>:</case>
		<case>case <expr><name>ECPGt_int</name></expr>:</case>
		<case>case <expr><name>ECPGt_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
			<break>break;</break>

		<case>case <expr><name>ECPGt_struct</name></expr>:</case>
		<case>case <expr><name>ECPGt_union</name></expr>:</case>
			<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>check_indicator</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			<break>break;</break>

		<case>case <expr><name>ECPGt_array</name></expr>:</case>
			<expr_stmt><expr><call><name>check_indicator</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"indicator variable must have an integer type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>typedefs</name></name> <modifier>*</modifier></type>
<name>get_typedef</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>typedefs</name></name> <modifier>*</modifier></type><name>this</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>this</name> <operator>=</operator> <name>types</name></expr>;</init> <condition><expr><name>this</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>this</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>this</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized data type name \"%s\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>adjust_array</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>type_enum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dimension</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type_dimension</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pointer_len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>type_definition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name>type_index</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><operator>*</operator><name>length</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"multidimensional arrays are not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name>type_index</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name>type_dimension</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><operator>*</operator><name>dimension</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>*</operator><name>length</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"multidimensional arrays are not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><operator>*</operator><name>dimension</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <operator>*</operator><name>dimension</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>dimension</name> <operator>=</operator> <name>type_dimension</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>pointer_len</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><call><name>ngettext</name><argument_list>(<argument><expr><literal type="string">"multilevel pointers (more than 2 levels) are not supported; found %d level"</literal></expr></argument>,
									  <argument><expr><literal type="string">"multilevel pointers (more than 2 levels) are not supported; found %d levels"</literal></expr></argument>, <argument><expr><name>pointer_len</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>pointer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>pointer_len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>type_enum</name> <operator>!=</operator> <name>ECPGt_char</name> <operator>&amp;&amp;</operator> <name>type_enum</name> <operator>!=</operator> <name>ECPGt_unsigned_char</name> <operator>&amp;&amp;</operator> <name>type_enum</name> <operator>!=</operator> <name>ECPGt_string</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pointer to pointer is not supported for this data type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>pointer_len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><operator>*</operator><name>length</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>*</operator><name>dimension</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"multidimensional arrays are not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><operator>*</operator><name>length</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>*</operator><name>dimension</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pointer_len</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"multidimensional arrays are not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>type_enum</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPGt_struct</name></expr>:</case>
		<case>case <expr><name>ECPGt_union</name></expr>:</case>
			<comment type="block">/* pointer has to get dimension 0 */</comment>
			<if_stmt><if>if <condition>(<expr><name>pointer_len</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <operator>*</operator><name>dimension</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>dimension</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><operator>*</operator><name>length</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"multidimensional arrays for structures are not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<break>break;</break>
		<case>case <expr><name>ECPGt_varchar</name></expr>:</case>
			<comment type="block">/* pointer has to get dimension 0 */</comment>
			<if_stmt><if>if <condition>(<expr><name>pointer_len</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>dimension</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* one index is the string length */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><operator>*</operator><name>length</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <operator>*</operator><name>dimension</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>dimension</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<break>break;</break>
		<case>case <expr><name>ECPGt_char</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_char</name></expr>:</case>
		<case>case <expr><name>ECPGt_string</name></expr>:</case>
			<comment type="block">/* char ** */</comment>
			<if_stmt><if>if <condition>(<expr><name>pointer_len</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <operator>*</operator><name>dimension</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* pointer has to get length 0 */</comment>
			<if_stmt><if>if <condition>(<expr><name>pointer_len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* one index is the string length */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><operator>*</operator><name>length</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * make sure we return length = -1 for arrays without given
				 * bounds
				 */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><operator>*</operator><name>dimension</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>type_definition</name></expr>)</condition><block type="pseudo"><block_content>

					<comment type="block">/*
					 * do not change this for typedefs since it will be
					 * changed later on when the variable is defined
					 */</comment>
					<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>dimension</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <operator>*</operator><name>dimension</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><operator>*</operator><name>dimension</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* a pointer has dimension = 0 */</comment>
			<if_stmt><if>if <condition>(<expr><name>pointer_len</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <operator>*</operator><name>dimension</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>dimension</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><operator>*</operator><name>length</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"multidimensional arrays for simple data types are not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
