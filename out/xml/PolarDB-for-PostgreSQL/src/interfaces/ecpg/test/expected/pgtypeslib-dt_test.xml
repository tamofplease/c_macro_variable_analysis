<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/interfaces/ecpg/test/expected/pgtypeslib-dt_test.c"><comment type="block">/* Processed by ecpg (regression mode) */</comment>
<comment type="block">/* These include files are added by the preprocessor */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpgerrno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlca.h&gt;</cpp:file></cpp:include>
<comment type="block">/* End of automatic include section */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPGdebug</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ECPGdebug((X)+100,(Y))</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgtypes_date.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgtypes_timestamp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgtypes_interval.h&gt;</cpp:file></cpp:include>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"regression.h"</cpp:file></cpp:line>






<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>8</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* exec sql begin declare section */</comment>
		 
		 
		  
		 
	
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>14</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>date</name></type> <name>date1</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>15</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>timestamp</name></type> <name>ts1</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>16</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>interval</name> <modifier>*</modifier></type> <name>iv1</name></decl> , <decl><type ref="prev"/><name>iv2</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>17</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>text</name></decl> ;</decl_stmt>
<comment type="block">/* exec sql end declare section */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>18</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>

	<decl_stmt><decl><type><name>date</name></type> <name>date2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>mdy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">1998</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d1</name> <init>= <expr><literal type="string">"Mon Jan 17 1966"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t1</name> <init>= <expr><literal type="string">"2000-7-12 17:34:29"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ECPGdebug</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* exec sql whenever sqlerror  do sqlprint ( ) ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>27</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ecpg1_regression"</literal></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>28</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>28</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"create table date_test ( d date , ts timestamp )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>29</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>29</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"set datestyle to iso"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>30</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>30</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"set intervalstyle to postgres_verbose"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>31</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>31</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>


	<expr_stmt><expr><name>date1</name> <operator>=</operator> <call><name>PGTYPESdate_from_asc</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ts1</name> <operator>=</operator> <call><name>PGTYPEStimestamp_from_asc</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into date_test ( d , ts ) values ( $1  , $2  )"</literal></expr></argument>, 
	<argument><expr><name>ECPGt_date</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>date1</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_timestamp</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>ts1</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>36</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>36</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>


	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select * from date_test where d = $1 "</literal></expr></argument>, 
	<argument><expr><name>ECPGt_date</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>date1</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_date</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>date1</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_timestamp</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>ts1</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>38</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>38</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>


	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Date: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"timestamp: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>iv1</name> <operator>=</operator> <call><name>PGTYPESinterval_from_asc</name><argument_list>(<argument><expr><literal type="string">"13556 days 12 hours 34 minutes 14 seconds "</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESinterval_copy</name><argument_list>(<argument><expr><name>iv1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESinterval_to_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"interval: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESinterval_free</name><argument_list>(<argument><expr><name>iv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PGTYPESdate_mdyjul</name><argument_list>(<argument><expr><name>mdy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>date2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"m: %d, d: %d, y: %d\n"</literal></expr></argument>, <argument><expr><name><name>mdy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mdy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mdy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* reset */</comment>
	<expr_stmt><expr><name><name>mdy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mdy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mdy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date seems to get encoded to julian %ld\n"</literal></expr></argument>, <argument><expr><name>date2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PGTYPESdate_julmdy</name><argument_list>(<argument><expr><name>date2</name></expr></argument>, <argument><expr><name>mdy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"m: %d, d: %d, y: %d\n"</literal></expr></argument>, <argument><expr><name><name>mdy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mdy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mdy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ts1</name> <operator>=</operator> <call><name>PGTYPEStimestamp_from_asc</name><argument_list>(<argument><expr><literal type="string">"2003-12-04 17:34:29"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"(ddd), mmm. dd, yyyy, repeat: (ddd), mmm. dd, yyyy. end"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>date1</name> <operator>=</operator> <call><name>PGTYPESdate_from_timestamp</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESdate_fmt_asc</name><argument_list>(<argument><expr><name>date1</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date_day of %s is %d\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>PGTYPESdate_dayofweek</name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Above date in format \"%s\" is \"%s\"\n"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_fmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">47</literal></expr></argument>, <argument><expr><literal type="string">"Which is day number %j in %Y."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="block">/* rdate_defmt_asc() */</comment>

	<expr_stmt><expr><name>date1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"yy/mm/dd"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"In the year 1995, the month of December, it is the 25th day"</literal></expr>;</expr_stmt>
	<comment type="block">/*    0123456789012345678901234567890123456789012345678901234567890
	 *    0         1         2         3         4         5         6
	 */</comment>
	<expr_stmt><expr><call><name>PGTYPESdate_defmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>date1</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date_defmt_asc1: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>date1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"mmmm. dd. yyyy"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"12/25/95"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESdate_defmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>date1</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date_defmt_asc2: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>date1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"yy/mm/dd"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"95/12/25"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESdate_defmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>date1</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date_defmt_asc3: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>date1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"yy/mm/dd"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"1995, December 25th"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESdate_defmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>date1</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date_defmt_asc4: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>date1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"dd-mm-yy"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"This is 25th day of December, 1995"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESdate_defmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>date1</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date_defmt_asc5: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>date1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"mmddyy"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"Dec. 25th, 1995"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESdate_defmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>date1</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date_defmt_asc6: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>date1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"mmm. dd. yyyy"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"dec 25th 1995"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESdate_defmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>date1</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date_defmt_asc7: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>date1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"mmm. dd. yyyy"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"DEC-25-1995"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESdate_defmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>date1</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date_defmt_asc8: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>date1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"mm yy   dd."</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"12199525"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESdate_defmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>date1</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date_defmt_asc9: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>date1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"yyyy fierj mm   dd."</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"19951225"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESdate_defmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>date1</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date_defmt_asc10: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>date1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"mm/dd/yy"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"122595"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESdate_defmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>date1</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date_defmt_asc12: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PGTYPEStimestamp_current</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* can't output this in regression mode */</comment>
	<comment type="block">/* printf("timestamp_current: Now: %s\n", text); */</comment>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ts1</name> <operator>=</operator> <call><name>PGTYPEStimestamp_from_asc</name><argument_list>(<argument><expr><literal type="string">"96-02-29"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_to_asc1: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ts1</name> <operator>=</operator> <call><name>PGTYPEStimestamp_from_asc</name><argument_list>(<argument><expr><literal type="string">"1994-02-11 3:10:35"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_to_asc2: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ts1</name> <operator>=</operator> <call><name>PGTYPEStimestamp_from_asc</name><argument_list>(<argument><expr><literal type="string">"1994-02-11 26:10:35"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_to_asc3: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*	abc-03:10:35-def-02/11/94-gh  */</comment>
<comment type="block">/*      12345678901234567890123456789 */</comment>

	<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_fmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="string">"abc-%X-def-%x-ghi%%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_fmt_asc: %d: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"This is a %m/%d/%y %H-%Ml%Stest"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"This is a 4/12/80 3-39l12test"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%a %b %d %H:%M:%S %z %Y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"Tue Jul 22 17:28:44 +0200 2003"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%a %b %d %H:%M:%S %z %Y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"Tue Feb 29 17:28:44 +0200 2000"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%a %b %d %H:%M:%S %z %Y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"Tue Feb 29 17:28:44 +0200 1900"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error (should be error!): %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%a %b %d %H:%M:%S %z %Y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"Tue Feb 29 17:28:44 +0200 1996"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%b %d %H:%M:%S %z %Y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"      Jul 31 17:28:44 +0200 1996"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%b %d %H:%M:%S %z %Y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"      Jul 32 17:28:44 +0200 1996"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error (should be error!): %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%a %b %d %H:%M:%S %z %Y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"Tue Feb 29 17:28:44 +0200 1997"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error (should be error!): %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"Tue Jul 22 17:28:44 +0200 2003"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error (should be error!): %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"a %"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"Tue Jul 22 17:28:44 +0200 2003"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error (should be error!): %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%b, %d %H_%M`%S %z %Y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"    Jul, 22 17_28 `44 +0200  2003  "</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%a %b %%%d %H:%M:%S %Z %Y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"Tue Jul %22 17:28:44 CEST 2003"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%a %b %%%d %H:%M:%S %Z %Y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"Tue Jul %22 17:28:44 CEST 2003"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"abc%n %C %B %%%d %H:%M:%S %Z %Y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"abc\n   19 October %22 17:28:44 CEST 2003"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"abc%n %C %B %%%d %H:%M:%S %Z %y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"abc\n   18 October %34 17:28:44 CEST 80"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error (should be error!): %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"abc\n   18 October %34 17:28:44 CEST 80"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error (should be error!): %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"1980-04-12 3:49:44      "</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, NULL) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%B %d, %Y. Time: %I:%M%p"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"July 14, 1988. Time: 9:15am"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"September 6 at 01:30 pm in the year 1983"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%B %d at %I:%M %p in the year %Y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"  1976, July 14. Time: 9:15am"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%Y,   %B %d. Time: %I:%M %p"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"  1976, July 14. Time: 9:15 am"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%Y,   %B %d. Time: %I:%M%p"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"  1976, P.M. July 14. Time: 9:15"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%Y, %P  %B %d. Time: %I:%M"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="string">"1234567890"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%s"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%a %b %d %H:%M:%S %Y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"Mon Dec 30 17:28:44 2019"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_fmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%a %b %d %H:%M:%S %Y"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator>  <literal type="string">"Mon December 30 17:28:44 2019"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_asc</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_fmt_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp_defmt_asc(%s, %s) = %s, error: %d\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGtrans</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"rollback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>381</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>381</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>

        <block>{<block_content> <expr_stmt><expr><call><name>ECPGdisconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"CURRENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>382</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>382</cpp:number> <cpp:file>"dt_test.pgc"</cpp:file></cpp:line>


	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
