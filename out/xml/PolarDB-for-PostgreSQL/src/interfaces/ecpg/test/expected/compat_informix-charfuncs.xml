<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/interfaces/ecpg/test/expected/compat_informix-charfuncs.c"><comment type="block">/* Processed by ecpg (regression mode) */</comment>
<comment type="block">/* These include files are added by the preprocessor */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpgerrno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlca.h&gt;</cpp:file></cpp:include>
<comment type="block">/* Needed for informix compatibility */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpg_informix.h&gt;</cpp:file></cpp:include>
<comment type="block">/* End of automatic include section */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPGdebug</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ECPGdebug((X)+100,(Y))</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"charfuncs.pgc"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqltypes.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>t1</name><index>[]</index></name> <init>= <expr><literal type="string">"abc  def  ghi  "</literal></expr></init></decl>;</decl_stmt>
	          <comment type="block">/* 123456789012345 */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"t1: _%s_\n"</literal></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rupshift</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"t1: _%s_\n"</literal></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ldchar</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"byleng(t1, %d): %d, ldchar: _%s_\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>byleng</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ldchar</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"byleng(t1, %d): %d, ldchar: _%s_\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>byleng</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ldchar</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"byleng(t1, %d): %d, ldchar: _%s_\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>byleng</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ldchar</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"byleng(t1, %d): %d, ldchar: _%s_\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>byleng</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
