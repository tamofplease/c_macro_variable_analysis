<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/interfaces/ecpg/test/expected/preproc-outofscope.c"><comment type="block">/* Processed by ecpg (regression mode) */</comment>
<comment type="block">/* These include files are added by the preprocessor */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpgerrno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlca.h&gt;</cpp:file></cpp:include>
<comment type="block">/* End of automatic include section */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPGdebug</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ECPGdebug((X)+100,(Y))</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"regression.h"</cpp:file></cpp:line>






<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>6</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>



<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"pgtypes_numeric.h"</cpp:file></cpp:line>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PGTYPES_NUMERIC</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGTYPES_NUMERIC</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgtypes.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMERIC_POS</name></cpp:macro>						<cpp:value>0x0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMERIC_NEG</name></cpp:macro>						<cpp:value>0x4000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMERIC_NAN</name></cpp:macro>						<cpp:value>0xC000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMERIC_NULL</name></cpp:macro>						<cpp:value>0xF000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMERIC_MAX_PRECISION</name></cpp:macro>			<cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMERIC_MAX_DISPLAY_SCALE</name></cpp:macro>		<cpp:value>NUMERIC_MAX_PRECISION</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMERIC_MIN_DISPLAY_SCALE</name></cpp:macro>		<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMERIC_MIN_SIG_DIGITS</name></cpp:macro>			<cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECSIZE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>NumericDigit</name>;</typedef>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>ndigits</name></decl>;</decl_stmt>		<comment type="block">/* number of digits in digits[] - can be 0! */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>weight</name></decl>;</decl_stmt>			<comment type="block">/* weight of first digit */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>rscale</name></decl>;</decl_stmt>			<comment type="block">/* result scale */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>dscale</name></decl>;</decl_stmt>			<comment type="block">/* display scale */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>sign</name></decl>;</decl_stmt>			<comment type="block">/* NUMERIC_POS, NUMERIC_NEG, or NUMERIC_NAN */</comment>
	<decl_stmt><decl><type><name>NumericDigit</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>			<comment type="block">/* start of alloc'd space for digits[] */</comment>
	<decl_stmt><decl><type><name>NumericDigit</name> <modifier>*</modifier></type><name>digits</name></decl>;</decl_stmt>		<comment type="block">/* decimal digits */</comment>
}</block></struct></type> <name>numeric</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>ndigits</name></decl>;</decl_stmt>		<comment type="block">/* number of digits in digits[] - can be 0! */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>weight</name></decl>;</decl_stmt>			<comment type="block">/* weight of first digit */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>rscale</name></decl>;</decl_stmt>			<comment type="block">/* result scale */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>dscale</name></decl>;</decl_stmt>			<comment type="block">/* display scale */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>sign</name></decl>;</decl_stmt>			<comment type="block">/* NUMERIC_POS, NUMERIC_NEG, or NUMERIC_NAN */</comment>
	<decl_stmt><decl><type><name>NumericDigit</name></type> <name><name>digits</name><index>[<expr><name>DECSIZE</name></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* decimal digits */</comment>
}</block></struct></type> <name>decimal</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>numeric</name>    <modifier>*</modifier></type><name>PGTYPESnumeric_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>decimal</name>    <modifier>*</modifier></type><name>PGTYPESdecimal_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>PGTYPESnumeric_free</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>PGTYPESdecimal_free</name><parameter_list>(<parameter><decl><type><name>decimal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>numeric</name>    <modifier>*</modifier></type><name>PGTYPESnumeric_from_asc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name>	   <modifier>*</modifier></type><name>PGTYPESnumeric_to_asc</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>PGTYPESnumeric_add</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>PGTYPESnumeric_sub</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>PGTYPESnumeric_mul</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>PGTYPESnumeric_div</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>PGTYPESnumeric_cmp</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>PGTYPESnumeric_from_int</name><parameter_list>(<parameter><decl><type><name>signed</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>PGTYPESnumeric_from_long</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>PGTYPESnumeric_copy</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>PGTYPESnumeric_from_double</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>PGTYPESnumeric_to_double</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>PGTYPESnumeric_to_int</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>PGTYPESnumeric_to_long</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>PGTYPESnumeric_to_decimal</name><parameter_list>(<parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>decimal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>			<name>PGTYPESnumeric_from_decimal</name><parameter_list>(<parameter><decl><type><name>decimal</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>numeric</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* PGTYPES_NUMERIC */</comment>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>8</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


<comment type="block">/* exec sql begin declare section */</comment>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"struct.h"</cpp:file></cpp:line>
 

				
			
							<comment type="block">/* dec_t */</comment>
			
			

   <typedef>typedef <type><name><name>struct</name> <name>mytype</name></name></type>  <name>MYTYPE</name> ;</typedef>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>9</cpp:number> <cpp:file>"struct.h"</cpp:file></cpp:line>


 

				
				
				
				
				

   <typedef>typedef <type><name><name>struct</name> <name>mynulltype</name></name></type>  <name>MYNULLTYPE</name> ;</typedef>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>19</cpp:number> <cpp:file>"struct.h"</cpp:file></cpp:line>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>11</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

<struct>struct <name>mytype</name> <block>{ 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3</cpp:number> <cpp:file>"struct.h"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4</cpp:number> <cpp:file>"struct.h"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name></type> <name><name>t</name> <index>[ <expr><literal type="number">64</literal></expr> ]</index></name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>5</cpp:number> <cpp:file>"struct.h"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>double</name></type> <name>d1</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>6</cpp:number> <cpp:file>"struct.h"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>double</name></type> <name>d2</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>7</cpp:number> <cpp:file>"struct.h"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name></type> <name><name>c</name> <index>[ <expr><literal type="number">30</literal></expr> ]</index></name></decl> ;</decl_stmt>
 }</block> ;</struct> <struct>struct <name>mynulltype</name> <block>{ 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>13</cpp:number> <cpp:file>"struct.h"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>14</cpp:number> <cpp:file>"struct.h"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>15</cpp:number> <cpp:file>"struct.h"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>d1</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>16</cpp:number> <cpp:file>"struct.h"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>d2</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>17</cpp:number> <cpp:file>"struct.h"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl> ;</decl_stmt>
 }</block> ;</struct><comment type="block">/* exec sql end declare section */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>12</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


<comment type="block">/* exec sql whenever sqlerror  stop ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>14</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


<comment type="block">/* Functions for test 1 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_var1</name><parameter_list>(<parameter><decl><type><name>MYTYPE</name> <modifier>*</modifier><modifier>*</modifier></type><name>myvar0</name></decl></parameter>, <parameter><decl><type><name>MYNULLTYPE</name> <modifier>*</modifier><modifier>*</modifier></type><name>mynullvar0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* exec sql begin declare section */</comment>
			  
		  
	
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>22</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>MYTYPE</name> <modifier>*</modifier></type> <name>myvar</name> <init>= <expr><call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof <argument_list>( <argument><expr><name>MYTYPE</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>23</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>MYNULLTYPE</name> <modifier>*</modifier></type> <name>mynullvar</name> <init>= <expr><call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof <argument_list>( <argument><expr><name>MYNULLTYPE</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt>
<comment type="block">/* exec sql end declare section */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>24</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


	<comment type="block">/* Test DECLARE ... SELECT ... INTO with pointers */</comment>

	<expr_stmt><expr><call><name>ECPGset_var</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator> <name>myvar</name> <operator>)</operator></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>\
 <expr_stmt><expr><call><name>ECPGset_var</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <name>mynullvar</name> <operator>)</operator></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>\
 <comment type="block">/* declare mycur cursor for select * from a1 */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>28</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


	<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>myvar0</name> <operator>=</operator> <name>myvar</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>mynullvar0</name> <operator>=</operator> <name>mynullvar</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>open_cur1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"declare mycur cursor for select * from a1"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>id</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mytype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYNULLTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>id</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mynulltype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>t</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">64</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mytype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYNULLTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>t</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mynulltype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_double</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>d1</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mytype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYNULLTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>d1</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mynulltype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_double</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>d2</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mytype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYNULLTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>d2</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mynulltype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>c</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">30</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mytype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYNULLTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>c</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mynulltype</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>40</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>40</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


	<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_record1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"fetch mycur"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>id</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mytype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYNULLTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>id</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mynulltype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>t</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">64</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mytype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYNULLTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>t</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mynulltype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_double</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>d1</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mytype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYNULLTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>d1</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mynulltype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_double</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>d2</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mytype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYNULLTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>d2</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mynulltype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>c</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">30</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mytype</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator> <name>MYNULLTYPE</name>  <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ECPGget_var</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator><operator>.</operator><name>c</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>mynulltype</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>49</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>49</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


	<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>!=</operator> <name>ECPG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>close_cur1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"close mycur"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>58</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>58</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


	<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MYTYPE</name>		<modifier>*</modifier></type><name>myvar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MYNULLTYPE</name>	<modifier>*</modifier></type><name>mynullvar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>loopcount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ECPGdebug</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ecpg1_regression"</literal></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>75</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>75</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"set datestyle to iso"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>78</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>78</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"create table a1 ( id serial primary key , t text , d1 numeric , d2 float8 , c character ( 10 ) )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>81</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>81</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"insert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into a1 ( id , t , d1 , d2 , c ) values ( default , 'a' , 1.0 , 2 , 'a' )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>84</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>84</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into a1 ( id , t , d1 , d2 , c ) values ( default , null , null , null , null )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>85</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>85</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into a1 ( id , t , d1 , d2 , c ) values ( default , 'b' , 2.0 , 3 , 'b' )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>86</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>86</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGtrans</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>89</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>89</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


	<comment type="block">/* Test out-of-scope DECLARE/OPEN/FETCH/CLOSE */</comment>

	<expr_stmt><expr><call><name>get_var1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>myvar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mynullvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>open_cur1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* exec sql whenever not found  break ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>96</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


	<for>for <control>(<init><expr><name>loopcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>loopcount</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>loopcount</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>myvar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MYTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>get_record1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>==</operator> <name>ECPG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"id=%d%s t='%s'%s d1=%f%s d2=%f%s c = '%s'%s\n"</literal></expr></argument>,
			<argument><expr><name><name>myvar</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mynullvar</name><operator>-&gt;</operator><name>id</name></name></expr> ?</condition><then> <expr><literal type="string">" (NULL)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			<argument><expr><name><name>myvar</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mynullvar</name><operator>-&gt;</operator><name>t</name></name></expr> ?</condition><then> <expr><literal type="string">" (NULL)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			<argument><expr><name><name>myvar</name><operator>-&gt;</operator><name>d1</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mynullvar</name><operator>-&gt;</operator><name>d1</name></name></expr> ?</condition><then> <expr><literal type="string">" (NULL)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			<argument><expr><name><name>myvar</name><operator>-&gt;</operator><name>d2</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mynullvar</name><operator>-&gt;</operator><name>d2</name></name></expr> ?</condition><then> <expr><literal type="string">" (NULL)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			<argument><expr><name><name>myvar</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mynullvar</name><operator>-&gt;</operator><name>c</name></name></expr> ?</condition><then> <expr><literal type="string">" (NULL)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>close_cur1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>myvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mynullvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"drop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"drop table a1"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>118</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>118</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGtrans</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>121</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>121</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"disconnect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdisconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"CURRENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>124</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>124</cpp:number> <cpp:file>"outofscope.pgc"</cpp:file></cpp:line>


	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
