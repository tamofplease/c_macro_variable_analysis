<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/external/polar_csn/polar_csn.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_csn.c
 *		various csn related function.
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *	  external/polar_csn/polar_csn.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>

<comment type="block">/*
 * txid and TxidSnapshot type are
 * copied from txid.c
 */</comment>

<comment type="block">/* Use unsigned variant internally */</comment>
<typedef>typedef <type><name>uint64</name></type> <name>txid</name>;</typedef>

<comment type="block">/*
 * Snapshot containing 8byte txids.
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<comment type="block">/*
	 * 4-byte length hdr, should not be touched directly.
	 *
	 * Explicit embedding is ok as we want always correct alignment anyway.
	 */</comment>
	<decl_stmt><decl><type><name>int32</name></type>		<name>__varsz</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint32</name></type>		<name>nxip</name></decl>;</decl_stmt>			<comment type="block">/* number of txids in xip array */</comment>
	<decl_stmt><decl><type><name>txid</name></type>		<name>xmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>txid</name></type>		<name>xmax</name></decl>;</decl_stmt>
	<comment type="block">/* in-progress txids, xmin &lt;= xip[i] &lt; xmax: */</comment>
	<comment type="block">/* 
	 * POLAR csn
	 * To make txid_snapshot storage compatible, we should store csn in xip
	 * and store an invalid xid in front of csn to differentiate csn snapshot
	 * with xid snapshot
	 */</comment>
	<decl_stmt><decl><type><name>txid</name></type>		<name><name>xip</name><index>[<expr><name>FLEXIBLE_ARRAY_MEMBER</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>TxidSnapshot</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>is_csn_snapshot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TxidSnapshot</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>CommitSeqNo</name></type> <name>txid_snapshot_get_csn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TxidSnapshot</name> <modifier>*</modifier></type><name>snap</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<comment type="block">/*
 * txid_snapshot_csn(txid_snapshot) returns int8
 *
 *		return snapshot's csn
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>txid_snapshot_csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>txid_snapshot_csn</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TxidSnapshot</name> <modifier>*</modifier></type><name>snap</name> <init>= <expr><operator>(</operator><name>TxidSnapshot</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_VARLENA_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name> <init>= <expr><name>InvalidCommitSeqNo</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>is_csn_snapshot</name><argument_list>(<argument><expr><name>snap</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>csn</name> <operator>=</operator> <call><name>txid_snapshot_get_csn</name><argument_list>(<argument><expr><name>snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><call><name>PG_RETURN_INT64</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * txid_csn(int8) returns int8
 *
 *		return xid's csn
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>txid_csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>txid_csn</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>xid</name> <init>= <expr><operator>(</operator><name>TransactionId</name><operator>)</operator> <call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>polar_csn_enable</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>PG_RETURN_UINT64</name><argument_list>(<argument><expr><call><name>polar_xact_get_csn</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>POLAR_CSN_MAX_NORMAL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_UINT64</name><argument_list>(<argument><expr><name>InvalidCommitSeqNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
