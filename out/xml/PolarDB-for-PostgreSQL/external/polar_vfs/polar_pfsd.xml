<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/external/polar_vfs/polar_pfsd.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_pfsd.c
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *	  external/polar_vfs/polar_pfsd.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/backendid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/pg_shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pfsd_sdk.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* POLAR */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_pfsd.h"</cpp:file></cpp:include>
<comment type="block">/* POLAR END */</comment>

<decl_stmt><decl><type><name>int</name></type> <name>max_pfsd_io_size</name> <init>= <expr><name>PFSD_DEFAULT_MAX_IOSIZE</name></expr></init></decl>;</decl_stmt>

<function><type><name>ssize_t</name></type>
<name>polar_pfsd_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>from</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>nleft</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>writesize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>nleft</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>from</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>nleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>writesize</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>nleft</name></expr></argument>, <argument><expr><name>max_pfsd_io_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pfsd_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>writesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>count</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nleft</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type>
<name>polar_pfsd_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>iolen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>nleft</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>from</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>nleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>iolen</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>nleft</name></expr></argument>, <argument><expr><name>max_pfsd_io_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pfsd_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>iolen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>count</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nleft</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type>
<name>polar_pfsd_pread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>iolen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>       <name>off</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>nleft</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>from</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>nleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>iolen</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>nleft</name></expr></argument>, <argument><expr><name>max_pfsd_io_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pfsd_pread</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>iolen</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>count</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nleft</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type>
<name>polar_pfsd_pwrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>from</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>nleft</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>       <name>startoffset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>writesize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>nleft</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>from</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>startoffset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>nleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>writesize</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>nleft</name></expr></argument>, <argument><expr><name>max_pfsd_io_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pfsd_pwrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>writesize</name></expr></argument>, <argument><expr><name>startoffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>count</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nleft</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>startoffset</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>
</unit>
