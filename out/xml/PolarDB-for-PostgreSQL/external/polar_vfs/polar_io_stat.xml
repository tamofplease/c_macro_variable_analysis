<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/external/polar_vfs/polar_io_stat.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_io_stat.c
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *	  external/polar_vfs/polar_io_stat.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_io_stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/sinvaladt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_io_stat_shmem_shutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>POLARProcIOStatAdd</name><parameter_list>(<parameter><decl><type><name>PolarProcIOStat</name></type> <name><name>x</name><index>[]</index><index>[<expr><name>POLARIO_LOC_SIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>PolarProcIOStat</name></type> <name><name>y</name><index>[]</index><index>[<expr><name>POLARIO_LOC_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>NumLatencyDistAdd</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name><name>x</name><index>[]</index><index>[<expr><name>LATENCY_INTERVAL_LEN</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name><name>y</name><index>[]</index><index>[<expr><name>LATENCY_INTERVAL_LEN</name></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_current_process_io_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>io_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pro_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>polar_dir_type_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polario_location_register</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loc</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Links to shared memory state */</comment>
<decl_stmt><decl><type><name>POLAR_PROC_IO</name>    <modifier>*</modifier></type><name>PolarIOStatArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>	<name><name>polar_kind_to_location</name><index>[<expr><name>POLAR_VFS_KIND_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/*
 * shmem_startup hook: allocate or attach to shared memory,
 */</comment>
<function><type><name>void</name></type> 
<name>polar_io_stat_shmem_startup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>total_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* The 0th index is used as a summary statistics */</comment>
	<expr_stmt><expr><name>total_size</name> <operator>=</operator>  <call><name>mul_size</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>POLAR_PROC_IO</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>PolarNumProcIOStatSlots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Create or attach to the shared memory state
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>PolarIOStatArray</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"PolarIOStatArray"</literal></expr></argument>,
						  <argument><expr><name>total_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"PolarIOStatArray share memory total size is %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<comment type="block">/* First time through ... */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>PolarIOStatArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* POLAR: polar io stat register all kinds of vfs interfaces. */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>POLAR_VFS_KIND_SIZE</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>polar_kind_to_location</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>polario_location_register</name><argument_list>(<argument><expr><name>POLAR_VFS_LOCAL_BIO</name></expr></argument>, <argument><expr><name>POLARIO_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
		<expr_stmt><expr><call><name>polario_location_register</name><argument_list>(<argument><expr><name>POLAR_VFS_PFS</name></expr></argument>, <argument><expr><name>POLARIO_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>polario_location_register</name><argument_list>(<argument><expr><name>POLAR_VFS_LOCAL_DIO</name></expr></argument>, <argument><expr><name>POLARIO_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>PolarGlobalIOReadStats</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"PolarGlobalIOReadStats"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>POLAR_PROC_GLOBAL_IO_READ</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"PolarGlobalIOReadStats share memory size is %ld"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>POLAR_PROC_GLOBAL_IO_READ</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>PolarGlobalIOReadStats</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>POLAR_PROC_GLOBAL_IO_READ</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pg_atomic_uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>polar_io_shmem_exit_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>on_shmem_exit</name><argument_list>(<argument><expr><name>polar_io_stat_shmem_shutdown</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> 
<name>polar_io_stat_shmem_shutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>my_proc_index</name></decl>;</decl_stmt>
   	<comment type="block">/* Safety check ... shouldn't get here unless shmem is set up. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PolarIOStatArray</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>MyBackendId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Excepted, backendid(0) exit."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>my_proc_index</name> <operator>=</operator> <call><name>polar_get_io_proc_index</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>AmStartupProcess</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>print_current_process_io_info</name><argument_list>(<argument><expr><name>POLARIO_TYPE_SIZE</name></expr></argument>, <argument><expr><literal type="string">"startup process"</literal></expr></argument>, <argument><expr><literal type="string">"Total"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>print_current_process_io_info</name><argument_list>(<argument><expr><name>POLARIO_WAL</name></expr></argument>, <argument><expr><literal type="string">"startup process"</literal></expr></argument>, <argument><expr><literal type="string">"WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>print_current_process_io_info</name><argument_list>(<argument><expr><name>POLARIO_DATA</name></expr></argument>, <argument><expr><literal type="string">"startup process"</literal></expr></argument>, <argument><expr><literal type="string">"DATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>my_proc_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* We think that 0 of backendid is not used by the process 
        * or by the master, so we will summarize the summary information 
        * of IO here so that we can display it in the view. 
        * NB: This process does not require locked because we don't need
        * to care about data consistency.
        */</comment>
		<expr_stmt><expr><call><name>POLARProcIOStatAdd</name><argument_list>(<argument><expr><name><name>PolarIOStatArray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>polar_proc_io_stat_dist</name></expr></argument>, <argument><expr><name><name>PolarIOStatArray</name><index>[<expr><name>my_proc_index</name></expr>]</index></name><operator>.</operator><name>polar_proc_io_stat_dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>NumLatencyDistAdd</name><argument_list>(<argument><expr><name><name>PolarIOStatArray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num_latency_dist</name></expr></argument>, <argument><expr><name><name>PolarIOStatArray</name><index>[<expr><name>my_proc_index</name></expr>]</index></name><operator>.</operator><name>num_latency_dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PolarIOStatArray</name><index>[<expr><name>my_proc_index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>POLAR_PROC_IO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Add two PLOARPROCIOSTATs*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> 
<name>POLARProcIOStatAdd</name><parameter_list>(<parameter><decl><type><name>PolarProcIOStat</name></type> <name><name>x</name><index>[]</index><index>[<expr><name>POLARIO_LOC_SIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>PolarProcIOStat</name></type> <name><name>y</name><index>[]</index><index>[<expr><name>POLARIO_LOC_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> 		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>j</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>POLARIO_TYPE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>POLARIO_LOC_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_number_read</name> <operator>+=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_number_read</name></expr>;</expr_stmt> 
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_number_write</name> <operator>+=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_number_write</name></expr>;</expr_stmt> 
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_throughtput_read</name> <operator>+=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_throughtput_read</name></expr>;</expr_stmt> 
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_throughtput_write</name> <operator>+=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_throughtput_write</name></expr>;</expr_stmt> 
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_latency_read</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_latency_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_latency_write</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_latency_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_open_num</name> <operator>+=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_open_num</name></expr>;</expr_stmt> 
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_close_num</name> <operator>+=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_close_num</name></expr>;</expr_stmt> 
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_open_time</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_open_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_seek_time</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_seek_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_seek_count</name> <operator>+=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_seek_count</name></expr>;</expr_stmt> 
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_creat_time</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_creat_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_falloc_time</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_falloc_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_fsync_time</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_fsync_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_creat_count</name> <operator>+=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_creat_count</name></expr>;</expr_stmt> 
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_fsync_count</name> <operator>+=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_fsync_count</name></expr>;</expr_stmt> 
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_falloc_count</name> <operator>+=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>io_falloc_count</name></expr>;</expr_stmt> 
		</block_content>}</block></for></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/* Add two PLOARPROCIOSTATs*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> 
<name>NumLatencyDistAdd</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name><name>x</name><index>[]</index><index>[<expr><name>LATENCY_INTERVAL_LEN</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name><name>y</name><index>[]</index><index>[<expr><name>LATENCY_INTERVAL_LEN</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> 		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>j</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LATENCY_KIND_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LATENCY_INTERVAL_LEN</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/* Calculate the I/O statistical index of the current process */</comment>
<function><type><name>int</name></type>
<name>polar_get_io_proc_index</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name>MyBackendId</name> <operator>==</operator> <name>InvalidBackendId</name></expr> ?</condition><then>
		<expr><operator>(</operator><ternary><condition><expr><name>MyAuxProcType</name> <operator>==</operator>  <name>NotAnAuxProcess</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>MaxBackends</name> <operator>+</operator> <name>MyAuxProcType</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>
		</then><else>: <expr><name>MyBackendId</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> 
<name>print_current_process_io_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>io_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pro_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>polar_dir_type_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> 	<name>backendid</name> <init>= <expr><call><name>polar_get_io_proc_index</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> 	<name>once</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>index</name> <init>= <expr><name>io_type</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>instr_time</name></type> <name>vfs_open_time</name></decl>, <decl><type ref="prev"/><name>vfs_write_time</name></decl>, <decl><type ref="prev"/><name>vfs_read_time</name></decl>,
			<decl><type ref="prev"/><name>vfs_seek_time</name></decl>, <decl><type ref="prev"/><name>vfs_fsync_time</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>vfs_open_count</name></decl>, <decl><type ref="prev"/><name>vfs_write_count</name></decl>, <decl><type ref="prev"/><name>vfs_read_count</name></decl>,
		 	<decl><type ref="prev"/><name>vfs_seek_count</name></decl>, <decl><type ref="prev"/><name>vfs_fsync_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PolarProcIOStat</name> <modifier>*</modifier></type><name>tmp_stat</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>backendid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*no cover begin*/</comment>
	<if_stmt><if>if <condition>(<expr><name>io_type</name> <operator>&gt;</operator> <name>POLARIO_TYPE_SIZE</name> <operator>||</operator> <name>io_type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<comment type="block">/*no cover end*/</comment>

	<comment type="block">/* initial and clean up*/</comment>
	<expr_stmt><expr><name>vfs_open_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>vfs_write_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>vfs_read_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>vfs_seek_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>vfs_fsync_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>vfs_open_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>vfs_write_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>vfs_read_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>vfs_seek_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>vfs_fsync_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>io_type</name> <operator>==</operator> <name>POLARIO_TYPE_SIZE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>once</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>POLARIO_LOC_SIZE</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>tmp_stat</name> <operator>=</operator> <operator>&amp;</operator><name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name>vfs_open_time</name></expr></argument>, <argument><expr><name><name>tmp_stat</name><operator>-&gt;</operator><name>io_open_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name>vfs_write_time</name></expr></argument>, <argument><expr><name><name>tmp_stat</name><operator>-&gt;</operator><name>io_latency_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name>vfs_read_time</name></expr></argument>, <argument><expr><name><name>tmp_stat</name><operator>-&gt;</operator><name>io_latency_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name>vfs_seek_time</name></expr></argument>, <argument><expr><name><name>tmp_stat</name><operator>-&gt;</operator><name>io_seek_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name>vfs_fsync_time</name></expr></argument>, <argument><expr><name><name>tmp_stat</name><operator>-&gt;</operator><name>io_fsync_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>vfs_open_count</name> <operator>+=</operator> <name><name>tmp_stat</name><operator>-&gt;</operator><name>io_open_num</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vfs_read_count</name> <operator>+=</operator> <name><name>tmp_stat</name><operator>-&gt;</operator><name>io_number_read</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vfs_write_count</name> <operator>+=</operator> <name><name>tmp_stat</name><operator>-&gt;</operator><name>io_number_write</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vfs_seek_count</name> <operator>+=</operator> <name><name>tmp_stat</name><operator>-&gt;</operator><name>io_seek_count</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vfs_fsync_count</name> <operator>+=</operator> <name><name>tmp_stat</name><operator>-&gt;</operator><name>io_fsync_count</name></name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block> while <condition>(<expr><operator>!</operator><name>once</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>++</operator><name>index</name><operator>)</operator> <operator>&lt;</operator> <name>POLARIO_TYPE_SIZE</name></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"%s %s IO follows:"</literal>
			  <literal type="string">"open %.6lf s, count %lu, "</literal>
			  <literal type="string">"write %.6lf s, count %lu, "</literal>
			  <literal type="string">"read %.6lf s, count %lu, "</literal>
			  <literal type="string">"lseek %.6lf s, count %lu,"</literal>
			  <literal type="string">"fsync %.6lf s, count %lu"</literal></expr></argument>,
		 <argument><expr><name>pro_name</name></expr></argument>, <argument><expr><name>polar_dir_type_name</name></expr></argument>,
		 <argument><expr><call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name>vfs_open_time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vfs_open_count</name></expr></argument>,
		 <argument><expr><call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name>vfs_write_time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vfs_write_count</name></expr></argument>,
		 <argument><expr><call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name>vfs_read_time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vfs_read_count</name></expr></argument>,
		 <argument><expr><call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name>vfs_seek_time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vfs_seek_count</name></expr></argument>,
		 <argument><expr><call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name>vfs_fsync_time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vfs_fsync_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polario_location_register</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>kind</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&lt;</operator> <name>POLAR_VFS_KIND_SIZE</name><operator>)</operator> <operator>&amp;&amp;</operator>
		<operator>(</operator><name>loc</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>loc</name> <operator>&lt;</operator> <name>POLARIO_LOC_SIZE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>polar_kind_to_location</name><index>[<expr><name>kind</name></expr>]</index></name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"polario_location_register error at "</literal>
					<literal type="string">"kind = %d, loc = %d, "</literal>
					<literal type="string">"POLAR_VFS_KIND_SIZE = %d, "</literal>
					<literal type="string">"POLARIO_LOC_SIZE = %d"</literal></expr></argument>,
					<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>loc</name></expr></argument>, <argument><expr><name>POLAR_VFS_KIND_SIZE</name></expr></argument>, <argument><expr><name>POLARIO_LOC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>polario_kind_to_location</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>loc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&lt;</operator> <name>POLAR_VFS_KIND_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>loc</name> <operator>=</operator> <name><name>polar_kind_to_location</name><index>[<expr><name>kind</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>loc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * collect the statistics of backends.
 *
 * We need to check the result, when call this funcition.
 * The value of result, -1 means fail, 0 means succeed.
 */</comment>
<function><type><name>int</name></type>
<name>polar_collect_io_stat</name><parameter_list>(<parameter><decl><type><name>PolarCollectIoStat</name> <modifier>*</modifier></type><name>io_stat_info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backendid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	
	<decl_stmt><decl><type><name>LocalPgBackendStatus</name> <modifier>*</modifier></type><name>local_beentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PgBackendStatus</name> <modifier>*</modifier></type><name>beentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  			<name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint64</name></type> 			<name>shared_read_ps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> 			<name>shared_write_ps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>			<name>shared_read_throughput</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>			<name>shared_write_throughput</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>instr_time</name></type>		<name>shared_read_latency</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>instr_time</name></type>		<name>shared_write_latency</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>			<name>io_open_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>			<name>io_seek_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>instr_time</name></type>		<name>io_open_time</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>instr_time</name></type>		<name>io_seek_time</name></decl>;</decl_stmt>


	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>shared_read_latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>shared_write_latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>io_open_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>io_seek_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="block">/* Get the next one in the list */</comment>
	<expr_stmt><expr><name>local_beentry</name> <operator>=</operator> <call><name>pgstat_fetch_stat_local_beentry</name><argument_list>(<argument><expr><name>backendid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local_beentry</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Ignore if local_beentry type is empty */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>beentry</name> <operator>=</operator> <operator>&amp;</operator><name><name>local_beentry</name><operator>-&gt;</operator><name>backendStatus</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>beentry</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Ignore if beentry type is empty */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Each process accumulates itâs file type by file location */</comment>
	<if_stmt><if>if <condition>(<expr><name>PolarIOStatArray</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>POLARIO_TYPE_SIZE</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>

			<expr_stmt><expr><name>shared_read_ps</name> <operator>+=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_number_read</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>shared_write_ps</name> <operator>+=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_number_write</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>shared_read_throughput</name> <operator>+=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_throughtput_read</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>shared_write_throughput</name> <operator>+=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_throughtput_write</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name>shared_read_latency</name></expr></argument>, <argument><expr><name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_latency_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name>shared_write_latency</name></expr></argument>, <argument><expr><name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_latency_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>io_open_num</name> <operator>+=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_open_num</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>io_seek_count</name> <operator>+=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_seek_count</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name>io_open_time</name></expr></argument>, <argument><expr><name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_open_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name>io_seek_time</name></expr></argument>, <argument><expr><name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_seek_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></for>

		<comment type="block">/* pfs iops */</comment>
		<expr_stmt><expr><name><name>io_stat_info</name><operator>-&gt;</operator><name>shared_read_ps</name></name> <operator>=</operator> <name>shared_read_ps</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>io_stat_info</name><operator>-&gt;</operator><name>shared_write_ps</name></name> <operator>=</operator> <name>shared_write_ps</name></expr>;</expr_stmt>

		<comment type="block">/* pfs io throughput */</comment>
		<expr_stmt><expr><name><name>io_stat_info</name><operator>-&gt;</operator><name>shared_read_throughput</name></name> <operator>=</operator> <name>shared_read_throughput</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>io_stat_info</name><operator>-&gt;</operator><name>shared_write_throughput</name></name> <operator>=</operator> <name>shared_write_throughput</name></expr>;</expr_stmt>

		<comment type="block">/* pfs io latency */</comment>
		<expr_stmt><expr><name><name>io_stat_info</name><operator>-&gt;</operator><name>shared_read_latency</name></name> <operator>=</operator> <call><name>INSTR_TIME_GET_MILLISEC</name><argument_list>(<argument><expr><name>shared_read_latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>io_stat_info</name><operator>-&gt;</operator><name>shared_write_latency</name></name> <operator>=</operator> <call><name>INSTR_TIME_GET_MILLISEC</name><argument_list>(<argument><expr><name>shared_write_latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* open and seek count */</comment>
		<expr_stmt><expr><name><name>io_stat_info</name><operator>-&gt;</operator><name>io_open_num</name></name> <operator>=</operator> <name>io_open_num</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>io_stat_info</name><operator>-&gt;</operator><name>io_seek_count</name></name> <operator>=</operator> <name>io_seek_count</name></expr>;</expr_stmt>

		<comment type="block">/* open and seek time */</comment>
		<expr_stmt><expr><name><name>io_stat_info</name><operator>-&gt;</operator><name>io_open_time</name></name> <operator>=</operator> <call><name>INSTR_TIME_GET_MILLISEC</name><argument_list>(<argument><expr><name>io_open_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>io_stat_info</name><operator>-&gt;</operator><name>io_seek_time</name></name> <operator>=</operator> <call><name>INSTR_TIME_GET_MILLISEC</name><argument_list>(<argument><expr><name>io_seek_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
