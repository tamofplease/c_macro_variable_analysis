<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/external/polar_vfs/polar_directio.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_directio.c
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *	  external/polar_vfs/polar_directio.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/backendid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/pg_shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<comment type="block">/* POLAR */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_directio.h"</cpp:file></cpp:include>
<comment type="block">/* POLAR END */</comment>

<decl_stmt><decl><type><name>int</name></type> <name>polar_max_direct_io_size</name> <init>= <expr><name>POLAR_DIRECTIO_DEFAULT_IOSIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>polar_directio_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * POLAR: open file with PG_O_DIRECT flag.
 * O_WRONLY is conflict to PG_O_DIRECT, so it needs to be
 * replaced to O_RDWR. Besides, directory can not be open
 * with PG_O_DIRECT.
 */</comment>
<function><type><name>int</name></type>
<name>polar_directio_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* POLAR: Check for path not exists or points to a regular file. */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
			<operator>(</operator><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOENT</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>POLAR_ACCESS_MODE_MASK</name><operator>)</operator> <operator>==</operator> <name>O_WRONLY</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>POLAR_ACCESS_MODE_MASK</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>O_RDWR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>PG_O_DIRECT</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"polar_directio_open file with PG_O_DIRECT: %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type>
<name>polar_directio_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>   <name>offset</name> <init>= <expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>POLAR_DIECRTIO_IS_ALIGNED</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>POLAR_DIECRTIO_IS_ALIGNED</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>POLAR_DIECRTIO_IS_ALIGNED</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>polar_directio_pwrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>+</operator> <name>res</name><operator>)</operator></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type>
<name>polar_directio_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>   <name>offset</name> <init>= <expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>POLAR_DIECRTIO_IS_ALIGNED</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>POLAR_DIECRTIO_IS_ALIGNED</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>POLAR_DIECRTIO_IS_ALIGNED</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>polar_directio_pread</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>+</operator> <name>res</name><operator>)</operator></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: It do pread work with PG_O_DIRECT flag.
 * First, malloc one new buffer which be aligned address.
 * Second, pread content of file for aligned length from aligned offset.
 * Third, copy content of file from new buffer to old buffer.
 *
 * We split the [offset, offset + len] into three sections: the first section,
 * the middle sections and the last section. The boundary of content to be read
 * will be processing during in the first and last section.
 */</comment>
<function><type><name>ssize_t</name></type>
<name>polar_directio_pread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>polar_directio_buffer</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>from</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>   <name>head_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>   <name>head_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>   <name>tail_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>   <name>tail_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>   <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>   <name>nleft</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>cplen</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>POLAR_DIECRTIO_IS_ALIGNED</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>POLAR_DIECRTIO_IS_ALIGNED</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>POLAR_DIECRTIO_IS_ALIGNED</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pread</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>from</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>head_start</name> <operator>=</operator> <call><name>POLAR_DIRECTIO_ALIGN_DOWN</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>head_end</name> <operator>=</operator> <call><name>POLAR_DIRECTIO_ALIGN</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tail_start</name> <operator>=</operator> <call><name>POLAR_DIRECTIO_ALIGN_DOWN</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tail_end</name> <operator>=</operator> <call><name>POLAR_DIRECTIO_ALIGN</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>nleft</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* read from the first section */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>head_start</name> <argument_list type="generic">&lt; <argument><expr><name>head_end</name> <operator>&amp;&amp;</operator>
			<name>nleft</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>off</name> <operator>=</operator> <name>head_start</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pread</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>POLAR_DIRECTIO_ALIGN_LEN</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <operator>(</operator><name>POLAR_DIRECTIO_ALIGN_LEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>count</name></expr>;</return></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>cplen</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>res</name> <operator>-</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <operator>(</operator><name>POLAR_DIRECTIO_ALIGN_LEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cplen</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>nleft</name></expr></argument>, <argument><expr><name>cplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <operator>(</operator><name>POLAR_DIRECTIO_ALIGN_LEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>cplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>cplen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>cplen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nleft</name> <operator>-=</operator> <name>cplen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* read from the middle sections */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>head_end</name> <argument_list type="generic">&lt; <argument><expr><name>tail_start</name> <operator>&amp;&amp;</operator>
			<name>nleft</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>off</name> <operator>=</operator> <name>head_end</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name>tail_start</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>cplen</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>tail_start</name> <operator>-</operator> <name>off</name></expr></argument>, <argument><expr><name>polar_max_direct_io_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pread</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cplen</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>nleft</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>nleft</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <name>cplen</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* read from the last section */</comment>
	<if_stmt><if>if <condition>(<expr><name>head_end</name> <operator>&lt;=</operator> <name>tail_start</name> <operator>&amp;&amp;</operator>
			<name><name>tail_start</name> <argument_list type="generic">&lt; <argument><expr><name>tail_end</name> <operator>&amp;&amp;</operator>
			<name>nleft</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>off</name> <operator>=</operator> <name>tail_start</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pread</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>POLAR_DIRECTIO_ALIGN_LEN</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>cplen</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>offset</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>POLAR_DIRECTIO_ALIGN_LEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cplen</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>nleft</name></expr></argument>, <argument><expr><name>cplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>cplen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>cplen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nleft</name> <operator>-=</operator> <name>cplen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: It do pwrite work with PG_O_DIRECT flag.
 * First, malloc one new buffer which be aligned address.
 * Second, pread missing content for aligned length from aligned offset.
 * Third, copy content of old buffer into new buffer and pwrite new
 * buffer into file.
 *
 * We split the [offset, offset + len] into three sections: the first section,
 * the middle sections and the last section. The boundary of content to be write
 * will be processing during in the first and last section.
 *
 * The pwrite with PG_O_DIRECT will extend file size to mutiples of 4096 which
 * means the final file's size could be bigger than expected! But we don't
 * want that! Because some functions will use file's size in other way, such as
 * twophase transaction's function ReadTwoPhaseFile. So, we truncate file to
 * expected size in this case.
 */</comment>
<function><type><name>ssize_t</name></type>
<name>polar_directio_pwrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_DIRECTIO_PWRITE_SECTION</name><parameter_list>(<parameter><type><name>start</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro>               \
	<cpp:value>do                                                          \
	{                                                           \
		MemSet(buf, 0x0, POLAR_DIRECTIO_ALIGN_LEN);             \
		res = pread(fd, buf, POLAR_DIRECTIO_ALIGN_LEN, off);    \
		if (res &lt; 0)                                            \
			return res;                                         \
		memcpy(buf + start, from, len);                         \
		res = pwrite(fd, buf, POLAR_DIRECTIO_ALIGN_LEN, off);   \
		if (res &lt; 0)                                            \
			return res;                                         \
		Assert(res == POLAR_DIRECTIO_ALIGN_LEN);                \
		from += len;                                            \
		count += len;                                           \
		nleft -= len;                                           \
	} while(0)</cpp:value></cpp:define>

	<decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>polar_directio_buffer</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>from</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>   <name>head_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>   <name>head_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>   <name>tail_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>   <name>tail_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>   <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>   <name>nleft</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>cplen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>	<name>need_truncate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name>	<name>stat</name></name></type> <name>stat_buf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>POLAR_DIECRTIO_IS_ALIGNED</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>POLAR_DIECRTIO_IS_ALIGNED</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>POLAR_DIECRTIO_IS_ALIGNED</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pwrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>from</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>head_start</name> <operator>=</operator> <call><name>POLAR_DIRECTIO_ALIGN_DOWN</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>head_end</name> <operator>=</operator> <call><name>POLAR_DIRECTIO_ALIGN</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tail_start</name> <operator>=</operator> <call><name>POLAR_DIRECTIO_ALIGN_DOWN</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tail_end</name> <operator>=</operator> <call><name>POLAR_DIRECTIO_ALIGN</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>nleft</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * POLAR: Whether we should truncate file to expected size or not.
	 * stat_buf constains the original file's states including size.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>POLAR_DIECRTIO_IS_ALIGNED</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>stat_buf</name><operator>.</operator><name>st_size</name></name> <operator>&lt;</operator> <name>tail_end</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>need_truncate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* write the first section */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>head_start</name> <argument_list type="generic">&lt; <argument><expr><name>head_end</name> <operator>&amp;&amp;</operator>
			<name>nleft</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>off</name> <operator>=</operator> <name>head_start</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cplen</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>nleft</name></expr></argument>, <argument><expr><name>POLAR_DIRECTIO_ALIGN_LEN</name> <operator>-</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <operator>(</operator><name>POLAR_DIRECTIO_ALIGN_LEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>POLAR_DIRECTIO_PWRITE_SECTION</name><argument_list>(<argument><expr><operator>(</operator><name>offset</name> <operator>&amp;</operator> <operator>(</operator><name>POLAR_DIRECTIO_ALIGN_LEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>cplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* write the middle sections */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>head_end</name> <argument_list type="generic">&lt; <argument><expr><name>tail_start</name> <operator>&amp;&amp;</operator>
			<name>nleft</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>off</name> <operator>=</operator> <name>head_end</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name>tail_start</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>cplen</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>tail_start</name> <operator>-</operator> <name>off</name></expr></argument>, <argument><expr><name>polar_max_direct_io_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>cplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pwrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cplen</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>cplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>nleft</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* write the last section */</comment>
	<if_stmt><if>if <condition>(<expr><name>head_end</name> <operator>&lt;=</operator> <name>tail_start</name> <operator>&amp;&amp;</operator>
			<name><name>tail_start</name> <argument_list type="generic">&lt; <argument><expr><name>tail_end</name> <operator>&amp;&amp;</operator>
			<name>nleft</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>off</name> <operator>=</operator> <name>tail_start</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cplen</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>nleft</name></expr></argument>, <argument><expr><operator>(</operator><name>offset</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>POLAR_DIRECTIO_ALIGN_LEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>POLAR_DIRECTIO_PWRITE_SECTION</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nleft</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If we should truncate file to true size */</comment>
	<if_stmt><if>if <condition>(<expr><name>need_truncate</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ftruncate</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>Max</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name><name>stat_buf</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>
</unit>
