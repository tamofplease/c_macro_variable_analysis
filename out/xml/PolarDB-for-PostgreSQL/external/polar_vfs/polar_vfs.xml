<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/external/polar_vfs/polar_vfs.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_vfs.c
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *	  external/polar_vfs/polar_vfs.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqsignal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/backendid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/pg_shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"portability/instr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/bgworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timeout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;semaphore.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pfsd_sdk.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* POLAR */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_datamax/polar_datamax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_io_stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_directio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_pfsd.h"</cpp:file></cpp:include>
<comment type="block">/* POLAR END */</comment>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<comment type="block">/* polar wal pipeline */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>multi_thread_vfs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>slock_t</name></type> <name>polar_wal_pipeline_vfs_lck</name></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <name>vfs_state</name>
<block>{
	<decl><name>init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>mount_pfs_action</name></decl>,
	<decl><name>remount_pfs_action</name></decl>,
	<decl><name>mount_pfs_done</name></decl>,
	<decl><name>umount_pfs</name></decl>,
	<decl><name>mount_growfs</name></decl>,
	<decl><name>action_fail</name></decl>
}</block></enum></type> <name>vfs_state</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vfs_mount_state</name>
<block>{
	<decl_stmt><decl><type><name>LWLock</name>	   <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>					<comment type="block">/* for concurrent access control */</comment>
	<decl_stmt><decl><type><name>vfs_state</name></type>	<name>action_state</name></decl>;</decl_stmt>			<comment type="block">/* see enum vfs_state */</comment>
	<decl_stmt><decl><type><name>void</name>		<modifier>*</modifier></type><name>cleanup_handle</name></decl>;</decl_stmt>		<comment type="block">/* for pfs_mount_master_cleanup */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>do_force_mount</name></decl>;</decl_stmt>			<comment type="block">/* force mount mode, see MNTFLG_PAXOS_BYFORCE */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>mount_flag</name></decl>;</decl_stmt>				<comment type="block">/* mount mode rw/ro */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>res_growfs</name></decl>;</decl_stmt>				<comment type="block">/* return value of pfs_mount_growfs */</comment>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>errmsg</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>		<comment type="block">/* error message when mount/umount api */</comment>
}</block></struct></type> <name>vfs_mount_state</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>vfs_mount_state</name> <modifier>*</modifier></type><name>mount_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>got_sighup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>got_sigterm</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>shutdown_requested</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_VFS_FD_DIR_SIZE</name></cpp:macro>		<cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VFD_CLOSED</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<comment type="block">/*
 * POLAR: polar_vfs_kind[*] must conform to a certain format:
 * [protocol]://
 * Finally, polar_datadir will look like the following format:
 * [protocol]://[path]
 * 
 * Notice: If you change the format of polar_vfs_kind[*], you must
 * modify the function polar_path_remove_protocol(...) in polar_fd.c.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>polar_vfs_kind</name><index>[<expr><name>POLAR_VFS_KIND_SIZE</name></expr>]</index><index>[<expr><name>POLAR_VFS_PROTOCOL_MAX_LEN</name></expr>]</index></name> <init>=
<expr><block>{
	<expr><name>POLAR_VFS_PROTOCAL_LOCAL_BIO</name></expr>,	<comment type="line">//POLAR_VFS_LOCAL_BIO</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
	<expr><name>POLAR_VFS_PROTOCAL_PFS</name></expr>,			<comment type="line">//POLAR_VFS_PFS</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><name>POLAR_VFS_PROTOCAL_LOCAL_DIO</name></expr>	<comment type="line">//POLAR_VFS_LOCAL_DIO</comment>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>vfs_vfd</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>				<name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>kind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 			<name>type</name></decl>;</decl_stmt> <comment type="block">/* enum { data, xlog,clog }*/</comment>
	<decl_stmt><decl><type><name>int</name></type>				<name>next_free</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>			<name>file_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>			<modifier>*</modifier></type><name>file_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>vfs_vfd</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>vfs_vfd</name>	<modifier>*</modifier></type><name>vfs_vfd_cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type>	<name>size_vfd_cache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>		<name>num_open_file</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int</name></type>				<name>kind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DIR</name>				<modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
}</block></struct></type> <name>vfs_dir_desc</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>num_vfs_dir_descs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>max_vfs_dir_descs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>vfs_dir_desc</name> <modifier>*</modifier></type><name>vfs_dir_descs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier>	<name>bool</name></type>	<name>inited</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>shmem_startup_hook_type</name></type> <name>prev_shmem_startup_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>polar_postmaster_child_init_register</name></type> <name>prev_polar_stat_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>instr_time</name></type>	<name>tmp_io_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>instr_time</name></type>	<name>tmp_io_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>instr_time</name></type> 	<name>vfs_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>instr_time</name></type> 	<name>vfs_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> 		<name>save_errno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>instr_time</name></type> <name>tmp_io_read_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>instr_time</name></type> <name>tmp_io_read_time</name></decl>;</decl_stmt>

<function_decl><type><name>Datum</name></type> <name>polar_vfs_mem_status</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>polar_vfs_mem_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>Datum</name></type> <name>polar_vfs_disk_expansion</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>polar_vfs_disk_expansion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>Datum</name></type> <name>polar_libpfs_version</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>polar_libpfs_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type>		<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>_PG_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>polar_vfs_mount_main</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_vfs_shmem_startup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_vfs_shmem_shutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_vfs_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_db_in_replica_mode</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>force_mount</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>file_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_vfs_global</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>init_vfs_function</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_env_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_env_destroy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_mount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_remount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_creat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>vfs_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>vfs_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>vfs_pread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>vfs_pwrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_fstat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_lstat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>off_t</name></type> <name>vfs_lseek</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>off_t</name></type> <name>vfs_lseek_cache</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_access</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_fsync</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newfile</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_fallocate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_ftruncate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>DIR</name> <modifier>*</modifier></type><name>vfs_opendir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>vfs_readdir</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_closedir</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfs_rmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vfs_free_vfd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>File</name></type> <name>vfs_allocate_vfd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vfs_allocated_dir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>vfs_vfd</name> <modifier>*</modifier></type><name>vfs_find_file</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vfs_file_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vfs_data_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vfs_timer_end</name><parameter_list>(<parameter><decl><type><name>instr_time</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_worker_sigterm_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_worker_sighup_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_request_shutdown_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_vfs_quickdie</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_set_vfs_state</name><parameter_list>(<parameter><decl><type><name>vfs_mount_state</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>vfs_state</name></type> <name>vstate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>vfs_state</name></type> <name>polar_get_vfs_state</name><parameter_list>(<parameter><decl><type><name>vfs_mount_state</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_vfs_init_mem_and_lock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vfs_mgr</name> <modifier>*</modifier></type><name>vfs_get_mgr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* POLAR : IO statistics collection functions */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_stat_io_open_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_stat_io_close_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_stat_io_read_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_stat_io_write_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_stat_io_seek_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_stat_io_creat_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_stat_io_falloc_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_stat_io_fsync_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>polar_set_distribution_interval</name><parameter_list>(<parameter><decl><type><name>instr_time</name> <modifier>*</modifier></type><name>intervaltime</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>polar_vfs_timer_begin_iostat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>polar_vfs_timer_end_iostat</name><parameter_list>(<parameter><decl><type><name>instr_time</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/* POLAR end */</comment>


<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>polar_vfs_timer_begin_read_iostat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_vfs_timer_end_read_iostat</name><parameter_list>(<parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>polar_vfs_file_type_and_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>kind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_localfs_mode</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_update_global_io_read_stat</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>delta_read_size</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>delta_read_time</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vfs_mgr</name></type> <name><name>vfs</name><index>[]</index></name> <init>= 
<expr><block>{
	<comment type="block">/*
	 * POLAR: Local file system interface.
	 * It use original file system interface.
	 */</comment>
	<expr><block>{
		<expr><operator>.</operator><name>vfs_env_init</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_env_destroy</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_mount</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_remount</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_open</name> <operator>=</operator> <operator>(</operator><name>vfs_open_type</name><operator>)</operator><name>open</name></expr>,
		<expr><operator>.</operator><name>vfs_creat</name> <operator>=</operator> <name>creat</name></expr>,
		<expr><operator>.</operator><name>vfs_close</name> <operator>=</operator> <name>close</name></expr>,
		<expr><operator>.</operator><name>vfs_read</name> <operator>=</operator> <name>read</name></expr>,
		<expr><operator>.</operator><name>vfs_write</name> <operator>=</operator> <name>write</name></expr>,
		<expr><operator>.</operator><name>vfs_pread</name> <operator>=</operator> <name>pread</name></expr>,
		<expr><operator>.</operator><name>vfs_pwrite</name> <operator>=</operator> <name>pwrite</name></expr>,
		<expr><operator>.</operator><name>vfs_stat</name> <operator>=</operator> <name>stat</name></expr>,
		<expr><operator>.</operator><name>vfs_fstat</name> <operator>=</operator> <name>fstat</name></expr>,
		<expr><operator>.</operator><name>vfs_lstat</name> <operator>=</operator> <name>lstat</name></expr>,
		<expr><operator>.</operator><name>vfs_lseek</name> <operator>=</operator> <name>lseek</name></expr>,
		<expr><operator>.</operator><name>vfs_lseek_cache</name> <operator>=</operator> <name>lseek</name></expr>,
		<expr><operator>.</operator><name>vfs_access</name> <operator>=</operator> <name>access</name></expr>,
		<expr><operator>.</operator><name>vfs_fsync</name> <operator>=</operator> <name>pg_fsync</name></expr>,
		<expr><operator>.</operator><name>vfs_unlink</name> <operator>=</operator> <name>unlink</name></expr>,
		<expr><operator>.</operator><name>vfs_rename</name> <operator>=</operator> <name>rename</name></expr>,
		<expr><operator>.</operator><name>vfs_fallocate</name> <operator>=</operator> <name>posix_fallocate</name></expr>,
		<expr><operator>.</operator><name>vfs_ftruncate</name> <operator>=</operator> <name>ftruncate</name></expr>,
		<expr><operator>.</operator><name>vfs_opendir</name> <operator>=</operator> <name>opendir</name></expr>,
		<expr><operator>.</operator><name>vfs_readdir</name> <operator>=</operator> <name>readdir</name></expr>,
		<expr><operator>.</operator><name>vfs_closedir</name> <operator>=</operator> <name>closedir</name></expr>,
		<expr><operator>.</operator><name>vfs_mkdir</name> <operator>=</operator> <name>mkdir</name></expr>,
		<expr><operator>.</operator><name>vfs_rmdir</name> <operator>=</operator> <name>rmdir</name></expr>,
		<expr><operator>.</operator><name>vfs_mgr_func</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
	<comment type="block">/*
	 * POLAR: Pfsd file system interface.
	 * It use original pfsd's file access interface.
	 * We packaged (p)read/(p)write interface because of the upper
	 * limit of content for one single pfsd_(p)read/pfsd_(p)write
	 * should be under our control.
	 */</comment>
	<expr><block>{
		<expr><operator>.</operator><name>vfs_env_init</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_env_destroy</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_mount</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_remount</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_open</name> <operator>=</operator> <name>pfsd_open</name></expr>,
		<expr><operator>.</operator><name>vfs_creat</name> <operator>=</operator> <name>pfsd_creat</name></expr>,
		<expr><operator>.</operator><name>vfs_close</name> <operator>=</operator> <name>pfsd_close</name></expr>,
		<expr><operator>.</operator><name>vfs_read</name> <operator>=</operator> <name>polar_pfsd_read</name></expr>,
		<expr><operator>.</operator><name>vfs_write</name> <operator>=</operator> <name>polar_pfsd_write</name></expr>,
		<expr><operator>.</operator><name>vfs_pread</name> <operator>=</operator> <name>polar_pfsd_pread</name></expr>,
		<expr><operator>.</operator><name>vfs_pwrite</name> <operator>=</operator> <name>polar_pfsd_pwrite</name></expr>,
		<expr><operator>.</operator><name>vfs_stat</name> <operator>=</operator> <name>pfsd_stat</name></expr>,
		<expr><operator>.</operator><name>vfs_fstat</name> <operator>=</operator> <name>pfsd_fstat</name></expr>,
		<expr><operator>.</operator><name>vfs_lstat</name> <operator>=</operator> <name>pfsd_stat</name></expr>,
		<expr><operator>.</operator><name>vfs_lseek</name> <operator>=</operator> <name>pfsd_lseek</name></expr>,
		<expr><operator>.</operator><name>vfs_lseek_cache</name> <operator>=</operator> <name>pfsd_lseek</name></expr>,
		<expr><operator>.</operator><name>vfs_access</name> <operator>=</operator> <name>pfsd_access</name></expr>,
		<expr><operator>.</operator><name>vfs_fsync</name> <operator>=</operator> <name>pfsd_fsync</name></expr>,
		<expr><operator>.</operator><name>vfs_unlink</name> <operator>=</operator> <name>pfsd_unlink</name></expr>,
		<expr><operator>.</operator><name>vfs_rename</name> <operator>=</operator> <name>pfsd_rename</name></expr>,
		<expr><operator>.</operator><name>vfs_fallocate</name> <operator>=</operator> <name>pfsd_posix_fallocate</name></expr>,
		<expr><operator>.</operator><name>vfs_ftruncate</name> <operator>=</operator> <name>pfsd_ftruncate</name></expr>,
		<expr><operator>.</operator><name>vfs_opendir</name> <operator>=</operator> <name>pfsd_opendir</name></expr>,
		<expr><operator>.</operator><name>vfs_readdir</name> <operator>=</operator> <name>pfsd_readdir</name></expr>,
		<expr><operator>.</operator><name>vfs_closedir</name> <operator>=</operator> <name>pfsd_closedir</name></expr>,
		<expr><operator>.</operator><name>vfs_mkdir</name> <operator>=</operator> <name>pfsd_mkdir</name></expr>,
		<expr><operator>.</operator><name>vfs_rmdir</name> <operator>=</operator> <name>pfsd_rmdir</name></expr>,
		<expr><operator>.</operator><name>vfs_mgr_func</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/*
	 * POLAR: Local file system interface with O_DIRECT flag.
	 * It use original file system interface to do other jobs
	 * except for open, (p)read and (p)write. To make sure that
	 * O_DIRECT flag can work well, we packaged open/(p)read/(p)write
	 * in order to make aligned buffer, aligned offset and aligned length. 
	 * Besides, the length of aligned buffer is the upper limit of content
	 * for one single (p)read or (p)write.
	 */</comment>
	<expr><block>{
		<expr><operator>.</operator><name>vfs_env_init</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_env_destroy</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_mount</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_remount</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>vfs_open</name> <operator>=</operator> <operator>(</operator><name>vfs_open_type</name><operator>)</operator> <name>polar_directio_open</name></expr>,
		<expr><operator>.</operator><name>vfs_creat</name> <operator>=</operator> <name>creat</name></expr>,
		<expr><operator>.</operator><name>vfs_close</name> <operator>=</operator> <name>close</name></expr>,
		<expr><operator>.</operator><name>vfs_read</name> <operator>=</operator> <name>polar_directio_read</name></expr>,
		<expr><operator>.</operator><name>vfs_write</name> <operator>=</operator> <name>polar_directio_write</name></expr>,
		<expr><operator>.</operator><name>vfs_pread</name> <operator>=</operator> <name>polar_directio_pread</name></expr>,
		<expr><operator>.</operator><name>vfs_pwrite</name> <operator>=</operator> <name>polar_directio_pwrite</name></expr>,
		<expr><operator>.</operator><name>vfs_stat</name> <operator>=</operator> <name>stat</name></expr>,
		<expr><operator>.</operator><name>vfs_fstat</name> <operator>=</operator> <name>fstat</name></expr>,
		<expr><operator>.</operator><name>vfs_lstat</name> <operator>=</operator> <name>lstat</name></expr>,
		<expr><operator>.</operator><name>vfs_lseek</name> <operator>=</operator> <name>lseek</name></expr>,
		<expr><operator>.</operator><name>vfs_lseek_cache</name> <operator>=</operator> <name>lseek</name></expr>,
		<expr><operator>.</operator><name>vfs_access</name> <operator>=</operator> <name>access</name></expr>,
		<expr><operator>.</operator><name>vfs_fsync</name> <operator>=</operator> <name>pg_fsync</name></expr>,
		<expr><operator>.</operator><name>vfs_unlink</name> <operator>=</operator> <name>unlink</name></expr>,
		<expr><operator>.</operator><name>vfs_rename</name> <operator>=</operator> <name>rename</name></expr>,
		<expr><operator>.</operator><name>vfs_fallocate</name> <operator>=</operator> <name>posix_fallocate</name></expr>,
		<expr><operator>.</operator><name>vfs_ftruncate</name> <operator>=</operator> <name>ftruncate</name></expr>,
		<expr><operator>.</operator><name>vfs_opendir</name> <operator>=</operator> <name>opendir</name></expr>,
		<expr><operator>.</operator><name>vfs_readdir</name> <operator>=</operator> <name>readdir</name></expr>,
		<expr><operator>.</operator><name>vfs_closedir</name> <operator>=</operator> <name>closedir</name></expr>,
		<expr><operator>.</operator><name>vfs_mkdir</name> <operator>=</operator> <name>mkdir</name></expr>,
		<expr><operator>.</operator><name>vfs_rmdir</name> <operator>=</operator> <name>rmdir</name></expr>,
		<expr><operator>.</operator><name>vfs_mgr_func</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vfs_mgr</name></type> <name>vfs_interface</name> <init>=
<expr><block>{
	<expr><operator>.</operator><name>vfs_env_init</name> <operator>=</operator> <name>vfs_env_init</name></expr>,
	<expr><operator>.</operator><name>vfs_env_destroy</name> <operator>=</operator> <name>vfs_env_destroy</name></expr>,
	<expr><operator>.</operator><name>vfs_mount</name> <operator>=</operator> <name>vfs_mount</name></expr>,
	<expr><operator>.</operator><name>vfs_remount</name> <operator>=</operator> <name>vfs_remount</name></expr>,
	<expr><operator>.</operator><name>vfs_open</name> <operator>=</operator> <name>vfs_open</name></expr>,
	<expr><operator>.</operator><name>vfs_creat</name> <operator>=</operator> <name>vfs_creat</name></expr>,
	<expr><operator>.</operator><name>vfs_close</name> <operator>=</operator> <name>vfs_close</name></expr>,
	<expr><operator>.</operator><name>vfs_read</name> <operator>=</operator> <name>vfs_read</name></expr>,
	<expr><operator>.</operator><name>vfs_write</name> <operator>=</operator> <name>vfs_write</name></expr>,
	<expr><operator>.</operator><name>vfs_pread</name> <operator>=</operator> <name>vfs_pread</name></expr>,
	<expr><operator>.</operator><name>vfs_pwrite</name> <operator>=</operator> <name>vfs_pwrite</name></expr>,
	<expr><operator>.</operator><name>vfs_stat</name> <operator>=</operator> <name>vfs_stat</name></expr>,
	<expr><operator>.</operator><name>vfs_fstat</name> <operator>=</operator> <name>vfs_fstat</name></expr>,
	<expr><operator>.</operator><name>vfs_lstat</name> <operator>=</operator> <name>vfs_lstat</name></expr>,
	<expr><operator>.</operator><name>vfs_lseek</name> <operator>=</operator> <name>vfs_lseek</name></expr>,
	<expr><operator>.</operator><name>vfs_lseek_cache</name> <operator>=</operator> <name>vfs_lseek_cache</name></expr>,
	<expr><operator>.</operator><name>vfs_access</name> <operator>=</operator> <name>vfs_access</name></expr>,
	<expr><operator>.</operator><name>vfs_fsync</name> <operator>=</operator> <name>vfs_fsync</name></expr>,
	<expr><operator>.</operator><name>vfs_unlink</name> <operator>=</operator> <name>vfs_unlink</name></expr>,
	<expr><operator>.</operator><name>vfs_rename</name> <operator>=</operator> <name>vfs_rename</name></expr>,
	<expr><operator>.</operator><name>vfs_fallocate</name> <operator>=</operator> <name>vfs_fallocate</name></expr>,
	<expr><operator>.</operator><name>vfs_ftruncate</name> <operator>=</operator> <name>vfs_ftruncate</name></expr>,
	<expr><operator>.</operator><name>vfs_opendir</name> <operator>=</operator> <name>vfs_opendir</name></expr>,
	<expr><operator>.</operator><name>vfs_readdir</name> <operator>=</operator> <name>vfs_readdir</name></expr>,
	<expr><operator>.</operator><name>vfs_closedir</name> <operator>=</operator> <name>vfs_closedir</name></expr>,
	<expr><operator>.</operator><name>vfs_mkdir</name> <operator>=</operator> <name>vfs_mkdir</name></expr>,
	<expr><operator>.</operator><name>vfs_rmdir</name> <operator>=</operator> <name>vfs_rmdir</name></expr>,
	<expr><operator>.</operator><name>vfs_mgr_func</name> <operator>=</operator> <name>vfs_get_mgr</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>	<name>localfs_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>	<name>enable_file_size_cache</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>	<name>pfs_force_mount</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>	<name>enable_mount_vfs_in_subprocess</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* POLAR: Switch to statistics of IO time consumption */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>enable_io_time_stat</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<comment type="block">/* POLAR: end */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_vfs_debug</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>process_shared_preload_libraries_in_progress</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"polar_vfs init in subbackend %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"polar_vfs.pfs_force_mount"</literal></expr></argument>,
								<argument><expr><literal type="string">"pfs force mount mode when ro switch rw"</literal></expr></argument>,
								<argument><expr><name>NULL</name></expr></argument>,
								<argument><expr><operator>&amp;</operator><name>pfs_force_mount</name></expr></argument>,
								<argument><expr><name>true</name></expr></argument>,
								<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
								<argument><expr><literal type="number">0</literal></expr></argument>,
								<argument><expr><name>NULL</name></expr></argument>,
								<argument><expr><name>NULL</name></expr></argument>,
								<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"polar_vfs.enable_file_size_cache"</literal></expr></argument>,
  							 <argument><expr><literal type="string">"enable file size cache"</literal></expr></argument>,
  							  <argument><expr><name>NULL</name></expr></argument>,
  							  <argument><expr><operator>&amp;</operator><name>enable_file_size_cache</name></expr></argument>,
  							  <argument><expr><name>true</name></expr></argument>,
  							  <argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
  							  <argument><expr><literal type="number">0</literal></expr></argument>,
  							  <argument><expr><name>NULL</name></expr></argument>,
  							  <argument><expr><name>NULL</name></expr></argument>,
  							  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"polar_vfs.localfs_test_mode"</literal></expr></argument>,
							<argument><expr><literal type="string">"enter localfs mode"</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>localfs_mode</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>check_localfs_mode</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"polar_vfs.localfs_mode"</literal></expr></argument>,
							<argument><expr><literal type="string">"enter localfs mode"</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>localfs_mode</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>check_localfs_mode</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"polar_vfs.max_pfsd_io_size"</literal></expr></argument>,
							<argument><expr><literal type="string">"max pfsd io size"</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>max_pfsd_io_size</name></expr></argument>,
							<argument><expr><name>PFSD_DEFAULT_MAX_IOSIZE</name></expr></argument>,
							<argument><expr><name>PFSD_MIN_MAX_IOSIZE</name></expr></argument>,
							<argument><expr><name>PFSD_MAX_MAX_IOSIZE</name></expr></argument>,
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"polar_vfs.max_direct_io_size"</literal></expr></argument>,
							<argument><expr><literal type="string">"max direct io size"</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>polar_max_direct_io_size</name></expr></argument>,
							<argument><expr><name>POLAR_DIRECTIO_DEFAULT_IOSIZE</name></expr></argument>,
							<argument><expr><name>POLAR_DIRECTIO_MIN_IOSIZE</name></expr></argument>,
							<argument><expr><name>POLAR_DIRECTIO_MAX_IOSIZE</name></expr></argument>,
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* This parameter is a switch that controls whether IO time statistics are turned on. */</comment>
	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"polar_vfs.enable_io_time_stat"</literal></expr></argument>,
								<argument><expr><literal type="string">"pfs force mount mode when ro switch rw"</literal></expr></argument>,
								<argument><expr><name>NULL</name></expr></argument>,
								<argument><expr><operator>&amp;</operator><name>enable_io_time_stat</name></expr></argument>,
								<argument><expr><name>true</name></expr></argument>,
								<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
								<argument><expr><literal type="number">0</literal></expr></argument>,
								<argument><expr><name>NULL</name></expr></argument>,
								<argument><expr><name>NULL</name></expr></argument>,
								<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"polar_vfs.debug"</literal></expr></argument>,
							 <argument><expr><literal type="string">"turn on debug switch or not"</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>polar_vfs_debug</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"polar_vfs loaded in postmaster %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>init_vfs_global</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_vfs_function</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EmitWarningsOnPlaceholders</name><argument_list>(<argument><expr><literal type="string">"polar_vfs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vfs_mount_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RequestNamedLWLockTranche</name><argument_list>(<argument><expr><literal type="string">"polar_vfs"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>POLAR_PROC_IO</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>PolarNumProcIOStatSlots</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>prev_shmem_startup_hook</name> <operator>=</operator> <name>shmem_startup_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>shmem_startup_hook</name> <operator>=</operator> <name>polar_vfs_shmem_startup</name></expr>;</expr_stmt>
	<comment type="block">/* registed a func to total io statistics before shmem exit*/</comment>
	<expr_stmt><expr><name>prev_polar_stat_hook</name> <operator>=</operator> <name>polar_stat_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>polar_stat_hook</name> <operator>=</operator> <name>polar_io_shmem_exit_cleanup</name></expr>;</expr_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_PG_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>shmem_startup_hook</name> <operator>=</operator> <name>prev_shmem_startup_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>polar_stat_hook</name> <operator>=</operator> <name>prev_polar_stat_hook</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_vfs_shmem_startup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>prev_shmem_startup_hook</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>prev_shmem_startup_hook</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>prev_polar_stat_hook</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>prev_polar_stat_hook</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>polar_vfs_init_mem_and_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_vfs_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_io_stat_shmem_startup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>on_shmem_exit</name><argument_list>(<argument><expr><name>polar_vfs_shmem_shutdown</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"polar_vfs init done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_vfs_shmem_shutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>inited</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>polar_in_error_handling_process</name> <operator>||</operator> <name>code</name> <operator>!=</operator> <name>STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"subprocess exit abnormally"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"umount pfs %s"</literal></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>pfsd_umount_force</name><argument_list>(<argument><expr><name>polar_disk_name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"can't umount PBD %s, id %d"</literal></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"umount PBD %s, id %d success"</literal></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>inited</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>polar_vfs_disk_expansion</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
	<decl_stmt><decl><type><name>char</name>			<modifier>*</modifier></type><name>expansion_disk_name</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vfs_state</name></type>		<name>vstate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vfs_mount_state</name>	<modifier>*</modifier></type><name>m_state</name> <init>= <expr><name>mount_state</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>rc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>expansion_disk_name</name></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"expansion_disk_name %s is not equal with polar_disk_name %s, id %d"</literal></expr></argument>, 
			<argument><expr><name>expansion_disk_name</name></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>enable_mount_vfs_in_subprocess</name> <operator>==</operator> <name>false</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pfsd_mount_growfs</name><argument_list>(<argument><expr><name>expansion_disk_name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"can't growfs PBD %s, id %d"</literal></expr></argument>, <argument><expr><name>expansion_disk_name</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>m_state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"m_state is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>vstate</name> <operator>=</operator> <call><name>polar_get_vfs_state</name><argument_list>(<argument><expr><name>m_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>vstate</name> <operator>==</operator> <name>mount_growfs</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"pfs is expanding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>vstate</name> <operator>!=</operator> <name>mount_pfs_done</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"pfs state in %d, not ready"</literal></expr></argument>, <argument><expr><name>vstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>polar_set_vfs_state</name><argument_list>(<argument><expr><name>m_state</name></expr></argument>, <argument><expr><name>mount_growfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><call><name>polar_get_vfs_state</name><argument_list>(<argument><expr><name>m_state</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>mount_growfs</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">100000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>m_state</name><operator>-&gt;</operator><name>res_growfs</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>m_state</name><operator>-&gt;</operator><name>res_growfs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>polar_vfs_mem_status</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>isnull</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rsinfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>rsinfo</name></expr></argument>, <argument><expr><name>ReturnSetInfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"set-valued function called in context that cannot accept a set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rsinfo</name><operator>-&gt;</operator><name>allowedModes</name></name> <operator>&amp;</operator> <name>SFRM_Materialize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"materialize mode required, but it is not allowed in this context"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mem_type"</literal></expr></argument>,
						<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"malloc_count"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"malloc_bytes"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"free_count"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"free_bytes"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(
							<argument><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupstore</name> <operator>=</operator> <call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isnull</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><literal type="string">"total"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tuplestore_puttuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Init polar file system
 * create shared memory and mount file system
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_vfs_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>	<name>do_force_mount</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	<modifier>*</modifier></type><name>mode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>		<name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vfs_mount_state</name>		<modifier>*</modifier></type><name>m_state</name> <init>= <expr><name>mount_state</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_enable_shared_storage_mode</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>is_db_in_replica_mode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>do_force_mount</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>polar_mount_pfs_readonly_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"readonly"</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
		<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>PFS_RD</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>polar_mount_pfs_readonly_mode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"readwrite"</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
		<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>PFS_RDWR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Database will be in %s mode"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>localfs_mode</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>POLAR_DIECRTIO_IS_ALIGNED</name><argument_list>(<argument><expr><name>polar_max_direct_io_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"polar_max_direct_io_size is not aligned!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>polar_directio_buffer</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
				 <call><name>posix_memalign</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>polar_directio_buffer</name></expr></argument>,
								<argument><expr><name>POLAR_DIRECTIO_ALIGN_LEN</name></expr></argument>,
								<argument><expr><name>polar_max_direct_io_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"posix_memalign alloc polar_directio_buffer failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pfs in localfs mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>polar_vfs_switch</name> <operator>=</operator> <name>POLAR_VFS_SWITCH_PLUGIN</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>do_force_mount</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>MNTFLG_PAXOS_BYFORCE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"readwrite (force)"</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>polar_disk_name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		<name>polar_hostid</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
		<call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
		<call><name>strlen</name><argument_list>(<argument><expr><name>polar_disk_name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid polar_disk_name or polar_hostid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>inited</name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>polar_storage_cluster_name</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"init pangu cluster %s"</literal></expr></argument>, <argument><expr><name>polar_storage_cluster_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"begin mount pfs name %s id %d pid %d backendid %d"</literal></expr></argument>,
				<argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>, <argument><expr><name>MyProcPid</name></expr></argument>, <argument><expr><name>MyBackendId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>pfsd_mount</name><argument_list>(<argument><expr><name>polar_storage_cluster_name</name></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>,
				  <argument><expr><name>polar_hostid</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"can't mount PBD %s, id %d"</literal></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>do_force_mount</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>polar_local_node_type</name> <operator>==</operator> <name>POLAR_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* after force mount, clean recovey.done */</comment>
		<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>RECOVERY_COMMAND_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"removed file \"%s\""</literal></expr></argument>, <argument><expr><name>RECOVERY_COMMAND_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>polar_set_vfs_state</name><argument_list>(<argument><expr><name>m_state</name></expr></argument>, <argument><expr><name>mount_pfs_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>polar_vfs_switch</name> <operator>=</operator> <name>POLAR_VFS_SWITCH_PLUGIN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"mount pfs %s %s mode success"</literal></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* When read polar_replica = on, we mount pfs use read only mode */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_db_in_replica_mode</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>force_mount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* POLAR: ro switch to rw found recovery.done, means we need do force mount */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>polar_local_node_type</name> <operator>==</operator> <name>POLAR_MASTER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>pfs_force_mount</name> <operator>&amp;&amp;</operator> <name>force_mount</name> <operator>&amp;&amp;</operator>
		<call><name>file_exists</name><argument_list>(<argument><expr><name>RECOVERY_COMMAND_DONE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>force_mount</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>polar_local_node_type</name> <operator>==</operator> <name>POLAR_REPLICA</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Init local variable for file handle or dir pointer */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_vfs_global</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>vfs_vfd_cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>vfs_vfd_cache</name> <operator>=</operator> <operator>(</operator><name>vfs_vfd</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vfs_vfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>vfs_vfd_cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory vfs_vfd_cache"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>vfs_vfd_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vfs_vfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vfs_vfd_cache</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>VFD_CLOSED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size_vfd_cache</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"vfs_vfd_cache already initialized size %zu"</literal></expr></argument>, <argument><expr><name>size_vfd_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>vfs_dir_descs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>vfs_dir_desc</name>	<modifier>*</modifier></type><name>new_descs</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>				<name>new_max</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>new_max</name> <operator>=</operator> <name>MIN_VFS_FD_DIR_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>new_descs</name> <operator>=</operator> <operator>(</operator><name>vfs_dir_desc</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>new_max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>vfs_dir_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>new_descs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory vfs_dir_desc"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>vfs_dir_descs</name> <operator>=</operator> <name>new_descs</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>max_vfs_dir_descs</name> <operator>=</operator> <name>new_max</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>num_vfs_dir_descs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"vfs_dir_descs already initialized size %d"</literal></expr></argument>, <argument><expr><name>num_vfs_dir_descs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>init_vfs_function</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>polar_enable_shared_storage_mode</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>polar_vfs</name><index>[<expr><name>POLAR_VFS_SWITCH_PLUGIN</name></expr>]</index></name><operator>.</operator><name>vfs_env_init</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"vfs some of vfs_fun pointer are not NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>polar_vfs</name><index>[<expr><name>POLAR_VFS_SWITCH_PLUGIN</name></expr>]</index></name> <operator>=</operator> <name>vfs_interface</name></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_env_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>polar_get_io_proc_index</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>vfs</name><index>[<expr><name>POLAR_VFS_PFS</name></expr>]</index></name><operator>.</operator><name>vfs_env_init</name> <operator>&amp;&amp;</operator>
		<name>localfs_mode</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>vfs</name><index>[<expr><name>POLAR_VFS_PFS</name></expr>]</index></name><operator>.</operator><call><name>vfs_env_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vfs_start</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vfs_start</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>vfs_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>enable_file_size_cache</name> <operator>&amp;&amp;</operator>
		<call><name>AmStartupProcess</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>(</operator><name>polar_local_node_type</name> <operator>==</operator> <name>POLAR_MASTER</name> <operator>||</operator>
			<name>polar_local_node_type</name> <operator>==</operator> <name>POLAR_STANDBY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>enable_file_size_cache</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>enable_file_size_cache</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>PolarIOStatArray</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>UsedShmemSegAddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>=</operator> <name>MyProcPid</name></expr> ;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_env_destroy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>vfs</name><index>[<expr><name>POLAR_VFS_PFS</name></expr>]</index></name><operator>.</operator><name>vfs_env_destroy</name> <operator>&amp;&amp;</operator>
		<name>localfs_mode</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>vfs</name><index>[<expr><name>POLAR_VFS_PFS</name></expr>]</index></name><operator>.</operator><call><name>vfs_env_destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>vfs_timer_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vfs_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>enable_file_size_cache</name> <operator>&amp;&amp;</operator> <call><name>AmStartupProcess</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"startup process %d complete: cost %.3f s."</literal></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name>vfs_end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_mount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>localfs_mode</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pfs in localfs mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_remount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>		<name>flag</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>localfs_mode</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pfs in localfs mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
	<expr_stmt><expr><name>polar_mount_pfs_readonly_mode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>PFS_RDWR</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><name>RECOVERY_COMMAND_DONE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flag</name> <operator>|=</operator><name>PFS_PAXOS_BYFORCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"begin remount pfs name %s id %d pid %d backendid %d flag=%x"</literal></expr></argument>,
				<argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>, <argument><expr><name>MyProcPid</name></expr></argument>, <argument><expr><name>MyBackendId</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>pfsd_remount</name><argument_list>(<argument><expr><name>polar_storage_cluster_name</name></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>,
				  <argument><expr><name>polar_hostid</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"can't mount PBD %s, id %d"</literal></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* after remount, clean recovey.done */</comment>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>RECOVERY_COMMAND_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"removed file \"%s\""</literal></expr></argument>, <argument><expr><name>RECOVERY_COMMAND_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"remount pfs %s readwrite mode success"</literal></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_creat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>file</name> <init>= <expr><call><name>vfs_allocate_vfd</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vfs_path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vfs_vfd</name>		<modifier>*</modifier></type><name>vfdP</name> <init>= <expr><operator>&amp;</operator><name><name>vfs_vfd_cache</name><index>[<expr><name>file</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"vfs creat file %s, fd %d file %d num open file %d"</literal></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>num_open_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>vfs_path</name> <operator>=</operator> <call><name>polar_vfs_file_type_and_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>vfs_data_type</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*begin stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><call><name>polar_vfs_timer_begin_iostat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_set</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_io_start</name></expr></argument>, <argument><expr><name>PGPROC_WAIT_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name><operator>.</operator><call><name>vfs_creat</name><argument_list>(<argument><expr><name>vfs_path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*end stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_io_creat_info</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>vfs_free_vfd</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>num_open_file</name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>file</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vfs_vfd</name>		<modifier>*</modifier></type><name>vfdP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>vfs_path</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>vfs_allocate_vfd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>vfdP</name> <operator>=</operator> <operator>&amp;</operator><name><name>vfs_vfd_cache</name><index>[<expr><name>file</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"vfs open file %s num open file %d"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>num_open_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>vfs_path</name> <operator>=</operator> <call><name>polar_vfs_file_type_and_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>vfs_data_type</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*begin stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><call><name>polar_vfs_timer_begin_iostat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_set</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_io_start</name></expr></argument>, <argument><expr><name>PGPROC_WAIT_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>WAIT_EVENT_DATA_VFS_FILE_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name><operator>.</operator><call><name>vfs_open</name><argument_list>(<argument><expr><name>vfs_path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*end stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_io_open_info</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>,<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>vfs_free_vfd</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>num_open_file</name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_vfd</name>		<modifier>*</modifier></type><name>vfdP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>vfdP</name> <operator>=</operator> <call><name>vfs_find_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"vfs close file %s, fd %d file %d num open file %d"</literal></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>num_open_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <name>VFD_CLOSED</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>vfs</name><index>[<expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name><operator>.</operator><call><name>vfs_close</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"vfs could not close file \"%s\": %m"</literal></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><operator>--</operator><name>num_open_file</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>VFD_CLOSED</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"vfs file %s file %d not open"</literal></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>polar_stat_io_close_info</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vfs_free_vfd</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>vfs_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_vfd</name>		<modifier>*</modifier></type><name>vfdP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>		<name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>vfdP</name> <operator>=</operator> <call><name>vfs_find_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*begin stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><call><name>polar_vfs_timer_begin_iostat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_set</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_io_start</name></expr></argument>, <argument><expr><name>PGPROC_WAIT_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name><operator>.</operator><call><name>vfs_write</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*end stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_io_write_info</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_vfs_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"vfs_write file: %s, buf: 0x%lx, len: 0x%lx, kind: %d, type: %d"</literal></expr></argument>,
				  <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>vfs_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_vfd</name>		<modifier>*</modifier></type><name>vfdP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>		<name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>vfdP</name> <operator>=</operator> <call><name>vfs_find_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*begin stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><call><name>polar_vfs_timer_begin_iostat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_set</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_io_start</name></expr></argument>, <argument><expr><name>PGPROC_WAIT_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* POLAR: global io read throughtput timer begin */</comment>
	<expr_stmt><expr><call><name>polar_vfs_timer_begin_read_iostat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name><operator>.</operator><call><name>vfs_read</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* POLAR: global io read throughtput timer end */</comment>
	<expr_stmt><expr><call><name>polar_vfs_timer_end_read_iostat</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*end stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_io_read_info</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_vfs_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"vfs_read file: %s, buf: 0x%lx, len: 0x%lx, kind: %d, type: %d"</literal></expr></argument>,
				  <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>vfs_pread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_vfd</name>		<modifier>*</modifier></type><name>vfdP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>		<name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>vfdP</name> <operator>=</operator> <call><name>vfs_find_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*begin stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><call><name>polar_vfs_timer_begin_iostat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_set</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_io_start</name></expr></argument>, <argument><expr><name>PGPROC_WAIT_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* POLAR: global io read throughtput timer begin */</comment>
	<expr_stmt><expr><call><name>polar_vfs_timer_begin_read_iostat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name><operator>.</operator><call><name>vfs_pread</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* POLAR: global io read throughtput timer end */</comment>
	<expr_stmt><expr><call><name>polar_vfs_timer_end_read_iostat</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*end stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_io_read_info</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_vfs_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"vfs_pread file: %s, buf: 0x%lx, len: 0x%lx, offset: 0x%lx, kind: %d, type: %d"</literal></expr></argument>,
				  <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>vfs_pwrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_vfd</name>		<modifier>*</modifier></type><name>vfdP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> 	<name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>vfdP</name> <operator>=</operator> <call><name>vfs_find_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*begin stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><call><name>polar_vfs_timer_begin_iostat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_set</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_io_start</name></expr></argument>, <argument><expr><name>PGPROC_WAIT_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name><operator>.</operator><call><name>vfs_pwrite</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*end stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_io_write_info</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<if_stmt><if>if <condition>(<expr><name>enable_file_size_cache</name> <operator>&amp;&amp;</operator>
		<name>res</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<name><name>vfdP</name><operator>-&gt;</operator><name>file_size</name></name> <operator>&lt;</operator> <name>len</name> <operator>+</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_size</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_vfs_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"vfs_pwrite file: %s, buf: 0x%lx, len: 0x%lx, offset: 0x%lx, kind: %d, type: %d"</literal></expr></argument>,
				  <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>rc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>kind</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>vfs_path</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>vfs_path</name> <operator>=</operator> <call><name>polar_vfs_file_type_and_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name>kind</name></expr>]</index></name><operator>.</operator><call><name>vfs_stat</name><argument_list>(<argument><expr><name>vfs_path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_fstat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_vfd</name>		<modifier>*</modifier></type><name>vfdP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>vfdP</name> <operator>=</operator> <call><name>vfs_find_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name><operator>.</operator><call><name>vfs_fstat</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_lstat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>rc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>kind</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>vfs_path</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>vfs_path</name> <operator>=</operator> <call><name>polar_vfs_file_type_and_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name>kind</name></expr>]</index></name><operator>.</operator><call><name>vfs_lstat</name><argument_list>(<argument><expr><name>vfs_path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>off_t</name></type>
<name>vfs_lseek</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_vfd</name>		<modifier>*</modifier></type><name>vfdP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>		<name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>vfdP</name> <operator>=</operator> <call><name>vfs_find_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*begin stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><call><name>polar_vfs_timer_begin_iostat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_set</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_io_start</name></expr></argument>, <argument><expr><name>PGPROC_WAIT_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>WAIT_EVENT_DATA_VFS_FILE_LSEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name><operator>.</operator><call><name>vfs_lseek</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*end stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_io_seek_info</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>,<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<if_stmt><if>if <condition>(<expr><name>enable_file_size_cache</name> <operator>&amp;&amp;</operator>
		<name>whence</name> <operator>==</operator> <name>SEEK_END</name> <operator>&amp;&amp;</operator>
		<name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<name><name>vfdP</name><operator>-&gt;</operator><name>file_size</name></name> <operator>!=</operator> <name>rc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_size</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>off_t</name></type>
<name>vfs_lseek_cache</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_vfd</name>		<modifier>*</modifier></type><name>vfdP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>		<name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>vfdP</name> <operator>=</operator> <call><name>vfs_find_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>enable_file_size_cache</name> <operator>&amp;&amp;</operator>
		<name><name>vfdP</name><operator>-&gt;</operator><name>file_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_size</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vfs_lseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vfs_access</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>rc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>kind</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>vfs_path</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>vfs_path</name> <operator>=</operator> <call><name>polar_vfs_file_type_and_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name>kind</name></expr>]</index></name><operator>.</operator><call><name>vfs_access</name><argument_list>(<argument><expr><name>vfs_path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_fsync</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_vfd</name>		<modifier>*</modifier></type><name>vfdP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>vfdP</name> <operator>=</operator> <call><name>vfs_find_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*begin stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><call><name>polar_vfs_timer_begin_iostat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_set</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_io_start</name></expr></argument>, <argument><expr><name>PGPROC_WAIT_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name><operator>.</operator><call><name>vfs_fsync</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*end stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_io_fsync_info</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_wait_obj_and_time_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>rc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>kind</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>vfs_path</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"vfs_unlink %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>vfs_path</name> <operator>=</operator> <call><name>polar_vfs_file_type_and_path</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name>kind</name></expr>]</index></name><operator>.</operator><call><name>vfs_unlink</name><argument_list>(<argument><expr><name>vfs_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>rc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>kindold</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>kindnew</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>vfs_old_path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>vfs_new_path</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>oldfile</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>newfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>vfs_old_path</name> <operator>=</operator> <call><name>polar_vfs_file_type_and_path</name><argument_list>(<argument><expr><name>oldfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kindold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>vfs_new_path</name> <operator>=</operator> <call><name>polar_vfs_file_type_and_path</name><argument_list>(<argument><expr><name>newfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kindnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"vfs_rename from %s to %s"</literal></expr></argument>, <argument><expr><name>oldfile</name></expr></argument>, <argument><expr><name>newfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>kindold</name> <operator>==</operator> <name>kindnew</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name>kindold</name></expr>]</index></name><operator>.</operator><call><name>vfs_rename</name><argument_list>(<argument><expr><name>vfs_old_path</name></expr></argument>, <argument><expr><name>vfs_new_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"vfs unsupported rename operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_fallocate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_vfd</name>		<modifier>*</modifier></type><name>vfdP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>vfdP</name> <operator>=</operator> <call><name>vfs_find_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"vfs_fallocate from %s"</literal></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*begin stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><call><name>polar_vfs_timer_begin_iostat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name><operator>.</operator><call><name>vfs_fallocate</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*end stat info for io, wait_time, wait_object*/</comment>
	<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_stat_io_falloc_info</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
	<comment type="block">/* end */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_ftruncate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_vfd</name>		<modifier>*</modifier></type><name>vfdP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>vfdP</name> <operator>=</operator> <call><name>vfs_find_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"vfs_ftruncate from %s"</literal></expr></argument>, <argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name><operator>.</operator><call><name>vfs_ftruncate</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>enable_file_size_cache</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DIR</name> <modifier>*</modifier></type>
<name>vfs_opendir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DIR</name>		   <modifier>*</modifier></type><name>dir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>kind</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>vfs_path</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dirname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vfs_allocated_dir</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_RESOURCES</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"exceeded max_vfs_dir_descs (%d) while trying to open directory \"%s\""</literal></expr></argument>,
						<argument><expr><name>max_vfs_dir_descs</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>vfs_path</name> <operator>=</operator> <call><name>polar_vfs_file_type_and_path</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dir</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name>kind</name></expr>]</index></name><operator>.</operator><call><name>vfs_opendir</name><argument_list>(<argument><expr><name>vfs_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>vfs_dir_desc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>&amp;</operator><name><name>vfs_dir_descs</name><index>[<expr><name>num_vfs_dir_descs</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <name>dir</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>num_vfs_dir_descs</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"vfs open dir %s, num open dir %d"</literal></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>num_vfs_dir_descs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name><name>desc</name><operator>-&gt;</operator><name>dir</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type>
<name>vfs_readdir</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>num_vfs_dir_descs</name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>vfs_dir_desc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>&amp;</operator><name><name>vfs_dir_descs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <name>dir</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>vfs</name><index>[<expr><name><name>desc</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name><operator>.</operator><call><name>vfs_readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"vfs could not find vfs_desc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_closedir</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>num_vfs_dir_descs</name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>vfs_dir_desc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>&amp;</operator><name><name>vfs_dir_descs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <name>dir</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name><name>desc</name><operator>-&gt;</operator><name>kind</name></name></expr>]</index></name><operator>.</operator><call><name>vfs_closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>num_vfs_dir_descs</name><operator>--</operator></expr>;</expr_stmt>

			<comment type="block">/* POLAR: this is end of array */</comment>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>num_vfs_dir_descs</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>POLAR_VFS_UNKNOWN_FILE</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* POLAR: Compact storage in the allocatedDescs array */</comment>
				<expr_stmt><expr><operator>*</operator><name>desc</name> <operator>=</operator> <name><name>vfs_dir_descs</name><index>[<expr><name>num_vfs_dir_descs</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<return>return <expr><name>result</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"vfs does not find vfs_dir from vfs_dir_descs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>rc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>kind</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>vfs_path</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>vfs_path</name> <operator>=</operator> <call><name>polar_vfs_file_type_and_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name>kind</name></expr>]</index></name><operator>.</operator><call><name>vfs_mkdir</name><argument_list>(<argument><expr><name>vfs_path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vfs_rmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>rc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>kind</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>vfs_path</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>vfs_path</name> <operator>=</operator> <call><name>polar_vfs_file_type_and_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>vfs</name><index>[<expr><name>kind</name></expr>]</index></name><operator>.</operator><call><name>vfs_rmdir</name><argument_list>(<argument><expr><name>vfs_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Determine which kind of device the file is on.
 * Besides, vfs_path is the available part of path which is pointing
 * to the target file.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>polar_vfs_file_type_and_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>vfs_kind_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vfs_path</name> <init>= <expr><name>path</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>kind</name> <operator>=</operator> <name>POLAR_VFS_UNKNOWN_FILE</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>POLAR_VFS_KIND_SIZE</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>vfs_kind_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>polar_vfs_kind</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>polar_vfs_kind</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>vfs_kind_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>kind</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>vfs_path</name> <operator>=</operator> <name>path</name> <operator>+</operator> <name>vfs_kind_len</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>kind</name> <operator>==</operator> <name>POLAR_VFS_UNKNOWN_FILE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>kind</name> <operator>=</operator> <call><name>vfs_file_type</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>vfs_path</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Determine if the file is on a shared storage device */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>vfs_file_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>polar_disk_strsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>strpathlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>localfs_mode</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLAR_VFS_LOCAL_BIO</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLAR_VFS_LOCAL_BIO</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>polar_disk_strsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>polar_disk_strsize</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>polar_disk_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>strpathlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>strpathlen</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLAR_VFS_LOCAL_BIO</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>strpathlen</name> <operator>&lt;</operator> <name>polar_disk_strsize</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLAR_VFS_LOCAL_BIO</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLAR_VFS_LOCAL_BIO</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><name>path</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>polar_disk_strsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>POLAR_VFS_PFS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>POLAR_VFS_LOCAL_BIO</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Determine if the datatype is data ,xlog , clog ... and so on*/</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>vfs_data_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"base"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLARIO_DATA</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLARIO_WAL</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><literal type="string">"pg_xact"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLARIO_CLOG</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><literal type="string">"global"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLARIO_GLOBAL</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><literal type="string">"logindex"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLARIO_LOGINDEX</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><literal type="string">"multixact"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLARIO_MULTIXACT</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><literal type="string">"subtrans"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLARIO_SUBTRANS</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><literal type="string">"twophase"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLARIO_TWOPHASE</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><literal type="string">"replslot"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLARIO_REPLSOT</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><literal type="string">"snapshots"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>POLARIO_SNAPSHOTS</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>POLARIO_OTHER</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* local file fd cache */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>vfs_allocate_vfd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Index</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name></type>		<name>file</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"vfs_allocate_vfd. cache size %zu"</literal></expr></argument>, <argument><expr><name>size_vfd_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>size_vfd_cache</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* polar wal pipeline */</comment>
	<if_stmt><if>if <condition>(<expr><name>multi_thread_vfs</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>polar_wal_pipeline_vfs_lck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>vfs_vfd_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>next_free</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Size</name></type>		<name>new_cache_size</name> <init>= <expr><name>size_vfd_cache</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>vfs_vfd</name>		<modifier>*</modifier></type><name>new_vfd_cache</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>new_cache_size</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>new_cache_size</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>new_vfd_cache</name> <operator>=</operator> <operator>(</operator><name>vfs_vfd</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>vfs_vfd_cache</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vfs_vfd</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>new_cache_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>new_vfd_cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory vfs_allocate_vfd"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>vfs_vfd_cache</name> <operator>=</operator> <name>new_vfd_cache</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>size_vfd_cache</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_cache_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>vfs_vfd_cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vfs_vfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vfs_vfd_cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next_free</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vfs_vfd_cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>VFD_CLOSED</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>vfs_vfd_cache</name><index>[<expr><name>new_cache_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>next_free</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vfs_vfd_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>next_free</name> <operator>=</operator> <name>size_vfd_cache</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size_vfd_cache</name> <operator>=</operator> <name>new_cache_size</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>vfs_vfd_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>next_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vfs_vfd_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>next_free</name> <operator>=</operator> <name><name>vfs_vfd_cache</name><index>[<expr><name>file</name></expr>]</index></name><operator>.</operator><name>next_free</name></expr>;</expr_stmt>

	<comment type="block">/* polar wal pipeline */</comment>
	<if_stmt><if>if <condition>(<expr><name>multi_thread_vfs</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>polar_wal_pipeline_vfs_lck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>vfs_free_vfd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_vfd</name>		   <modifier>*</modifier></type><name>vfdP</name> <init>= <expr><operator>&amp;</operator><name><name>vfs_vfd_cache</name><index>[<expr><name>file</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"vfs_free_vfd: %d (%s)"</literal></expr></argument>,
			   <argument><expr><name>file</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name></expr> ?</condition><then> <expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* polar wal pipeline */</comment>
	<if_stmt><if>if <condition>(<expr><name>multi_thread_vfs</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>polar_wal_pipeline_vfs_lck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>POLAR_VFS_UNKNOWN_FILE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>file_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vfdP</name><operator>-&gt;</operator><name>next_free</name></name> <operator>=</operator> <name><name>vfs_vfd_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>next_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vfs_vfd_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>next_free</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

	<comment type="block">/* polar wal pipeline */</comment>
	<if_stmt><if>if <condition>(<expr><name>multi_thread_vfs</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>polar_wal_pipeline_vfs_lck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>vfs_allocated_dir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_dir_desc</name>	<modifier>*</modifier></type><name>new_descs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>new_max</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>num_vfs_dir_descs</name> <operator>&lt;</operator> <name>max_vfs_dir_descs</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>vfs_dir_descs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>new_max</name> <operator>=</operator> <name>max_safe_fds</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>new_max</name> <operator>&gt;</operator> <name>max_vfs_dir_descs</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>new_descs</name> <operator>=</operator> <operator>(</operator><name>vfs_dir_desc</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>vfs_dir_descs</name></expr></argument>,
											<argument><expr><name>new_max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>vfs_dir_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>new_descs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory vfs_allocated_dir"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>vfs_dir_descs</name> <operator>=</operator> <name>new_descs</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>max_vfs_dir_descs</name> <operator>=</operator> <name>new_max</name></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vfs_vfd</name> <modifier>*</modifier></type>
<name>vfs_find_file</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&gt;=</operator> <name>size_vfd_cache</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"vfs file fd %d out of cache"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>vfs_vfd_cache</name><index>[<expr><name>file</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>polar_vfs_timer_begin_iostat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>enable_io_time_stat</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>tmp_io_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>tmp_io_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>	
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>polar_vfs_timer_begin_read_iostat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>PolarGlobalIOReadStats</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name>polar_crash_recovery_rto_statistics_count</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>tmp_io_read_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>vfs_timer_end</name><parameter_list>(<parameter><decl><type><name>instr_time</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enable_io_time_stat</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>tmp_io_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SUBTRACT</name><argument_list>(<argument><expr><name>tmp_io_time</name></expr></argument>, <argument><expr><name>vfs_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>time</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><operator>*</operator><name>time</name></expr></argument>, <argument><expr><name>tmp_io_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>polar_vfs_timer_end_iostat</name><parameter_list>(<parameter><decl><type><name>instr_time</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enable_io_time_stat</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>tmp_io_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SUBTRACT</name><argument_list>(<argument><expr><name>tmp_io_time</name></expr></argument>, <argument><expr><name>tmp_io_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name>tmp_io_time</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1000</literal></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"This io time took %lf seconds, which is abnormal and we will not count."</literal></expr></argument>
				, <argument><expr><call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name>tmp_io_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>polar_set_distribution_interval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_io_time</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>time</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><operator>*</operator><name>time</name></expr></argument>, <argument><expr><name>tmp_io_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>polar_libpfs_version</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int64</name></type> <name>version_num</name> <init>= <expr><call><name>pfsd_meta_version_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>version_str</name> <init>= <expr><call><name>pfsd_build_version_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>	<name><name>libpfs_version</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>libpfs_version</name></expr></argument>, <argument><expr><name>MAXPGPATH</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s version number "</literal><name>INT64_FORMAT</name><literal type="string">""</literal></expr></argument>, <argument><expr><name>version_str</name></expr></argument>, <argument><expr><name>version_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>libpfs_version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>file_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>errno</name> <operator>==</operator> <name>ENOENT</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOTDIR</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EACCES</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not access file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
<function><type><name>void</name></type>
<name>polar_vfs_mount_main</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_mount_state</name>		<modifier>*</modifier></type><name>m_state</name> <init>= <expr><name>mount_state</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Establish signal handlers; once that's done, unblock signals. */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>polar_worker_sigterm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>polar_worker_sighup_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><name>procsignal_sigusr1_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGUSR2</name></expr></argument>, <argument><expr><name>polar_request_shutdown_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* request shutdown */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>polar_vfs_quickdie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* hard crash time */</comment>

	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>m_state</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"pfs share memory state abnormal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pfs mount process init done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Periodically prealloc wal file until terminated. */</comment>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>rc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>vfs_state</name></type>	<name>vstate</name></decl>;</decl_stmt>

		<comment type="block">/* In case of a SIGHUP, just reload the configuration. */</comment>
		<if_stmt><if>if <condition>(<expr><name>got_sighup</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"polar vfs process got sighup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>got_sighup</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ProcessConfigFile</name><argument_list>(<argument><expr><name>PGC_SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>got_sigterm</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"polar vfs process got sigterm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>got_sigterm</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>shutdown_requested</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"polar vfs process got shutdown requested"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>polar_get_vfs_state</name><argument_list>(<argument><expr><name>m_state</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>mount_pfs_done</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"begin exec pfs_umount_in_subprocess in subprocess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>pfsd_umount_force</name><argument_list>(<argument><expr><name>polar_disk_name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"can't umount PBD %s, id %d"</literal></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"umount PBD %s, id %d in subprocess success"</literal></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>vstate</name> <operator>=</operator> <call><name>polar_get_vfs_state</name><argument_list>(<argument><expr><name>m_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>vstate</name> <operator>==</operator> <name>mount_pfs_action</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>	<name>mount_flag</name> <init>= <expr><name><name>m_state</name><operator>-&gt;</operator><name>mount_flag</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>	<name>rc</name> <init>= <expr><call><name>pfsd_mount</name><argument_list>(<argument><expr><name>polar_storage_cluster_name</name></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>,
							<argument><expr><name>polar_hostid</name></expr></argument>, <argument><expr><name>mount_flag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>m_state</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"can't mount PBD %s, id %d rc %d"</literal></expr></argument>,
							<argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>polar_set_vfs_state</name><argument_list>(<argument><expr><name>m_state</name></expr></argument>, <argument><expr><name>action_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"mount pfs in subprocess faid, process exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"mount pfs in subprocess success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>polar_set_vfs_state</name><argument_list>(<argument><expr><name>m_state</name></expr></argument>, <argument><expr><name>mount_pfs_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>vstate</name> <operator>==</operator> <name>remount_pfs_action</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>	<name>mount_flag</name> <init>= <expr><name><name>m_state</name><operator>-&gt;</operator><name>mount_flag</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>	<name>rc</name> <init>= <expr><call><name>pfsd_remount</name><argument_list>(<argument><expr><name>polar_storage_cluster_name</name></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>,
							<argument><expr><name>polar_hostid</name></expr></argument>, <argument><expr><name>mount_flag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>m_state</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"can't remount PBD %s, id %d rc %d"</literal></expr></argument>,
							<argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>polar_set_vfs_state</name><argument_list>(<argument><expr><name>m_state</name></expr></argument>, <argument><expr><name>action_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"remount pfs in subprocess faid, process exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"remount pfs in subprocess success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>polar_set_vfs_state</name><argument_list>(<argument><expr><name>m_state</name></expr></argument>, <argument><expr><name>mount_pfs_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>vstate</name> <operator>==</operator> <name>mount_growfs</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pfsd_mount_growfs</name><argument_list>(<argument><expr><name>polar_disk_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"can't growfs PBD %s, id %d"</literal></expr></argument>, <argument><expr><name>polar_disk_name</name></expr></argument>, <argument><expr><name>polar_hostid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>m_state</name><operator>-&gt;</operator><name>res_growfs</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"run pfs_mount_growfs done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>polar_set_vfs_state</name><argument_list>(<argument><expr><name>m_state</name></expr></argument>, <argument><expr><name>mount_pfs_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Sleep until the next prealloc wal file time. */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WaitLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>,
					   <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_TIMEOUT</name> <operator>|</operator> <name>WL_POSTMASTER_DEATH</name></expr></argument>,
					   <argument><expr><literal type="number">100L</literal></expr></argument>,
					   <argument><expr><name>PG_WAIT_EXTENSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Reset the latch, bail out if postmaster died, otherwise loop. */</comment>
		<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_POSTMASTER_DEATH</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pfs mount process %d exit"</literal></expr></argument>, <argument><expr><name>MyProcPid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Signal handler for SIGTERM
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_worker_sigterm_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>got_sigterm</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>MyProc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Signal handler for SIGHUP
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_worker_sighup_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>got_sighup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>MyProc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_request_shutdown_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>shutdown_requested</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_vfs_quickdie</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"polar vfs receive quickdie signal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_vfs_init_mem_and_lock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mount_state</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Create or attach to the shared memory state, including hash table
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>mount_state</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"polar_vfs"</literal></expr></argument>,
						   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vfs_mount_state</name></expr></argument>)</argument_list></sizeof></expr></argument>,
						   <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* First time through ... */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mount_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vfs_mount_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mount_state</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>GetNamedLWLockTranche</name><argument_list>(<argument><expr><literal type="string">"polar_vfs"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>lock</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"init vfs_mount_state done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PFSD</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>vfs_state</name></type>
<name>polar_get_vfs_state</name><parameter_list>(<parameter><decl><type><name>vfs_mount_state</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>vfs_state</name></type>	<name>vstate</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"state is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>vstate</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>action_state</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>vstate</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_set_vfs_state</name><parameter_list>(<parameter><decl><type><name>vfs_mount_state</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>vfs_state</name></type> <name>vstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"state is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>action_state</name></name> <operator>=</operator> <name>vstate</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>vfs_mgr</name><modifier>*</modifier></type> 
<name>vfs_get_mgr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>kind</name> <init>= <expr><name>POLAR_VFS_LOCAL_BIO</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>polar_vfs_file_type_and_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>vfs</name><index>[<expr><name>kind</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* As easy as understanding its function name */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> 
<name>polar_stat_io_open_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>PolarIOStatArray</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<name>UsedShmemSegAddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>loc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>polar_get_io_proc_index</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>polario_kind_to_location</name><argument_list>(<argument><expr><name>vfdkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>loc</name> <operator>&gt;=</operator> <name>POLARIO_LOC_SIZE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"polar io stat does not recognize that: kind = %d, loc = %d"</literal></expr></argument>, <argument><expr><name>vfdkind</name></expr></argument>, <argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>polar_vfs_timer_end_iostat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_open_time</name></expr></argument>, <argument><expr><name>LATENCY_open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_open_num</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>=</operator> <name>MyProcPid</name></expr> ;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* As easy as understanding its function name */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_stat_io_close_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>PolarIOStatArray</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<name>UsedShmemSegAddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>loc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>polar_get_io_proc_index</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>polario_kind_to_location</name><argument_list>(<argument><expr><name>vfdkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>loc</name> <operator>&gt;=</operator> <name>POLARIO_LOC_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_close_num</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* As easy as understanding its function name */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_stat_io_read_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>,<parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>PolarIOStatArray</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<name>UsedShmemSegAddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>loc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>polar_get_io_proc_index</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>polario_kind_to_location</name><argument_list>(<argument><expr><name>vfdkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>loc</name> <operator>&gt;=</operator> <name>POLARIO_LOC_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>polar_vfs_timer_end_iostat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_latency_read</name></expr></argument>, <argument><expr><name>LATENCY_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_number_read</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_throughtput_read</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: update global io read throughtput stat.
 * It is not necessary to lock PolarGlobalIOReadStats.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_update_global_io_read_stat</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>delta_read_size</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>delta_read_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>min_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>min_throughtput</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>throughtput</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>throughtput</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>delta_read_size</name> <operator>/</operator> <name>delta_read_time</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* update the max throughtput */</comment>
	<if_stmt><if>if <condition>(<expr><name>polar_io_read_throughtput_userset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>max_throughtput</name></name> <operator>=</operator> <name>polar_io_read_throughtput_userset</name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* MB * 1024 * 1024 = B */</comment>
	<if type="elseif">else if <condition>(<expr><name>throughtput</name> <operator>&gt;</operator> <name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>max_throughtput</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>max_throughtput</name></name> <operator>=</operator> <name>throughtput</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* find the min throughtput and update it */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>POLAR_PROC_GLOBAL_IO_READ_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* find an empty element, fill it and return */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>io_read_throughtput</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>io_read_throughtput</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>throughtput</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>io_read_throughtput</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>min_throughtput</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>min_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>min_throughtput</name> <operator>=</operator> <name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>io_read_throughtput</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>min_throughtput</name> <operator>&lt;</operator> <name>throughtput</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>io_read_throughtput</name><index>[<expr><name>min_i</name></expr>]</index></name> <operator>=</operator> <name>throughtput</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: collect current io read throughtput info. When it reachs statistics period,
 * update the io read stats.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_vfs_timer_end_read_iostat</name><parameter_list>(<parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * If the old lock value is 1, means there is another backend to update io read stat,
	 * just return.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>pg_atomic_exchange_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return ;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>PolarGlobalIOReadStats</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name>polar_crash_recovery_rto_statistics_count</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>tmp_io_read_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_SUBTRACT</name><argument_list>(<argument><expr><name>tmp_io_read_time</name></expr></argument>, <argument><expr><name>tmp_io_read_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>delta_io_read_time</name></name></expr></argument>, <argument><expr><name>tmp_io_read_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>delta_io_read_size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator> <operator>%</operator> <name>POLAR_IO_READ_STATISTICS_TIMES</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int64</name></type> <name>tmp_delta_read_size</name> <init>= <expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>delta_io_read_size</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>double</name></type> <name>tmp_delta_read_time</name> <init>= <expr><call><name>INSTR_TIME_GET_DOUBLE</name><argument_list>(<argument><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>delta_io_read_time</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>io_read_size_avg</name></name> <operator>=</operator> <name>tmp_delta_read_size</name> <operator>/</operator> <name>POLAR_IO_READ_STATISTICS_TIMES</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>io_read_time_avg</name></name> <operator>=</operator> <name>tmp_delta_read_time</name> <operator>/</operator> <name>POLAR_IO_READ_STATISTICS_TIMES</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>polar_update_global_io_read_stat</name><argument_list>(<argument><expr><name>tmp_delta_read_size</name></expr></argument>, <argument><expr><name>tmp_delta_read_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>delta_io_read_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>delta_io_read_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Reset the lock */</comment>
	<expr_stmt><expr><call><name>pg_atomic_exchange_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* As easy as understanding its function name */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_stat_io_write_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>PolarIOStatArray</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<name>UsedShmemSegAddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>loc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>polar_get_io_proc_index</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>polario_kind_to_location</name><argument_list>(<argument><expr><name>vfdkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>loc</name> <operator>&gt;=</operator> <name>POLARIO_LOC_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>polar_vfs_timer_end_iostat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_latency_write</name></expr></argument>, <argument><expr><name>LATENCY_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_number_write</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_throughtput_write</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_stat_io_seek_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>PolarIOStatArray</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<name>UsedShmemSegAddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>loc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>polar_get_io_proc_index</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>polario_kind_to_location</name><argument_list>(<argument><expr><name>vfdkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>loc</name> <operator>&gt;=</operator> <name>POLARIO_LOC_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>polar_vfs_timer_end_iostat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_seek_time</name></expr></argument>, <argument><expr><name>LATENCY_seek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_seek_count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_stat_io_creat_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>PolarIOStatArray</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<name>UsedShmemSegAddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>loc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>polar_get_io_proc_index</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>polario_kind_to_location</name><argument_list>(<argument><expr><name>vfdkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>loc</name> <operator>&gt;=</operator> <name>POLARIO_LOC_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>polar_vfs_timer_end_iostat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_creat_time</name></expr></argument>, <argument><expr><name>LATENCY_creat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_creat_count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_stat_io_falloc_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>PolarIOStatArray</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<name>UsedShmemSegAddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>loc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>polar_get_io_proc_index</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>polario_kind_to_location</name><argument_list>(<argument><expr><name>vfdkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>loc</name> <operator>&gt;=</operator> <name>POLARIO_LOC_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>polar_vfs_timer_end_iostat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_falloc_time</name></expr></argument>, <argument><expr><name>LATENCY_falloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_falloc_count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> 
<name>polar_stat_io_fsync_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vfdkind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vfdtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>PolarIOStatArray</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<name>UsedShmemSegAddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>loc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>polar_get_io_proc_index</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>polario_kind_to_location</name><argument_list>(<argument><expr><name>vfdkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>loc</name> <operator>&gt;=</operator> <name>POLARIO_LOC_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>polar_vfs_timer_end_iostat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_fsync_time</name></expr></argument>, <argument><expr><name>LATENCY_fsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>vfdtype</name></expr>]</index><index>[<expr><name>loc</name></expr>]</index></name><operator>.</operator><name>io_fsync_count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>polar_set_distribution_interval</name><parameter_list>(<parameter><decl><type><name>instr_time</name> <modifier>*</modifier></type><name>intervaltime</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>polar_get_io_proc_index</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>interval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> 		<name>valus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>UsedShmemSegAddr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>kind</name> <operator>&gt;=</operator> <name>LATENCY_KIND_LEN</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return ;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>valus</name> <operator>=</operator> <call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><operator>*</operator><name>intervaltime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>valus</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>interval</name> <operator>=</operator>	<name>valus</name><operator>/</operator><literal type="number">200</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>valus</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>interval</name> <operator>=</operator> <name>LATENCY_10ms</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>valus</name> <operator>&lt;</operator> <literal type="number">100000</literal></expr>)</condition><block type="pseudo"><block_content>
	 	<expr_stmt><expr><name>interval</name> <operator>=</operator> <name>LATENCY_100ms</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>interval</name> <operator>=</operator> <name>LATENCY_OUT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>PolarIOStatArray</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>PolarIOStatArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>num_latency_dist</name><index>[<expr><name>kind</name></expr>]</index><index>[<expr><name>interval</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_localfs_mode</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>localfs_mode</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>newval</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>newval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
