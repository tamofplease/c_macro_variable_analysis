<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/external/polar_worker/polar_worker.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_worker.c
 *	  Do some backgroud things for PolarDB periodically. Such as:
 *	  (1) auto prealloc wal files,
 * 	  (2) auto clean core dump files,
 *	  (3) auto clean xlog temp files.
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *	  external/polar_worker/polar_worker.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_logindex_redo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/file_perm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/bgworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/startup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/latch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procsignal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_io_fencing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/polar_coredump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_flashback/polar_flashback_log.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_MAX_BUFF_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_NUM_FILE_INTERVAL</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_XLOG_TEMP_FILE_SUFFIX</name></cpp:macro> <cpp:value>"xlogtemp"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_DATA_DIR</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(POLAR_FILE_IN_SHARED_STORAGE() ? polar_datadir : DataDir)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_FILE_PATH</name><parameter_list>(<parameter><type><name>path</name></type></parameter>, <parameter><type><name>orign</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>snprintf((path), MAXPGPATH, "%s/%s", POLAR_DATA_DIR(), (orign));</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>file_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>polar_file_descriptor</name>;</typedef>

<function_decl><type><name>void</name></type>        <name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>        <name>polar_worker_handler_main</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>start_polar_worker</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>prealloc_wal_files</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_worker_sighup_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_worker_sigterm_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_worker_sigusr2_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_xlog_temp_file_clean</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_remove_old_core_files</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_remove_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_transfer_coretmp_to_log</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_transfer_core_tmp_to_log_with_remove</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>polar_addr2line</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier></type> <name>program_name</name></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_coredump_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>cmp_file_mtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_address_to_stack_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_number</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Flags set by signal handlers */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>got_sigterm</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>got_sighup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* GUC variables. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>enable_polar_worker</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Start prealloc wal file worker? */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>polar_worker_check_interval</name></decl>;</decl_stmt>    <comment type="block">/* Check interval */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>prealloc_wal_file_num</name></decl>;</decl_stmt>  <comment type="block">/* How many files needed to prealloc */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>polar_core_file_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>core_name_suffix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>core_file_outdate_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>num_corefile_reserved_old</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>num_corefile_reserved_new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>xlog_temp_outdate_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>prealloc_flashback_log_file_num</name></decl>;</decl_stmt>  <comment type="block">/* How many flashback log files needed to prealloc */</comment>
<comment type="block">/*
 * Module load callback.
 */</comment>
<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"polar_worker.polar_worker_check_interval"</literal></expr></argument>,
							<argument><expr><literal type="string">"Sets the interval between polar worker check"</literal></expr></argument>,
							<argument><expr><literal type="string">"If set to zero, polar worker is disabled."</literal></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>polar_worker_check_interval</name></expr></argument>,
							<argument><expr><literal type="number">5</literal></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,
							<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
							<argument><expr><name>GUC_UNIT_S</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"polar_worker.prealloc_wal_file_num"</literal></expr></argument>,
							<argument><expr><literal type="string">"Sets the num of how many prealloc wal file"</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>prealloc_wal_file_num</name></expr></argument>,
							<argument><expr><literal type="number">2</literal></expr></argument>,
							<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,
							<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* can't define PGC_POSTMASTER variable after startup */</comment>
	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"polar_worker.enable_polar_worker"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Starts worker or not."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>enable_polar_worker</name></expr></argument>,
							 <argument><expr><name>true</name></expr></argument>,
							 <argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomStringVariable</name><argument_list>(
		<argument><expr><literal type="string">"polar_worker.core_file_path"</literal></expr></argument>,
		<argument><expr><literal type="string">"path of core file"</literal></expr></argument>,
		<argument><expr><literal type="string">"path of core file"</literal></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>polar_core_file_path</name></expr></argument>,
		<argument><expr><literal type="string">"."</literal></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>
	)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomStringVariable</name><argument_list>(
		<argument><expr><literal type="string">"polar_worker.core_name_suffix"</literal></expr></argument>,
		<argument><expr><literal type="string">"To assign corefile name."</literal></expr></argument>,
		<argument><expr><literal type="string">"To assign corefile name."</literal></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>core_name_suffix</name></expr></argument>,
		<argument><expr><literal type="string">"core"</literal></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>
	)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"polar_worker.core_file_outdate_time"</literal></expr></argument>,
		<argument><expr><literal type="string">"outdate time of core file."</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>core_file_outdate_time</name></expr></argument>,
		<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
		<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>
	)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"polar_worker.num_corefile_reserved_old"</literal></expr></argument>,
		<argument><expr><literal type="string">"num of oldest reserverd corefile."</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>num_corefile_reserved_old</name></expr></argument>,
		<argument><expr><literal type="number">32</literal></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>
	)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"polar_worker.num_corefile_reserved_new"</literal></expr></argument>,
		<argument><expr><literal type="string">"num of newest reserverd corefile."</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>num_corefile_reserved_new</name></expr></argument>,
		<argument><expr><literal type="number">32</literal></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>
	)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"polar_worker.xlog_temp_outdate_time"</literal></expr></argument>,
		<argument><expr><literal type="string">"outdate time of xlog temp."</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>xlog_temp_outdate_time</name></expr></argument>,
		<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
		<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>
	)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"polar_worker.prealloc_flashback_log_file_num"</literal></expr></argument>,
		<argument><expr><literal type="string">"Sets the num of how many prealloc flashback log file"</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>prealloc_flashback_log_file_num</name></expr></argument>,
		<argument><expr><literal type="number">2</literal></expr></argument>,
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EmitWarningsOnPlaceholders</name><argument_list>(<argument><expr><literal type="string">"polar_worker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Register polar worker. */</comment>
	<expr_stmt><expr><call><name>start_polar_worker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Start autoprewarm master worker process.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>start_polar_worker</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BackgroundWorker</name></type> <name>worker</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BackgroundWorkerHandle</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BgwHandleStatus</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pid_t</name></type>       <name>pid</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackgroundWorker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_flags</name></name> <operator>=</operator> <name>BGWORKER_SHMEM_ACCESS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_start_time</name></name> <operator>=</operator> <name>BgWorkerStart_PostmasterStart</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_restart_time</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_library_name</name></name></expr></argument>, <argument><expr><literal type="string">"polar_worker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_function_name</name></name></expr></argument>, <argument><expr><literal type="string">"polar_worker_handler_main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_name</name></name></expr></argument>, <argument><expr><name>POLAR_WORKER_PROCESS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_type</name></name></expr></argument>, <argument><expr><name>POLAR_WORKER_PROCESS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>process_shared_preload_libraries_in_progress</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RegisterBackgroundWorker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* must set notify PID to wait for startup */</comment>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_notify_pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RegisterDynamicBackgroundWorker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_RESOURCES</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not register background process"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"You may need to increase max_worker_processes."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>WaitForBackgroundWorkerStartup</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>BGWH_STARTED</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_RESOURCES</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not start background process"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"More details may be available in the server log."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Preallocate wal files beyond last redolog endpoint.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>prealloc_wal_files</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>  <name>insert_ptr</name> <init>= <expr><call><name>GetXLogInsertRecPtr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogSegNo</name></type>   <name>_log_seg_no</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>lf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>use_existent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>XLByteToPrevSeg</name><argument_list>(<argument><expr><name>insert_ptr</name></expr></argument>, <argument><expr><name>_log_seg_no</name></expr></argument>, <argument><expr><name>wal_segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>prealloc_wal_file_num</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>_log_seg_no</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>use_existent</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lf</name> <operator>=</operator> <call><name>XLogFileInit</name><argument_list>(<argument><expr><name>_log_seg_no</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_existent</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_existent</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>CheckpointStats</name><operator>.</operator><name>ckpt_segs_added</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Main entry point for polar worker process.
 */</comment>
<function><type><name>void</name></type>
<name>polar_worker_handler_main</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>last_time</name> <init>= <expr><call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Establish signal handlers; once that's done, unblock signals. */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>polar_worker_sigterm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>polar_worker_sighup_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><name>procsignal_sigusr1_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGUSR2</name></expr></argument>, <argument><expr><name>polar_worker_sigusr2_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ignore the child signal in polar_worker */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add polar worker into backends for showing them in pg_stat_activity */</comment>
	<expr_stmt><expr><call><name>polar_init_dynamic_bgworker_in_backends</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * POLAR: if some process coredump happens, polar worder will be reset too,
	 * so do it at the begining.
	 */</comment>
	<expr_stmt><expr><call><name>polar_coredump_handler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Periodically prealloc wal file until terminated. */</comment>
	<while>while <condition>(<expr><operator>!</operator><name>got_sigterm</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>     <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* In case of a SIGHUP, just reload the configuration. */</comment>
		<if_stmt><if>if <condition>(<expr><name>got_sighup</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>got_sighup</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ProcessConfigFile</name><argument_list>(<argument><expr><name>PGC_SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * check for any other interesting events that happened while we
		 * slept.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>ConfigReloadPending</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ConfigReloadPending</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ProcessConfigFile</name><argument_list>(<argument><expr><name>PGC_SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enable_polar_worker</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* We don't want to prealloc wal file now, so just wait forever. */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WaitLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>,
						   <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_POSTMASTER_DEATH</name></expr></argument>,
						   <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>,
						   <argument><expr><name>PG_WAIT_EXTENSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<comment type="block">/* POLAR: in replica mode, polar worker only do fullpage snapshot work */</comment>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>long</name></type>        <name>delay_in_ms</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>POLAR_LOGINDEX_ENABLE_FULLPAGE</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>polar_in_replica_mode</name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>polar_bgworker_fullpage_snapshot_replay</name><argument_list>(<argument><expr><name><name>polar_logindex_redo_instance</name><operator>-&gt;</operator><name>fullpage_ctl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>polar_fullpage_bgworker_wait_notify</name><argument_list>(<argument><expr><name><name>polar_logindex_redo_instance</name><operator>-&gt;</operator><name>fullpage_ctl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*POLAR: coredump/wal prefetch only in master/standby take affect */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_in_replica_mode</name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>TimestampTz</name></type> <name>next_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>long</name></type>        <name>secs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>         <name>usecs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

				<comment type="block">/* FATAL after detection of double write in one shared storage. */</comment>
				<expr_stmt><expr><call><name>polar_check_double_write</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Compute the next prealloc wal file time. */</comment>
				<expr_stmt><expr><name>next_time</name> <operator>=</operator>
					<call><name>TimestampTzPlusMilliseconds</name><argument_list>(<argument><expr><name>last_time</name></expr></argument>,
												<argument><expr><name>polar_worker_check_interval</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>TimestampDifference</name><argument_list>(<argument><expr><call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>next_time</name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>secs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>delay_in_ms</name> <operator>=</operator> <name>secs</name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <operator>(</operator><name>usecs</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>

				<comment type="block">/* If we are in Recovery mode, sleep util consistant */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>RecoveryInProgress</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>delay_in_ms</name> <operator>=</operator> <name>polar_worker_check_interval</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name>delay_in_ms</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>last_time</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* Perform a prealloc wal and fullpage file operation if it's time. */</comment>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RecoveryInProgress</name><argument_list>()</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>prealloc_wal_files</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><call><name>POLAR_LOGINDEX_ENABLE_FULLPAGE</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>polar_prealloc_fullpage_files</name><argument_list>(<argument><expr><name><name>polar_logindex_redo_instance</name><operator>-&gt;</operator><name>fullpage_ctl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></if></if_stmt>

					<comment type="block">/* Perform xlog temp file clean */</comment>
					<if_stmt><if>if <condition>(<expr><name>xlog_temp_outdate_time</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>polar_xlog_temp_file_clean</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<comment type="block">/*
					 * Perform a prealloc flashback log operation after
					 * the control info has been filled by polar_startup_flog.
					 */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>polar_is_flog_enabled</name><argument_list>(<argument><expr><name>flog_instance</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>polar_has_flog_startup</name><argument_list>(<argument><expr><name>flog_instance</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>polar_prealloc_flog_files</name><argument_list>(<argument><expr><name><name>flog_instance</name><operator>-&gt;</operator><name>buf_ctl</name></name></expr></argument>, <argument><expr><name>prealloc_flashback_log_file_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WaitLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>,
						   <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_TIMEOUT</name> <operator>|</operator> <name>WL_POSTMASTER_DEATH</name></expr></argument>,
						   <argument><expr><ternary><condition><expr><name>delay_in_ms</name> <operator>&lt;</operator> <name>POLAR_IO_FENCING_INTERVAL</name></expr> ?</condition><then> <expr><name>delay_in_ms</name></expr> </then><else>: <expr><name>POLAR_IO_FENCING_INTERVAL</name></expr></else></ternary></expr></argument>,
						   <argument><expr><name>PG_WAIT_EXTENSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* Reset the latch, bail out if postmaster died, otherwise loop. */</comment>
		<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_POSTMASTER_DEATH</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Don't allow to exit in signal handler,maybe process
	 * is IO pending now, file cannot close normally, so
	 * exit here for safety
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>got_sigterm</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * From here on, elog(ERROR) should end with exit(1), not send
		 * control back to the sigsetjmp block above
		 */</comment>
		<expr_stmt><expr><name>ExitOnAnyError</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Signal handler for SIGTERM
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_worker_sigterm_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>         <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>got_sigterm</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>MyProc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>polar_set_shutdown_requested_flag</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Signal handler for SIGHUP
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_worker_sighup_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>         <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>got_sighup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ConfigReloadPending</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>MyProc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Signal handler for SIGUSR2
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_worker_sigusr2_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>polar_fullpage_set_online_promote</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: handler for coredump
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_coredump_handler</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * POLAR: process_coredump_info:
	 * 1. clean outdate core file
	 * 2. print stack info in core.tmp and clean it
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>polar_enable_coredump_handler</name> <operator>&amp;</operator> <name>CORE_DUMP_CLEAR_MASK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_remove_old_core_files</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>polar_enable_coredump_handler</name> <operator>&amp;</operator> <name>CORE_DUMP_PRINT_MASK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_transfer_core_tmp_to_log_with_remove</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: remove old system core files
 * These files are ordered by create-time.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_remove_old_core_files</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>corede</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_file_descriptor</name> <modifier>*</modifier></type><name>file_set</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>current_core_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>core_file_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>coredir</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num_core_files</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num_alloc_files</name> <init>= <expr><name>POLAR_NUM_FILE_INTERVAL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

	<comment type="block">/* get the core-file path from the system core-pattern file */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_read_core_pattern</name><argument_list>(<argument><expr><name>POLAR_CORE_DUMP_PATTERN_FILE</name></expr></argument>, <argument><expr><name>core_file_path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>core_file_path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>polar_core_file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* traverse the core file directory */</comment>
	<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>file_set</name> <operator>=</operator> <operator>(</operator><name>polar_file_descriptor</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>num_alloc_files</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_file_descriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>coredir</name> <operator>=</operator> <call><name>AllocateDir</name><argument_list>(<argument><expr><name>core_file_path</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>corede</name> <operator>=</operator> <call><name>ReadDir</name><argument_list>(<argument><expr><name>coredir</name></expr></argument>, <argument><expr><name>core_file_path</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>current_core_path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>core_file_path</name></expr></argument>, <argument><expr><name><name>corede</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Skip special stuff */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>corede</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>corede</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* skip file could not open valid */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>current_core_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* skip file not belong to itself */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>st_uid</name></name> <operator>!=</operator> <call><name>geteuid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* skip dir */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* skip file name invalid */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>corede</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name>core_name_suffix</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>core_name_suffix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* clean file when the file is out of date */</comment>
		<if_stmt><if>if <condition>(<expr><name>core_file_outdate_time</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>timestamp</name> <operator>-</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>&gt;=</operator> <name>core_file_outdate_time</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"attempting to remove core file %s"</literal></expr></argument>, <argument><expr><name>current_core_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>polar_remove_file</name><argument_list>(<argument><expr><name>current_core_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* expand the file set when necessary */</comment>
		<if_stmt><if>if <condition>(<expr><name>num_core_files</name> <operator>&gt;=</operator> <name>num_alloc_files</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>num_alloc_files</name> <operator>+=</operator> <name>POLAR_NUM_FILE_INTERVAL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>file_set</name> <operator>=</operator> <operator>(</operator><name>polar_file_descriptor</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>file_set</name></expr></argument>,
														  <argument><expr><name>num_alloc_files</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_file_descriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* save [m_time, file_name] to file_set */</comment>
		<expr_stmt><expr><name><name>file_set</name><index>[<expr><name>num_core_files</name></expr>]</index></name><operator>.</operator><name>mtime</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>file_set</name><index>[<expr><name>num_core_files</name></expr>]</index></name><operator>.</operator><name>file_path</name></expr></argument>, <argument><expr><name>current_core_path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>num_core_files</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>FreeDir</name><argument_list>(<argument><expr><name>coredir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>num_core_files</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>         <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>file_set</name></expr></argument>, <argument><expr><name>num_core_files</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_file_descriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp_file_mtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_core_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>num_corefile_reserved_old</name> <operator>&amp;&amp;</operator>
					<name>i</name> <operator>&lt;</operator> <name>num_core_files</name> <operator>-</operator> <name>num_corefile_reserved_new</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"attempting to remove core file %s"</literal></expr></argument>, <argument><expr><name><name>file_set</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>polar_remove_file</name><argument_list>(<argument><expr><name><name>file_set</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>file_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *  POLAR: transfer temp core files to log and remove it.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_transfer_core_tmp_to_log_with_remove</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>coredir</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>corede</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>current_core_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>current_dir</name> <init>= <expr><literal type="string">"."</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* search core stack info in the PG DIR */</comment>
	<expr_stmt><expr><name>coredir</name> <operator>=</operator> <call><name>AllocateDir</name><argument_list>(<argument><expr><name>current_dir</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>corede</name> <operator>=</operator> <call><name>ReadDir</name><argument_list>(<argument><expr><name>coredir</name></expr></argument>, <argument><expr><name>current_dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>current_core_path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>current_dir</name></expr></argument>, <argument><expr><name><name>corede</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Skip special stuff */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>corede</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>corede</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* skip file could not open valid */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>current_core_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* skip file not belong to itself */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>getuid</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>geteuid</name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>st</name><operator>.</operator><name>st_uid</name></name> <operator>!=</operator> <call><name>geteuid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* skip file name invalid and skip dir */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>corede</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name>POLAR_CORE_DUMP_FILE_SUFFIX</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>POLAR_CORE_DUMP_FILE_SUFFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* could open file valid */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>polar_transfer_coretmp_to_log</name><argument_list>(<argument><expr><name>current_core_path</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* delete temp file */</comment>
			<expr_stmt><expr><call><name>polar_remove_file</name><argument_list>(<argument><expr><name>current_core_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>FreeDir</name><argument_list>(<argument><expr><name>coredir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: remove file function
 * The fucntion is same as drop of replication slot on disk.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_remove_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<decl_stmt><decl><type><name>char</name></type> <name><name>newpath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s.deleted"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>newpath</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not rename deleted file \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unlink</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not remove old file \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: transfer temp core files to LOG output
 * 1. get stacktrace info in temp core files
 * 2. print stack info to LOG using add2line
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_transfer_coretmp_to_log</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StackInfoOnDisk</name></type> <name>stack_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>readBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* open and read file */</comment>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>readBytes</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stack_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stack_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>readBytes</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>stack_info</name></expr></argument>)</argument_list></sizeof> <operator>||</operator>
			<name><name>stack_info</name><operator>.</operator><name>magic_number</name></name> <operator>!=</operator> <name>POLAR_CORE_MAGIC_NUMBER</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>         <name>saved_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not read file \"%s\", read %d of %u: %m"</literal></expr></argument>,
						<argument><expr><name>path</name></expr></argument>, <argument><expr><name>readBytes</name></expr></argument>,
						<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>stack_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* print Stack Info using add2line */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stack_info</name><operator>.</operator><name>stack_size</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>POLAR_MAX_STACK_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_address_to_stack_info</name><argument_list>(<argument><expr><name><name>stack_info</name><operator>.</operator><name>stack_traces</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* POLAR: print stack info by address */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_address_to_stack_info</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>maps_column_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>offset_start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>offset_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd_maps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* initialize string from /proc/pid/maps */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>library_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>proc_map_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>POLAR_MAX_BUFF_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>maps_line</name><index>[<expr><name>POLAR_MAX_BUFF_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<comment type="block">/* open file /proc/pid/maps */</comment>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>proc_map_path</name></expr></argument>, <argument><expr><literal type="string">"/proc/%d/maps"</literal></expr></argument>, <argument><expr><name>MyProcPid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fd_maps</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>proc_map_path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>fd_maps</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* get the start address, end address and file path from /proc/pid/maps */</comment>
	<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>maps_line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>maps_line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fd_maps</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>maps_column_num</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>maps_line</name></expr></argument>, <argument><expr><literal type="string">"%p-%p\t%*s\t%*s\t%*s\t%*s\t%s"</literal></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>offset_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset_end</name></expr></argument>, <argument><expr><name>library_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>maps_column_num</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&gt;=</operator> <name>offset_start</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;=</operator> <name>offset_end</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd_maps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * POLAR: error case
	 * It is the oppsite case to find the right address.  
	 * Note that, when maps_column_num == 3, offset_start and offset_end can't be null.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>maps_column_num</name> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator>  <name><name>addr</name> <argument_list type="generic">&lt; <argument><expr><name>offset_start</name> <operator>||</operator> <name>addr</name></expr></argument> &gt;</argument_list></name> <name>offset_end</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* get the real address for the .so file by offset_start */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>my_exec_path</name></expr></argument>, <argument><expr><name>library_path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>addr</name> <operator>=</operator>  <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>addr</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>offset_start</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* get the stack info */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>POLAR_MAX_BUFF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>polar_addr2line</name><argument_list>(<argument><expr><name>library_path</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* print the info if it is valid */</comment>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[Stack Info] line : %d, file %s, info : %s"</literal></expr></argument>, <argument><expr><name>line_number</name></expr></argument>, <argument><expr><name>library_path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: get stack info using os function add2line
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>polar_addr2line</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier></type> <name>program_name</name></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fpRead</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><name>POLAR_MAX_BUFF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>addr2line_cmd</name><index>[<expr><name>POLAR_MAX_BUFF_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>addr2line_cmd</name></expr></argument>, <argument><expr><literal type="string">"addr2line -f -p -e %.256s %p"</literal></expr></argument>, <argument><expr><name>program_name</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fpRead</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name>addr2line_cmd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fpRead</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>buf</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>POLAR_MAX_BUFF_SIZE</name></expr></argument>, <argument><expr><name>fpRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* buf may not be null after fgets */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>buf</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>fpRead</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>fpRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compare mtime of file in order to sort array in descending order.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp_file_mtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_file_descriptor</name></type>   <name>st1</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>polar_file_descriptor</name> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_file_descriptor</name></type>   <name>st2</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>polar_file_descriptor</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>st1</name><operator>.</operator><name>mtime</name></name> <operator>&lt;</operator> <name><name>st2</name><operator>.</operator><name>mtime</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>st1</name><operator>.</operator><name>mtime</name></name> <operator>==</operator> <name><name>st2</name><operator>.</operator><name>mtime</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: remove xlog temp file if it is outdate.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_xlog_temp_file_clean</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>waldir</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>walde</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>current_xlog_temp_file_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>current_dir</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>last_clean_timestamp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* to scan disk periodically */</comment>
	<if_stmt><if>if <condition>(<expr><name>last_clean_timestamp</name> <operator>&amp;&amp;</operator> <name>timestamp</name> <operator>-</operator> <name>last_clean_timestamp</name> <operator>&lt;</operator> <name>xlog_temp_outdate_time</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return ;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>last_clean_timestamp</name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>

	<comment type="block">/* search xlog info in the PG WAL DIR */</comment>
	<expr_stmt><expr><call><name>POLAR_FILE_PATH</name><argument_list>(<argument><expr><name>current_dir</name></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>waldir</name> <operator>=</operator> <call><name>polar_allocate_dir</name><argument_list>(<argument><expr><name>current_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>walde</name> <operator>=</operator> <call><name>polar_readdir</name><argument_list>(<argument><expr><name>waldir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>current_xlog_temp_file_path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>current_dir</name></expr></argument>, <argument><expr><name><name>walde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Skip special stuff */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>walde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>walde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* skip file could not open valid */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>current_xlog_temp_file_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* skip file not belong to itself */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>st_uid</name></name> <operator>!=</operator> <call><name>geteuid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* skip dir */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* skip file name invalid */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>walde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name>POLAR_XLOG_TEMP_FILE_SUFFIX</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>POLAR_XLOG_TEMP_FILE_SUFFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* delete file if it is outdate */</comment>
		<if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>-</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>&gt;=</operator> <name>xlog_temp_outdate_time</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_unlink</name><argument_list>(<argument><expr><name>current_xlog_temp_file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>FreeDir</name><argument_list>(<argument><expr><name>waldir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Get the core-file path from the system core-pattern file
 */</comment>
<function><type><name>bool</name></type>
<name>polar_read_core_pattern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>core_pattern_path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>core_file_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>cwd</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<comment type="block">/* open system file and read core pattern path */</comment>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>core_pattern_path</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\"."</literal></expr></argument>, <argument><expr><name>core_pattern_path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not read file \"%s\"."</literal></expr></argument>, <argument><expr><name>core_pattern_path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* get the current working path */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getcwd</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"could not determine current directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* get the rightmost / if possible */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* first case: / did not exsit in path (e.g. core) the practical path is the current working path */</comment>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>core_file_path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* get the core directory from the core pattern */</comment>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>MAXPGPATH</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"core pattern length exceeds MAXPGPATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ret</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<comment type="block">/* second case: absolute path (e.g. /tmp/corefile/core) */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>core_file_path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* third case: relative path (e.g. corefile/core) */</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>core_file_path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* judge whether core_file_path could be opened valid */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>core_file_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
