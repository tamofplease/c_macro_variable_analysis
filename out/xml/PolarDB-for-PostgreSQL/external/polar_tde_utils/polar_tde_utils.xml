<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/external/polar_tde_utils/polar_tde_utils.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_tde_utils.c
 *
 *
 * IDENTIFICATION
 *	  external/polar_tde_utils/polar_tde_utils.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/enc_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/kmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/enc_cipher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<comment type="line">//POLAR: declaration for heap_form_tuple</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>


<function_decl><type><name>Datum</name></type> <name>polar_tde_update_kmgr_file</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>polar_tde_update_kmgr_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>Datum</name></type> <name>polar_tde_kmgr_info_view</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>polar_tde_kmgr_info_view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>Datum</name></type> <name>polar_tde_check_kmgr_file</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>polar_tde_check_kmgr_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>polar_tde_update_kmgr_file</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	<modifier>*</modifier></type><name>polar_cluster_passphrase_command_new</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>KmgrFileData</name> <modifier>*</modifier></type><name>kmgrfile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name></type> <name><name>key_enc_key_new</name><index>[<expr><name>TDE_KEK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>passphrase</name><index>[<expr><name>TDE_MAX_PASSPHRASE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name></type> <name><name>hmackey</name><index>[<expr><name>TDE_HMAC_KEY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>rdek_enc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>wdek_enc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>rdek_hmac</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name> <modifier>*</modifier></type><name>wdek_hmac</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>wrapped_keysize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                                <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be superuser to execute polar_tde_update_kmgr_file."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>data_encryption_cipher</name> <operator>==</operator> <name>TDE_ENCRYPTION_OFF</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"data_encryption_cipher is off, can not update kmgr file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_OPENSSL</name></cpp:ifndef>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cluster encryption is not supported because OpenSSL is not supported by this build, "</literal>
			<literal type="string">"compile with --with-openssl to use cluster encryption."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Update the polar_cluster_passphrase_command so we can use the new one */</comment>
	<expr_stmt><expr><call><name>SetConfigOption</name><argument_list>(<argument><expr><literal type="string">"polar_cluster_passphrase_command"</literal></expr></argument>,
					<argument><expr><name>polar_cluster_passphrase_command_new</name></expr></argument>,
					<argument><expr><name>PGC_SIGHUP</name></expr></argument>, <argument><expr><name>PGC_S_SESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Fill out the kmgr file contents */</comment>
	<expr_stmt><expr><name>kmgrfile</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>KmgrFileData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>kmgrfile</name><operator>-&gt;</operator><name>data_encryption_cipher</name></name> <operator>=</operator> <name>data_encryption_cipher</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdek_enc</name> <operator>=</operator> <name><name>kmgrfile</name><operator>-&gt;</operator><name>tde_rdek</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdek_hmac</name> <operator>=</operator> <name><name>kmgrfile</name><operator>-&gt;</operator><name>tde_rdek</name><operator>.</operator><name>hmac</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>wdek_enc</name> <operator>=</operator> <name><name>kmgrfile</name><operator>-&gt;</operator><name>tde_wdek</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>wdek_hmac</name> <operator>=</operator> <name><name>kmgrfile</name><operator>-&gt;</operator><name>tde_wdek</name><operator>.</operator><name>hmac</name></name></expr>;</expr_stmt>

	 <comment type="block">/* Get encryption key passphrase */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>run_cluster_passphrase_command</name><argument_list>(<argument><expr><name>KMGR_PROMPT_MSG</name></expr></argument>,
										 <argument><expr><name>passphrase</name></expr></argument>,
										 <argument><expr><name>TDE_MAX_PASSPHRASE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get key encryption key and HMAC key from passphrase */</comment>
	<expr_stmt><expr><call><name>get_kek_and_hmackey_from_passphrase</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>key_enc_key_new</name></expr></argument>, <argument><expr><name>hmackey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get relation encryption key and wal encryption key from memory */</comment>

	<comment type="block">/* Wrap both keys by KEK */</comment>
	<expr_stmt><expr><name>wrapped_keysize</name> <operator>=</operator> <name>EncryptionKeySize</name> <operator>+</operator> <name>TDE_DEK_WRAP_VALUE_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_wrap_key</name><argument_list>(<argument><expr><name>key_enc_key_new</name></expr></argument>, <argument><expr><name>TDE_KEK_SIZE</name></expr></argument>,
				<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>KmgrGetRelationEncryptionKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EncryptionKeySize</name></expr></argument>,
				<argument><expr><name>rdek_enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>wrapped_keysize</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"wrapped relation encryption key size is invalid, got %d expected %d"</literal></expr></argument>,
			 <argument><expr><name>size</name></expr></argument>, <argument><expr><name>wrapped_keysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_wrap_key</name><argument_list>(<argument><expr><name>key_enc_key_new</name></expr></argument>, <argument><expr><name>TDE_KEK_SIZE</name></expr></argument>,
				<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>KmgrGetWALEncryptionKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EncryptionKeySize</name></expr></argument>,
				<argument><expr><name>wdek_enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>wrapped_keysize</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"wrapped WAL encryption key size is invalid, got %d expected %d"</literal></expr></argument>,
			 <argument><expr><name>size</name></expr></argument>, <argument><expr><name>wrapped_keysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Compute both HMAC */</comment>
	<expr_stmt><expr><call><name>pg_compute_hmac</name><argument_list>(<argument><expr><name>hmackey</name></expr></argument>, <argument><expr><name>TDE_HMAC_KEY_SIZE</name></expr></argument>,
					<argument><expr><name>rdek_enc</name></expr></argument>, <argument><expr><name>wrapped_keysize</name></expr></argument>,
					<argument><expr><name>rdek_hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_compute_hmac</name><argument_list>(<argument><expr><name>hmackey</name></expr></argument>, <argument><expr><name>TDE_HMAC_KEY_SIZE</name></expr></argument>,
					<argument><expr><name>wdek_enc</name></expr></argument>, <argument><expr><name>wrapped_keysize</name></expr></argument>,
					<argument><expr><name>wdek_hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* write kmgr file to the disk, the kmgr file is very small, so we don't use rename.*/</comment>
	<expr_stmt><expr><call><name>write_kmgr_file</name><argument_list>(<argument><expr><name>kmgrfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>kmgrfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>polar_tde_check_kmgr_file</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>KmgrFileData</name> <modifier>*</modifier></type><name>kmgrfile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WrappedEncKeyWithHmac</name> <modifier>*</modifier></type><name>wrapped_rdek</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WrappedEncKeyWithHmac</name> <modifier>*</modifier></type><name>wrapped_wdek</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>passphrase</name><index>[<expr><name>TDE_MAX_PASSPHRASE_LEN</name></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>keydata_t</name></type> <name><name>user_kek</name><index>[<expr><name>TDE_KEK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name></type> <name><name>user_hmackey</name><index>[<expr><name>TDE_HMAC_KEY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name></type> <name><name>result_hmac</name><index>[<expr><name>TDE_HMAC_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>keydata_t</name></type> <name><name>rel_enc_key_in_file</name><index>[<expr><name>TDE_MAX_DEK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>keydata_t</name></type> <name><name>wal_enc_key_in_file</name><index>[<expr><name>TDE_MAX_DEK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>		<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>wrapped_keysize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>unwrapped_size</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type>	<name>kmgr_file_is_right</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be superuser to execute polar_tde_check_kmgr_file."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_kmgr_file_exist</name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Can not find the kmgr file, check kmgr file failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>kmgr_file_is_right</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Get contents of kmgr file */</comment>
	<expr_stmt><expr><name>kmgrfile</name> <operator>=</operator> <call><name>polar_read_kmgr_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>kmgrfile</name><operator>-&gt;</operator><name>kmgr_version_no</name></name> <operator>!=</operator> <name>KMGR_VERSION_NO</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"kmgr_version_no in the kmgr file is not right!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>kmgr_file_is_right</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>kmgrfile</name><operator>-&gt;</operator><name>data_encryption_cipher</name></name> <operator>!=</operator> <name>data_encryption_cipher</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"data_encryption_cipher in the kmgr file is not right!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>kmgr_file_is_right</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Get cluster passphrase */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>run_cluster_passphrase_command</name><argument_list>(<argument><expr><name>KMGR_PROMPT_MSG</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>TDE_MAX_PASSPHRASE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get two wrapped keys stored in kmgr file */</comment>
	<expr_stmt><expr><name>wrapped_rdek</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>kmgrfile</name><operator>-&gt;</operator><name>tde_rdek</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>wrapped_wdek</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>kmgrfile</name><operator>-&gt;</operator><name>tde_wdek</name></name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>wrapped_keysize</name> <operator>=</operator> <name>EncryptionKeySize</name> <operator>+</operator> <name>TDE_DEK_WRAP_VALUE_SIZE</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>get_kek_and_hmackey_from_passphrase</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
											<argument><expr><name>user_kek</name></expr></argument>, <argument><expr><name>user_hmackey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Verify both HMACs of RDEK and WDEK */</comment>
	<expr_stmt><expr><call><name>pg_compute_hmac</name><argument_list>(<argument><expr><name>user_hmackey</name></expr></argument>, <argument><expr><name>TDE_HMAC_KEY_SIZE</name></expr></argument>,
					<argument><expr><name><name>wrapped_rdek</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>wrapped_keysize</name></expr></argument>,
					<argument><expr><name>result_hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>result_hmac</name></expr></argument>, <argument><expr><name><name>wrapped_rdek</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>, <argument><expr><name>TDE_HMAC_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"the hmac of the rel encryption key is not the same as kmgr file."</literal>
				<literal type="string">"the hmac of the rel encryption key is %s, "</literal>
				<literal type="string">"the hmac of the rel encryption key from kmgr file is %s"</literal></expr></argument>,
				<argument><expr><name>result_hmac</name></expr></argument>, <argument><expr><name><name>wrapped_rdek</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>kmgr_file_is_right</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_compute_hmac</name><argument_list>(<argument><expr><name>user_hmackey</name></expr></argument>, <argument><expr><name>TDE_HMAC_KEY_SIZE</name></expr></argument>,
					<argument><expr><name><name>wrapped_wdek</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>wrapped_keysize</name></expr></argument>,
					<argument><expr><name>result_hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>result_hmac</name></expr></argument>, <argument><expr><name><name>wrapped_wdek</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>, <argument><expr><name>TDE_HMAC_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"the hmac of the wal encryption key is not the same as kmgr file."</literal>
				<literal type="string">"the hmac of the wal encryption key is %s, "</literal>
				<literal type="string">"the hmac of the wal encryption key from kmgr file is %s"</literal></expr></argument>,
				<argument><expr><name>result_hmac</name></expr></argument>, <argument><expr><name><name>wrapped_wdek</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>kmgr_file_is_right</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* The passphrase is correct, unwrap both RDEK and WDEK */</comment>
	<expr_stmt><expr><call><name>pg_unwrap_key</name><argument_list>(<argument><expr><name>user_kek</name></expr></argument>, <argument><expr><name>TDE_KEK_SIZE</name></expr></argument>,
				  <argument><expr><name><name>wrapped_rdek</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>wrapped_keysize</name></expr></argument>,
				  <argument><expr><name>rel_enc_key_in_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unwrapped_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>rel_enc_key_in_file</name></expr></argument>, <argument><expr><call><name>KmgrGetRelationEncryptionKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EncryptionKeySize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"rel encryption key is not the same as the kmgr file: "</literal>
				<literal type="string">"rel_enckey in memory is %s, rel_enckey in file is %s"</literal></expr></argument>,
				<argument><expr><call><name>KmgrGetRelationEncryptionKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rel_enc_key_in_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>kmgr_file_is_right</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_unwrap_key</name><argument_list>(<argument><expr><name>user_kek</name></expr></argument>, <argument><expr><name>TDE_KEK_SIZE</name></expr></argument>,
				  <argument><expr><name><name>wrapped_wdek</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>wrapped_keysize</name></expr></argument>,
				  <argument><expr><name>wal_enc_key_in_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unwrapped_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>wal_enc_key_in_file</name></expr></argument>, <argument><expr><call><name>KmgrGetWALEncryptionKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EncryptionKeySize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"wal encryption key is not the same as the kmgr file: "</literal>
				<literal type="string">"wal_enckey in memory is %s, rel_enckey in file is %s"</literal></expr></argument>,
				<argument><expr><call><name>KmgrGetRelationEncryptionKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>wal_enc_key_in_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>kmgr_file_is_right</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>kmgrfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>kmgr_file_is_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>polar_tde_kmgr_info_view</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>isnull</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>KmgrFileData</name> <modifier>*</modifier></type><name>kmgrfile</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name></type> <name><name>rel_enc_key_hex</name><index>[<expr><name>TDE_MAX_DEK_SIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>wal_enc_key_hex</name><index>[<expr><name>TDE_MAX_DEK_SIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>key_enc_key_hex</name><index>[<expr><name>TDE_KEK_SIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be superuser to execute polar_tde_kmgr_info_view."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>rsinfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>rsinfo</name></expr></argument>, <argument><expr><name>ReturnSetInfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"set-valued function called in context that cannot accept a set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rsinfo</name><operator>-&gt;</operator><name>allowedModes</name></name> <operator>&amp;</operator> <name>SFRM_Materialize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"materialize mode required, but it is not allowed in this context"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"kmgr_version_no"</literal></expr></argument>,
						<argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"data_encryption_cipher"</literal></expr></argument>,
						<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"rdek_key_hex"</literal></expr></argument>,
						<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"wdek_key_hex"</literal></expr></argument>,
						<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"kek_enckey_hex"</literal></expr></argument>,
						<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(
							<argument><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupstore</name> <operator>=</operator> <call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isnull</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>kmgrfile</name> <operator>=</operator> <call><name>polar_read_kmgr_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hex_encode</name><argument_list>(<argument><expr><call><name>KmgrGetRelationEncryptionKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TDE_MAX_DEK_SIZE</name></expr></argument>, <argument><expr><name>rel_enc_key_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rel_enc_key_hex</name><index>[<expr><name>TDE_MAX_DEK_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hex_encode</name><argument_list>(<argument><expr><call><name>KmgrGetWALEncryptionKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TDE_MAX_DEK_SIZE</name></expr></argument>, <argument><expr><name>wal_enc_key_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wal_enc_key_hex</name><index>[<expr><name>TDE_MAX_DEK_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hex_encode</name><argument_list>(<argument><expr><call><name>KmgrGetKeyEncryptionKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TDE_KEK_SIZE</name></expr></argument>, <argument><expr><name>key_enc_key_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key_enc_key_hex</name><index>[<expr><name>TDE_MAX_DEK_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>kmgrfile</name><operator>-&gt;</operator><name>kmgr_version_no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><call><name>EncryptionCipherString</name><argument_list>(<argument><expr><name><name>kmgrfile</name><operator>-&gt;</operator><name>data_encryption_cipher</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>rel_enc_key_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>wal_enc_key_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>key_enc_key_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tuplestore_puttuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>kmgrfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
