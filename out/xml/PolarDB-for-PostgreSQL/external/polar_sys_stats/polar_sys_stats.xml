<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/external/polar_sys_stats/polar_sys_stats.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_sys_stats.c
 *	  Planner needs to know the hardware capability for a better plan.
 *	  Currently PG let user to set it, and this extension is designed to
 *	  set them automatically. We start with random_page_cost, which looks
 *	  have top-1 impacts on planner.
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *	  external/polar_sys_stats/polar_sys_stats.c
 *
 *-------------------------------------------------------------------------
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/smgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<function_decl><type><name>Datum</name></type> <name>polar_random_page_cost</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>polar_random_page_cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name_with_polardir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_allocate_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>,  <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>file_created</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_invalidate_device_cache</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>device_cache_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>polar_bulk_read_lat</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>file_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>polar_random_rand_lat</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>file_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>polar_buffer_cache_lat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_clean_sysstat_testfiles</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>get_real_lat</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>cache_hit_ratio</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>disk_lat</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>cache_lat</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>test_data_file</name> <init>= <expr><literal type="string">"polar_sys_stat_test.dat"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>device_cache_invalid_file</name> <init>= <expr><literal type="string">"polar_sys_stat_dummy.dat"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>test_file_created</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dummy_file_created</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>on_proc_exit</name><argument_list>(<argument><expr><name>polar_clean_sysstat_testfiles</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>polar_random_page_cost</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>test_file_size</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>device_cache</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/*
	 * Since pfs doesn't have file system cache,  so we only need
	 * to take care of shared buffer hit ratio
	 */</comment>
	<decl_stmt><decl><type><name>long</name></type> <name>cache_hit_ratio</name> <init>= <expr><call><name>PG_GETARG_FLOAT4</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>double</name></type> <name>bulk_read_lat</name></decl>, <decl><type ref="prev"/><name>random_read_lat</name></decl>, <decl><type ref="prev"/><name>shared_buf_lat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>random_page_cost</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * In case there are some remaining files in this backend, we remove it for now.
	 * like progrom raises ERROR between create file and clean files
	 */</comment>
	<expr_stmt><expr><call><name>polar_clean_sysstat_testfiles</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_allocate_file</name><argument_list>(<argument><expr><call><name>file_name_with_polardir</name><argument_list>(<argument><expr><name>test_data_file</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name>test_file_size</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>test_file_created</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_invalidate_device_cache</name><argument_list>(<argument><expr><name>device_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bulk_read_lat</name> <operator>=</operator> <call><name>polar_bulk_read_lat</name><argument_list>(<argument><expr><name>test_file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>random_read_lat</name> <operator>=</operator> <call><name>polar_random_rand_lat</name><argument_list>(<argument><expr><name>test_file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_clean_sysstat_testfiles</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>shared_buf_lat</name> <operator>=</operator> <call><name>polar_buffer_cache_lat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>random_page_cost</name> <operator>=</operator> <call><name>get_real_lat</name><argument_list>(<argument><expr><name>cache_hit_ratio</name></expr></argument>, <argument><expr><name>random_read_lat</name></expr></argument>, <argument><expr><name>shared_buf_lat</name></expr></argument>)</argument_list></call>
		<operator>/</operator> <call><name>get_real_lat</name><argument_list>(<argument><expr><name>cache_hit_ratio</name></expr></argument>, <argument><expr><name>bulk_read_lat</name></expr></argument>, <argument><expr><name>shared_buf_lat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>bulk_read_lat</name> <operator>&gt;</operator> <name>random_read_lat</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Average bulk read latency %f is greater than single random read latency %f"</literal></expr></argument>,
			 <argument><expr><name>bulk_read_lat</name></expr></argument>,
			 <argument><expr><name>random_read_lat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/*
	 * This algorithm is still in testing stage, so no worth to provide
	 * very friendly interface for now.
	 */</comment>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"use SELECT ((1 - cache_hit_ratio) * %f + cache_hit_ratio * %f) / ((1 - cache_hit_ratio) * %f + cache_hit_ratio * %f\n to get random_page_cost with different cache hit ratio.)"</literal></expr></argument>,
		 <argument><expr><name>random_read_lat</name></expr></argument>,
		 <argument><expr><name>shared_buf_lat</name></expr></argument>,
		 <argument><expr><name>bulk_read_lat</name></expr></argument>,
		 <argument><expr><name>shared_buf_lat</name></expr></argument>
		)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>Float8GetDatum</name><argument_list>(<argument><expr><name>random_page_cost</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_allocate_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>file_created</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>blksz</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>blksz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>current_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<comment type="block">/* Race condition safe */</comment>
	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>polar_open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr></argument> , <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"open file %s failed: %s."</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>file_created</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>polar_write</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blksz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"write file %s failed: %s."</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>current_size</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
	</block_content>}</block> while<condition>(<expr><name>current_size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>;</do>
	<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_invalidate_device_cache</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>device_cache_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>device_cache_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_allocate_file</name><argument_list>(<argument><expr><call><name>file_name_with_polardir</name><argument_list>(<argument><expr><name>device_cache_invalid_file</name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name>device_cache_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_file_created</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>long</name></type>
<name>polar_get_time_diff</name><parameter_list>(<parameter><decl><type><name>TimestampTz</name></type> <name>start_tm</name></decl></parameter>,  <parameter><decl><type><name>TimestampTz</name></type> <name>end_tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>secs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>microsecs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>TimestampDifference</name><argument_list>(<argument><expr><name>start_tm</name></expr></argument>, <argument><expr><name>end_tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>secs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>microsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <name>secs</name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <name>microsecs</name></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type>
<name>polar_bulk_read_lat</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>file_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>current_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>seq_buf_len</name> <init>= <expr><ternary><condition><expr><name>polar_bulk_read_size</name></expr> ?</condition><then>
		<expr><name>polar_bulk_read_size</name> <operator>*</operator> <name>BLCKSZ</name></expr> </then><else>: <expr><name>BLCKSZ</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_read_buf</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>seq_buf_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>start_tm</name></decl>, <decl><type ref="prev"/><name>end_tm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>file</name> <init>= <expr><call><name>polar_open</name><argument_list>(<argument><expr><name>test_data_file</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Open test file %s failed."</literal></expr></argument>, <argument><expr><name>test_data_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>start_tm</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>polar_read</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>seq_read_buf</name></expr></argument>, <argument><expr><name>seq_buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"READ test file %s failed."</literal></expr></argument>, <argument><expr><name>test_data_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Reach EOF unexpectedly. Current size: %ld  Expected Size: %ld"</literal></expr></argument>,
				 <argument><expr><name>current_size</name></expr></argument>,
				 <argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>current_size</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>current_size</name> <operator>&lt;</operator> <name>file_size</name></expr>)</condition>;</do>
	<expr_stmt><expr><name>end_tm</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>polar_get_time_diff</name><argument_list>(<argument><expr><name>start_tm</name></expr></argument>, <argument><expr><name>end_tm</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><operator>(</operator><name>file_size</name> <operator>/</operator> <name>BLCKSZ</name><operator>)</operator> <operator>*</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type>
<name>polar_random_rand_lat</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>file_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>current_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>start_tm</name></decl>, <decl><type ref="prev"/><name>end_tm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>file</name> <init>= <expr><call><name>polar_open</name><argument_list>(<argument><expr><name>test_data_file</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Open test file %s failed."</literal></expr></argument>, <argument><expr><name>test_data_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>start_tm</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
			<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>file_size</name> <operator>/</operator> <name>BLCKSZ</name><operator>)</operator> <operator>*</operator> <name>BLCKSZ</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>polar_enable_pread</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>polar_pread</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>polar_lseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>offset</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not seek to offset %lu in file \"%s\": %m"</literal></expr></argument>,
									<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>test_data_file</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>polar_read</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"random read failed. offset : %ld"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"reach to EOF unexpected. offset %ld, filesize: %ld"</literal></expr></argument>,
					 <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>current_size</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>current_size</name> <operator>&lt;</operator> <name>file_size</name></expr>)</condition>;</do>
	<expr_stmt><expr><name>end_tm</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>polar_get_time_diff</name><argument_list>(<argument><expr><name>start_tm</name></expr></argument>, <argument><expr><name>end_tm</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><operator>(</operator><name>file_size</name> <operator>/</operator> <name>BLCKSZ</name><operator>)</operator> <operator>*</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_clean_sysstat_testfiles</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>test_file_created</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_unlink</name><argument_list>(<argument><expr><call><name>file_name_with_polardir</name><argument_list>(<argument><expr><name>test_data_file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>test_file_created</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>dummy_file_created</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_unlink</name><argument_list>(<argument><expr><call><name>file_name_with_polardir</name><argument_list>(<argument><expr><name>device_cache_invalid_file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dummy_file_created</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_read_rel_1st_block</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>reln</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name></type> <name>buf</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RelationOpenSmgr</name><argument_list>(<argument><expr><name>reln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ReadBufferExtended</name><argument_list>(<argument><expr><name>reln</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RBM_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RelationCloseSmgr</name><argument_list>(<argument><expr><name>reln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type>
<name>polar_buffer_cache_lat</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type> <name>pg_class_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>loops</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>start_tm</name></decl>, <decl><type ref="prev"/><name>end_tm</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pg_class_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>RelationRelationId</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_read_rel_1st_block</name><argument_list>(<argument><expr><name>pg_class_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>start_tm</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>loops</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_read_rel_1st_block</name><argument_list>(<argument><expr><name>pg_class_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>end_tm</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>pg_class_rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>polar_get_time_diff</name><argument_list>(<argument><expr><name>start_tm</name></expr></argument>, <argument><expr><name>end_tm</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>loops</name> <operator>*</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type>
<name>get_real_lat</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>cache_hit_ratio</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>disk_lat</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>cache_lat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>cache_hit_ratio</name> <operator>*</operator> <name>cache_lat</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>cache_hit_ratio</name><operator>)</operator> <operator>*</operator> <name>disk_lat</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>file_name_with_polardir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>s</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>,
					 <argument><expr><ternary><condition><expr><call><name>POLAR_FILE_IN_SHARED_STORAGE</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>polar_datadir</name></expr> </then><else>: <expr><name>DataDir</name></expr></else></ternary></expr></argument>,
					 <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
