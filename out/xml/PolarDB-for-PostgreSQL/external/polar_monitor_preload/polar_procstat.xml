<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/external/polar_monitor_preload/polar_procstat.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * procstat.c
 *
 * Copyright (c) 2021, Alibaba Group Holding Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *	IDENTIFICATION
 *		external/polar_monitor_preload/polar_procstat.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_procstat.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXPATHLENGTH</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSTATLEN</name></cpp:macro>    <cpp:value>1024</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>delim</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPATHLENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>procbuf</name><index>[<expr><name>MAXSTATLEN</name></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>readone</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>curstr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>PROCARGTYPE</name></type> <name>argtype</name></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_proc_pid_stat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>polar_proc_stat</name> <modifier>*</modifier></type><name>prostat</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_proc_pid_statm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>polar_proc_stat</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>readone</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>curstr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>PROCARGTYPE</name></type> <name>argtype</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>savestr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok_r</name> <argument_list>(<argument><expr><name>curstr</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>savestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>token</name></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>argtype</name></expr>)</condition>
		<block>{<block_content>
		<case>case <expr><name>PROCINT</name></expr> :</case> 
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>PROCNUM</name></expr> :</case> 
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>num</name> <operator>*</operator><operator>)</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>num</name><operator>)</operator><call><name>atoll</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>PROCL</name></expr> :</case> 
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>atol</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>PROCLL</name></expr> :</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><call><name>atoll</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>PROCSTR</name></expr> :</case>
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>x</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>savestr</name><operator>-</operator><name>curstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>savestr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*  
 *  POLAR:
 * 	Parse a proc/[pid]/stat file 
 *  if return 1 ,not find stat file
 *  return 0, successful!
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_proc_pid_stat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>polar_proc_stat</name> <modifier>*</modifier></type><name>prostat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>curstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>tty_null</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 	<name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>input</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> ,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><literal type="string">"/proc/%d/stat"</literal></expr></argument>,<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>input</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>fread</name><argument_list>(<argument><expr><name>procbuf</name></expr></argument>, <argument><expr><name>MAXSTATLEN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
  		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>curstr</name> <operator>=</operator> <call><name>readone</name><argument_list>(<argument><expr><name>procbuf</name></expr></argument>, <argument><expr><name>tty_null</name></expr></argument>, <argument><expr><name>PROCSTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>curstr</name> <operator>=</operator> <call><name>readone</name><argument_list>(<argument><expr><name>curstr</name></expr></argument>, <argument><expr><name>tty_null</name></expr></argument>, <argument><expr><name>PROCSTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We don't need extra here */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>curstr</name> <operator>=</operator> <call><name>readone</name><argument_list>(<argument><expr><name>curstr</name></expr></argument>, <argument><expr><name>tty_null</name></expr></argument>, <argument><expr><name>PROCSTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><name>curstr</name> <operator>=</operator> <call><name>readone</name><argument_list>(<argument><expr><name>curstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prostat</name><operator>-&gt;</operator><name>utime</name></name></expr></argument>, <argument><expr><name>PROCNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>curstr</name> <operator>=</operator> <call><name>readone</name><argument_list>(<argument><expr><name>curstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prostat</name><operator>-&gt;</operator><name>stime</name></name></expr></argument>, <argument><expr><name>PROCNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>fclose</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*  
 *  POLAR:
 * 	Parse a proc/[pid]/statm file 
 *  if return 1 ,not find stat file
 *  return 0, successful!
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_proc_pid_statm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>polar_proc_stat</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>curstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>tty_null</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>input</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> ,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><literal type="string">"/proc/%d/statm"</literal></expr></argument>,<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>input</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>fread</name><argument_list>(<argument><expr><name>procbuf</name></expr></argument>, <argument><expr><name>MAXSTATLEN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
  		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>curstr</name> <operator>=</operator> <call><name>readone</name><argument_list>(<argument><expr><name>procbuf</name></expr></argument>, <argument><expr><name>tty_null</name></expr></argument>, <argument><expr><name>PROCSTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<expr_stmt><expr><name>curstr</name> <operator>=</operator> <call><name>readone</name><argument_list>(<argument><expr><name>curstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>rss</name></name></expr></argument>, <argument><expr><name>PROCNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>curstr</name> <operator>=</operator> <call><name>readone</name><argument_list>(<argument><expr><name>curstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>share</name></name></expr></argument>, <argument><expr><name>PROCNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
    <return>return <expr><call><name>fclose</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> 
<name>polar_get_proc_stat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>polar_proc_stat</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>parse_proc_pid_stat</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>parse_proc_pid_statm</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function></unit>
