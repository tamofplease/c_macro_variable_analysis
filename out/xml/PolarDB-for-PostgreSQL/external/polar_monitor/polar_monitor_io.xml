<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/external/polar_monitor/polar_monitor_io.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_io_view.c
 *    views of polardb io stat
 *
 * Copyright (c) 2021, Alibaba Group Holding Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *    external/polar_monitor/polar_monitor_io.c
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_monitor.h"</cpp:file></cpp:include>

<comment type="block">/* POLAR:  Static dictionary*/</comment>
<typedef>typedef <type><struct>struct 
<block>{
	<decl_stmt><decl><type><name><name>enum</name> <name>IOLatencyInterval</name></name></type> <name>latencyInterval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>latencyName</name></decl>;</decl_stmt>
}</block></struct></type><name>LatencyTuple</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier>  <name>LatencyTuple</name></type> <name><name>polar_latency_infos</name><index>[<expr><name>LATENCY_INTERVAL_LEN</name></expr>]</index></name> <init>= <expr><block>{
		<expr><block>{<expr><name>LATENCY_200</name></expr>,<expr><literal type="string">"LessThan200us"</literal></expr>}</block></expr>,<expr><block>{<expr><name>LATENCY_400</name></expr>,<expr><literal type="string">"LessThan400us"</literal></expr>}</block></expr>,
		<expr><block>{<expr><name>LATENCY_600</name></expr>,<expr><literal type="string">"LessThan600us"</literal></expr>}</block></expr>,<expr><block>{<expr><name>LATENCY_800</name></expr>,<expr><literal type="string">"LessThan800us"</literal></expr>}</block></expr>,
		<expr><block>{<expr><name>LATENCY_1ms</name></expr>,<expr><literal type="string">"LessThan1ms"</literal></expr>}</block></expr>,<expr><block>{<expr><name>LATENCY_10ms</name></expr>,<expr><literal type="string">"LessThan10ms"</literal></expr>}</block></expr>,
		<expr><block>{<expr><name>LATENCY_100ms</name></expr>,<expr><literal type="string">"LessThan100ms"</literal></expr>}</block></expr>,<expr><block>{<expr><name>LATENCY_OUT</name></expr>,<expr><literal type="string">"MoreThan100ms"</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> 	<name>char</name> <modifier>*</modifier></type><name><name>polar_dir_type_names</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"WAL"</literal></expr>,<expr><literal type="string">"DATA"</literal></expr>,<expr><literal type="string">"CLOG"</literal></expr>,<expr><literal type="string">"global"</literal></expr>,<expr><literal type="string">"logindex"</literal></expr>,<expr><literal type="string">"multixact"</literal></expr>,
		<expr><literal type="string">"twophase"</literal></expr>,<expr><literal type="string">"replslot"</literal></expr>,<expr><literal type="string">"snapshots"</literal></expr>,<expr><literal type="string">"subtrans"</literal></expr>,<expr><literal type="string">"others"</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier>	<name>char</name> <modifier>*</modifier></type><name><name>polar_io_type_names</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"read"</literal></expr>,<expr><literal type="string">"write"</literal></expr>,<expr><literal type="string">"open"</literal></expr>,<expr><literal type="string">"seek"</literal></expr>,<expr><literal type="string">"creat"</literal></expr>,
		<expr><literal type="string">"fsync"</literal></expr>,<expr><literal type="string">"falloc"</literal></expr>,<expr><literal type="string">"others"</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* POLAR end*/</comment>

<comment type="block">/* POLAR : io stat for polar_monitor */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_polar_proc_iostat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>backendid</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/* POLAR End */</comment>

<comment type="block">/*
 * POLAR: return the IO stat info ever backend and auxiliary  process
 */</comment>
<function><type><name>Datum</name></type>
<name>polar_stat_process</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_STAT_GET_POLAR_PROCESS_COLS</name></cpp:macro>	<cpp:value>20</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>int</name></type>			<name>num_backends</name> <init>= <expr><call><name>pgstat_fetch_stat_numbackends</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>curr_backend</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cols</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>per_query_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	
	<comment type="block">/* check to see if caller supports us returning a tuplestore */</comment>
	<if_stmt><if>if <condition>(<expr><name>rsinfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>rsinfo</name></expr></argument>, <argument><expr><name>ReturnSetInfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"set-valued function called in context that cannot accept a set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rsinfo</name><operator>-&gt;</operator><name>allowedModes</name></name> <operator>&amp;</operator> <name>SFRM_Materialize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"materialize mode required, but it is not "</literal> \
						<literal type="string">"allowed in this context"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Build a tuple descriptor for our result type */</comment>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>PG_STAT_GET_POLAR_PROCESS_COLS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>,
						<argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"wait_object"</literal></expr></argument>,
						<argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"wait_time(ms)"</literal></expr></argument>,
						<argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"cpu_user"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"cpu_sys"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"rss"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"shared_read_ps"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"shared_write_ps"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"shared_read_throughput"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"shared_write_throughput"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"shared_read_latency(ms)"</literal></expr></argument>,
						<argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"shared_wirte_latency(ms)"</literal></expr></argument>,
						<argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"local_read_ps"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"local_write_ps"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"local_read_throughput"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"local_write_throughput"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"local_read_latency(ms)"</literal></expr></argument>,
						<argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"local_wirte_latency(ms)"</literal></expr></argument>,
						<argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"wait_type"</literal></expr></argument>,
						<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"queryid"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>per_query_ctx</name> <operator>=</operator> <name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>per_query_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tupstore</name> <operator>=</operator> <call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* 1-based index */</comment>
	<for>for <control>(<init><expr><name>curr_backend</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>curr_backend</name> <operator>&lt;=</operator> <name>num_backends</name></expr>;</condition> <incr><expr><name>curr_backend</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* for each row */</comment>
		<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>PG_STAT_GET_POLAR_PROCESS_COLS</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>PG_STAT_GET_POLAR_PROCESS_COLS</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>volatile</specifier> <name>PGPROC</name>	   	<modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LocalPgBackendStatus</name> <modifier>*</modifier></type><name>local_beentry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PgBackendStatus</name> <modifier>*</modifier></type><name>beentry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>polar_proc_stat</name></type> <name>procstat</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> 	<name>cur_wait_stack_index</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>		<name>cur_collect_type</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>     <name>cur_collect_object</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>instr_time</name></type> 	<name>cur_collect_time</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>instr_time</name></type> 	<name>wait_time</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>procstat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>procstat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>cur_collect_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cur_wait_stack_index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cur_collect_object</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cur_collect_type</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

		<comment type="block">/* Get the next one in the list */</comment>
		<expr_stmt><expr><name>local_beentry</name> <operator>=</operator> <call><name>pgstat_fetch_stat_local_beentry</name><argument_list>(<argument><expr><name>curr_backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local_beentry</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<comment type="block">/* Ignore missing entries if looking for specific PID */</comment>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>beentry</name> <operator>=</operator> <operator>&amp;</operator><name><name>local_beentry</name><operator>-&gt;</operator><name>backendStatus</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>beentry</name><operator>-&gt;</operator><name>st_procpid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>beentry</name><operator>-&gt;</operator><name>queryid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>BackendPidGetProc</name><argument_list>(<argument><expr><name><name>beentry</name><operator>-&gt;</operator><name>st_procpid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>beentry</name><operator>-&gt;</operator><name>st_backendType</name></name> <operator>!=</operator> <name>B_BACKEND</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			* For an auxiliary process, retrieve process info from
			* AuxiliaryProcs stored in shared-memory.
			*/</comment>
			<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>AuxiliaryPidGetProc</name><argument_list>(<argument><expr><name><name>beentry</name><operator>-&gt;</operator><name>st_procpid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* wait_object and wait_time */</comment>
		<if_stmt><if>if <condition>(<expr><name>proc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>cur_wait_stack_index</name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>cur_wait_stack_index</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>cur_wait_stack_index</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>cur_wait_stack_index</name></expr></argument> &gt;</argument_list></name> <literal type="number">3</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				
				<expr_stmt><expr><name>cur_collect_object</name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>wait_object</name><index>[<expr><name><name>proc</name><operator>-&gt;</operator><name>cur_wait_stack_index</name></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cur_collect_type</name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>wait_type</name><index>[<expr><name><name>proc</name><operator>-&gt;</operator><name>cur_wait_stack_index</name></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name>cur_collect_time</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>wait_time</name><index>[<expr><name><name>proc</name><operator>-&gt;</operator><name>cur_wait_stack_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>INSTR_TIME_IS_ZERO</name><argument_list>(<argument><expr><name>cur_collect_time</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>wait_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>INSTR_TIME_SUBTRACT</name><argument_list>(<argument><expr><name>wait_time</name></expr></argument>, <argument><expr><name>cur_collect_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>cur_collect_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MILLISEC</name><argument_list>(<argument><expr><name>wait_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<switch>switch <condition>(<expr><name>cur_collect_type</name></expr>)</condition>
					<block>{<block_content>
					<case>case <expr><name>PGPROC_WAIT_PID</name></expr>:</case>
						<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">"pid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>PGPROC_WAIT_FD</name></expr>:</case>
						<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">"fd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">"unknow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></switch>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* HOW: 
		 * CPU info  
		 */</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>polar_get_proc_stat</name><argument_list>(<argument><expr><name><name>beentry</name><operator>-&gt;</operator><name>st_procpid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>procstat</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>procstat</name><operator>.</operator><name>utime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>procstat</name><operator>.</operator><name>stime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>procstat</name><operator>.</operator><name>rss</name></name> <operator>-</operator> <name><name>procstat</name><operator>.</operator><name>share</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*no cover begin*/</comment>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<comment type="block">/*no cover end*/</comment>
		</block_content>}</block></else></if_stmt>
		<comment type="block">/*IO inof 6~11*/</comment>
		<expr_stmt><expr><call><name>set_polar_proc_iostat</name><argument_list>(<argument><expr><name><name>beentry</name><operator>-&gt;</operator><name>backendid</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* clean up and return the tuplestore */</comment>
	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: It seems stupid to write like this, but there is no other way.
 * Extract the information of PROC into Datum
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_polar_proc_iostat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>backendid</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> 			<name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>cols</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> 			<name>shared_read_ps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> 			<name>shared_write_ps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>			<name>shared_read_throughput</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>			<name>shared_write_throughput</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>instr_time</name></type>		<name>shared_read_latency</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>instr_time</name></type>		<name>shared_write_latency</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> 			<name>local_read_ps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> 			<name>local_write_ps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>			<name>local_read_throughput</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>			<name>local_write_throughput</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>instr_time</name></type>		<name>local_read_latency</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>instr_time</name></type>		<name>local_write_latency</name></decl> ;</decl_stmt>
	
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>shared_read_latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>shared_write_latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>local_read_latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_SET_ZERO</name><argument_list>(<argument><expr><name>local_write_latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Each process accumulates itâs file type by file location */</comment>
	<if_stmt><if>if <condition>(<expr><name>PolarIOStatArray</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>POLARIO_TYPE_SIZE</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>local_read_ps</name> <operator>+=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_number_read</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>local_write_ps</name> <operator>+=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_number_write</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>local_read_throughput</name> <operator>+=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_throughtput_read</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>local_write_throughput</name> <operator>+=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_throughtput_write</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name>local_read_latency</name></expr></argument>, <argument><expr><name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_latency_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name>local_write_latency</name></expr></argument>, <argument><expr><name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_latency_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>shared_read_ps</name> <operator>+=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_number_read</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>shared_write_ps</name> <operator>+=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_number_write</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>shared_read_throughput</name> <operator>+=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_throughtput_read</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>shared_write_throughput</name> <operator>+=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_throughtput_write</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name>shared_read_latency</name></expr></argument>, <argument><expr><name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_latency_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INSTR_TIME_ADD</name><argument_list>(<argument><expr><name>shared_write_latency</name></expr></argument>, <argument><expr><name><name>PolarIOStatArray</name><index>[<expr><name>backendid</name></expr>]</index></name><operator>.</operator><name><name>polar_proc_io_stat_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_latency_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* pfs iops */</comment>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>shared_read_ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>shared_write_ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* pfs io throughput */</comment>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>shared_read_throughput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>shared_write_throughput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* pfs io latency */</comment>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MILLISEC</name><argument_list>(<argument><expr><name>shared_read_latency</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MILLISEC</name><argument_list>(<argument><expr><name>shared_write_latency</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* local iops */</comment>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>local_read_ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>local_write_ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* local io throughput */</comment>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>local_read_throughput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>local_write_throughput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* local io latency */</comment>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MILLISEC</name><argument_list>(<argument><expr><name>local_read_latency</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MILLISEC</name><argument_list>(<argument><expr><name>local_write_latency</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*no cover begin*/</comment>
		<for>for <control>(<init><expr><name>cols</name> <operator>=</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>cols</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>cols</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>cols</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></for>
		<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></else></if_stmt>
	
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: return the IO stat info ever flie type
 */</comment>
<function><type><name>Datum</name></type>
<name>polar_stat_io_info</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLARIOSTATSIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>int</name></type>         	<name>curr_backend</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  			<name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>cols</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>per_query_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>PolarProcIOStat</name> <argument_list>(<argument><expr><operator>*</operator><name>cur_polar_proc_io_stat</name></expr></argument>)</argument_list></call><index>[<expr><name>POLARIO_LOC_SIZE</name></expr>]</index></expr>;</expr_stmt>

	<comment type="block">/* check to see if caller supports us returning a tuplestore */</comment>
	<if_stmt><if>if <condition>(<expr><name>rsinfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>rsinfo</name></expr></argument>, <argument><expr><name>ReturnSetInfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"set-valued function called in context that cannot accept a set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rsinfo</name><operator>-&gt;</operator><name>allowedModes</name></name> <operator>&amp;</operator> <name>SFRM_Materialize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"materialize mode required, but it is not "</literal> \
						<literal type="string">"allowed in this context"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>POLARIOSTATSIZE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>,
						<argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"FileType"</literal></expr></argument>,
						<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"FileLocation"</literal></expr></argument>,
						<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"open_count"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"open_latency"</literal></expr></argument>,
						<argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"close_count"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"read_count"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"write_count"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"read_throughput"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"write_throughput"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"read_latency"</literal></expr></argument>,
						<argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"write_latency"</literal></expr></argument>,
						<argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"seek_count"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"seek_latency"</literal></expr></argument>,
						<argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"creat_count"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"creat_latency"</literal></expr></argument>,
						<argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"fsync_count"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"fsync_latency"</literal></expr></argument>,
						<argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"falloc_count"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"falloc_latency"</literal></expr></argument>,
						<argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>per_query_ctx</name> <operator>=</operator> <name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>per_query_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tupstore</name> <operator>=</operator> <call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PolarIOStatArray</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Io statistics is unavailable!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* 1-based index */</comment>
	<for>for <control>(<init><expr><name>curr_backend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>curr_backend</name> <operator>&lt;</operator> <name>PolarNumProcIOStatSlots</name></expr>;</condition> <incr><expr><name>curr_backend</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>cur_pid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Get the next one in the list */</comment>
		<expr_stmt><expr><name>cur_pid</name> <operator>=</operator> <ternary><condition><expr><name>curr_backend</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>PolarIOStatArray</name><index>[<expr><name>curr_backend</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>curr_backend</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cur_pid</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>cur_polar_proc_io_stat</name> <operator>=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>curr_backend</name></expr>]</index></name><operator>.</operator><name>polar_proc_io_stat_dist</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>POLARIO_TYPE_SIZE</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="block">/* for each row */</comment>
			<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>POLARIOSTATSIZE</name></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>POLARIOSTATSIZE</name></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>instr_time</name></type> <name>tmptime</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_open_num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*no cover begin*/</comment>
				<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmptime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmptime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<comment type="block">/* pid*/</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>cur_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* FileType */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>polar_dir_type_names</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* File Location */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">"pfs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* open_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_open_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* open_latency */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_open_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* close_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_close_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* read_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_number_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* write_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_number_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* read_throughput */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_throughtput_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* wirte_throughput */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_throughtput_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* read_latency */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_latency_read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* write_latency */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_latency_write</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* seek_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_seek_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* seek_latency */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_seek_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* creat_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_creat_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* creat_latency */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_creat_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* fsync_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_fsync_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* fsync_latency */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_fsync_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* falloc_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_falloc_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* falloc_latency */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_SHARED</name></expr>]</index></name><operator>.</operator><name>io_falloc_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/*no cover end*/</comment>
			</block_content>}</block></if></if_stmt>
			
			<if_stmt><if>if <condition>(<expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_open_num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmptime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmptime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<comment type="block">/* pid*/</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>cur_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* FileType */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>polar_dir_type_names</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* File Location */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* open_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_open_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* open_latency */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_open_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* close_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_close_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* read_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_number_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* write_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_number_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* read_throughput */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_throughtput_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* wirte_throughput */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_throughtput_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* read_latency */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_latency_read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* write_latency */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_latency_write</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* seek_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_seek_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* seek_latency */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_seek_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* creat_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_creat_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* creat_latency */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_creat_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* fsync_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_fsync_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* fsync_latency */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_fsync_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* falloc_count */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_falloc_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* falloc_latency */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cols</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name><name>cur_polar_proc_io_stat</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>POLARIO_LOCAL</name></expr>]</index></name><operator>.</operator><name>io_falloc_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<comment type="block">/* clean up and return the tuplestore */</comment>
	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * return the IO stat info ever flie type
 */</comment>
<function><type><name>Datum</name></type>
<name>polar_io_latency_info</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>         	<name>curr_backend</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  			<name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>per_query_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>uint64</name> <argument_list>(<argument><expr><operator>*</operator><name>cur_num_latency_dist</name></expr></argument>)</argument_list></call><index>[<expr><name>LATENCY_INTERVAL_LEN</name></expr>]</index></expr>;</expr_stmt>

	<comment type="block">/* check to see if caller supports us returning a tuplestore */</comment>
	<if_stmt><if>if <condition>(<expr><name>rsinfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>rsinfo</name></expr></argument>, <argument><expr><name>ReturnSetInfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"set-valued function called in context that cannot accept a set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rsinfo</name><operator>-&gt;</operator><name>allowedModes</name></name> <operator>&amp;</operator> <name>SFRM_Materialize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"materialize mode required, but it is not "</literal> \
						<literal type="string">"allowed in this context"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>LATENCY_INTERVAL_LEN</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>,
						<argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"IOKind"</literal></expr></argument>,
						<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition><expr><name>index</name> <operator>&lt;</operator> <name>LATENCY_INTERVAL_LEN</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal><operator>+</operator><name>index</name></expr></argument>, <argument><expr><name><name>polar_latency_infos</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>latencyName</name></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>per_query_ctx</name> <operator>=</operator> <name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>per_query_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tupstore</name> <operator>=</operator> <call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PolarIOStatArray</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Io statistics is unavailable!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* 1-based index */</comment>
	<for>for <control>(<init><expr><name>curr_backend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>curr_backend</name> <operator>&lt;=</operator> <name>PolarNumProcIOStatSlots</name></expr>;</condition> <incr><expr><name>curr_backend</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> 		<name>cur_pid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Get the next one in the list */</comment>
		<expr_stmt><expr><name>cur_pid</name> <operator>=</operator> <ternary><condition><expr><name>curr_backend</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>PolarIOStatArray</name><index>[<expr><name>curr_backend</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>curr_backend</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cur_pid</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>cur_num_latency_dist</name> <operator>=</operator> <name><name>PolarIOStatArray</name><index>[<expr><name>curr_backend</name></expr>]</index></name><operator>.</operator><name>num_latency_dist</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>LATENCY_KIND_LEN</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="block">/* for each row */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>cur</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>LATENCY_INTERVAL_LEN</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>LATENCY_INTERVAL_LEN</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>	
			<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>cur_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>polar_io_type_names</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cur</name> <operator>&lt;</operator> <name>LATENCY_INTERVAL_LEN</name></expr>;</condition> <incr><expr><name>cur</name> <operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>cur</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>cur_num_latency_dist</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name><name>polar_latency_infos</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>latencyInterval</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		
            <expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<comment type="block">/* clean up and return the tuplestore */</comment>
	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* POLAR: io read info time */</comment>
<function><type><name>Datum</name></type>
<name>polar_io_read_delta_info</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IO_READ_DELTA_INFO_LEN</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>per_query_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>IO_READ_DELTA_INFO_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>IO_READ_DELTA_INFO_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>top_throughtput</name><index>[<expr><name>POLAR_PROC_GLOBAL_IO_READ_LEN</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* check to see if caller supports us returning a tuplestore */</comment>
	<if_stmt><if>if <condition>(<expr><name>rsinfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>rsinfo</name></expr></argument>, <argument><expr><name>ReturnSetInfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"set-valued function called in context that cannot accept a set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rsinfo</name><operator>-&gt;</operator><name>allowedModes</name></name> <operator>&amp;</operator> <name>SFRM_Materialize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"materialize mode required, but it is not "</literal> \
						<literal type="string">"allowed in this context"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>IO_READ_DELTA_INFO_LEN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>,
						<argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"force_delay_times"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"less_than_delay_times"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"more_than_delay_times"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"read_size_avg"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"read_time_avg"</literal></expr></argument>,
						<argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"current_throughtput"</literal></expr></argument>,
						<argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"max_throughtput"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"user_set_throughtput"</literal></expr></argument>,
						<argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>cols</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"top_throughtput"</literal></expr></argument>,
						<argument><expr><name>INT8ARRAYOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>per_query_ctx</name> <operator>=</operator> <name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>per_query_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tupstore</name> <operator>=</operator> <call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>IO_READ_DELTA_INFO_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>IO_READ_DELTA_INFO_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>top_throughtput</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>POLAR_PROC_GLOBAL_IO_READ_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>UInt64GetDatum</name><argument_list>(<argument><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>force_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>UInt64GetDatum</name><argument_list>(<argument><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>less_than_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>UInt64GetDatum</name><argument_list>(<argument><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>more_than_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>UInt64GetDatum</name><argument_list>(<argument><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>io_read_size_avg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>io_read_time_avg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>io_read_size_avg</name></name> <operator>/</operator> <name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>io_read_time_avg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>UInt64GetDatum</name><argument_list>(<argument><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>max_throughtput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>polar_io_read_throughtput_userset</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>POLAR_PROC_GLOBAL_IO_READ_LEN</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>io_read_throughtput</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>top_throughtput</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>UInt64GetDatum</name><argument_list>(<argument><expr><name><name>PolarGlobalIOReadStats</name><operator>-&gt;</operator><name>io_read_throughtput</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>construct_array</name><argument_list>(<argument><expr><name>top_throughtput</name></expr></argument>,
												  <argument><expr><name>j</name></expr></argument>,
												  <argument><expr><name>INT8OID</name></expr></argument>,
												  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>FLOAT8PASSBYVAL</name></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* clean up and return the tuplestore */</comment>
	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
