<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/external/polar_monitor/polar_monitor_cgroup.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_monitor_cgroup.c
 *    views of polardb control group
 *
 * Copyright (c) 2021, Alibaba Group Holding Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *    external/polar_monitor/polar_monitor_cgroup.c
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_monitor.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LINE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64</name></type> <name>S_2_NS</name> <init>= <expr><literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64</name></type> <name>UNDEFINED_VALUE</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64</name></type> <name>NOT_RESTRICTION_VALUE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>rel_path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>base_path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/*
 * Declarations
 */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_various_tuple</name><parameter_list>(<parameter><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tdesc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sqltype</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>cmdtype</name></decl></parameter>,
					 <parameter><decl><type><name>int64</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>array_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_cpu_usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_cpu_user</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_cpu_system</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_mem_usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_huge_in_bytes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_io_serviced</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_io_service_bytes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_mem_tuples</name><parameter_list>(<parameter><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tdesc</name></decl></parameter>, 
							<parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>array_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_value_from_file</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_value_from_last_line</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_value_from_key</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_value_from_blkio</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_value_from_cpus</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_number</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_next_num</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_memory_limit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_read_bps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_read_iops</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_write_bps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_write_iops</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_cfs_period</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_cfs_quota</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_rt_period</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_rt_runtime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_cpus</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>get_relative_path</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>subsystem</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>get_base_path</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_base_path</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>basepath</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>get_ratio_user_hz_2_ns</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Add various query type to tuple.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_various_tuple</name><parameter_list>(<parameter><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tdesc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>subtype</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>infotype</name></decl></parameter>,
					 <parameter><decl><type><name>int64</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>array_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>UNDEFINED_VALUE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Get invalid value from %s.%s, check whether the file exist"</literal></expr></argument>, <argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>infotype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>array_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>array_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>col</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>col</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>infotype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>col</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Use this function when we want to obtain content with pattern: [%ld] in file
 */</comment>
<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_value_from_file</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>int64</name></type> <name>value</name> <init>= <expr><name>UNDEFINED_VALUE</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>value</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Use this function when we want to obtain content with pattern: [%s %ld] in last line
 */</comment>
<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_value_from_last_line</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>value</name> <init>= <expr><name>UNDEFINED_VALUE</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>value</name></expr>;</return></block_content></block></if></if_stmt>
	<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
	<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s %ld"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Use this function when we want to obtain content with pattern: [%s %ld] in line
 */</comment>
<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_value_from_key</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>value</name> <init>= <expr><name>UNDEFINED_VALUE</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>value</name></expr>;</return></block_content></block></if></if_stmt>
	<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s %ld"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Use this function when we want to obtain content with pattern: [%ld:%ld %ld] in line
 */</comment>
<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_value_from_blkio</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>master</name> <init>= <expr><name>UNDEFINED_VALUE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>slave</name> <init>= <expr><name>UNDEFINED_VALUE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>quato</name> <init>= <expr><name>UNDEFINED_VALUE</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>quato</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* if the file is empty, there is no restriction */</comment>
	<expr_stmt><expr><name>quato</name> <operator>=</operator> <name>NOT_RESTRICTION_VALUE</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld:%ld %ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>master</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slave</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>quato</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>quato</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * A helper function to judge whether a char is bwtween '0' and '9'
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_number</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * A helper function to parse the next number in string.
 * After paring, pos move to next position.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_next_num</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><operator>*</operator><name>pos</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><name><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cur_num</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>is_number</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cur_num</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>sum</name> <operator>=</operator> <name>sum</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>cur_num</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
	<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * A simple parser to calculate the number that represent in file with pattern: [digit digit-digit],*[digit digit-digit]
 * eg: For "0-3,5,7-10", we should return 9.
 * Time Complexity: O(n)
 */</comment>
<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_value_from_cpus</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>count</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>eNum</name></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>len</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>bNum</name> <init>= <expr><call><name>get_next_num</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>++</operator><name>pos</name></expr>;</expr_stmt>
			</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>++</operator><name>pos</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>eNum</name> <operator>=</operator> <call><name>get_next_num</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>eNum</name> <operator>-</operator> <name>bNum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><operator>++</operator><name>pos</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type> 
<name>get_cpu_usage</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%scpu/cpuacct.usage"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_ratio_user_hz_2_ns</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type> <name>ticks</name> <init>= <expr><call><name>sysconf</name><argument_list>( <argument><expr><name>_SC_CLK_TCK</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>S_2_NS</name> <operator>/</operator> <name>ticks</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_cpu_user</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>user_value</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%scpu/cpuacct.stat"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>user_value</name> <operator>=</operator> <call><name>get_value_from_key</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>user_value</name> <operator>*=</operator> <call><name>get_ratio_user_hz_2_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>user_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_cpu_system</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>sys_value</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%scpu/cpuacct.stat"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_value</name> <operator>=</operator> <call><name>get_value_from_key</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_value</name> <operator>*=</operator> <call><name>get_ratio_user_hz_2_ns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>sys_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_mem_usage</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%smemory/memory.usage_in_bytes"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"memory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_huge_in_bytes</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%shugetlb/hugetlb.2MB.usage_in_bytes"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"hugetlb"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_io_serviced</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%sblkio/blkio.throttle.io_serviced"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"blkio"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_last_line</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_io_service_bytes</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%sblkio/blkio.throttle.io_service_bytes"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"blkio"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_last_line</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_memory_limit</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%smemory/memory.limit_in_bytes"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"memory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_read_bps</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%sblkio/blkio.throttle.read_bps_device"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"blkio"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_blkio</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_read_iops</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%sblkio/blkio.throttle.read_iops_device"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"blkio"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_blkio</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_write_bps</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%sblkio/blkio.throttle.write_bps_device"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"blkio"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_blkio</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_write_iops</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%sblkio/blkio.throttle.write_iops_device"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"blkio"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_blkio</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_cfs_period</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%scpu/cpu.cfs_period_us"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_cfs_quota</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%scpu/cpu.cfs_quota_us"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_rt_period</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%scpu/cpu.rt_period_us"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_rt_runtime</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%scpu/cpu.rt_runtime_us"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_cpus</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%scpu/cpuset.cpus"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_value_from_cpus</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type>
<name>get_base_path</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><name>base_path</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_base_path</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>basepath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>base_path</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>basepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get relative path from /proc/self/cgroup.
 * Return default value '/' if not found the subsystem in file.
 * Time Complexity: O(n)
 */</comment>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type>
<name>get_relative_path</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>subsystem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>p_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>subsystems</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/proc/self/cgroup"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="string">"/"</literal></expr>;</return></block_content></block></if></if_stmt>
	<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>is_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d:%[^:]:%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><name>subsystems</name></expr></argument>, <argument><expr><name>rel_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>subsystems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>subsystems</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>subsystems</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>p_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>subsystems</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>subsystems</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>subsystem</name></expr></argument>, <argument><expr><name>subsystems</name> <operator>+</operator> <name>p_start</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>is_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>p_start</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>is_found</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rel_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>rel_path</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>rel_path</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>rel_path</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="string">"/"</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Add all memory usage infos in file memroty.stat that with prefix 'total_'.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_mem_tuples</name><parameter_list>(<parameter><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tdesc</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, 
	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>array_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pattern</name> <init>= <expr><literal type="string">"total_"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>end_pos</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%smemory/memory.stat"</literal></expr></argument>, <argument><expr><call><name>get_base_path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>get_relative_path</name><argument_list>(<argument><expr><literal type="string">"memory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to open memory.stat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>	
	
	<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s %ld"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>str</name><index>[<expr><name>end_pos</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>str</name><index>[<expr><name>end_pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>str</name><index>[<expr><name>end_pos</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tdesc</name></expr></argument>, <argument><expr><literal type="string">"memory"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>,
					 <argument><expr><name>value</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>array_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>polar_stat_cgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
 * Collect the cgroup info for creating the view.
 */</comment>
<function><type><name>Datum</name></type>
<name>polar_stat_cgroup</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_STAT_CGROUP_COLS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>int</name></type>  			<name>index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>per_query_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>POLAR_STAT_CGROUP_COLS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>POLAR_STAT_CGROUP_COLS</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* check to see if caller supports us returning a tuplestore */</comment>
	<if_stmt><if>if <condition>(<expr><name>rsinfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>rsinfo</name></expr></argument>, <argument><expr><name>ReturnSetInfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"set-valued function called in context that cannot accept a set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rsinfo</name><operator>-&gt;</operator><name>allowedModes</name></name> <operator>&amp;</operator> <name>SFRM_Materialize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"materialize mode required, but it is not "</literal> \
						<literal type="string">"allowed in this context"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>POLAR_STAT_CGROUP_COLS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>index</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"sub_type"</literal></expr></argument>,
						<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>index</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"info_type"</literal></expr></argument>,
						<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>					
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>index</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>per_query_ctx</name> <operator>=</operator> <name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>per_query_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tupstore</name> <operator>=</operator> <call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>set_base_path</name><argument_list>(<argument><expr><literal type="string">"/sys/fs/cgroup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* cpu */</comment>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"cpu"</literal></expr></argument>, <argument><expr><literal type="string">"cpuacct.usage"</literal></expr></argument>,
					 <argument><expr><call><name>get_cpu_usage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_STAT_CGROUP_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"cpu"</literal></expr></argument>, <argument><expr><literal type="string">"cpuacct.stat.user"</literal></expr></argument>,
					 <argument><expr><call><name>get_cpu_user</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_STAT_CGROUP_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"cpu"</literal></expr></argument>, <argument><expr><literal type="string">"cpuacct.stat.system"</literal></expr></argument>,
					 <argument><expr><call><name>get_cpu_system</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_STAT_CGROUP_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* memory */</comment>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"memory"</literal></expr></argument>, <argument><expr><literal type="string">"memory.usage_in_bytes"</literal></expr></argument>,
					 <argument><expr><call><name>get_mem_usage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_STAT_CGROUP_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_mem_tuples</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_STAT_CGROUP_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* huge page */</comment>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"hugepage"</literal></expr></argument>, <argument><expr><literal type="string">"hugetlb.2MB.usage_in_bytes"</literal></expr></argument>,
					 <argument><expr><call><name>get_huge_in_bytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_STAT_CGROUP_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* io */</comment>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"io"</literal></expr></argument>, <argument><expr><literal type="string">"blkio.throttle.io_serviced"</literal></expr></argument>,
					 <argument><expr><call><name>get_io_serviced</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_STAT_CGROUP_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"io"</literal></expr></argument>, <argument><expr><literal type="string">"blkio.throttle.io_service_bytes"</literal></expr></argument>,
					 <argument><expr><call><name>get_io_service_bytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_STAT_CGROUP_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* clean up and return the tuplestore */</comment>
	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>polar_cgroup_quota</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
 * Collect the cgroup quota info for creating the view.
 */</comment>
<function><type><name>Datum</name></type>
<name>polar_cgroup_quota</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_CGROUP_QUOTA_COLS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>int</name></type>  			<name>index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>per_query_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>POLAR_CGROUP_QUOTA_COLS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>POLAR_CGROUP_QUOTA_COLS</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* check to see if caller supports us returning a tuplestore */</comment>
	<if_stmt><if>if <condition>(<expr><name>rsinfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>rsinfo</name></expr></argument>, <argument><expr><name>ReturnSetInfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"set-valued function called in context that cannot accept a set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rsinfo</name><operator>-&gt;</operator><name>allowedModes</name></name> <operator>&amp;</operator> <name>SFRM_Materialize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"materialize mode required, but it is not "</literal> \
						<literal type="string">"allowed in this context"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>POLAR_CGROUP_QUOTA_COLS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>index</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"sub_type"</literal></expr></argument>,
						<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>index</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"info_type"</literal></expr></argument>,
						<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>					
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>index</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>per_query_ctx</name> <operator>=</operator> <name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>per_query_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tupstore</name> <operator>=</operator> <call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>set_base_path</name><argument_list>(<argument><expr><literal type="string">"/sys/fs/cgroup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* cpu */</comment>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"cpu"</literal></expr></argument>, <argument><expr><literal type="string">"cpu.cfs_period_us"</literal></expr></argument>,
					 <argument><expr><call><name>get_cfs_period</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_CGROUP_QUOTA_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"cpu"</literal></expr></argument>, <argument><expr><literal type="string">"cpu.cfs_quota_us"</literal></expr></argument>,
					 <argument><expr><call><name>get_cfs_quota</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_CGROUP_QUOTA_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"cpu"</literal></expr></argument>, <argument><expr><literal type="string">"cpu.rt_period_us"</literal></expr></argument>,
					 <argument><expr><call><name>get_rt_period</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_CGROUP_QUOTA_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"cpu"</literal></expr></argument>, <argument><expr><literal type="string">"cpu.rt_runtime_us"</literal></expr></argument>,
					 <argument><expr><call><name>get_rt_runtime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_CGROUP_QUOTA_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"cpu"</literal></expr></argument>, <argument><expr><literal type="string">"cpuset.cpus"</literal></expr></argument>,
					 <argument><expr><call><name>get_cpus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_CGROUP_QUOTA_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* memory */</comment>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"memory"</literal></expr></argument>, <argument><expr><literal type="string">"memory.limit_in_bytes"</literal></expr></argument>,
					 <argument><expr><call><name>get_memory_limit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_CGROUP_QUOTA_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* io */</comment>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"blkio"</literal></expr></argument>, <argument><expr><literal type="string">"throttle.read_bps_device"</literal></expr></argument>,
					 <argument><expr><call><name>get_read_bps</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_CGROUP_QUOTA_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"blkio"</literal></expr></argument>, <argument><expr><literal type="string">"throttle.read_iops_device"</literal></expr></argument>,
					 <argument><expr><call><name>get_read_iops</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_CGROUP_QUOTA_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"blkio"</literal></expr></argument>, <argument><expr><literal type="string">"throttle.write_bps_device"</literal></expr></argument>,
					 <argument><expr><call><name>get_write_bps</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_CGROUP_QUOTA_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_various_tuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"blkio"</literal></expr></argument>, <argument><expr><literal type="string">"throttle.write_iops_device"</literal></expr></argument>,
					 <argument><expr><call><name>get_write_iops</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>POLAR_CGROUP_QUOTA_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* clean up and return the tuplestore */</comment>
	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
