<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/contrib/spi/timetravel.c"><comment type="block">/*
 * contrib/spi/timetravel.c
 *
 *
 * timetravel.c --	function to get time travel feature
 *		using general triggers.
 *
 * Modified by BÃJTHE ZoltÃ¡n, Hungary, mailto:urdesobt@axelero.hu
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/spi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/nabstime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<comment type="block">/* AbsoluteTime currabstime(void); */</comment>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ident</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SPIPlanPtr</name></type>	<name>splan</name></decl>;</decl_stmt>
}</block></struct></type> <name>EPlan</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>EPlan</name> <modifier>*</modifier></type><name>Plans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>		<comment type="block">/* for UPDATE/DELETE */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>nPlans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>_TTOffList</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>_TTOffList</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>name</name><index>[<expr><name>FLEXIBLE_ARRAY_MEMBER</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>TTOffList</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>TTOffList</name> <modifier>*</modifier></type><name>TTOff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>findTTStatus</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>EPlan</name> <modifier>*</modifier></type><name>find_plan</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ident</name></decl></parameter>, <parameter><decl><type><name>EPlan</name> <modifier>*</modifier><modifier>*</modifier></type><name>eplan</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nplans</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * timetravel () --
 *		1.  IF an update affects tuple with stop_date eq INFINITY
 *			then form (and return) new tuple with start_date eq current date
 *			and stop_date eq INFINITY [ and update_user eq current user ]
 *			and all other column values as in new tuple, and insert tuple
 *			with old data and stop_date eq current date
 *			ELSE - skip updating of tuple.
 *		2.  IF a delete affects tuple with stop_date eq INFINITY
 *			then insert the same tuple with stop_date eq current date
 *			[ and delete_user eq current user ]
 *			ELSE - skip deletion of tuple.
 *		3.  On INSERT, if start_date is NULL then current date will be
 *			inserted, if stop_date is NULL then INFINITY will be inserted.
 *			[ and insert_user eq current user, update_user and delete_user
 *			eq NULL ]
 *
 * In CREATE TRIGGER you are to specify start_date and stop_date column
 * names:
 * EXECUTE PROCEDURE
 * timetravel ('date_on', 'date_off' [,'insert_user', 'update_user', 'delete_user' ] ).
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MaxAttrNum</name></cpp:macro>	<cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MinAttrNum</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_time_on</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_time_off</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ins_user</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_upd_user</name></cpp:macro>	<cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_del_user</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>timetravel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>							<comment type="block">/* have to return HeapTuple to Executor */</comment>
<name>timetravel</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TriggerData</name> <modifier>*</modifier></type><name>trigdata</name> <init>= <expr><operator>(</operator><name>TriggerData</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Trigger</name>    <modifier>*</modifier></type><name>trigger</name></decl>;</decl_stmt>		<comment type="block">/* to get trigger name */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>argc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>			<comment type="block">/* arguments */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name><name>attnum</name><index>[<expr><name>MaxAttrNum</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* fnumbers of start/stop columns */</comment>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>oldtimeon</name></decl>,
				<decl><type ref="prev"/><name>oldtimeoff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>newtimeon</name></decl>,
				<decl><type ref="prev"/><name>newtimeoff</name></decl>,
				<decl><type ref="prev"/><name>newuser</name></decl>,
				<decl><type ref="prev"/><name>nulltext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>cvals</name></decl>;</decl_stmt>			<comment type="block">/* column values */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cnulls</name></decl>;</decl_stmt>			<comment type="block">/* column nulls */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>relname</name></decl>;</decl_stmt>		<comment type="block">/* triggered relation name */</comment>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>;</decl_stmt>			<comment type="block">/* triggered relation */</comment>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>trigtuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>newtuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>rettuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>		<comment type="block">/* tuple description */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>natts</name></decl>;</decl_stmt>			<comment type="block">/* # of attributes */</comment>
	<decl_stmt><decl><type><name>EPlan</name>	   <modifier>*</modifier></type><name>plan</name></decl>;</decl_stmt>			<comment type="block">/* prepared plan */</comment>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>ident</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>NAMEDATALEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>			<comment type="block">/* to know is some column NULL or not */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isinsert</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Some checks first...
	 */</comment>

	<comment type="block">/* Called by trigger manager ? */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CALLED_AS_TRIGGER</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel: not fired by trigger manager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Should be called for ROW trigger */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TRIGGER_FIRED_FOR_ROW</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel: must be fired for row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Should be called BEFORE */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TRIGGER_FIRED_BEFORE</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel: must be fired before event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* INSERT ? */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>TRIGGER_FIRED_BY_INSERT</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>isinsert</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TRIGGER_FIRED_BY_UPDATE</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>newtuple</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_newtuple</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>trigtuple</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_trigtuple</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rel</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_relation</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>relname</name> <operator>=</operator> <call><name>SPI_getrelname</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* check if TT is OFF for this relation */</comment>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>findTTStatus</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* OFF - nothing to do */</comment>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>newtuple</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>newtuple</name></expr> </then><else>: <expr><name>trigtuple</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>trigger</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_trigger</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>argc</name> <operator>=</operator> <name><name>trigger</name><operator>-&gt;</operator><name>tgnargs</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <name>MinAttrNum</name> <operator>&amp;&amp;</operator> <name>argc</name> <operator>!=</operator> <name>MaxAttrNum</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): invalid (!= %d or %d) number of arguments %d"</literal></expr></argument>,
			 <argument><expr><name>relname</name></expr></argument>, <argument><expr><name>MinAttrNum</name></expr></argument>, <argument><expr><name>MaxAttrNum</name></expr></argument>, <argument><expr><name><name>trigger</name><operator>-&gt;</operator><name>tgnargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>args</name> <operator>=</operator> <name><name>trigger</name><operator>-&gt;</operator><name>tgargs</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_att</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>natts</name> <operator>=</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MinAttrNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>attnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SPI_fnumber</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>attnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): there is no attribute %s"</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>SPI_gettypeid</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>attnum</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ABSTIMEOID</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): attribute %s must be of abstime type"</literal></expr></argument>,
				 <argument><expr><name>relname</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>attnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SPI_fnumber</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>attnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): there is no attribute %s"</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>SPI_gettypeid</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>attnum</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TEXTOID</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): attribute %s must be of text type"</literal></expr></argument>,
				 <argument><expr><name>relname</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* create fields containing name */</comment>
	<expr_stmt><expr><name>newuser</name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><call><name>GetUserNameFromId</name><argument_list>(<argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>nulltext</name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>isinsert</name></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* INSERT */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>chnattrs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name><name>chattrs</name><index>[<expr><name>MaxAttrNum</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name><name>newvals</name><index>[<expr><name>MaxAttrNum</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name><name>newnulls</name><index>[<expr><name>MaxAttrNum</name></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><name>oldtimeon</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>trigtuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>attnum</name><index>[<expr><name>a_time_on</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>newvals</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <call><name>GetCurrentAbsoluteTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>newnulls</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chattrs</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name><name>attnum</name><index>[<expr><name>a_time_on</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chnattrs</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>oldtimeoff</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>trigtuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>attnum</name><index>[<expr><name>a_time_off</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chnattrs</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>oldtimeon</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>NOEND_ABSTIME</name><operator>)</operator> <operator>||</operator>
				<operator>(</operator><name>chnattrs</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>newvals</name><index>[<expr><name>a_time_on</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>NOEND_ABSTIME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): %s is infinity"</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>a_time_on</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>newvals</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name>NOEND_ABSTIME</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>newnulls</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chattrs</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name><name>attnum</name><index>[<expr><name>a_time_off</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chnattrs</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chnattrs</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>oldtimeon</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>oldtimeoff</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
				<operator>(</operator><name>chnattrs</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>newvals</name><index>[<expr><name>a_time_on</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>oldtimeoff</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): %s gt %s"</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>a_time_on</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>a_time_off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>chnattrs</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>trigtuple</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <name>MaxAttrNum</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* clear update_user value */</comment>
			<expr_stmt><expr><name><name>newvals</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name>nulltext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>newnulls</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chattrs</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name><name>attnum</name><index>[<expr><name>a_upd_user</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chnattrs</name><operator>++</operator></expr>;</expr_stmt>
			<comment type="block">/* clear delete_user value */</comment>
			<expr_stmt><expr><name><name>newvals</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name>nulltext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>newnulls</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chattrs</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name><name>attnum</name><index>[<expr><name>a_del_user</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chnattrs</name><operator>++</operator></expr>;</expr_stmt>
			<comment type="block">/* set insert_user value */</comment>
			<expr_stmt><expr><name><name>newvals</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name>newuser</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>newnulls</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chattrs</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name><name>attnum</name><index>[<expr><name>a_ins_user</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chnattrs</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>rettuple</name> <operator>=</operator> <call><name>heap_modify_tuple_by_cols</name><argument_list>(<argument><expr><name>trigtuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>,
											 <argument><expr><name>chnattrs</name></expr></argument>, <argument><expr><name>chattrs</name></expr></argument>,
											 <argument><expr><name>newvals</name></expr></argument>, <argument><expr><name>newnulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>rettuple</name></expr></argument>)</argument_list></call></expr>;</return>
		<comment type="block">/* end of INSERT */</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* UPDATE/DELETE: */</comment>
	<expr_stmt><expr><name>oldtimeon</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>trigtuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>attnum</name><index>[<expr><name>a_time_on</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): %s must be NOT NULL"</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>a_time_on</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>oldtimeoff</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>trigtuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>attnum</name><index>[<expr><name>a_time_off</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): %s must be NOT NULL"</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>a_time_off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If DELETE/UPDATE of tuple with stop_date neq INFINITY then say upper
	 * Executor to skip operation for this tuple
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>newtuple</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* UPDATE */</comment>
		<expr_stmt><expr><name>newtimeon</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>newtuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>attnum</name><index>[<expr><name>a_time_on</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): %s must be NOT NULL"</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>a_time_on</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>newtimeoff</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>newtuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name><name>attnum</name><index>[<expr><name>a_time_off</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): %s must be NOT NULL"</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>a_time_off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>oldtimeon</name> <operator>!=</operator> <name>newtimeon</name> <operator>||</operator> <name>oldtimeoff</name> <operator>!=</operator> <name>newtimeoff</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): you cannot change %s and/or %s columns (use set_timetravel)"</literal></expr></argument>,
				 <argument><expr><name>relname</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>a_time_on</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>a_time_off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>oldtimeoff</name> <operator>!=</operator> <name>NOEND_ABSTIME</name></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* current record is a deleted/updated record */</comment>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>newtimeoff</name> <operator>=</operator> <call><name>GetCurrentAbsoluteTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Connect to SPI manager */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>SPI_connect</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): SPI_connect returned %d"</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Fetch tuple values and nulls */</comment>
	<expr_stmt><expr><name>cvals</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>natts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnulls</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>natts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>cvals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>trigtuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cnulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>isnull</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'n'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* change date column(s) */</comment>
	<expr_stmt><expr><name><name>cvals</name><index>[<expr><name><name>attnum</name><index>[<expr><name>a_time_off</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>newtimeoff</name></expr>;</expr_stmt> <comment type="block">/* stop_date eq current date */</comment>
	<expr_stmt><expr><name><name>cnulls</name><index>[<expr><name><name>attnum</name><index>[<expr><name>a_time_off</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newtuple</name></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* DELETE */</comment>
		<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <name>MaxAttrNum</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>cvals</name><index>[<expr><name><name>attnum</name><index>[<expr><name>a_del_user</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>newuser</name></expr>;</expr_stmt>	<comment type="block">/* set delete user */</comment>
			<expr_stmt><expr><name><name>cnulls</name><index>[<expr><name><name>attnum</name><index>[<expr><name>a_del_user</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Construct ident string as TriggerName $ TriggeredRelationId and try to
	 * find prepared execution plan.
	 */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ident</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s$%u"</literal></expr></argument>, <argument><expr><name><name>trigger</name><operator>-&gt;</operator><name>tgname</name></name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>plan</name> <operator>=</operator> <call><name>find_plan</name><argument_list>(<argument><expr><name>ident</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Plans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPlans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if there is no plan ... */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>splan</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SPIPlanPtr</name></type>	<name>pplan</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name>		   <modifier>*</modifier></type><name>ctypes</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>sql</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name>separ</name> <init>= <expr><literal type="char">' '</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* allocate ctypes for preparation */</comment>
		<expr_stmt><expr><name>ctypes</name> <operator>=</operator> <operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>natts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Construct query: INSERT INTO _relation_ VALUES ($1, ...)
		 */</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"INSERT INTO %s VALUES ("</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ctypes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>SPI_gettypeid</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attisdropped</name><operator>)</operator></expr>)</condition> <comment type="block">/* skip dropped columns */</comment>
			<block>{<block_content>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%c$%d"</literal></expr></argument>, <argument><expr><name>separ</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>separ</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s) update: sql: %s"</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Prepare plan for query */</comment>
		<expr_stmt><expr><name>pplan</name> <operator>=</operator> <call><name>SPI_prepare</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>natts</name></expr></argument>, <argument><expr><name>ctypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pplan</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): SPI_prepare returned %s"</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>, <argument><expr><call><name>SPI_result_code_string</name><argument_list>(<argument><expr><name>SPI_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Remember that SPI_prepare places plan in current memory context -
		 * so, we have to save plan in Top memory context for later use.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>SPI_keepplan</name><argument_list>(<argument><expr><name>pplan</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): SPI_keepplan failed"</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>splan</name></name> <operator>=</operator> <name>pplan</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Ok, execute prepared plan.
	 */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SPI_execp</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>splan</name></name></expr></argument>, <argument><expr><name>cvals</name></expr></argument>, <argument><expr><name>cnulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"timetravel (%s): SPI_execp returned %d"</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Tuple to return to upper Executor ... */</comment>
	<if_stmt><if>if <condition>(<expr><name>newtuple</name></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* UPDATE */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>chnattrs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name><name>chattrs</name><index>[<expr><name>MaxAttrNum</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name><name>newvals</name><index>[<expr><name>MaxAttrNum</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>newnulls</name><index>[<expr><name>MaxAttrNum</name></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>newvals</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name>newtimeoff</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newnulls</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>chattrs</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name><name>attnum</name><index>[<expr><name>a_time_on</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>chnattrs</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>newvals</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name>NOEND_ABSTIME</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newnulls</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>chattrs</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name><name>attnum</name><index>[<expr><name>a_time_off</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>chnattrs</name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <name>MaxAttrNum</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* set update_user value */</comment>
			<expr_stmt><expr><name><name>newvals</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name>newuser</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>newnulls</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chattrs</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name><name>attnum</name><index>[<expr><name>a_upd_user</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chnattrs</name><operator>++</operator></expr>;</expr_stmt>
			<comment type="block">/* clear delete_user value */</comment>
			<expr_stmt><expr><name><name>newvals</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name>nulltext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>newnulls</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chattrs</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name><name>attnum</name><index>[<expr><name>a_del_user</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chnattrs</name><operator>++</operator></expr>;</expr_stmt>
			<comment type="block">/* set insert_user value */</comment>
			<expr_stmt><expr><name><name>newvals</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name>nulltext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>newnulls</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chattrs</name><index>[<expr><name>chnattrs</name></expr>]</index></name> <operator>=</operator> <name><name>attnum</name><index>[<expr><name>a_ins_user</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chnattrs</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Use SPI_modifytuple() here because we are inside SPI environment
		 * but rettuple must be allocated in caller's context.
		 */</comment>
		<expr_stmt><expr><name>rettuple</name> <operator>=</operator> <call><name>SPI_modifytuple</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>newtuple</name></expr></argument>, <argument><expr><name>chnattrs</name></expr></argument>, <argument><expr><name>chattrs</name></expr></argument>, <argument><expr><name>newvals</name></expr></argument>, <argument><expr><name>newnulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<comment type="block">/* DELETE case */</comment>
		<expr_stmt><expr><name>rettuple</name> <operator>=</operator> <name>trigtuple</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>				<comment type="block">/* don't forget say Bye to SPI mgr */</comment>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>rettuple</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * set_timetravel (relname, on) --
 *					turn timetravel for specified relation ON/OFF
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>set_timetravel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>set_timetravel</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Name</name></type>		<name>relname</name> <init>= <expr><call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>on</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TTOffList</name>  <modifier>*</modifier></type><name>prev</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>pp</name> <operator>=</operator> <name>TTOff</name></expr>;</init> <condition><expr><name>pp</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>pp</name></expr><operator>,</operator> <expr><name>pp</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><name>relname</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>pp</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* OFF currently */</comment>
		<if_stmt><if>if <condition>(<expr><name>on</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* turn ON */</comment>
			<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>TTOff</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* ON currently */</comment>
		<if_stmt><if>if <condition>(<expr><name>on</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* turn OFF */</comment>
			<expr_stmt><expr><name>s</name> <operator>=</operator> <name>rname</name> <operator>=</operator> <call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>nameout</name></expr></argument>, <argument><expr><call><name>NameGetDatum</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>TTOffList</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>pp</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
					<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
					<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pp</name></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>TTOff</name> <operator>=</operator> <name>pp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>rname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * get_timetravel (relname) --
 *	get timetravel status for specified relation (ON/OFF)
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>get_timetravel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>get_timetravel</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Name</name></type>		<name>relname</name> <init>= <expr><call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TTOffList</name>  <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>pp</name> <operator>=</operator> <name>TTOff</name></expr>;</init> <condition><expr><name>pp</name></expr>;</condition> <incr><expr><name>pp</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><name>relname</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>findTTStatus</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TTOffList</name>  <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>pp</name> <operator>=</operator> <name>TTOff</name></expr>;</init> <condition><expr><name>pp</name></expr>;</condition> <incr><expr><name>pp</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
AbsoluteTime
currabstime()
{
	return GetCurrentAbsoluteTime();
}
*/</comment>

<function><type><specifier>static</specifier> <name>EPlan</name> <modifier>*</modifier></type>
<name>find_plan</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ident</name></decl></parameter>, <parameter><decl><type><name>EPlan</name> <modifier>*</modifier><modifier>*</modifier></type><name>eplan</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nplans</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EPlan</name>	   <modifier>*</modifier></type><name>newp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nplans</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>nplans</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>eplan</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>ident</name></expr></argument>, <argument><expr><name>ident</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <operator>*</operator><name>nplans</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><operator>*</operator><name>eplan</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>eplan</name> <operator>=</operator> <operator>(</operator><name>EPlan</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><operator>*</operator><name>eplan</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EPlan</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>*</operator><name>eplan</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>*</operator><name>eplan</name> <operator>=</operator> <operator>(</operator><name>EPlan</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EPlan</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>nplans</name><operator>)</operator> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>ident</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>splan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>nplans</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>newp</name></expr>;</return>
</block_content>}</block></function>
</unit>
