<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/contrib/sepgsql/selinux.c"><comment type="block">/* -------------------------------------------------------------------------
 *
 * contrib/sepgsql/selinux.c
 *
 * Interactions between userspace and selinux in kernelspace,
 * using libselinux api.
 *
 * Copyright (c) 2010-2018, PostgreSQL Global Development Group
 *
 * -------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sepgsql.h"</cpp:file></cpp:include>

<comment type="block">/*
 * selinux_catalog
 *
 * This mapping table enables to translate the name of object classes and
 * access vectors to/from their own codes.
 * When we ask SELinux whether the required privileges are allowed or not,
 * we use security_compute_av(3). It needs us to represent object classes
 * and access vectors using 'external' codes defined in the security policy.
 * It is determined in the runtime, not build time. So, it needs an internal
 * service to translate object class/access vectors which we want to check
 * into the code which kernel want to be given.
 */</comment>
<struct><specifier>static</specifier> struct
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>class_code</name></decl>;</decl_stmt>
	<struct>struct
	<block>{
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_name</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>av_code</name></decl>;</decl_stmt>
	}</block>			<decl><name><name>av</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</struct>
}</block>			<decl><name><name>selinux_catalog</name><index>[]</index></name> <init>=

<expr><block>{
	<expr><block>{
		<expr><literal type="string">"process"</literal></expr>, <expr><name>SEPG_CLASS_PROCESS</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"transition"</literal></expr>, <expr><name>SEPG_PROCESS__TRANSITION</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"dyntransition"</literal></expr>, <expr><name>SEPG_PROCESS__DYNTRANSITION</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"setcurrent"</literal></expr>, <expr><name>SEPG_PROCESS__SETCURRENT</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"file"</literal></expr>, <expr><name>SEPG_CLASS_FILE</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"read"</literal></expr>, <expr><name>SEPG_FILE__READ</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"write"</literal></expr>, <expr><name>SEPG_FILE__WRITE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_FILE__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_FILE__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"unlink"</literal></expr>, <expr><name>SEPG_FILE__UNLINK</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"rename"</literal></expr>, <expr><name>SEPG_FILE__RENAME</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"append"</literal></expr>, <expr><name>SEPG_FILE__APPEND</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"dir"</literal></expr>, <expr><name>SEPG_CLASS_DIR</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"read"</literal></expr>, <expr><name>SEPG_DIR__READ</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"write"</literal></expr>, <expr><name>SEPG_DIR__WRITE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_DIR__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_DIR__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"unlink"</literal></expr>, <expr><name>SEPG_DIR__UNLINK</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"rename"</literal></expr>, <expr><name>SEPG_DIR__RENAME</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"search"</literal></expr>, <expr><name>SEPG_DIR__SEARCH</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"add_name"</literal></expr>, <expr><name>SEPG_DIR__ADD_NAME</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"remove_name"</literal></expr>, <expr><name>SEPG_DIR__REMOVE_NAME</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"rmdir"</literal></expr>, <expr><name>SEPG_DIR__RMDIR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"reparent"</literal></expr>, <expr><name>SEPG_DIR__REPARENT</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"lnk_file"</literal></expr>, <expr><name>SEPG_CLASS_LNK_FILE</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"read"</literal></expr>, <expr><name>SEPG_LNK_FILE__READ</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"write"</literal></expr>, <expr><name>SEPG_LNK_FILE__WRITE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_LNK_FILE__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_LNK_FILE__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"unlink"</literal></expr>, <expr><name>SEPG_LNK_FILE__UNLINK</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"rename"</literal></expr>, <expr><name>SEPG_LNK_FILE__RENAME</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"chr_file"</literal></expr>, <expr><name>SEPG_CLASS_CHR_FILE</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"read"</literal></expr>, <expr><name>SEPG_CHR_FILE__READ</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"write"</literal></expr>, <expr><name>SEPG_CHR_FILE__WRITE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_CHR_FILE__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_CHR_FILE__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"unlink"</literal></expr>, <expr><name>SEPG_CHR_FILE__UNLINK</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"rename"</literal></expr>, <expr><name>SEPG_CHR_FILE__RENAME</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"blk_file"</literal></expr>, <expr><name>SEPG_CLASS_BLK_FILE</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"read"</literal></expr>, <expr><name>SEPG_BLK_FILE__READ</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"write"</literal></expr>, <expr><name>SEPG_BLK_FILE__WRITE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_BLK_FILE__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_BLK_FILE__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"unlink"</literal></expr>, <expr><name>SEPG_BLK_FILE__UNLINK</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"rename"</literal></expr>, <expr><name>SEPG_BLK_FILE__RENAME</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"sock_file"</literal></expr>, <expr><name>SEPG_CLASS_SOCK_FILE</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"read"</literal></expr>, <expr><name>SEPG_SOCK_FILE__READ</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"write"</literal></expr>, <expr><name>SEPG_SOCK_FILE__WRITE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_SOCK_FILE__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_SOCK_FILE__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"unlink"</literal></expr>, <expr><name>SEPG_SOCK_FILE__UNLINK</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"rename"</literal></expr>, <expr><name>SEPG_SOCK_FILE__RENAME</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"fifo_file"</literal></expr>, <expr><name>SEPG_CLASS_FIFO_FILE</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"read"</literal></expr>, <expr><name>SEPG_FIFO_FILE__READ</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"write"</literal></expr>, <expr><name>SEPG_FIFO_FILE__WRITE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_FIFO_FILE__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_FIFO_FILE__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"unlink"</literal></expr>, <expr><name>SEPG_FIFO_FILE__UNLINK</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"rename"</literal></expr>, <expr><name>SEPG_FIFO_FILE__RENAME</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"db_database"</literal></expr>, <expr><name>SEPG_CLASS_DB_DATABASE</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_DB_DATABASE__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"drop"</literal></expr>, <expr><name>SEPG_DB_DATABASE__DROP</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_DB_DATABASE__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"setattr"</literal></expr>, <expr><name>SEPG_DB_DATABASE__SETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelfrom"</literal></expr>, <expr><name>SEPG_DB_DATABASE__RELABELFROM</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelto"</literal></expr>, <expr><name>SEPG_DB_DATABASE__RELABELTO</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"access"</literal></expr>, <expr><name>SEPG_DB_DATABASE__ACCESS</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"load_module"</literal></expr>, <expr><name>SEPG_DB_DATABASE__LOAD_MODULE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>,
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"db_schema"</literal></expr>, <expr><name>SEPG_CLASS_DB_SCHEMA</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_DB_SCHEMA__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"drop"</literal></expr>, <expr><name>SEPG_DB_SCHEMA__DROP</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_DB_SCHEMA__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"setattr"</literal></expr>, <expr><name>SEPG_DB_SCHEMA__SETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelfrom"</literal></expr>, <expr><name>SEPG_DB_SCHEMA__RELABELFROM</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelto"</literal></expr>, <expr><name>SEPG_DB_SCHEMA__RELABELTO</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"search"</literal></expr>, <expr><name>SEPG_DB_SCHEMA__SEARCH</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"add_name"</literal></expr>, <expr><name>SEPG_DB_SCHEMA__ADD_NAME</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"remove_name"</literal></expr>, <expr><name>SEPG_DB_SCHEMA__REMOVE_NAME</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>,
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"db_table"</literal></expr>, <expr><name>SEPG_CLASS_DB_TABLE</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_DB_TABLE__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"drop"</literal></expr>, <expr><name>SEPG_DB_TABLE__DROP</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_DB_TABLE__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"setattr"</literal></expr>, <expr><name>SEPG_DB_TABLE__SETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelfrom"</literal></expr>, <expr><name>SEPG_DB_TABLE__RELABELFROM</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelto"</literal></expr>, <expr><name>SEPG_DB_TABLE__RELABELTO</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"select"</literal></expr>, <expr><name>SEPG_DB_TABLE__SELECT</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"update"</literal></expr>, <expr><name>SEPG_DB_TABLE__UPDATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"insert"</literal></expr>, <expr><name>SEPG_DB_TABLE__INSERT</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"delete"</literal></expr>, <expr><name>SEPG_DB_TABLE__DELETE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"lock"</literal></expr>, <expr><name>SEPG_DB_TABLE__LOCK</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>,
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"db_sequence"</literal></expr>, <expr><name>SEPG_CLASS_DB_SEQUENCE</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_DB_SEQUENCE__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"drop"</literal></expr>, <expr><name>SEPG_DB_SEQUENCE__DROP</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_DB_SEQUENCE__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"setattr"</literal></expr>, <expr><name>SEPG_DB_SEQUENCE__SETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelfrom"</literal></expr>, <expr><name>SEPG_DB_SEQUENCE__RELABELFROM</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelto"</literal></expr>, <expr><name>SEPG_DB_SEQUENCE__RELABELTO</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"get_value"</literal></expr>, <expr><name>SEPG_DB_SEQUENCE__GET_VALUE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"next_value"</literal></expr>, <expr><name>SEPG_DB_SEQUENCE__NEXT_VALUE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"set_value"</literal></expr>, <expr><name>SEPG_DB_SEQUENCE__SET_VALUE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>,
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"db_procedure"</literal></expr>, <expr><name>SEPG_CLASS_DB_PROCEDURE</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_DB_PROCEDURE__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"drop"</literal></expr>, <expr><name>SEPG_DB_PROCEDURE__DROP</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_DB_PROCEDURE__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"setattr"</literal></expr>, <expr><name>SEPG_DB_PROCEDURE__SETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelfrom"</literal></expr>, <expr><name>SEPG_DB_PROCEDURE__RELABELFROM</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelto"</literal></expr>, <expr><name>SEPG_DB_PROCEDURE__RELABELTO</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"execute"</literal></expr>, <expr><name>SEPG_DB_PROCEDURE__EXECUTE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"entrypoint"</literal></expr>, <expr><name>SEPG_DB_PROCEDURE__ENTRYPOINT</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"install"</literal></expr>, <expr><name>SEPG_DB_PROCEDURE__INSTALL</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>,
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"db_column"</literal></expr>, <expr><name>SEPG_CLASS_DB_COLUMN</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_DB_COLUMN__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"drop"</literal></expr>, <expr><name>SEPG_DB_COLUMN__DROP</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_DB_COLUMN__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"setattr"</literal></expr>, <expr><name>SEPG_DB_COLUMN__SETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelfrom"</literal></expr>, <expr><name>SEPG_DB_COLUMN__RELABELFROM</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelto"</literal></expr>, <expr><name>SEPG_DB_COLUMN__RELABELTO</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"select"</literal></expr>, <expr><name>SEPG_DB_COLUMN__SELECT</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"update"</literal></expr>, <expr><name>SEPG_DB_COLUMN__UPDATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"insert"</literal></expr>, <expr><name>SEPG_DB_COLUMN__INSERT</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>,
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"db_tuple"</literal></expr>, <expr><name>SEPG_CLASS_DB_TUPLE</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"relabelfrom"</literal></expr>, <expr><name>SEPG_DB_TUPLE__RELABELFROM</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelto"</literal></expr>, <expr><name>SEPG_DB_TUPLE__RELABELTO</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"select"</literal></expr>, <expr><name>SEPG_DB_TUPLE__SELECT</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"update"</literal></expr>, <expr><name>SEPG_DB_TUPLE__UPDATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"insert"</literal></expr>, <expr><name>SEPG_DB_TUPLE__INSERT</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"delete"</literal></expr>, <expr><name>SEPG_DB_TUPLE__DELETE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>,
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"db_blob"</literal></expr>, <expr><name>SEPG_CLASS_DB_BLOB</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_DB_BLOB__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"drop"</literal></expr>, <expr><name>SEPG_DB_BLOB__DROP</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_DB_BLOB__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"setattr"</literal></expr>, <expr><name>SEPG_DB_BLOB__SETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelfrom"</literal></expr>, <expr><name>SEPG_DB_BLOB__RELABELFROM</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelto"</literal></expr>, <expr><name>SEPG_DB_BLOB__RELABELTO</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"read"</literal></expr>, <expr><name>SEPG_DB_BLOB__READ</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"write"</literal></expr>, <expr><name>SEPG_DB_BLOB__WRITE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"import"</literal></expr>, <expr><name>SEPG_DB_BLOB__IMPORT</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"export"</literal></expr>, <expr><name>SEPG_DB_BLOB__EXPORT</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>,
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"db_language"</literal></expr>, <expr><name>SEPG_CLASS_DB_LANGUAGE</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_DB_LANGUAGE__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"drop"</literal></expr>, <expr><name>SEPG_DB_LANGUAGE__DROP</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_DB_LANGUAGE__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"setattr"</literal></expr>, <expr><name>SEPG_DB_LANGUAGE__SETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelfrom"</literal></expr>, <expr><name>SEPG_DB_LANGUAGE__RELABELFROM</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelto"</literal></expr>, <expr><name>SEPG_DB_LANGUAGE__RELABELTO</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"implement"</literal></expr>, <expr><name>SEPG_DB_LANGUAGE__IMPLEMENT</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"execute"</literal></expr>, <expr><name>SEPG_DB_LANGUAGE__EXECUTE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>,
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"db_view"</literal></expr>, <expr><name>SEPG_CLASS_DB_VIEW</name></expr>,
		<expr><block>{
			<expr><block>{
				<expr><literal type="string">"create"</literal></expr>, <expr><name>SEPG_DB_VIEW__CREATE</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"drop"</literal></expr>, <expr><name>SEPG_DB_VIEW__DROP</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"getattr"</literal></expr>, <expr><name>SEPG_DB_VIEW__GETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"setattr"</literal></expr>, <expr><name>SEPG_DB_VIEW__SETATTR</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelfrom"</literal></expr>, <expr><name>SEPG_DB_VIEW__RELABELFROM</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"relabelto"</literal></expr>, <expr><name>SEPG_DB_VIEW__RELABELTO</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><literal type="string">"expand"</literal></expr>, <expr><name>SEPG_DB_VIEW__EXPAND</name></expr>
			}</block></expr>,
			<expr><block>{
				<expr><name>NULL</name></expr>, <expr><literal type="number">0UL</literal></expr>
			}</block></expr>,
		}</block></expr>
	}</block></expr>,
}</block></expr></init></decl>;</struct>

<comment type="block">/*
 * sepgsql_mode
 *
 * SEPGSQL_MODE_DISABLED: Disabled on runtime
 * SEPGSQL_MODE_DEFAULT: Same as system settings
 * SEPGSQL_MODE_PERMISSIVE: Always permissive mode
 * SEPGSQL_MODE_INTERNAL: Same as permissive, except for no audit logs
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>sepgsql_mode</name> <init>= <expr><name>SEPGSQL_MODE_INTERNAL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * sepgsql_is_enabled
 */</comment>
<function><type><name>bool</name></type>
<name>sepgsql_is_enabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><ternary><condition><expr><name>sepgsql_mode</name> <operator>!=</operator> <name>SEPGSQL_MODE_DISABLED</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * sepgsql_get_mode
 */</comment>
<function><type><name>int</name></type>
<name>sepgsql_get_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>sepgsql_mode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * sepgsql_set_mode
 */</comment>
<function><type><name>int</name></type>
<name>sepgsql_set_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>new_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>old_mode</name> <init>= <expr><name>sepgsql_mode</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>sepgsql_mode</name> <operator>=</operator> <name>new_mode</name></expr>;</expr_stmt>

	<return>return <expr><name>old_mode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * sepgsql_getenforce
 *
 * It returns whether the current working mode tries to enforce access
 * control decision, or not. It shall be enforced when sepgsql_mode is
 * SEPGSQL_MODE_DEFAULT and system is running in enforcing mode.
 */</comment>
<function><type><name>bool</name></type>
<name>sepgsql_getenforce</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>sepgsql_mode</name> <operator>==</operator> <name>SEPGSQL_MODE_DEFAULT</name> <operator>&amp;&amp;</operator>
		<call><name>selinux_status_getenforce</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * sepgsql_audit_log
 *
 * It generates a security audit record. In the default, it writes out
 * audit records into standard PG's logfile. It also allows to set up
 * external audit log receiver, such as auditd in Linux, using the
 * sepgsql_audit_hook.
 *
 * SELinux can control what should be audited and should not using
 * "auditdeny" and "auditallow" rules in the security policy. In the
 * default, all the access violations are audited, and all the access
 * allowed are not audited. But we can set up the security policy, so
 * we can have exceptions. So, it is necessary to follow the suggestion
 * come from the security policy. (av_decision.auditallow and auditdeny)
 *
 * Security audit is an important feature, because it enables us to check
 * what was happen if we have a security incident. In fact, ISO/IEC15408
 * defines several security functionalities for audit features.
 */</comment>
<function><type><name>void</name></type>
<name>sepgsql_audit_log</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>denied</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scontext</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tcontext</name></decl></parameter>,
				  <parameter><decl><type><name>uint16</name></type> <name>tclass</name></decl></parameter>,
				  <parameter><decl><type><name>uint32</name></type> <name>audited</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>audit_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* lookup name of the object class */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tclass</name> <operator>&lt;</operator> <name>SEPG_CLASS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>class_name</name> <operator>=</operator> <name><name>selinux_catalog</name><index>[<expr><name>tclass</name></expr>]</index></name><operator>.</operator><name>class_name</name></expr>;</expr_stmt>

	<comment type="block">/* lookup name of the permissions */</comment>
	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s {"</literal></expr></argument>,
					 <argument><expr><operator>(</operator><ternary><condition><expr><name>denied</name></expr> ?</condition><then> <expr><literal type="string">"denied"</literal></expr> </then><else>: <expr><literal type="string">"allowed"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>selinux_catalog</name><index>[<expr><name>tclass</name></expr>]</index></name><operator>.</operator><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>av_name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>audited</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>av_name</name> <operator>=</operator> <name><name>selinux_catalog</name><index>[<expr><name>tclass</name></expr>]</index></name><operator>.</operator><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>av_name</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>av_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Call external audit module, if loaded
	 */</comment>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" scontext=%s tcontext=%s tclass=%s"</literal></expr></argument>,
					 <argument><expr><name>scontext</name></expr></argument>, <argument><expr><name>tcontext</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>audit_name</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" name=\"%s\""</literal></expr></argument>, <argument><expr><name>audit_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SELinux: %s"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * sepgsql_compute_avd
 *
 * It actually asks SELinux what permissions are allowed on a pair of
 * the security contexts and object class. It also returns what permissions
 * should be audited on access violation or allowed.
 * In most cases, subject's security context (scontext) is a client, and
 * target security context (tcontext) is a database object.
 *
 * The access control decision shall be set on the given av_decision.
 * The av_decision.allowed has a bitmask of SEPG_&lt;class&gt;__&lt;perms&gt;
 * to suggest a set of allowed actions in this object class.
 */</comment>
<function><type><name>void</name></type>
<name>sepgsql_compute_avd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scontext</name></decl></parameter>,
					<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tcontext</name></decl></parameter>,
					<parameter><decl><type><name>uint16</name></type> <name>tclass</name></decl></parameter>,
					<parameter><decl><type><name><name>struct</name> <name>av_decision</name></name> <modifier>*</modifier></type><name>avd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tclass_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>security_class_t</name></type> <name>tclass_ex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>av_decision</name></name></type> <name>avd_ex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>deny_unknown</name> <init>= <expr><call><name>security_deny_unknown</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Get external code of the object class */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tclass</name> <operator>&lt;</operator> <name>SEPG_CLASS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tclass</name> <operator>==</operator> <name><name>selinux_catalog</name><index>[<expr><name>tclass</name></expr>]</index></name><operator>.</operator><name>class_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tclass_name</name> <operator>=</operator> <name><name>selinux_catalog</name><index>[<expr><name>tclass</name></expr>]</index></name><operator>.</operator><name>class_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tclass_ex</name> <operator>=</operator> <call><name>string_to_security_class</name><argument_list>(<argument><expr><name>tclass_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tclass_ex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If the current security policy does not support permissions
		 * corresponding to database objects, we fill up them with dummy data.
		 * If security_deny_unknown() returns positive value, undefined
		 * permissions should be denied. Otherwise, allowed
		 */</comment>
		<expr_stmt><expr><name><name>avd</name><operator>-&gt;</operator><name>allowed</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>security_deny_unknown</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>~</operator><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>avd</name><operator>-&gt;</operator><name>auditallow</name></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>avd</name><operator>-&gt;</operator><name>auditdeny</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0U</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>avd</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Ask SELinux what is allowed set of permissions on a pair of the
	 * security contexts and the given object class.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>security_compute_av_flags_raw</name><argument_list>(<argument><expr><operator>(</operator><name>security_context_t</name><operator>)</operator> <name>scontext</name></expr></argument>,
									  <argument><expr><operator>(</operator><name>security_context_t</name><operator>)</operator> <name>tcontext</name></expr></argument>,
									  <argument><expr><name>tclass_ex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>avd_ex</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SELinux could not compute av_decision: "</literal>
						<literal type="string">"scontext=%s tcontext=%s tclass=%s: %m"</literal></expr></argument>,
						<argument><expr><name>scontext</name></expr></argument>, <argument><expr><name>tcontext</name></expr></argument>, <argument><expr><name>tclass_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * SELinux returns its access control decision as a set of permissions
	 * represented in external code which depends on run-time environment. So,
	 * we need to translate it to the internal representation before returning
	 * results for the caller.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>avd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>av_decision</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>selinux_catalog</name><index>[<expr><name>tclass</name></expr>]</index></name><operator>.</operator><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>av_name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>access_vector_t</name></type> <name>av_code_ex</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_name</name> <init>= <expr><name><name>selinux_catalog</name><index>[<expr><name>tclass</name></expr>]</index></name><operator>.</operator><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>av_name</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>av_code</name> <init>= <expr><name><name>selinux_catalog</name><index>[<expr><name>tclass</name></expr>]</index></name><operator>.</operator><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>av_code</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>av_code_ex</name> <operator>=</operator> <call><name>string_to_av_perm</name><argument_list>(<argument><expr><name>tclass_ex</name></expr></argument>, <argument><expr><name>av_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>av_code_ex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* fill up undefined permissions */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>deny_unknown</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>avd</name><operator>-&gt;</operator><name>allowed</name></name> <operator>|=</operator> <name>av_code</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>avd</name><operator>-&gt;</operator><name>auditdeny</name></name> <operator>|=</operator> <name>av_code</name></expr>;</expr_stmt>

			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>avd_ex</name><operator>.</operator><name>allowed</name></name> <operator>&amp;</operator> <name>av_code_ex</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>avd</name><operator>-&gt;</operator><name>allowed</name></name> <operator>|=</operator> <name>av_code</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>avd_ex</name><operator>.</operator><name>auditallow</name></name> <operator>&amp;</operator> <name>av_code_ex</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>avd</name><operator>-&gt;</operator><name>auditallow</name></name> <operator>|=</operator> <name>av_code</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>avd_ex</name><operator>.</operator><name>auditdeny</name></name> <operator>&amp;</operator> <name>av_code_ex</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>avd</name><operator>-&gt;</operator><name>auditdeny</name></name> <operator>|=</operator> <name>av_code</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * sepgsql_compute_create
 *
 * It returns a default security context to be assigned on a new database
 * object. SELinux compute it based on a combination of client, upper object
 * which owns the new object and object class.
 *
 * For example, when a client (staff_u:staff_r:staff_t:s0) tries to create
 * a new table within a schema (system_u:object_r:sepgsql_schema_t:s0),
 * SELinux looks-up its security policy. If it has a special rule on the
 * combination of these security contexts and object class (db_table),
 * it returns the security context suggested by the special rule.
 * Otherwise, it returns the security context of schema, as is.
 *
 * We expect the caller already applies sanity/validation checks on the
 * given security context.
 *
 * scontext: security context of the subject (mostly, peer process).
 * tcontext: security context of the upper database object.
 * tclass: class code (SEPG_CLASS_*) of the new object in creation
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>sepgsql_compute_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scontext</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tcontext</name></decl></parameter>,
					   <parameter><decl><type><name>uint16</name></type> <name>tclass</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>objname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>security_context_t</name></type> <name>ncontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>security_class_t</name></type> <name>tclass_ex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tclass_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<comment type="block">/* Get external code of the object class */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tclass</name> <operator>&lt;</operator> <name>SEPG_CLASS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tclass_name</name> <operator>=</operator> <name><name>selinux_catalog</name><index>[<expr><name>tclass</name></expr>]</index></name><operator>.</operator><name>class_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tclass_ex</name> <operator>=</operator> <call><name>string_to_security_class</name><argument_list>(<argument><expr><name>tclass_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Ask SELinux what is the default context for the given object class on a
	 * pair of security contexts
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>security_compute_create_name_raw</name><argument_list>(<argument><expr><operator>(</operator><name>security_context_t</name><operator>)</operator> <name>scontext</name></expr></argument>,
										 <argument><expr><operator>(</operator><name>security_context_t</name><operator>)</operator> <name>tcontext</name></expr></argument>,
										 <argument><expr><name>tclass_ex</name></expr></argument>,
										 <argument><expr><name>objname</name></expr></argument>,
										 <argument><expr><operator>&amp;</operator><name>ncontext</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SELinux could not compute a new context: "</literal>
						<literal type="string">"scontext=%s tcontext=%s tclass=%s: %m"</literal></expr></argument>,
						<argument><expr><name>scontext</name></expr></argument>, <argument><expr><name>tcontext</name></expr></argument>, <argument><expr><name>tclass_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * libselinux returns malloc()'ed string, so we need to copy it on the
	 * palloc()'ed region.
	 */</comment>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>ncontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>freecon</name><argument_list>(<argument><expr><name>ncontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freecon</name><argument_list>(<argument><expr><name>ncontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * sepgsql_check_perms
 *
 * It makes access control decision without userspace caching mechanism.
 * If SELinux denied the required accesses on the pair of security labels,
 * it raises an error or returns false.
 *
 * scontext: security label of the subject (mostly, peer process)
 * tcontext: security label of the object being referenced
 * tclass: class code (SEPG_CLASS_*) of the object being referenced
 * required: a mask of required permissions (SEPG_&lt;class&gt;__&lt;perm&gt;)
 * audit_name: a human readable object name for audit logs, or NULL.
 * abort_on_violation: true, if error shall be raised on access violation
 */</comment>
<function><type><name>bool</name></type>
<name>sepgsql_check_perms</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scontext</name></decl></parameter>,
					<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tcontext</name></decl></parameter>,
					<parameter><decl><type><name>uint16</name></type> <name>tclass</name></decl></parameter>,
					<parameter><decl><type><name>uint32</name></type> <name>required</name></decl></parameter>,
					<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>audit_name</name></decl></parameter>,
					<parameter><decl><type><name>bool</name></type> <name>abort_on_violation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>av_decision</name></name></type> <name>avd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>denied</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>audited</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>sepgsql_compute_avd</name><argument_list>(<argument><expr><name>scontext</name></expr></argument>, <argument><expr><name>tcontext</name></expr></argument>, <argument><expr><name>tclass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>denied</name> <operator>=</operator> <name>required</name> <operator>&amp;</operator> <operator>~</operator><name><name>avd</name><operator>.</operator><name>allowed</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>sepgsql_get_debug_audit</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>audited</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>denied</name></expr> ?</condition><then> <expr><name>denied</name></expr> </then><else>: <expr><name>required</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>audited</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>denied</name></expr> ?</condition><then> <expr><operator>(</operator><name>denied</name> <operator>&amp;</operator> <name><name>avd</name><operator>.</operator><name>auditdeny</name></name><operator>)</operator></expr>
				   </then><else>: <expr><operator>(</operator><name>required</name> <operator>&amp;</operator> <name><name>avd</name><operator>.</operator><name>auditallow</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>denied</name> <operator>&amp;&amp;</operator>
		<call><name>sepgsql_getenforce</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<operator>(</operator><name><name>avd</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELINUX_AVD_FLAGS_PERMISSIVE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * It records a security audit for the request, if needed. But, when
	 * SE-PgSQL performs 'internal' mode, it needs to keep silent.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>audited</name> <operator>&amp;&amp;</operator> <name>sepgsql_mode</name> <operator>!=</operator> <name>SEPGSQL_MODE_INTERNAL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>sepgsql_audit_log</name><argument_list>(<argument><expr><name>denied</name></expr></argument>,
						  <argument><expr><name>scontext</name></expr></argument>,
						  <argument><expr><name>tcontext</name></expr></argument>,
						  <argument><expr><name>tclass</name></expr></argument>,
						  <argument><expr><name>audited</name></expr></argument>,
						  <argument><expr><name>audit_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>abort_on_violation</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SELinux: security policy violation"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
