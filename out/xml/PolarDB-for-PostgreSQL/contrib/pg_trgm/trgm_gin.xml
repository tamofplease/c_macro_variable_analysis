<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/contrib/pg_trgm/trgm_gin.c"><comment type="block">/*
 * contrib/pg_trgm/trgm_gin.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trgm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/stratnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gin_extract_trgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gin_extract_value_trgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gin_extract_query_trgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gin_trgm_consistent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gin_trgm_triconsistent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * This function can only be called if a pre-9.1 version of the GIN operator
 * class definition is present in the catalogs (probably as a consequence
 * of upgrade-in-place).  Cope.
 */</comment>
<function><type><name>Datum</name></type>
<name>gin_extract_trgm</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>gin_extract_value_trgm</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>gin_extract_query_trgm</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected number of arguments to gin_extract_trgm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gin_extract_value_trgm</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>val</name> <init>= <expr><operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>nentries</name> <init>= <expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TRGM</name>	   <modifier>*</modifier></type><name>trg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>trglen</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>nentries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>trg</name> <operator>=</operator> <call><name>generate_trgm</name><argument_list>(<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>trglen</name> <operator>=</operator> <call><name>ARRNELEM</name><argument_list>(<argument><expr><name>trg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>trglen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>trgm</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><operator>*</operator><name>nentries</name> <operator>=</operator> <name>trglen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>entries</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>trglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>GETARR</name><argument_list>(<argument><expr><name>trg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>trglen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type>		<name>item</name> <init>= <expr><call><name>trgm2int</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gin_extract_query_trgm</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>val</name> <init>= <expr><operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>nentries</name> <init>= <expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StrategyNumber</name></type> <name>strategy</name> <init>= <expr><call><name>PG_GETARG_UINT16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* bool   **pmatch = (bool **) PG_GETARG_POINTER(3); */</comment>
	<decl_stmt><decl><type><name>Pointer</name>   <modifier>*</modifier><modifier>*</modifier></type><name>extra_data</name> <init>= <expr><operator>(</operator><name>Pointer</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* bool   **nullFlags = (bool **) PG_GETARG_POINTER(5); */</comment>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>searchMode</name> <init>= <expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TRGM</name>	   <modifier>*</modifier></type><name>trg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>trglen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>trgm</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TrgmPackedGraph</name> <modifier>*</modifier></type><name>graph</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>strategy</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>SimilarityStrategyNumber</name></expr>:</case>
		<case>case <expr><name>WordSimilarityStrategyNumber</name></expr>:</case>
		<case>case <expr><name>StrictWordSimilarityStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>trg</name> <operator>=</operator> <call><name>generate_trgm</name><argument_list>(<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ILikeStrategyNumber</name></expr>:</case>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IGNORECASE</name></cpp:ifndef>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot handle ~~* with case-sensitive trigrams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<comment type="block">/* FALL THRU */</comment>
		<case>case <expr><name>LikeStrategyNumber</name></expr>:</case>

			<comment type="block">/*
			 * For wildcard search we extract all the trigrams that every
			 * potentially-matching string must include.
			 */</comment>
			<expr_stmt><expr><name>trg</name> <operator>=</operator> <call><name>generate_wildcard_trgm</name><argument_list>(<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>,
										 <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RegExpICaseStrategyNumber</name></expr>:</case>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IGNORECASE</name></cpp:ifndef>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot handle ~* with case-sensitive trigrams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<comment type="block">/* FALL THRU */</comment>
		<case>case <expr><name>RegExpStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>trg</name> <operator>=</operator> <call><name>createTrgmNFA</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>PG_GET_COLLATION</name><argument_list>()</argument_list></call></expr></argument>,
								<argument><expr><operator>&amp;</operator><name>graph</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>trg</name> <operator>&amp;&amp;</operator> <call><name>ARRNELEM</name><argument_list>(<argument><expr><name>trg</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Successful regex processing: store NFA-like graph as
				 * extra_data.  GIN API requires an array of nentries
				 * Pointers, but we just put the same value in each element.
				 */</comment>
				<expr_stmt><expr><name>trglen</name> <operator>=</operator> <call><name>ARRNELEM</name><argument_list>(<argument><expr><name>trg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>extra_data</name> <operator>=</operator> <operator>(</operator><name>Pointer</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pointer</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>trglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>trglen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>(</operator><operator>*</operator><name>extra_data</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>graph</name></expr>;</expr_stmt></block_content></block></for>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* No result: have to do full index scan. */</comment>
				<expr_stmt><expr><operator>*</operator><name>nentries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>searchMode</name> <operator>=</operator> <name>GIN_SEARCH_MODE_ALL</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized strategy number: %d"</literal></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>trg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>			<comment type="block">/* keep compiler quiet */</comment>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>trglen</name> <operator>=</operator> <call><name>ARRNELEM</name><argument_list>(<argument><expr><name>trg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>nentries</name> <operator>=</operator> <name>trglen</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>trglen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>entries</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>trglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>GETARR</name><argument_list>(<argument><expr><name>trg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>trglen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type>		<name>item</name> <init>= <expr><call><name>trgm2int</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If no trigram was extracted then we have to scan all the index.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>trglen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>searchMode</name> <operator>=</operator> <name>GIN_SEARCH_MODE_ALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gin_trgm_consistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>check</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StrategyNumber</name></type> <name>strategy</name> <init>= <expr><call><name>PG_GETARG_UINT16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* text    *query = PG_GETARG_TEXT_PP(2); */</comment>
	<decl_stmt><decl><type><name>int32</name></type>		<name>nkeys</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name>    <modifier>*</modifier></type><name>extra_data</name> <init>= <expr><operator>(</operator><name>Pointer</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>recheck</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>,
				<decl><type ref="prev"/><name>ntrue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>nlimit</name></decl>;</decl_stmt>

	<comment type="block">/* All cases served by this function are inexact */</comment>
	<expr_stmt><expr><operator>*</operator><name>recheck</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>strategy</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>SimilarityStrategyNumber</name></expr>:</case>
		<case>case <expr><name>WordSimilarityStrategyNumber</name></expr>:</case>
		<case>case <expr><name>StrictWordSimilarityStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>nlimit</name> <operator>=</operator> <call><name>index_strategy_get_limit</name><argument_list>(<argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Count the matches */</comment>
			<expr_stmt><expr><name>ntrue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>check</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>ntrue</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></for>

			<comment type="block">/*--------------------
			 * If DIVUNION is defined then similarity formula is:
			 * c / (len1 + len2 - c)
			 * where c is number of common trigrams and it stands as ntrue in
			 * this code.  Here we don't know value of len2 but we can assume
			 * that c (ntrue) is a lower bound of len2, so upper bound of
			 * similarity is:
			 * c / (len1 + c - c)  =&gt; c / len1
			 * If DIVUNION is not defined then similarity formula is:
			 * c / max(len1, len2)
			 * And again, c (ntrue) is a lower bound of len2, but c &lt;= len1
			 * just by definition and, consequently, upper bound of
			 * similarity is just c / len1.
			 * So, independently on DIVUNION the upper bound formula is the same.
			 */</comment>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>nkeys</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>:
				<expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float4</name><operator>)</operator> <name>ntrue</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float4</name><operator>)</operator> <name>nkeys</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <name>nlimit</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ILikeStrategyNumber</name></expr>:</case>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IGNORECASE</name></cpp:ifndef>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot handle ~~* with case-sensitive trigrams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<comment type="block">/* FALL THRU */</comment>
		<case>case <expr><name>LikeStrategyNumber</name></expr>:</case>
			<comment type="block">/* Check if all extracted trigrams are presented. */</comment>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>check</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		<case>case <expr><name>RegExpICaseStrategyNumber</name></expr>:</case>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IGNORECASE</name></cpp:ifndef>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot handle ~* with case-sensitive trigrams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<comment type="block">/* FALL THRU */</comment>
		<case>case <expr><name>RegExpStrategyNumber</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>nkeys</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Regex processing gave no result: do full index scan */</comment>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>trigramsMatchGraph</name><argument_list>(<argument><expr><operator>(</operator><name>TrgmPackedGraph</name> <operator>*</operator><operator>)</operator> <name><name>extra_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
										 <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized strategy number: %d"</literal></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>		<comment type="block">/* keep compiler quiet */</comment>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * In all cases, GIN_TRUE is at least as favorable to inclusion as
 * GIN_MAYBE. If no better option is available, simply treat
 * GIN_MAYBE as if it were GIN_TRUE and apply the same test as the binary
 * consistent function.
 */</comment>
<function><type><name>Datum</name></type>
<name>gin_trgm_triconsistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GinTernaryValue</name> <modifier>*</modifier></type><name>check</name> <init>= <expr><operator>(</operator><name>GinTernaryValue</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StrategyNumber</name></type> <name>strategy</name> <init>= <expr><call><name>PG_GETARG_UINT16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* text    *query = PG_GETARG_TEXT_PP(2); */</comment>
	<decl_stmt><decl><type><name>int32</name></type>		<name>nkeys</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name>    <modifier>*</modifier></type><name>extra_data</name> <init>= <expr><operator>(</operator><name>Pointer</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GinTernaryValue</name></type> <name>res</name> <init>= <expr><name>GIN_MAYBE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>,
				<decl><type ref="prev"/><name>ntrue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>boolcheck</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>nlimit</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>strategy</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>SimilarityStrategyNumber</name></expr>:</case>
		<case>case <expr><name>WordSimilarityStrategyNumber</name></expr>:</case>
		<case>case <expr><name>StrictWordSimilarityStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>nlimit</name> <operator>=</operator> <call><name>index_strategy_get_limit</name><argument_list>(<argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Count the matches */</comment>
			<expr_stmt><expr><name>ntrue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>check</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>GIN_FALSE</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>ntrue</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></for>

			<comment type="block">/*
			 * See comment in gin_trgm_consistent() about * upper bound
			 * formula
			 */</comment>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>nkeys</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>
				?</condition><then> <expr><name>GIN_FALSE</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float4</name><operator>)</operator> <name>ntrue</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float4</name><operator>)</operator> <name>nkeys</name><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <name>nlimit</name><operator>)</operator></expr>
							   ?</condition><then> <expr><name>GIN_MAYBE</name></expr> </then><else>: <expr><name>GIN_FALSE</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ILikeStrategyNumber</name></expr>:</case>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IGNORECASE</name></cpp:ifndef>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot handle ~~* with case-sensitive trigrams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<comment type="block">/* FALL THRU */</comment>
		<case>case <expr><name>LikeStrategyNumber</name></expr>:</case>
			<comment type="block">/* Check if all extracted trigrams are presented. */</comment>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>GIN_MAYBE</name></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>check</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>GIN_FALSE</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>GIN_FALSE</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		<case>case <expr><name>RegExpICaseStrategyNumber</name></expr>:</case>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IGNORECASE</name></cpp:ifndef>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot handle ~* with case-sensitive trigrams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<comment type="block">/* FALL THRU */</comment>
		<case>case <expr><name>RegExpStrategyNumber</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>nkeys</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Regex processing gave no result: do full index scan */</comment>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <name>GIN_MAYBE</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/*
				 * As trigramsMatchGraph implements a monotonic boolean
				 * function, promoting all GIN_MAYBE keys to GIN_TRUE will
				 * give a conservative result.
				 */</comment>
				<expr_stmt><expr><name>boolcheck</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>boolcheck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>check</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>GIN_FALSE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>trigramsMatchGraph</name><argument_list>(<argument><expr><operator>(</operator><name>TrgmPackedGraph</name> <operator>*</operator><operator>)</operator> <name><name>extra_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
										<argument><expr><name>boolcheck</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>GIN_FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>boolcheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized strategy number: %d"</literal></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>GIN_FALSE</name></expr>;</expr_stmt>	<comment type="block">/* keep compiler quiet */</comment>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/* All cases served by this function are inexact */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>res</name> <operator>!=</operator> <name>GIN_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_GIN_TERNARY_VALUE</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
