<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/contrib/earthdistance/earthdistance.c"><comment type="block">/* contrib/earthdistance/earthdistance.c */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/geo_decls.h"</cpp:file></cpp:include>	<comment type="block">/* for Point */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>M_PI</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI</name></cpp:macro> <cpp:value>3.14159265358979323846</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<comment type="block">/* Earth's radius is in statute miles. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>EARTH_RADIUS</name> <init>= <expr><literal type="number">3958.747716</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>TWO_PI</name> <init>= <expr><literal type="number">2.0</literal> <operator>*</operator> <name>M_PI</name></expr></init></decl>;</decl_stmt>


<comment type="block" format="doxygen">/******************************************************
 *
 * degtorad - convert degrees to radians
 *
 * arg: double, angle in degrees
 *
 * returns: double, same angle in radians
 ******************************************************/</comment>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>degtorad</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>degrees</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>degrees</name> <operator>/</operator> <literal type="number">360.0</literal><operator>)</operator> <operator>*</operator> <name>TWO_PI</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************
 *
 * geo_distance_internal - distance between points
 *
 * args:
 *	 a pair of points - for each point,
 *	   x-coordinate is longitude in degrees west of Greenwich
 *	   y-coordinate is latitude in degrees above equator
 *
 * returns: double
 *	 distance between the points in miles on earth's surface
 ******************************************************/</comment>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>geo_distance_internal</name><parameter_list>(<parameter><decl><type><name>Point</name> <modifier>*</modifier></type><name>pt1</name></decl></parameter>, <parameter><decl><type><name>Point</name> <modifier>*</modifier></type><name>pt2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>long1</name></decl>,
				<decl><type ref="prev"/><name>lat1</name></decl>,
				<decl><type ref="prev"/><name>long2</name></decl>,
				<decl><type ref="prev"/><name>lat2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>longdiff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>sino</name></decl>;</decl_stmt>

	<comment type="block">/* convert degrees to radians */</comment>

	<expr_stmt><expr><name>long1</name> <operator>=</operator> <call><name>degtorad</name><argument_list>(<argument><expr><name><name>pt1</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lat1</name> <operator>=</operator> <call><name>degtorad</name><argument_list>(<argument><expr><name><name>pt1</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>long2</name> <operator>=</operator> <call><name>degtorad</name><argument_list>(<argument><expr><name><name>pt2</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lat2</name> <operator>=</operator> <call><name>degtorad</name><argument_list>(<argument><expr><name><name>pt2</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* compute difference in longitudes - want &lt; 180 degrees */</comment>
	<expr_stmt><expr><name>longdiff</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>long1</name> <operator>-</operator> <name>long2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>longdiff</name> <operator>&gt;</operator> <name>M_PI</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>longdiff</name> <operator>=</operator> <name>TWO_PI</name> <operator>-</operator> <name>longdiff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>sino</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>sin</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>lat1</name> <operator>-</operator> <name>lat2</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2.</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>lat1</name> <operator>-</operator> <name>lat2</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2.</literal></expr></argument>)</argument_list></call> <operator>+</operator>
				<call><name>cos</name><argument_list>(<argument><expr><name>lat1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>lat2</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>longdiff</name> <operator>/</operator> <literal type="number">2.</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>longdiff</name> <operator>/</operator> <literal type="number">2.</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>sino</name> <operator>&gt;</operator> <literal type="number">1.</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>sino</name> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">2.</literal> <operator>*</operator> <name>EARTH_RADIUS</name> <operator>*</operator> <call><name>asin</name><argument_list>(<argument><expr><name>sino</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/******************************************************
 *
 * geo_distance - distance between points
 *
 * args:
 *	 a pair of points - for each point,
 *	   x-coordinate is longitude in degrees west of Greenwich
 *	   y-coordinate is latitude in degrees above equator
 *
 * returns: float8
 *	 distance between the points in miles on earth's surface
 ******************************************************/</comment>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>geo_distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>geo_distance</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Point</name>	   <modifier>*</modifier></type><name>pt1</name> <init>= <expr><call><name>PG_GETARG_POINT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name>	   <modifier>*</modifier></type><name>pt2</name> <init>= <expr><call><name>PG_GETARG_POINT_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>geo_distance_internal</name><argument_list>(<argument><expr><name>pt1</name></expr></argument>, <argument><expr><name>pt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_FLOAT8</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
