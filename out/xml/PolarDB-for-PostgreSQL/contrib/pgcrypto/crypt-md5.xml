<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/contrib/pgcrypto/crypt-md5.c"><comment type="block">/*
 * File imported from FreeBSD, original by Poul-Henning Kamp.
 *
 * $FreeBSD: src/lib/libcrypt/crypt-md5.c,v 1.5 1999/12/17 20:21:45 peter Exp $
 *
 * contrib/pgcrypto/crypt-md5.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px-crypt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_crypt_a64</name><index>[]</index></name> <init>=
<expr><literal type="string">"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_crypt_to64</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><operator>--</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name><name>_crypt_a64</name><index>[<expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * UNIX password
 */</comment>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>px_crypt_md5</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>passwd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dstlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>magic</name> <init>= <expr><literal type="string">"$1$"</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* This string is magic for this algorithm.
								 * Having it this way, we can get better later
								 * on */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>final</name><index>[<expr><name>MD5_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>sl</name></decl>,
				<decl><type ref="prev"/><name>pl</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PX_MD</name>	   <modifier>*</modifier></type><name>ctx</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ctx1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>l</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>passwd</name> <operator>||</operator> <name>dstlen</name> <operator>&lt;</operator> <literal type="number">120</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Refine the Salt first */</comment>
	<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>salt</name></expr>;</expr_stmt>

	<comment type="block">/* If it starts with the magic string, then skip that */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>sp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* It stops at the first '$', max 8 chars */</comment>
	<for>for <control>(<init><expr><name>ep</name> <operator>=</operator> <name>sp</name></expr>;</init> <condition><expr><operator>*</operator><name>ep</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ep</name> <operator>!=</operator> <literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <name>ep</name> <operator>&lt;</operator> <operator>(</operator><name>sp</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr>;</condition> <incr><expr><name>ep</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></for>

	<comment type="block">/* get the length of the true salt */</comment>
	<expr_stmt><expr><name>sl</name> <operator>=</operator> <name>ep</name> <operator>-</operator> <name>sp</name></expr>;</expr_stmt>

	<comment type="block">/* */</comment>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>px_find_digest</name><argument_list>(<argument><expr><literal type="string">"md5"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>px_find_digest</name><argument_list>(<argument><expr><literal type="string">"md5"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The password first, since that is what is most unknown */</comment>
	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8</name> <operator>*</operator><operator>)</operator> <name>pw</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Then our magic string */</comment>
	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <name>magic</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Then the raw salt */</comment>
	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8</name> <operator>*</operator><operator>)</operator> <name>sp</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Then just as many characters of the MD5(pw,salt,pw) */</comment>
	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx1</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8</name> <operator>*</operator><operator>)</operator> <name>pw</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx1</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8</name> <operator>*</operator><operator>)</operator> <name>sp</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx1</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8</name> <operator>*</operator><operator>)</operator> <name>pw</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_md_finish</name><argument_list>(<argument><expr><name>ctx1</name></expr></argument>, <argument><expr><name>final</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>pl</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>pl</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>pl</name> <operator>-=</operator> <name>MD5_SIZE</name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>final</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pl</name> <operator>&gt;</operator> <name>MD5_SIZE</name></expr> ?</condition><then> <expr><name>MD5_SIZE</name></expr> </then><else>: <expr><name>pl</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/* Don't leave anything around in vm they could use. */</comment>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>final</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>final</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Then something really weird... */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>final</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8</name> <operator>*</operator><operator>)</operator> <name>pw</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

	<comment type="block">/* Now make the output string */</comment>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>px_md_finish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>final</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * and now, just to make sure things don't run too fast On a 60 Mhz
	 * Pentium this takes 34 msec, so you would need 30 seconds to build a
	 * 1000 entry dictionary...
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_md_reset</name><argument_list>(<argument><expr><name>ctx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx1</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8</name> <operator>*</operator><operator>)</operator> <name>pw</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx1</name></expr></argument>, <argument><expr><name>final</name></expr></argument>, <argument><expr><name>MD5_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx1</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8</name> <operator>*</operator><operator>)</operator> <name>sp</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx1</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8</name> <operator>*</operator><operator>)</operator> <name>pw</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx1</name></expr></argument>, <argument><expr><name>final</name></expr></argument>, <argument><expr><name>MD5_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>ctx1</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8</name> <operator>*</operator><operator>)</operator> <name>pw</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>px_md_finish</name><argument_list>(<argument><expr><name>ctx1</name></expr></argument>, <argument><expr><name>final</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>passwd</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name><name>final</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>final</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>final</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_crypt_to64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name><name>final</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>final</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>final</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_crypt_to64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name><name>final</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>final</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>final</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_crypt_to64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name><name>final</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>final</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>final</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_crypt_to64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name><name>final</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>final</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>final</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_crypt_to64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>final</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_crypt_to64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<comment type="block">/* Don't leave anything around in vm they could use. */</comment>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>final</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>final</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>px_md_free</name><argument_list>(<argument><expr><name>ctx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_md_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>passwd</name></expr>;</return>
</block_content>}</block></function>
</unit>
