<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/contrib/pgcrypto/pgp-s2k.c"><comment type="block">/*
 * pgp-s2k.c
 *	  OpenPGP string2key functions.
 *
 * Copyright (c) 2005 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/pgp-s2k.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/backend_random.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>calc_s2k_simple</name><parameter_list>(<parameter><decl><type><name>PGP_S2K</name> <modifier>*</modifier></type><name>s2k</name></decl></parameter>, <parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
				<parameter><decl><type><name>unsigned</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>md_rlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>buf</name><index>[<expr><name>PGP_MAX_DIGEST</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>preload</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>remain</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>s2k</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>md_rlen</name> <operator>=</operator> <call><name>px_md_result_size</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>remain</name> <operator>=</operator> <name><name>s2k</name><operator>-&gt;</operator><name>key_len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>preload</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>remain</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_md_reset</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>preload</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>preload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>preload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>preload</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>px_md_finish</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&gt;</operator> <name>md_rlen</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>md_rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>md_rlen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>remain</name> <operator>-=</operator> <name>md_rlen</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>remain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>calc_s2k_salted</name><parameter_list>(<parameter><decl><type><name>PGP_S2K</name> <modifier>*</modifier></type><name>s2k</name></decl></parameter>, <parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>md_rlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>buf</name><index>[<expr><name>PGP_MAX_DIGEST</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>preload</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>remain</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>md_rlen</name> <operator>=</operator> <call><name>px_md_result_size</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s2k</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>remain</name> <operator>=</operator> <name><name>s2k</name><operator>-&gt;</operator><name>key_len</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>remain</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_md_reset</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>preload</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>preload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>preload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>preload</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>s2k</name><operator>-&gt;</operator><name>salt</name></name></expr></argument>, <argument><expr><name>PGP_S2K_SALT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>px_md_finish</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&gt;</operator> <name>md_rlen</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>md_rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>remain</name> <operator>-=</operator> <name>md_rlen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>md_rlen</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>remain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>calc_s2k_iter_salted</name><parameter_list>(<parameter><decl><type><name>PGP_S2K</name> <modifier>*</modifier></type><name>s2k</name></decl></parameter>, <parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
					 <parameter><decl><type><name>unsigned</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>md_rlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>buf</name><index>[<expr><name>PGP_MAX_DIGEST</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>preload</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>remain</name></decl>,
				<decl><type ref="prev"/><name>c</name></decl>,
				<decl><type ref="prev"/><name>curcnt</name></decl>,
				<decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>s2k_decode_count</name><argument_list>(<argument><expr><name><name>s2k</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>md_rlen</name> <operator>=</operator> <call><name>px_md_result_size</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>remain</name> <operator>=</operator> <name><name>s2k</name><operator>-&gt;</operator><name>key_len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s2k</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>remain</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_md_reset</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>preload</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>preload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>preload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>preload</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>s2k</name><operator>-&gt;</operator><name>salt</name></name></expr></argument>, <argument><expr><name>PGP_S2K_SALT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>curcnt</name> <operator>=</operator> <name>PGP_S2K_SALT</name> <operator>+</operator> <name>key_len</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>curcnt</name> <operator>&lt;</operator> <name>count</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>curcnt</name> <operator>+</operator> <name>PGP_S2K_SALT</name> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>c</name> <operator>=</operator> <name>PGP_S2K_SALT</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>c</name> <operator>=</operator> <name>count</name> <operator>-</operator> <name>curcnt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>s2k</name><operator>-&gt;</operator><name>salt</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>curcnt</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>curcnt</name> <operator>+</operator> <name>key_len</name> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>c</name> <operator>=</operator> <name>key_len</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>curcnt</name> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>c</name> <operator>=</operator> <name>count</name> <operator>-</operator> <name>curcnt</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<break>break;</break></block_content></block></else></if_stmt>
			<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>curcnt</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>px_md_finish</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&gt;</operator> <name>md_rlen</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>md_rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>remain</name> <operator>-=</operator> <name>md_rlen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>md_rlen</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>remain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Decide PGP_S2K_ISALTED iteration count (in OpenPGP one-byte representation)
 *
 * Too small: weak
 * Too big: slow
 * gpg defaults to 96 =&gt; 65536 iters
 *
 * For our default (count=-1) we let it float a bit: 96 + 32 =&gt; between 65536
 * and 262144 iterations.
 *
 * Otherwise, find the smallest number which provides at least the specified
 * iteration count.
 */</comment>
<function><type><specifier>static</specifier> <name>uint8</name></type>
<name>decide_s2k_iter</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>rand_byte</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">96</literal> <operator>+</operator> <operator>(</operator><name>rand_byte</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* this is a bit brute-force, but should be quick enough */</comment>
	<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>s2k_decode_count</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>iter</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
	<return>return <expr><literal type="number">255</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_s2k_fill</name><parameter_list>(<parameter><decl><type><name>PGP_S2K</name> <modifier>*</modifier></type><name>s2k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>digest_algo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>tmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>s2k</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s2k</name><operator>-&gt;</operator><name>digest_algo</name></name> <operator>=</operator> <name>digest_algo</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>s2k</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGP_S2K_SIMPLE</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>PGP_S2K_SALTED</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_backend_random</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>s2k</name><operator>-&gt;</operator><name>salt</name></name></expr></argument>, <argument><expr><name>PGP_S2K_SALT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>PXE_NO_RANDOM</name></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>PGP_S2K_ISALTED</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_backend_random</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>s2k</name><operator>-&gt;</operator><name>salt</name></name></expr></argument>, <argument><expr><name>PGP_S2K_SALT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>PXE_NO_RANDOM</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_backend_random</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>PXE_NO_RANDOM</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>s2k</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <call><name>decide_s2k_iter</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_BAD_S2K_MODE</name></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_s2k_read</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>PGP_S2K</name> <modifier>*</modifier></type><name>s2k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>s2k</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>s2k</name><operator>-&gt;</operator><name>digest_algo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>s2k</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<break>break;</break>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read_fixed</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>s2k</name><operator>-&gt;</operator><name>salt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">3</literal></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read_fixed</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>s2k</name><operator>-&gt;</operator><name>salt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>s2k</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_BAD_S2K_MODE</name></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_s2k_process</name><parameter_list>(<parameter><decl><type><name>PGP_S2K</name> <modifier>*</modifier></type><name>s2k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cipher</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PX_MD</name>	   <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>s2k</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <call><name>pgp_get_cipher_key_size</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>s2k</name><operator>-&gt;</operator><name>key_len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_PGP_UNSUPPORTED_CIPHER</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_load_digest</name><argument_list>(<argument><expr><name><name>s2k</name><operator>-&gt;</operator><name>digest_algo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>s2k</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calc_s2k_simple</name><argument_list>(<argument><expr><name>s2k</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calc_s2k_salted</name><argument_list>(<argument><expr><name>s2k</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">3</literal></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calc_s2k_iter_salted</name><argument_list>(<argument><expr><name>s2k</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_BAD_S2K_MODE</name></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>px_md_free</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
