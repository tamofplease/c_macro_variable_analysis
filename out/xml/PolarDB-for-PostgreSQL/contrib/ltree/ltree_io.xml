<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/contrib/ltree/ltree_io.c"><comment type="block">/*
 * in/out function for ltree and lquery
 * Teodor Sigaev &lt;teodor@stack.net&gt;
 * contrib/ltree/ltree_io.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crc32.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltree_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltree_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>lquery_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>lquery_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNCHAR</name></cpp:macro> <cpp:value>ereport(ERROR, \
					   (errcode(ERRCODE_SYNTAX_ERROR), \
						errmsg("syntax error at position %d", \
						pos)));</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>			<comment type="block">/* length in bytes */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>flag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>wlen</name></decl>;</decl_stmt>			<comment type="block">/* length in characters */</comment>
}</block></struct></type> <name>nodeitem</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTPRS_WAITNAME</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTPRS_WAITDELIM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function><type><name>Datum</name></type>
<name>ltree_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>nodeitem</name>   <modifier>*</modifier></type><name>list</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>lptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>totallen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>state</name> <init>= <expr><name>LTPRS_WAITNAME</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree_level</name> <modifier>*</modifier></type><name>curlevel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>charlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>charlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>charlen</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>num</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>LTREE_MAX_LEVELS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"number of ltree levels (%d) exceeds the maximum allowed (%d)"</literal></expr></argument>,
						<argument><expr><name>num</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>LTREE_MAX_LEVELS</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>list</name> <operator>=</operator> <name>lptr</name> <operator>=</operator> <operator>(</operator><name>nodeitem</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nodeitem</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>num</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>charlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>LTPRS_WAITNAME</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>ISALNUM</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>wlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LTPRS_WAITDELIM</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>LTPRS_WAITDELIM</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name><name>lptr</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>lptr</name><operator>-&gt;</operator><name>wlen</name></name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NAME_TOO_LONG</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"name of level is too long"</literal></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Name length is %d, must "</literal>
									   <literal type="string">"be &lt; 256, in position %d."</literal></expr></argument>,
									   <argument><expr><name><name>lptr</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>totallen</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name><name>lptr</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>LEVEL_HDRSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>lptr</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LTPRS_WAITNAME</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ISALNUM</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<comment type="block">/* internal error */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error in parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>charlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>wlen</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>LTPRS_WAITDELIM</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name><name>lptr</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>lptr</name><operator>-&gt;</operator><name>wlen</name></name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NAME_TOO_LONG</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"name of level is too long"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Name length is %d, must "</literal>
							   <literal type="string">"be &lt; 256, in position %d."</literal></expr></argument>,
							   <argument><expr><name><name>lptr</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>totallen</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name><name>lptr</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>LEVEL_HDRSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>state</name> <operator>==</operator> <name>LTPRS_WAITNAME</name> <operator>&amp;&amp;</operator> <name>lptr</name> <operator>==</operator> <name>list</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Unexpected end of line."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>LTREE_HDRSIZE</name> <operator>+</operator> <name>totallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>LTREE_HDRSIZE</name> <operator>+</operator> <name>totallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>numlevel</name></name> <operator>=</operator> <name>lptr</name> <operator>-</operator> <name>list</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>curlevel</name> <operator>=</operator> <call><name>LTREE_FIRST</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lptr</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>lptr</name> <operator>-</operator> <name>list</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>numlevel</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>curlevel</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>uint16</name><operator>)</operator> <name><name>lptr</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>curlevel</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>lptr</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>lptr</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>curlevel</name> <operator>=</operator> <call><name>LEVEL_NEXT</name><argument_list>(<argument><expr><name>curlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ltree_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ltree</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_LTREE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree_level</name> <modifier>*</modifier></type><name>curlevel</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>curlevel</name> <operator>=</operator> <call><name>LTREE_FIRST</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>numlevel</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>curlevel</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>curlevel</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>curlevel</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>curlevel</name> <operator>=</operator> <call><name>LEVEL_NEXT</name><argument_list>(<argument><expr><name>curlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LQPRS_WAITLEVEL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LQPRS_WAITDELIM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LQPRS_WAITOPEN</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LQPRS_WAITFNUM</name></cpp:macro>	<cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LQPRS_WAITSNUM</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LQPRS_WAITND</name></cpp:macro>	<cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LQPRS_WAITCLOSE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LQPRS_WAITEND</name></cpp:macro>	<cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LQPRS_WAITVAR</name></cpp:macro>	<cpp:value>8</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETVAR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( *((nodeitem**)LQL_FIRST(x)) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEMSIZE</name></cpp:macro>	<cpp:value>MAXALIGN(LQL_HDRSIZE+sizeof(nodeitem*))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXTLEV</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (lquery_level*)( ((char*)(x)) + ITEMSIZE) )</cpp:value></cpp:define>

<function><type><name>Datum</name></type>
<name>lquery_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>totallen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>numOR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>state</name> <init>= <expr><name>LQPRS_WAITLEVEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lquery</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>nodeitem</name>   <modifier>*</modifier></type><name>lptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lquery_level</name> <modifier>*</modifier></type><name>cur</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>curqlevel</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>tmpql</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lquery_variant</name> <modifier>*</modifier></type><name>lrptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>hasnot</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>wasbad</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>charlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>charlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>numOR</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>charlen</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <name>LQUERY_MAX_LEVELS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"number of lquery levels (%d) exceeds the maximum allowed (%d)"</literal></expr></argument>,
						<argument><expr><name>num</name></expr></argument>, <argument><expr><name>LQUERY_MAX_LEVELS</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>curqlevel</name> <operator>=</operator> <name>tmpql</name> <operator>=</operator> <operator>(</operator><name>lquery_level</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>ITEMSIZE</name> <operator>*</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>charlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>LQPRS_WAITLEVEL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>ISALNUM</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>GETVAR</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>lptr</name> <operator>=</operator> <operator>(</operator><name>nodeitem</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nodeitem</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>numOR</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITDELIM</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>numvar</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>GETVAR</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>lptr</name> <operator>=</operator> <operator>(</operator><name>nodeitem</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nodeitem</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>numOR</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITDELIM</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>numvar</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>LQL_NOT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>hasnot</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITOPEN</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>LQPRS_WAITVAR</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>ISALNUM</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>lptr</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITDELIM</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>numvar</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>LQPRS_WAITDELIM</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>lptr</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>LVAR_INCASE</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>LVAR_INCASE</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>lptr</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>LVAR_ANYEND</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>LVAR_ANYEND</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>lptr</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>LVAR_SUBLEXEME</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>LVAR_SUBLEXEME</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name><name>lptr</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator>
					<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>lptr</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_SUBLEXEME</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>-</operator>
					<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>lptr</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_INCASE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>-</operator>
					<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>lptr</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_ANYEND</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>lptr</name><operator>-&gt;</operator><name>wlen</name></name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NAME_TOO_LONG</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"name of level is too long"</literal></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Name length is %d, must "</literal>
									   <literal type="string">"be &lt; 256, in position %d."</literal></expr></argument>,
									   <argument><expr><name><name>lptr</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITVAR</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name><name>lptr</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator>
					<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>lptr</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_SUBLEXEME</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>-</operator>
					<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>lptr</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_INCASE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>-</operator>
					<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>lptr</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_ANYEND</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>lptr</name><operator>-&gt;</operator><name>wlen</name></name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NAME_TOO_LONG</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"name of level is too long"</literal></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Name length is %d, must "</literal>
									   <literal type="string">"be &lt; 256, in position %d."</literal></expr></argument>,
									   <argument><expr><name><name>lptr</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITLEVEL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>curqlevel</name> <operator>=</operator> <call><name>NEXTLEV</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>ISALNUM</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>lptr</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>LQPRS_WAITOPEN</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITFNUM</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>low</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>high</name></name> <operator>=</operator> <name>LTREE_MAX_LEVELS</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>curqlevel</name> <operator>=</operator> <call><name>NEXTLEV</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITLEVEL</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>LQPRS_WAITFNUM</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITSNUM</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>t_isdigit</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>low</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>low</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>low</name></expr></argument> &gt;</argument_list></name> <name>LTREE_MAX_LEVELS</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"lquery syntax error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Low limit (%d) exceeds the maximum allowed (%d)."</literal></expr></argument>,
									   <argument><expr><name>low</name></expr></argument>, <argument><expr><name>LTREE_MAX_LEVELS</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>low</name></name> <operator>=</operator> <operator>(</operator><name>uint16</name><operator>)</operator> <name>low</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITND</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>LQPRS_WAITSNUM</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>t_isdigit</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>high</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>high</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>high</name></expr></argument> &gt;</argument_list></name> <name>LTREE_MAX_LEVELS</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"lquery syntax error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"High limit (%d) exceeds the maximum allowed (%d)."</literal></expr></argument>,
									   <argument><expr><name>high</name></expr></argument>, <argument><expr><name>LTREE_MAX_LEVELS</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>high</name></name> <operator>=</operator> <operator>(</operator><name>uint16</name><operator>)</operator> <name>high</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITCLOSE</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>high</name></name> <operator>=</operator> <name>LTREE_MAX_LEVELS</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITEND</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>LQPRS_WAITCLOSE</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITEND</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>t_isdigit</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>LQPRS_WAITND</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>high</name></name> <operator>=</operator> <name><name>curqlevel</name><operator>-&gt;</operator><name>low</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITEND</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITSNUM</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>t_isdigit</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>LQPRS_WAITEND</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>LQPRS_WAITLEVEL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>curqlevel</name> <operator>=</operator> <call><name>NEXTLEV</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>UNCHAR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<comment type="block">/* internal error */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error in parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>charlen</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>LQPRS_WAITDELIM</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>wlen</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>LQPRS_WAITDELIM</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>lptr</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"lquery syntax error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Unexpected end of line."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>lptr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name><name>lptr</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator>
			<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>lptr</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_SUBLEXEME</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>-</operator>
			<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>lptr</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_INCASE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>-</operator>
			<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>lptr</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_ANYEND</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>lptr</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"lquery syntax error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Unexpected end of line."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>lptr</name><operator>-&gt;</operator><name>wlen</name></name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NAME_TOO_LONG</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"name of level is too long"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Name length is %d, must "</literal>
							   <literal type="string">"be &lt; 256, in position %d."</literal></expr></argument>,
							   <argument><expr><name><name>lptr</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>LQPRS_WAITOPEN</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>high</name></name> <operator>=</operator> <name>LTREE_MAX_LEVELS</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>state</name> <operator>!=</operator> <name>LQPRS_WAITEND</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"lquery syntax error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Unexpected end of line."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>curqlevel</name> <operator>=</operator> <name>tmpql</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>totallen</name> <operator>=</operator> <name>LQUERY_HDRSIZE</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>curqlevel</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>tmpql</name> <operator>&lt;</operator> <name>num</name> <operator>*</operator> <name>ITEMSIZE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>totallen</name> <operator>+=</operator> <name>LQL_HDRSIZE</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>curqlevel</name><operator>-&gt;</operator><name>numvar</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>lptr</name> <operator>=</operator> <call><name>GETVAR</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>lptr</name> <operator>-</operator> <call><name>GETVAR</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>curqlevel</name><operator>-&gt;</operator><name>numvar</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>totallen</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>LVAR_HDRSIZE</name> <operator>+</operator> <name><name>lptr</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>lptr</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>curqlevel</name><operator>-&gt;</operator><name>low</name></name> <operator>&gt;</operator> <name><name>curqlevel</name><operator>-&gt;</operator><name>high</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"lquery syntax error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Low limit (%d) is greater than upper (%d)."</literal></expr></argument>,
							   <argument><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>low</name></name></expr></argument>, <argument><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>high</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>curqlevel</name> <operator>=</operator> <call><name>NEXTLEV</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>lquery</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>totallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>totallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>numlevel</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>firstgood</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>hasnot</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>LQUERY_HASNOT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>LQUERY_FIRST</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>curqlevel</name> <operator>=</operator> <name>tmpql</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>curqlevel</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>tmpql</name> <operator>&lt;</operator> <name>num</name> <operator>*</operator> <name>ITEMSIZE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>curqlevel</name></expr></argument>, <argument><expr><name>LQL_HDRSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>totallen</name></name> <operator>=</operator> <name>LQL_HDRSIZE</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>curqlevel</name><operator>-&gt;</operator><name>numvar</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>lrptr</name> <operator>=</operator> <call><name>LQL_FIRST</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lptr</name> <operator>=</operator> <call><name>GETVAR</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>lptr</name> <operator>-</operator> <call><name>GETVAR</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>curqlevel</name><operator>-&gt;</operator><name>numvar</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>totallen</name></name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>LVAR_HDRSIZE</name> <operator>+</operator> <name><name>lptr</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lrptr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>lptr</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lrptr</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name><name>lptr</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lrptr</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>ltree_crc32_sz</name><argument_list>(<argument><expr><name><name>lptr</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>lptr</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>lrptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>lptr</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>lptr</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>lptr</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>lrptr</name> <operator>=</operator> <call><name>LVAR_NEXT</name><argument_list>(<argument><expr><name>lrptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>GETVAR</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>numvar</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>cur</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>wasbad</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>wasbad</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>firstgood</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>wasbad</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>curqlevel</name> <operator>=</operator> <call><name>NEXTLEV</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>LQL_NEXT</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>tmpql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>lquery_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lquery</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_LQUERY_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>,
				<decl><type ref="prev"/><name>totallen</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lquery_level</name> <modifier>*</modifier></type><name>curqlevel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lquery_variant</name> <modifier>*</modifier></type><name>curtlevel</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>curqlevel</name> <operator>=</operator> <call><name>LQUERY_FIRST</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>numlevel</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>totallen</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>curqlevel</name><operator>-&gt;</operator><name>numvar</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>totallen</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>curqlevel</name><operator>-&gt;</operator><name>numvar</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name><name>curqlevel</name><operator>-&gt;</operator><name>totallen</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>totallen</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">11</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>curqlevel</name> <operator>=</operator> <call><name>LQL_NEXT</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>totallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>curqlevel</name> <operator>=</operator> <call><name>LQUERY_FIRST</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>numlevel</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>curqlevel</name><operator>-&gt;</operator><name>numvar</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>curqlevel</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LQL_NOT</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>curtlevel</name> <operator>=</operator> <call><name>LQL_FIRST</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>curqlevel</name><operator>-&gt;</operator><name>numvar</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>curtlevel</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>curtlevel</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>curtlevel</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curtlevel</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_SUBLEXEME</name><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curtlevel</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_INCASE</name><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'@'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curtlevel</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_ANYEND</name><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>curtlevel</name> <operator>=</operator> <call><name>LVAR_NEXT</name><argument_list>(<argument><expr><name>curtlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>curqlevel</name><operator>-&gt;</operator><name>low</name></name> <operator>==</operator> <name><name>curqlevel</name><operator>-&gt;</operator><name>high</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"*{%d}"</literal></expr></argument>, <argument><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>low</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>curqlevel</name><operator>-&gt;</operator><name>low</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>curqlevel</name><operator>-&gt;</operator><name>high</name></name> <operator>==</operator> <name>LTREE_MAX_LEVELS</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"*{,%d}"</literal></expr></argument>, <argument><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>high</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>curqlevel</name><operator>-&gt;</operator><name>high</name></name> <operator>==</operator> <name>LTREE_MAX_LEVELS</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"*{%d,}"</literal></expr></argument>, <argument><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>low</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"*{%d,%d}"</literal></expr></argument>, <argument><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>low</name></name></expr></argument>, <argument><expr><name><name>curqlevel</name><operator>-&gt;</operator><name>high</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>curqlevel</name> <operator>=</operator> <call><name>LQL_NEXT</name><argument_list>(<argument><expr><name>curqlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
