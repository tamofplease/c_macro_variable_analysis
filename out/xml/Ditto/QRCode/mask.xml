<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/Ditto/QRCode/mask.c"><comment type="block">/*
 * qrencode - QR Code encoder
 *
 * Masking.
 * Copyright (C) 2006-2011 Kentaro Fukuchi &lt;kentaro@fukuchi.org&gt;
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qrencode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qrspec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mask.h"</cpp:file></cpp:include>

<function><type><name>__STATIC</name> <name>int</name></type> <name>Mask_writeFormatInformation</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>format</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>blacks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>QRspec_getFormatInfo</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>format</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>blacks</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0x85</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0x84</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>frame</name><index>[<expr><name>width</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>frame</name><index>[<expr><name>width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>frame</name><index>[<expr><name>width</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>format</name><operator>=</operator> <name>format</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>format</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>blacks</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0x85</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0x84</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>frame</name><index>[<expr><name>width</name> <operator>*</operator> <operator>(</operator><name>width</name> <operator>-</operator> <literal type="number">7</literal> <operator>+</operator> <name>i</name><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>frame</name><index>[<expr><name>width</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>frame</name><index>[<expr><name>width</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">6</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>format</name><operator>=</operator> <name>format</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>blacks</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Demerit coefficients.
 * See Section 8.8.2, pp.45, JIS X0510:2004.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N1</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N2</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N3</name></cpp:macro> <cpp:value>(40)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N4</name></cpp:macro> <cpp:value>(10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASKMAKER</name><parameter_list>(<parameter><type><name>__exp__</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>int x, y;\
	int b = 0;\
\
	for(y=0; y&lt;width; y++) {\
		for(x=0; x&lt;width; x++) {\
			if(*s &amp; 0x80) {\
				*d = *s;\
			} else {\
				*d = *s ^ ((__exp__) == 0);\
			}\
			b += (int)(*d &amp; 1);\
			s++; d++;\
		}\
	}\
	return b;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mask_mask0</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<macro><name>MASKMAKER</name><argument_list>(<argument>(x+y)&amp;<literal type="number">1</literal></argument>)</argument_list></macro>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mask_mask1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<macro><name>MASKMAKER</name><argument_list>(<argument>y&amp;<literal type="number">1</literal></argument>)</argument_list></macro>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mask_mask2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<macro><name>MASKMAKER</name><argument_list>(<argument>x%<literal type="number">3</literal></argument>)</argument_list></macro>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mask_mask3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<macro><name>MASKMAKER</name><argument_list>(<argument>(x+y)%<literal type="number">3</literal></argument>)</argument_list></macro>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mask_mask4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<macro><name>MASKMAKER</name><argument_list>(<argument>((y/<literal type="number">2</literal>)+(x/<literal type="number">3</literal>))&amp;<literal type="number">1</literal></argument>)</argument_list></macro>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mask_mask5</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<macro><name>MASKMAKER</name><argument_list>(<argument>((x*y)&amp;<literal type="number">1</literal>)+(x*y)%<literal type="number">3</literal></argument>)</argument_list></macro>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mask_mask6</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<macro><name>MASKMAKER</name><argument_list>(<argument>(((x*y)&amp;<literal type="number">1</literal>)+(x*y)%<literal type="number">3</literal>)&amp;<literal type="number">1</literal></argument>)</argument_list></macro>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mask_mask7</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<macro><name>MASKMAKER</name><argument_list>(<argument>(((x*y)%<literal type="number">3</literal>)+((x+y)&amp;<literal type="number">1</literal>))&amp;<literal type="number">1</literal></argument>)</argument_list></macro>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maskNum</name></cpp:macro> <cpp:value>(8)</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>int</name></type> <name>MaskMaker</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>MaskMaker</name> <modifier>*</modifier></type><name><name>maskMakers</name><index>[<expr><name>maskNum</name></expr>]</index></name> <init>= <expr><block>{
	<expr><name>Mask_mask0</name></expr>, <expr><name>Mask_mask1</name></expr>, <expr><name>Mask_mask2</name></expr>, <expr><name>Mask_mask3</name></expr>,
	<expr><name>Mask_mask4</name></expr>, <expr><name>Mask_mask5</name></expr>, <expr><name>Mask_mask6</name></expr>, <expr><name>Mask_mask7</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_TESTS</name></cpp:ifdef>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>Mask_makeMaskedFrame</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>masked</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>masked</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>width</name> <operator>*</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>masked</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>maskMakers</name><index>[<expr><name>mask</name></expr>]</index></name><operator>(</operator><name>width</name><operator>,</operator> <name>frame</name><operator>,</operator> <name>masked</name><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><name>masked</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>Mask_makeMask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>masked</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>mask</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>mask</name> <operator>&gt;=</operator> <name>maskNum</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>masked</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>width</name> <operator>*</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>masked</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>maskMakers</name><index>[<expr><name>mask</name></expr>]</index></name><operator>(</operator><name>width</name><operator>,</operator> <name>frame</name><operator>,</operator> <name>masked</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Mask_writeFormatInformation</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>masked</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>masked</name></expr>;</return>
</block_content>}</block></function>


<comment type="line">//static int n1;</comment>
<comment type="line">//static int n2;</comment>
<comment type="line">//static int n3;</comment>
<comment type="line">//static int n4;</comment>

<function><type><name>__STATIC</name> <name>int</name></type> <name>Mask_calcN1N3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>runLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>demerit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fact</name></decl>;</decl_stmt>

	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>runLength</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>demerit</name> <operator>+=</operator> <name>N1</name> <operator>+</operator> <operator>(</operator><name><name>runLength</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
			<comment type="line">//n1 += N1 + (runLength[i] - 5);</comment>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>length</name><operator>-</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>runLength</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>fact</name> <operator>=</operator> <name><name>runLength</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name><name>runLength</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>fact</name> <operator>&amp;&amp;</operator>
				   <name><name>runLength</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>fact</name> <operator>&amp;&amp;</operator>
				   <name><name>runLength</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>fact</name> <operator>&amp;&amp;</operator>
				   <name><name>runLength</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>fact</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>runLength</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>*</operator> <name>fact</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name>demerit</name> <operator>+=</operator> <name>N3</name></expr>;</expr_stmt>
						<comment type="line">//n3 += N3;</comment>
					</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>i</name><operator>+</operator><literal type="number">4</literal> <operator>&gt;=</operator> <name>length</name> <operator>||</operator> <name><name>runLength</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>*</operator> <name>fact</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name>demerit</name> <operator>+=</operator> <name>N3</name></expr>;</expr_stmt>
						<comment type="line">//n3 += N3;</comment>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>demerit</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__STATIC</name> <name>int</name></type> <name>Mask_calcN2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b22</name></decl>, <decl><type ref="prev"/><name>w22</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>demerit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>frame</name> <operator>+</operator> <name>width</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>b22</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><name>width</name></expr>]</index></name> <operator>&amp;</operator> <name><name>p</name> <index>[<expr><operator>-</operator><name>width</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>w22</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>p</name><index>[<expr><operator>-</operator><name>width</name></expr>]</index></name> <operator>|</operator> <name><name>p</name> <index>[<expr><operator>-</operator><name>width</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><operator>(</operator><name>b22</name> <operator>|</operator> <operator>(</operator><name>w22</name> <operator>^</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>demerit</name> <operator>+=</operator> <name>N2</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>demerit</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__STATIC</name> <name>int</name></type> <name>Mask_calcRunLengthH</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>runLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>prev</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>frame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>runLength</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>runLength</name><index>[<expr><name>head</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>frame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>frame</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name>prev</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>head</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>runLength</name><index>[<expr><name>head</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>frame</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>runLength</name><index>[<expr><name>head</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>head</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>__STATIC</name> <name>int</name></type> <name>Mask_calcRunLengthV</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>runLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>prev</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>frame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>runLength</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>runLength</name><index>[<expr><name>head</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>frame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>frame</name><index>[<expr><name>i</name> <operator>*</operator> <name>width</name></expr>]</index></name> <operator>^</operator> <name>prev</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>head</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>runLength</name><index>[<expr><name>head</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>frame</name><index>[<expr><name>i</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>runLength</name><index>[<expr><name>head</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>head</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>__STATIC</name> <name>int</name></type> <name>Mask_evaluateSymbol</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>demerit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>runLength</name><index>[<expr><name>QRSPEC_WIDTH_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>demerit</name> <operator>+=</operator> <call><name>Mask_calcN2</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>Mask_calcRunLengthH</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>frame</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>width</name></expr></argument>, <argument><expr><name>runLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>demerit</name> <operator>+=</operator> <call><name>Mask_calcN1N3</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>runLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>Mask_calcRunLengthV</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>frame</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>runLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>demerit</name> <operator>+=</operator> <call><name>Mask_calcN1N3</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>runLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>demerit</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>Mask_mask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mask</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bestMask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>minDemerit</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>blacks</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bratio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>demerit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>w2</name> <init>= <expr><name>width</name> <operator>*</operator> <name>width</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>mask</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>bestMask</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>bestMask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>maskNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<comment type="line">//		n1 = n2 = n3 = n4 = 0;</comment>
		<expr_stmt><expr><name>demerit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>blacks</name> <operator>=</operator> <name><name>maskMakers</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><name>width</name><operator>,</operator> <name>frame</name><operator>,</operator> <name>mask</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>blacks</name> <operator>+=</operator> <call><name>Mask_writeFormatInformation</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>bratio</name> <operator>=</operator> <operator>(</operator><literal type="number">200</literal> <operator>*</operator> <name>blacks</name> <operator>+</operator> <name>w2</name><operator>)</operator> <operator>/</operator> <name>w2</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* (int)(100*blacks/w2+0.5) */</comment>
		<expr_stmt><expr><name>demerit</name> <operator>=</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>bratio</name> <operator>-</operator> <literal type="number">50</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <name>N4</name></expr>;</expr_stmt>
<comment type="line">//		n4 = demerit;</comment>
		<expr_stmt><expr><name>demerit</name> <operator>+=</operator> <call><name>Mask_evaluateSymbol</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//		printf("(%d,%d,%d,%d)=%d\n", n1, n2, n3 ,n4, demerit);</comment>
		<if_stmt><if>if<condition>(<expr><name>demerit</name> <operator>&lt;</operator> <name>minDemerit</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>minDemerit</name> <operator>=</operator> <name>demerit</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bestMask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>bestMask</name></expr>;</return>
</block_content>}</block></function>
</unit>
