<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/Ditto/QRCode/qrenc.c"><comment type="block" format="doxygen">/**
 * qrencode - QR Code encoder
 *
 * QR Code encoding tool
 * Copyright (C) 2006-2014 Kentaro Fukuchi &lt;kentaro@fukuchi.org&gt;
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;png.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qrencode.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCHES_PER_METER</name></cpp:macro> <cpp:value>(100.0/2.54)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>casesensitive</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>eightbit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>size</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>margin</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dpi</name> <init>= <expr><literal type="number">72</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>structured</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>micro</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>QRecLevel</name></type> <name>level</name> <init>= <expr><name>QR_ECLEVEL_L</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>QRencodeMode</name></type> <name>hint</name> <init>= <expr><name>QR_MODE_8</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>fg_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>bg_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>verbose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<enum>enum <name>imageType</name> <block>{
	<decl><name>PNG_TYPE</name></decl>,
	<decl><name>PNG32_TYPE</name></decl>,
	<decl><name>EPS_TYPE</name></decl>,
	<decl><name>SVG_TYPE</name></decl>,
	<decl><name>ANSI_TYPE</name></decl>,
	<decl><name>ANSI256_TYPE</name></decl>,
	<decl><name>ASCII_TYPE</name></decl>,
	<decl><name>ASCIIi_TYPE</name></decl>,
	<decl><name>UTF8_TYPE</name></decl>,
	<decl><name>ANSIUTF8_TYPE</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>imageType</name></name></type> <name>image_type</name> <init>= <expr><name>PNG_TYPE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"help"</literal></expr>         , <expr><name>no_argument</name></expr>      , <expr><name>NULL</name></expr>, <expr><literal type="char">'h'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"output"</literal></expr>       , <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'o'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"level"</literal></expr>        , <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'l'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"size"</literal></expr>         , <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'s'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"symversion"</literal></expr>   , <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'v'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"margin"</literal></expr>       , <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'m'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"dpi"</literal></expr>          , <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"type"</literal></expr>         , <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'t'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"structured"</literal></expr>   , <expr><name>no_argument</name></expr>      , <expr><name>NULL</name></expr>, <expr><literal type="char">'S'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"kanji"</literal></expr>        , <expr><name>no_argument</name></expr>      , <expr><name>NULL</name></expr>, <expr><literal type="char">'k'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"casesensitive"</literal></expr>, <expr><name>no_argument</name></expr>      , <expr><name>NULL</name></expr>, <expr><literal type="char">'c'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"ignorecase"</literal></expr>   , <expr><name>no_argument</name></expr>      , <expr><name>NULL</name></expr>, <expr><literal type="char">'i'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"8bit"</literal></expr>         , <expr><name>no_argument</name></expr>      , <expr><name>NULL</name></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"rle"</literal></expr>          , <expr><name>no_argument</name></expr>      , <expr><operator>&amp;</operator><name>rle</name></expr>,   <expr><literal type="number">1</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"micro"</literal></expr>        , <expr><name>no_argument</name></expr>      , <expr><name>NULL</name></expr>, <expr><literal type="char">'M'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"foreground"</literal></expr>   , <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'f'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"background"</literal></expr>   , <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'b'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"version"</literal></expr>      , <expr><name>no_argument</name></expr>      , <expr><name>NULL</name></expr>, <expr><literal type="char">'V'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"verbose"</literal></expr>      , <expr><name>no_argument</name></expr>      , <expr><operator>&amp;</operator><name>verbose</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>optstring</name> <init>= <expr><literal type="string">"ho:l:s:v:m:d:t:Skci8MV"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>help</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>longopt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><ternary><condition><expr><name>status</name></expr> ?</condition><then> <expr><name>stderr</name></expr> </then><else>: <expr><name>stdout</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>,
<argument><expr><literal type="string">"qrencode version %s\n"</literal>
<literal type="string">"Copyright (C) 2006-2014 Kentaro Fukuchi\n"</literal></expr></argument>, <argument><expr><call><name>QRcode_APIVersionString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>help</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>longopt</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>,
<argument><expr><literal type="string">"Usage: qrencode [OPTION]... [STRING]\n"</literal>
<literal type="string">"Encode input data in a QR Code and save as a PNG or EPS image.\n\n"</literal>
<literal type="string">"  -h, --help   display the help message. -h displays only the help of short\n"</literal>
<literal type="string">"               options.\n\n"</literal>
<literal type="string">"  -o FILENAME, --output=FILENAME\n"</literal>
<literal type="string">"               write image to FILENAME. If '-' is specified, the result\n"</literal>
<literal type="string">"               will be output to standard output. If -S is given, structured\n"</literal>
<literal type="string">"               symbols are written to FILENAME-01.png, FILENAME-02.png, ...\n"</literal>
<literal type="string">"               (suffix is removed from FILENAME, if specified)\n\n"</literal>
<literal type="string">"  -s NUMBER, --size=NUMBER\n"</literal>
<literal type="string">"               specify module size in dots (pixels). (default=3)\n\n"</literal>
<literal type="string">"  -l {LMQH}, --level={LMQH}\n"</literal>
<literal type="string">"               specify error correction level from L (lowest) to H (highest).\n"</literal>
<literal type="string">"               (default=L)\n\n"</literal>
<literal type="string">"  -v NUMBER, --symversion=NUMBER\n"</literal>
<literal type="string">"               specify the version of the symbol. See SYMBOL VERSIONS for more\n"</literal>
<literal type="string">"               information. (default=auto)\n\n"</literal>
<literal type="string">"  -m NUMBER, --margin=NUMBER\n"</literal>
<literal type="string">"               specify the width of the margins. (default=4 (2 for Micro QR)))\n\n"</literal>
<literal type="string">"  -d NUMBER, --dpi=NUMBER\n"</literal>
<literal type="string">"               specify the DPI of the generated PNG. (default=72)\n\n"</literal>
<literal type="string">"  -t {PNG,PNG32,EPS,SVG,ANSI,ANSI256,ASCII,ASCIIi,UTF8,ANSIUTF8}, --type={...}\n"</literal>
<literal type="string">"               specify the type of the generated image. (default=PNG)\n\n"</literal>
<literal type="string">"  -S, --structured\n"</literal>
<literal type="string">"               make structured symbols. Version must be specified.\n\n"</literal>
<literal type="string">"  -k, --kanji  assume that the input text contains kanji (shift-jis).\n\n"</literal>
<literal type="string">"  -c, --casesensitive\n"</literal>
<literal type="string">"               encode lower-case alphabet characters in 8-bit mode. (default)\n\n"</literal>
<literal type="string">"  -i, --ignorecase\n"</literal>
<literal type="string">"               ignore case distinctions and use only upper-case characters.\n\n"</literal>
<literal type="string">"  -8, --8bit   encode entire data in 8-bit mode. -k, -c and -i will be ignored.\n\n"</literal>
<literal type="string">"      --rle    enable run-length encoding for SVG.\n\n"</literal>
<literal type="string">"  -M, --micro  encode in a Micro QR Code. (experimental)\n\n"</literal>
<literal type="string">"      --foreground=RRGGBB[AA]\n"</literal>
<literal type="string">"      --background=RRGGBB[AA]\n"</literal>
<literal type="string">"               specify foreground/background color in hexadecimal notation.\n"</literal>
<literal type="string">"               6-digit (RGB) or 8-digit (RGBA) form are supported.\n"</literal>
<literal type="string">"               Color output support available only in PNG, EPS and SVG.\n\n"</literal>
<literal type="string">"  -V, --version\n"</literal>
<literal type="string">"               display the version number and copyrights of the qrencode.\n\n"</literal>
<literal type="string">"      --verbose\n"</literal>
<literal type="string">"               display verbose information to stderr.\n\n"</literal>
<literal type="string">"  [STRING]     input data. If it is not specified, data will be taken from\n"</literal>
<literal type="string">"               standard input.\n\n"</literal>
<literal type="string">"*SYMBOL VERSIONS\n"</literal>
<literal type="string">"               The symbol versions of QR Code range from Version 1 to Version\n"</literal>
<literal type="string">"               40. Each version has a different module configuration or number\n"</literal>
<literal type="string">"               of modules, ranging from Version 1 (21 x 21 modules) up to\n"</literal>
<literal type="string">"               Version 40 (177 x 177 modules). Each higher version number\n"</literal>
<literal type="string">"               comprises 4 additional modules per side by default. See\n"</literal>
<literal type="string">"               http://www.qrcode.com/en/about/version.html for a detailed\n"</literal>
<literal type="string">"               version list.\n"</literal></expr></argument>

			)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>,
<argument><expr><literal type="string">"Usage: qrencode [OPTION]... [STRING]\n"</literal>
<literal type="string">"Encode input data in a QR Code and save as a PNG or EPS image.\n\n"</literal>
<literal type="string">"  -h           display this message.\n"</literal>
<literal type="string">"  --help       display the usage of long options.\n"</literal>
<literal type="string">"  -o FILENAME  write image to FILENAME. If '-' is specified, the result\n"</literal>
<literal type="string">"               will be output to standard output. If -S is given, structured\n"</literal>
<literal type="string">"               symbols are written to FILENAME-01.png, FILENAME-02.png, ...\n"</literal>
<literal type="string">"               (suffix is removed from FILENAME, if specified)\n"</literal>
<literal type="string">"  -s NUMBER    specify module size in dots (pixels). (default=3)\n"</literal>
<literal type="string">"  -l {LMQH}    specify error correction level from L (lowest) to H (highest).\n"</literal>
<literal type="string">"               (default=L)\n"</literal>
<literal type="string">"  -v NUMBER    specify the version of the symbol. (default=auto)\n"</literal>
<literal type="string">"  -m NUMBER    specify the width of the margins. (default=4 (2 for Micro))\n"</literal>
<literal type="string">"  -d NUMBER    specify the DPI of the generated PNG. (default=72)\n"</literal>
<literal type="string">"  -t {PNG,PNG32,EPS,SVG,ANSI,ANSI256,ASCII,ASCIIi,UTF8,ANSIUTF8}\n"</literal>
<literal type="string">"               specify the type of the generated image. (default=PNG)\n"</literal>
<literal type="string">"  -S           make structured symbols. Version must be specified.\n"</literal>
<literal type="string">"  -k           assume that the input text contains kanji (shift-jis).\n"</literal>
<literal type="string">"  -c           encode lower-case alphabet characters in 8-bit mode. (default)\n"</literal>
<literal type="string">"  -i           ignore case distinctions and use only upper-case characters.\n"</literal>
<literal type="string">"  -8           encode entire data in 8-bit mode. -k, -c and -i will be ignored.\n"</literal>
<literal type="string">"  -M           encode in a Micro QR Code.\n"</literal>
<literal type="string">"  -V           display the version number and copyrights of the qrencode.\n"</literal>
<literal type="string">"  [STRING]     input data. If it is not specified, data will be taken from\n"</literal>
<literal type="string">"               standard input.\n\n"</literal>
<literal type="string">"  Try \"qrencode --help\" for more options.\n"</literal></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>color_set</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%02x%02x%02x%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>len</name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>col</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%02x%02x%02x%02x%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <name>len</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>col</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DATA_SIZE</name></cpp:macro> <cpp:value>(7090 * 16)</cpp:value></cpp:define> <comment type="block">/* from the specification */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>readStdin</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>MAX_DATA_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Memory allocation failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_DATA_SIZE</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"No input data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Input data is too large.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>ret</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

	<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>openFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>outfile</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>outfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>outfile</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to create file: %s\n"</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>fp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fillRow</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>color</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>row</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>writePNG</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QRcode</name> <modifier>*</modifier></type><name>qrcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>imageType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt> <comment type="line">// avoid clobbering by setjmp.</comment>
	<decl_stmt><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>png_infop</name></type> <name>info_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>png_colorp</name></type> <name>palette</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>png_byte</name></type> <name><name>alpha_values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>row</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>xx</name></decl>, <decl><type ref="prev"/><name>yy</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>realwidth</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>realwidth</name> <operator>=</operator> <operator>(</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>margin</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>size</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>PNG_TYPE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>row</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>realwidth</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>PNG32_TYPE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>row</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>realwidth</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Internal error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>outfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>outfile</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to create file: %s\n"</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>png_ptr</name> <operator>=</operator> <call><name>png_create_write_struct</name><argument_list>(<argument><expr><name>PNG_LIBPNG_VER_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>png_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize PNG writer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info_ptr</name> <operator>=</operator> <call><name>png_create_info_struct</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>info_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize PNG write.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><call><name>png_jmpbuf</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>png_destroy_write_struct</name><argument_list>(<argument><expr><operator>&amp;</operator><name>png_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to write PNG image.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>PNG_TYPE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>palette</name> <operator>=</operator> <operator>(</operator><name>png_colorp</name><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>png_color</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>palette</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>red</name>   <operator>=</operator> <name><name>fg_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>green</name> <operator>=</operator> <name><name>fg_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>blue</name>  <operator>=</operator> <name><name>fg_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>red</name>   <operator>=</operator> <name><name>bg_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>green</name> <operator>=</operator> <name><name>bg_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>palette</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>blue</name>  <operator>=</operator> <name><name>bg_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>alpha_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fg_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>alpha_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bg_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>png_set_PLTE</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><name>palette</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>png_set_tRNS</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><name>alpha_values</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>png_init_io</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>PNG_TYPE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>png_set_IHDR</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>,
				<argument><expr><name>realwidth</name></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>,
				<argument><expr><literal type="number">1</literal></expr></argument>,
				<argument><expr><name>PNG_COLOR_TYPE_PALETTE</name></expr></argument>,
				<argument><expr><name>PNG_INTERLACE_NONE</name></expr></argument>,
				<argument><expr><name>PNG_COMPRESSION_TYPE_DEFAULT</name></expr></argument>,
				<argument><expr><name>PNG_FILTER_TYPE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>png_set_IHDR</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>,
				<argument><expr><name>realwidth</name></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>,
				<argument><expr><literal type="number">8</literal></expr></argument>,
				<argument><expr><name>PNG_COLOR_TYPE_RGB_ALPHA</name></expr></argument>,
				<argument><expr><name>PNG_INTERLACE_NONE</name></expr></argument>,
				<argument><expr><name>PNG_COMPRESSION_TYPE_DEFAULT</name></expr></argument>,
				<argument><expr><name>PNG_FILTER_TYPE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>png_set_pHYs</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>,
			<argument><expr><name>dpi</name> <operator>*</operator> <name>INCHES_PER_METER</name></expr></argument>,
			<argument><expr><name>dpi</name> <operator>*</operator> <name>INCHES_PER_METER</name></expr></argument>,
			<argument><expr><name>PNG_RESOLUTION_METER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>png_write_info</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>PNG_TYPE</name></expr>)</condition> <block>{<block_content>
	<comment type="block">/* top margin */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>(</operator><name>realwidth</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>margin</name> <operator>*</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>png_write_row</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* data */</comment>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>qrcode</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>(</operator><name>realwidth</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>q</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>q</name> <operator>+=</operator> <name>margin</name> <operator>*</operator> <name>size</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>bit</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <operator>(</operator><name>margin</name> <operator>*</operator> <name>size</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
			<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<for>for<control>(<init><expr><name>xx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>xx</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>xx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>q</name> <operator>^=</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bit</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>bit</name><operator>--</operator></expr>;</expr_stmt>
					<if_stmt><if>if<condition>(<expr><name>bit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>bit</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
				<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></for>
			<for>for<control>(<init><expr><name>yy</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>yy</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>yy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>png_write_row</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
		<comment type="block">/* bottom margin */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>(</operator><name>realwidth</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>margin</name> <operator>*</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>png_write_row</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
	<comment type="block">/* top margin */</comment>
		<expr_stmt><expr><call><name>fillRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>, <argument><expr><name>bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>margin</name> <operator>*</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>png_write_row</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* data */</comment>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>qrcode</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>fillRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>, <argument><expr><name>bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<for>for<control>(<init><expr><name>xx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>xx</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>xx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>row</name><index>[<expr><operator>(</operator><operator>(</operator><name>margin</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>*</operator> <name>size</name> <operator>+</operator> <name>xx</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fg_color</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
				<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></for>
			<for>for<control>(<init><expr><name>yy</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>yy</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>yy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>png_write_row</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
		<comment type="block">/* bottom margin */</comment>
		<expr_stmt><expr><call><name>fillRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>, <argument><expr><name>bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>margin</name> <operator>*</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>png_write_row</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>png_write_end</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>png_destroy_write_struct</name><argument_list>(<argument><expr><operator>&amp;</operator><name>png_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>palette</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>writeEPS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QRcode</name> <modifier>*</modifier></type><name>qrcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>row</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>yy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>realwidth</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>openFile</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   
	<expr_stmt><expr><name>realwidth</name> <operator>=</operator> <operator>(</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>margin</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>size</name></expr>;</expr_stmt>
	<comment type="block">/* EPS file header */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%%!PS-Adobe-2.0 EPSF-1.2\n"</literal>
				<literal type="string">"%%%%BoundingBox: 0 0 %d %d\n"</literal>
				<literal type="string">"%%%%Pages: 1 1\n"</literal>
				<literal type="string">"%%%%EndComments\n"</literal></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* draw point */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"/p { "</literal>
				<literal type="string">"moveto "</literal>
				<literal type="string">"0 1 rlineto "</literal>
				<literal type="string">"1 0 rlineto "</literal>
				<literal type="string">"0 -1 rlineto "</literal>
				<literal type="string">"fill "</literal>
				<literal type="string">"} bind def\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* set color */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"gsave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%f %f %f setrgbcolor\n"</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bg_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bg_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bg_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%d %d scale\n"</literal></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"0 0 p\ngrestore\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%f %f %f setrgbcolor\n"</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>fg_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>fg_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>fg_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%d %d scale\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* data */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>qrcode</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>row</name> <operator>=</operator> <operator>(</operator><name>p</name><operator>+</operator><operator>(</operator><name>y</name><operator>*</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>yy</name> <operator>=</operator> <operator>(</operator><name>margin</name> <operator>+</operator> <name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		
		<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><operator>*</operator><operator>(</operator><name>row</name><operator>+</operator><name>x</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%d %d p "</literal></expr></argument>, <argument><expr><name>margin</name> <operator>+</operator> <name>x</name></expr></argument>,  <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n%%%%EOF\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writeSVG_writeRect</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>opacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>fg_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;rect x=\"%d\" y=\"%d\" width=\"%d\" height=\"1\" "</literal>\
				<literal type="string">"fill=\"#%s\" fill-opacity=\"%f\" /&gt;\n"</literal></expr></argument>, 
				<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>opacity</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;rect x=\"%d\" y=\"%d\" width=\"%d\" height=\"1\" "</literal>\
				<literal type="string">"fill=\"#%s\" /&gt;\n"</literal></expr></argument>, 
				<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>col</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>writeSVG</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QRcode</name> <modifier>*</modifier></type><name>qrcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>row</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x0</name></decl>, <decl><type ref="prev"/><name>pen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>symwidth</name></decl>, <decl><type ref="prev"/><name>realwidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>fg</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bg</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>fg_opacity</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>bg_opacity</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>openFile</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>scale</name> <operator>=</operator> <name>dpi</name> <operator>*</operator> <name>INCHES_PER_METER</name> <operator>/</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>symwidth</name> <operator>=</operator> <name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>margin</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>realwidth</name> <operator>=</operator> <name>symwidth</name> <operator>*</operator> <name>size</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"%02x%02x%02x"</literal></expr></argument>, <argument><expr><name><name>fg_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fg_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,  <argument><expr><name><name>fg_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>bg</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"%02x%02x%02x"</literal></expr></argument>, <argument><expr><name><name>bg_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bg_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,  <argument><expr><name><name>bg_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fg_opacity</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>fg_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>bg_opacity</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>bg_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

	<comment type="block">/* XML declaration */</comment>
	<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\n"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* DTD 
	   No document type specified because "while a DTD is provided in [the SVG] 
	   specification, the use of DTDs for validating XML documents is known to be 
	   problematic. In particular, DTDs do not handle namespaces gracefully. It 
	   is *not* recommended that a DOCTYPE declaration be included in SVG 
	   documents." 
	   http://www.w3.org/TR/2003/REC-SVG11-20030114/intro.html#Namespace
	*/</comment>

	<comment type="block">/* Vanity remark */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"&lt;!-- Created with qrencode %s (http://fukuchi.org/works/qrencode/index.html.en) --&gt;\n"</literal></expr></argument>, 
			<argument><expr><call><name>QRcode_APIVersionString</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* SVG code start */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"&lt;svg width=\"%0.2fcm\" height=\"%0.2fcm\" viewBox=\"0 0 %d %d\""</literal>\
			<literal type="string">" preserveAspectRatio=\"none\" version=\"1.1\""</literal>\
			<literal type="string">" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n"</literal></expr></argument>, 
			<argument><expr><name>realwidth</name> <operator>/</operator> <name>scale</name></expr></argument>, <argument><expr><name>realwidth</name> <operator>/</operator> <name>scale</name></expr></argument>, <argument><expr><name>symwidth</name></expr></argument>, <argument><expr><name>symwidth</name></expr></argument>
		   )</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make named group */</comment>
	<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"\t&lt;g id=\"QRcode\"&gt;\n"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make solid background */</comment>
	<if_stmt><if>if<condition>(<expr><name><name>bg_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t\t&lt;rect x=\"0\" y=\"0\" width=\"%d\" height=\"%d\" fill=\"#%s\" fill-opacity=\"%f\" /&gt;\n"</literal></expr></argument>, <argument><expr><name>symwidth</name></expr></argument>, <argument><expr><name>symwidth</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>, <argument><expr><name>bg_opacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t\t&lt;rect x=\"0\" y=\"0\" width=\"%d\" height=\"%d\" fill=\"#%s\" /&gt;\n"</literal></expr></argument>, <argument><expr><name>symwidth</name></expr></argument>, <argument><expr><name>symwidth</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Create new viewbox for QR data */</comment>
	<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"\t\t&lt;g id=\"Pattern\"&gt;\n"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Write data */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>qrcode</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>row</name> <operator>=</operator> <operator>(</operator><name>p</name><operator>+</operator><operator>(</operator><name>y</name><operator>*</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

		<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rle</name></expr> )</condition> <block>{<block_content>
			<comment type="block">/* no RLE */</comment>
			<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<if_stmt><if>if<condition>(<expr><operator>*</operator><operator>(</operator><name>row</name><operator>+</operator><name>x</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>writeSVG_writeRect</name><argument_list>(<argument><expr><name>fp</name></expr></argument>,	<argument><expr><name>margin</name> <operator>+</operator> <name>x</name></expr></argument>,
								<argument><expr><name>margin</name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
								<argument><expr><name>fg</name></expr></argument>, <argument><expr><name>fg_opacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="block">/* simple RLE */</comment>
			<expr_stmt><expr><name>pen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pen</name></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><name>pen</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>row</name><operator>+</operator><name>x</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>x0</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>row</name><operator>+</operator><name>x</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>writeSVG_writeRect</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>x0</name> <operator>+</operator> <name>margin</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>margin</name></expr></argument>, <argument><expr><name>x</name><operator>-</operator><name>x0</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>fg_opacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>pen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></for>
			<if_stmt><if>if<condition>( <expr><name>pen</name></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>writeSVG_writeRect</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>x0</name> <operator>+</operator> <name>margin</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>margin</name></expr></argument>, <argument><expr><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>x0</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>fg_opacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Close QR data viewbox */</comment>
	<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"\t\t&lt;/g&gt;\n"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Close group */</comment>
	<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"\t&lt;/g&gt;\n"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Close SVG code */</comment>
	<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"&lt;/svg&gt;\n"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>fp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writeANSI_margin</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>realwidth</name></decl></parameter>,
                             <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>white</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>white_s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>white_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>white_s</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>realwidth</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>white_s</name> <operator>+</operator> <name>realwidth</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"\033[0m\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// reset to default colors</comment>
	<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>margin</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>writeANSI</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QRcode</name> <modifier>*</modifier></type><name>qrcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>row</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>realwidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>white</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>black</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>white_s</name></decl>, <decl><type ref="prev"/><name>black_s</name></decl>, <decl><type ref="prev"/><name>buffer_s</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>image_type</name> <operator>==</operator> <name>ANSI256_TYPE</name></expr>)</condition><block>{<block_content>
		<comment type="block">/* codes for 256 color compatible terminals */</comment>
		<expr_stmt><expr><name>white</name> <operator>=</operator> <literal type="string">"\033[48;5;231m"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>white_s</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>black</name> <operator>=</operator> <literal type="string">"\033[48;5;16m"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>black_s</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>white</name> <operator>=</operator> <literal type="string">"\033[47m"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>white_s</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>black</name> <operator>=</operator> <literal type="string">"\033[40m"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>black_s</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>openFile</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>realwidth</name> <operator>=</operator> <operator>(</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>margin</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer_s</name> <operator>=</operator> <operator>(</operator><name>realwidth</name> <operator>*</operator> <name>white_s</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>buffer_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* top margin */</comment>
	<expr_stmt><expr><call><name>writeANSI_margin</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>white_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* data */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>qrcode</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>row</name> <operator>=</operator> <operator>(</operator><name>p</name><operator>+</operator><operator>(</operator><name>y</name><operator>*</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>white_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>margin</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
			<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"  "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><operator>*</operator><operator>(</operator><name>row</name><operator>+</operator><name>x</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name>last</name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><name>black_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name>last</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>white_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"  "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if<condition>( <expr><name>last</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>white_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>margin</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
			<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"  "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"\033[0m\n"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* bottom margin */</comment>
	<expr_stmt><expr><call><name>writeANSI_margin</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>white_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writeUTF8_margin</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>realwidth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>white</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>margin</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>white</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>realwidth</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\342\226\210"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>reset</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>writeUTF8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QRcode</name> <modifier>*</modifier></type><name>qrcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_ansi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>realwidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>white</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reset</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>use_ansi</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><name>white</name> <operator>=</operator> <literal type="string">"\033[40;37;1m"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>reset</name> <operator>=</operator> <literal type="string">"\033[0m"</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>white</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>reset</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>openFile</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>realwidth</name> <operator>=</operator> <operator>(</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>margin</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* top margin */</comment>
	<expr_stmt><expr><call><name>writeUTF8_margin</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* data */</comment>
	<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>row1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>row2</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>row1</name> <operator>=</operator> <name><name>qrcode</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>y</name><operator>*</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>row2</name> <operator>=</operator> <name>row1</name> <operator>+</operator> <name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>white</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>margin</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\342\226\210"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>row1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name>y</name> <operator>&lt;</operator> <name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>row2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\342\226\204"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name>y</name> <operator>&lt;</operator> <name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>row2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\342\226\200"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\342\226\210"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>

		<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>margin</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\342\226\210"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>reset</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* bottom margin */</comment>
	<expr_stmt><expr><call><name>writeUTF8_margin</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writeASCII_margin</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>realwidth</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>invert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>h</name> <operator>=</operator> <name>margin</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>invert</name></expr>?</condition><then><expr><literal type="char">'#'</literal></expr></then><else>:<expr><literal type="char">' '</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>realwidth</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>realwidth</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>writeASCII</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QRcode</name> <modifier>*</modifier></type><name>qrcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>invert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>realwidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>buffer_s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>black</name> <init>= <expr><literal type="char">'#'</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>white</name> <init>= <expr><literal type="char">' '</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>invert</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>black</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>white</name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>openFile</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>realwidth</name> <operator>=</operator> <operator>(</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>margin</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer_s</name> <operator>=</operator> <name>realwidth</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><name>buffer_s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* top margin */</comment>
	<expr_stmt><expr><call><name>writeASCII_margin</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>invert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* data */</comment>
	<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>qrcode</name><operator>-&gt;</operator><name>data</name></name><operator>+</operator><operator>(</operator><name>y</name><operator>*</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>margin</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>margin</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

		<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>black</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>black</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>white</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>white</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>margin</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>margin</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>fp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* bottom margin */</comment>
	<expr_stmt><expr><call><name>writeASCII_margin</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>realwidth</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>invert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>QRcode</name> <modifier>*</modifier></type><name>encode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>intext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRcode</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>micro</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>eightbit</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>QRcode_encodeDataMQR</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>intext</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>QRcode_encodeStringMQR</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>intext</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>casesensitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>eightbit</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>QRcode_encodeData</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>intext</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>QRcode_encodeString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>intext</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>casesensitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qrencode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>intext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRcode</name> <modifier>*</modifier></type><name>qrcode</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>qrcode</name> <operator>=</operator> <call><name>encode</name><argument_list>(<argument><expr><name>intext</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>qrcode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to encode the input data: Input data too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"Failed to encode the input data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"File: %s, Version: %d\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>outfile</name><operator>!=</operator><name>NULL</name><operator>)</operator></expr>?</condition><then><expr><name>outfile</name></expr></then><else>:<expr><literal type="string">"(stdout)"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>qrcode</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch<condition>(<expr><name>image_type</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>PNG_TYPE</name></expr>:</case>
		<case>case <expr><name>PNG32_TYPE</name></expr>:</case>
			<expr_stmt><expr><call><name>writePNG</name><argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>image_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>EPS_TYPE</name></expr>:</case>
			<expr_stmt><expr><call><name>writeEPS</name><argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SVG_TYPE</name></expr>:</case>
			<expr_stmt><expr><call><name>writeSVG</name><argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ANSI_TYPE</name></expr>:</case>
		<case>case <expr><name>ANSI256_TYPE</name></expr>:</case>
			<expr_stmt><expr><call><name>writeANSI</name><argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ASCIIi_TYPE</name></expr>:</case>
			<expr_stmt><expr><call><name>writeASCII</name><argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ASCII_TYPE</name></expr>:</case>
			<expr_stmt><expr><call><name>writeASCII</name><argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>UTF8_TYPE</name></expr>:</case>
			<expr_stmt><expr><call><name>writeUTF8</name><argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ANSIUTF8_TYPE</name></expr>:</case>
			<expr_stmt><expr><call><name>writeUTF8</name><argument_list>(<argument><expr><name>qrcode</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown image type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>QRcode_free</name><argument_list>(<argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>QRcode_List</name> <modifier>*</modifier></type><name>encodeStructured</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>intext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRcode_List</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>eightbit</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>QRcode_encodeDataStructured</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>intext</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>QRcode_encodeStringStructured</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>intext</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>casesensitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qrencodeStructured</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>intext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRcode_List</name> <modifier>*</modifier></type><name>qrlist</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><name>FILENAME_MAX</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>suffix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_suffix</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>suffix_size</name></decl>;</decl_stmt>

	<switch>switch<condition>(<expr><name>image_type</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>PNG_TYPE</name></expr>:</case>
			<expr_stmt><expr><name>type_suffix</name> <operator>=</operator> <literal type="string">".png"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>EPS_TYPE</name></expr>:</case>
			<expr_stmt><expr><name>type_suffix</name> <operator>=</operator> <literal type="string">".eps"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SVG_TYPE</name></expr>:</case>
			<expr_stmt><expr><name>type_suffix</name> <operator>=</operator> <literal type="string">".svg"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ANSI_TYPE</name></expr>:</case>
		<case>case <expr><name>ANSI256_TYPE</name></expr>:</case>
		<case>case <expr><name>ASCII_TYPE</name></expr>:</case>
		<case>case <expr><name>UTF8_TYPE</name></expr>:</case>
		<case>case <expr><name>ANSIUTF8_TYPE</name></expr>:</case>
			<expr_stmt><expr><name>type_suffix</name> <operator>=</operator> <literal type="string">".txt"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown image type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<if_stmt><if>if<condition>(<expr><name>outfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"An output filename must be specified to store the structured images.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>suffix_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>type_suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>suffix_size</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>q</name> <operator>=</operator> <name>base</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>suffix_size</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>type_suffix</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>suffix</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name>qrlist</name> <operator>=</operator> <call><name>encodeStructured</name><argument_list>(<argument><expr><name>intext</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>qrlist</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to encode the input data: Input data too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"Failed to encode the input data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name>qrlist</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to encode the input data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>suffix</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>FILENAME_MAX</name></expr></argument>, <argument><expr><literal type="string">"%s-%02d%s"</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>FILENAME_MAX</name></expr></argument>, <argument><expr><literal type="string">"%s-%02d"</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"File: %s, Version: %d\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<switch>switch<condition>(<expr><name>image_type</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>PNG_TYPE</name></expr>:</case> 
			<case>case <expr><name>PNG32_TYPE</name></expr>:</case> 
				<expr_stmt><expr><call><name>writePNG</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>image_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>EPS_TYPE</name></expr>:</case> 
				<expr_stmt><expr><call><name>writeEPS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SVG_TYPE</name></expr>:</case> 
				<expr_stmt><expr><call><name>writeSVG</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ANSI_TYPE</name></expr>:</case>
			<case>case <expr><name>ANSI256_TYPE</name></expr>:</case>
				<expr_stmt><expr><call><name>writeANSI</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ASCIIi_TYPE</name></expr>:</case>
				<expr_stmt><expr><call><name>writeASCII</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ASCII_TYPE</name></expr>:</case>
				<expr_stmt><expr><call><name>writeASCII</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>UTF8_TYPE</name></expr>:</case>
				<expr_stmt><expr><call><name>writeUTF8</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ANSIUTF8_TYPE</name></expr>:</case>
				<expr_stmt><expr><call><name>writeUTF8</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<default>default:</default>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown image type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>suffix</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>QRcode_List_free</name><argument_list>(<argument><expr><name>qrlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>, <decl><type ref="prev"/><name>lindex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>intext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>optstring</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lindex</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<switch>switch<condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'h'</literal></expr>:</case>
				<if_stmt><if>if<condition>(<expr><name>lindex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'o'</literal></expr>:</case>
				<expr_stmt><expr><name>outfile</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'s'</literal></expr>:</case>
				<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid size: %d\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'v'</literal></expr>:</case>
				<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name>version</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid version: %d\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'l'</literal></expr>:</case>
				<switch>switch<condition>(<expr><operator>*</operator><name>optarg</name></expr>)</condition> <block>{<block_content>
					<case>case <expr><literal type="char">'l'</literal></expr>:</case>
					<case>case <expr><literal type="char">'L'</literal></expr>:</case>
						<expr_stmt><expr><name>level</name> <operator>=</operator> <name>QR_ECLEVEL_L</name></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'m'</literal></expr>:</case>
					<case>case <expr><literal type="char">'M'</literal></expr>:</case>
						<expr_stmt><expr><name>level</name> <operator>=</operator> <name>QR_ECLEVEL_M</name></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'q'</literal></expr>:</case>
					<case>case <expr><literal type="char">'Q'</literal></expr>:</case>
						<expr_stmt><expr><name>level</name> <operator>=</operator> <name>QR_ECLEVEL_Q</name></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'h'</literal></expr>:</case>
					<case>case <expr><literal type="char">'H'</literal></expr>:</case>
						<expr_stmt><expr><name>level</name> <operator>=</operator> <name>QR_ECLEVEL_H</name></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid level: %s\n"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>
				<break>break;</break>
			<case>case <expr><literal type="char">'m'</literal></expr>:</case>
				<expr_stmt><expr><name>margin</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name>margin</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid margin: %d\n"</literal></expr></argument>, <argument><expr><name>margin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'d'</literal></expr>:</case>
				<expr_stmt><expr><name>dpi</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>dpi</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid DPI: %d\n"</literal></expr></argument>, <argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'t'</literal></expr>:</case>
				<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"png32"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>image_type</name> <operator>=</operator> <name>PNG32_TYPE</name></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>image_type</name> <operator>=</operator> <name>PNG_TYPE</name></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"eps"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>image_type</name> <operator>=</operator> <name>EPS_TYPE</name></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"svg"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>image_type</name> <operator>=</operator> <name>SVG_TYPE</name></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"ansi"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>image_type</name> <operator>=</operator> <name>ANSI_TYPE</name></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"ansi256"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>image_type</name> <operator>=</operator> <name>ANSI256_TYPE</name></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"asciii"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>image_type</name> <operator>=</operator> <name>ASCIIi_TYPE</name></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"ascii"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>image_type</name> <operator>=</operator> <name>ASCII_TYPE</name></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"utf8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>image_type</name> <operator>=</operator> <name>UTF8_TYPE</name></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"ansiutf8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>image_type</name> <operator>=</operator> <name>ANSIUTF8_TYPE</name></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid image type: %s\n"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'S'</literal></expr>:</case>
				<expr_stmt><expr><name>structured</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'k'</literal></expr>:</case>
				<expr_stmt><expr><name>hint</name> <operator>=</operator> <name>QR_MODE_KANJI</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'c'</literal></expr>:</case>
				<expr_stmt><expr><name>casesensitive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'i'</literal></expr>:</case>
				<expr_stmt><expr><name>casesensitive</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'8'</literal></expr>:</case>
				<expr_stmt><expr><name>eightbit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'M'</literal></expr>:</case>
				<expr_stmt><expr><name>micro</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'f'</literal></expr>:</case>
				<if_stmt><if>if<condition>(<expr><call><name>color_set</name><argument_list>(<argument><expr><name>fg_color</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid foreground color value.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'b'</literal></expr>:</case>
				<if_stmt><if>if<condition>(<expr><call><name>color_set</name><argument_list>(<argument><expr><name>bg_color</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid background color value.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'V'</literal></expr>:</case>
				<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">0</literal></expr>:</case>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Try \"qrencode --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>outfile</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>image_type</name> <operator>==</operator> <name>PNG_TYPE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"No output filename is given.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>intext</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>intext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>intext</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>intext</name> <operator>=</operator> <call><name>readStdin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>micro</name> <operator>&amp;&amp;</operator> <name>version</name> <operator>&gt;</operator> <name>MQRSPEC_VERSION_MAX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Version should be less or equal to %d.\n"</literal></expr></argument>, <argument><expr><name>MQRSPEC_VERSION_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><name>micro</name> <operator>&amp;&amp;</operator> <name>version</name> <operator>&gt;</operator> <name>QRSPEC_VERSION_MAX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Version should be less or equal to %d.\n"</literal></expr></argument>, <argument><expr><name>QRSPEC_VERSION_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>margin</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>micro</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>margin</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>margin</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>micro</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Version must be specified to encode a Micro QR Code symbol.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>structured</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Micro QR Code does not support structured symbols.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>structured</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Version must be specified to encode structured symbols.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>qrencodeStructured</name><argument_list>(<argument><expr><name>intext</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>qrencode</name><argument_list>(<argument><expr><name>intext</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
