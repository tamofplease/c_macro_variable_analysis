<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/Ditto/QRCode/rscode.c"><comment type="block">/*
 * qrencode - QR Code encoder
 *
 * Reed solomon encoder. This code is taken from Phil Karn's libfec then
 * editted and packed into a pair of .c and .h files.
 *
 * Copyright (C) 2002, 2003, 2004, 2006 Phil Karn, KA9Q
 * (libfec is released under the GNU Lesser General Public License.)
 *
 * Copyright (C) 2006-2011 Kentaro Fukuchi &lt;kentaro@fukuchi.org&gt;
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBPTHREAD</name></cpp:ifdef>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rscode.h"</cpp:file></cpp:include>

<comment type="block">/* Stuff specific to the 8-bit symbol version of the general purpose RS codecs
 *
 */</comment>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>data_t</name>;</typedef>


<comment type="block" format="doxygen">/**
 * Reed-Solomon codec control block
 */</comment>
<struct>struct <name>_RS</name> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>mm</name></decl>;</decl_stmt>              <comment type="block">/* Bits per symbol */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>nn</name></decl>;</decl_stmt>              <comment type="block">/* Symbols per block (= (1&lt;&lt;mm)-1) */</comment>
	<decl_stmt><decl><type><name>data_t</name> <modifier>*</modifier></type><name>alpha_to</name></decl>;</decl_stmt>     <comment type="block">/* log lookup table */</comment>
	<decl_stmt><decl><type><name>data_t</name> <modifier>*</modifier></type><name>index_of</name></decl>;</decl_stmt>     <comment type="block">/* Antilog lookup table */</comment>
	<decl_stmt><decl><type><name>data_t</name> <modifier>*</modifier></type><name>genpoly</name></decl>;</decl_stmt>      <comment type="block">/* Generator polynomial */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>nroots</name></decl>;</decl_stmt>     <comment type="block">/* Number of generator roots = number of parity symbols */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>fcr</name></decl>;</decl_stmt>        <comment type="block">/* First consecutive root, index form */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>prim</name></decl>;</decl_stmt>       <comment type="block">/* Primitive element, index form */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>iprim</name></decl>;</decl_stmt>      <comment type="block">/* prim-th root of 1, index form */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>pad</name></decl>;</decl_stmt>        <comment type="block">/* Padding bytes in shortened block */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>gfpoly</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>_RS</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>RS</name> <modifier>*</modifier></type><name>rslist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBPTHREAD</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>rslist_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>modnn</name><parameter_list>(<parameter><decl><type><name>RS</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<block_content>
	<while>while <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>rs</name><operator>-&gt;</operator><name>nn</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>-=</operator> <name><name>rs</name><operator>-&gt;</operator><name>nn</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>mm</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <name><name>rs</name><operator>-&gt;</operator><name>nn</name></name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODNN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>modnn(rs,x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MM</name></cpp:macro> <cpp:value>(rs-&gt;mm)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NN</name></cpp:macro> <cpp:value>(rs-&gt;nn)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_TO</name></cpp:macro> <cpp:value>(rs-&gt;alpha_to)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_OF</name></cpp:macro> <cpp:value>(rs-&gt;index_of)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENPOLY</name></cpp:macro> <cpp:value>(rs-&gt;genpoly)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NROOTS</name></cpp:macro> <cpp:value>(rs-&gt;nroots)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCR</name></cpp:macro> <cpp:value>(rs-&gt;fcr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIM</name></cpp:macro> <cpp:value>(rs-&gt;prim)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPRIM</name></cpp:macro> <cpp:value>(rs-&gt;iprim)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAD</name></cpp:macro> <cpp:value>(rs-&gt;pad)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A0</name></cpp:macro> <cpp:value>(NN)</cpp:value></cpp:define>


<comment type="block">/* Initialize a Reed-Solomon codec
 * symsize = symbol size, bits
 * gfpoly = Field generator polynomial coefficients
 * fcr = first root of RS code generator polynomial, index form
 * prim = primitive element to generate polynomial roots
 * nroots = RS code generator polynomial degree (number of roots)
 * pad = padding bytes at front of shortened block
 */</comment>
<function><type><specifier>static</specifier> <name>RS</name> <modifier>*</modifier></type><name>init_rs_char</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>symsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gfpoly</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fcr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nroots</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>RS</name> <modifier>*</modifier></type><name>rs</name></decl>;</decl_stmt>


<comment type="block">/* Common code for intializing a Reed-Solomon control block (char or int symbols)
 * Copyright 2004 Phil Karn, KA9Q
 * May be used under the terms of the GNU Lesser General Public License (LGPL)
 */</comment>
<comment type="line">//#undef NULL</comment>
<comment type="line">//#define NULL ((void *)0)</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>sr</name></decl>,<decl><type ref="prev"/><name>root</name></decl>,<decl><type ref="prev"/><name>iprim</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <comment type="block">/* Check parameter ranges */</comment>
  <if_stmt><if>if<condition>(<expr><call><call><name><name>symsize</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>symsize</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
    <goto>goto <name>done</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name>fcr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fcr</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>symsize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><name>prim</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>prim</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>symsize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><name>nroots</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>nroots</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>symsize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* Can't have more roots than symbol values! */</comment>
  <if_stmt><if>if<condition>(<expr><name>pad</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>pad</name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>symsize</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>nroots</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* Too much padding */</comment>

  <expr_stmt><expr><name>rs</name> <operator>=</operator> <operator>(</operator><name>RS</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>rs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>mm</name></name> <operator>=</operator> <name>symsize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nn</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>symsize</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <name>pad</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>alpha_to</name></name> <operator>=</operator> <operator>(</operator><name>data_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>rs</name><operator>-&gt;</operator><name>nn</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>alpha_to</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <goto>goto <name>done</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>index_of</name></name> <operator>=</operator> <operator>(</operator><name>data_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>rs</name><operator>-&gt;</operator><name>nn</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>index_of</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>alpha_to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <goto>goto <name>done</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Generate Galois field lookup tables */</comment>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>index_of</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>A0</name></expr>;</expr_stmt> <comment type="block">/* log(zero) = -inf */</comment>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>alpha_to</name><index>[<expr><name>A0</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* alpha**-inf = 0 */</comment>
  <expr_stmt><expr><name>sr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>rs</name><operator>-&gt;</operator><name>nn</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>index_of</name><index>[<expr><name>sr</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>alpha_to</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sr</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>sr</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>symsize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>sr</name> <operator>^=</operator> <name>gfpoly</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>sr</name> <operator>&amp;=</operator> <name><name>rs</name><operator>-&gt;</operator><name>nn</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>(<expr><name>sr</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
    <comment type="block">/* field generator polynomial is not primitive! */</comment>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>alpha_to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>index_of</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <goto>goto <name>done</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Form RS code generator polynomial from its roots */</comment>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>genpoly</name></name> <operator>=</operator> <operator>(</operator><name>data_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>nroots</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>genpoly</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>alpha_to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>index_of</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <goto>goto <name>done</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>fcr</name></name> <operator>=</operator> <name>fcr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>prim</name></name> <operator>=</operator> <name>prim</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nroots</name></name> <operator>=</operator> <name>nroots</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>gfpoly</name></name> <operator>=</operator> <name>gfpoly</name></expr>;</expr_stmt>

  <comment type="block">/* Find prim-th root of 1, used in decoding */</comment>
  <for>for<control>(<init><expr><name>iprim</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><operator>(</operator><name>iprim</name> <operator>%</operator> <name>prim</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><name>iprim</name> <operator>+=</operator> <name><name>rs</name><operator>-&gt;</operator><name>nn</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <empty_stmt>;</empty_stmt></block_content></block></for>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>iprim</name></name> <operator>=</operator> <name>iprim</name> <operator>/</operator> <name>prim</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>genpoly</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator><expr><name>root</name><operator>=</operator><name>fcr</name><operator>*</operator><name>prim</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nroots</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator><expr><name>root</name> <operator>+=</operator> <name>prim</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>genpoly</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* Multiply rs-&gt;genpoly[] by  @**(root + x) */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>genpoly</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>genpoly</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>rs</name><operator>-&gt;</operator><name>genpoly</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>rs</name><operator>-&gt;</operator><name>alpha_to</name><index>[<expr><call><name>modnn</name><argument_list>(<argument><expr><name>rs</name></expr></argument>,<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>index_of</name><index>[<expr><name><name>rs</name><operator>-&gt;</operator><name>genpoly</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name>root</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>genpoly</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>rs</name><operator>-&gt;</operator><name>genpoly</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* rs-&gt;genpoly[0] can never be zero */</comment>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>genpoly</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rs</name><operator>-&gt;</operator><name>alpha_to</name><index>[<expr><call><name>modnn</name><argument_list>(<argument><expr><name>rs</name></expr></argument>,<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>index_of</name><index>[<expr><name><name>rs</name><operator>-&gt;</operator><name>genpoly</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name>root</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <comment type="block">/* convert rs-&gt;genpoly[] to index form for quicker encoding */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nroots</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>genpoly</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rs</name><operator>-&gt;</operator><name>index_of</name><index>[<expr><name><name>rs</name><operator>-&gt;</operator><name>genpoly</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
 <label><name>done</name>:</label><empty_stmt>;</empty_stmt>

  <return>return <expr><name>rs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RS</name> <modifier>*</modifier></type><name>init_rs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>symsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gfpoly</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fcr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nroots</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RS</name> <modifier>*</modifier></type><name>rs</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBPTHREAD</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rslist_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<for>for<control>(<init><expr><name>rs</name> <operator>=</operator> <name>rslist</name></expr>;</init> <condition><expr><name>rs</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>rs</name> <operator>=</operator> <name><name>rs</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>pad</name></name> <operator>!=</operator> <name>pad</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>nroots</name></name> <operator>!=</operator> <name>nroots</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>mm</name></name> <operator>!=</operator> <name>symsize</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>gfpoly</name></name> <operator>!=</operator> <name>gfpoly</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>fcr</name></name> <operator>!=</operator> <name>fcr</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>prim</name></name> <operator>!=</operator> <name>prim</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<goto>goto <name>DONE</name>;</goto>
	</block_content>}</block></for>

	<expr_stmt><expr><name>rs</name> <operator>=</operator> <call><name>init_rs_char</name><argument_list>(<argument><expr><name>symsize</name></expr></argument>, <argument><expr><name>gfpoly</name></expr></argument>, <argument><expr><name>fcr</name></expr></argument>, <argument><expr><name>prim</name></expr></argument>, <argument><expr><name>nroots</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>DONE</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>rslist</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rslist</name> <operator>=</operator> <name>rs</name></expr>;</expr_stmt>

<label><name>DONE</name>:</label>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBPTHREAD</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rslist_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rs</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>free_rs_char</name><parameter_list>(<parameter><decl><type><name>RS</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>alpha_to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>index_of</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>genpoly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_rs_cache</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RS</name> <modifier>*</modifier></type><name>rs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBPTHREAD</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rslist_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>rs</name> <operator>=</operator> <name>rslist</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>rs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>rs</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free_rs_char</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rs</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>rslist</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBPTHREAD</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rslist_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* The guts of the Reed-Solomon encoder, meant to be #included
 * into a function body with the following typedefs, macros and variables supplied
 * according to the code parameters:

 * data_t - a typedef for the data symbol
 * data_t data[] - array of NN-NROOTS-PAD and type data_t to be encoded
 * data_t parity[] - an array of NROOTS and type data_t to be written with parity symbols
 * NROOTS - the number of roots in the RS code generator polynomial,
 *          which is the same as the number of parity symbols in a block.
            Integer variable or literal.
	    * 
 * NN - the total number of symbols in a RS block. Integer variable or literal.
 * PAD - the number of pad symbols in a block. Integer variable or literal.
 * ALPHA_TO - The address of an array of NN elements to convert Galois field
 *            elements in index (log) form to polynomial form. Read only.
 * INDEX_OF - The address of an array of NN elements to convert Galois field
 *            elements in polynomial form to index (log) form. Read only.
 * MODNN - a function to reduce its argument modulo NN. May be inline or a macro.
 * GENPOLY - an array of NROOTS+1 elements containing the generator polynomial in index form

 * The memset() and memmove() functions are used. The appropriate header
 * file declaring these functions (usually &lt;string.h&gt;) must be included by the calling
 * program.

 * Copyright 2004, Phil Karn, KA9Q
 * May be used under the terms of the GNU Lesser General Public License (LGPL)
 */</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>A0</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A0</name></cpp:macro> <cpp:value>(NN)</cpp:value></cpp:define> <comment type="block">/* Special reserved value encoding zero in index form */</comment>

<function><type><name>void</name></type> <name>encode_rs_char</name><parameter_list>(<parameter><decl><type><name>RS</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>data_t</name> <modifier>*</modifier></type><name>parity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>data_t</name></type> <name>feedback</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>parity</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NROOTS</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>NN</name><operator>-</operator><name>NROOTS</name><operator>-</operator><name>PAD</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>feedback</name> <operator>=</operator> <name><name>INDEX_OF</name><index>[<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>parity</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>feedback</name> <operator>!=</operator> <name>A0</name></expr>)</condition><block>{<block_content>      <comment type="block">/* feedback term is non-zero */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNNORMALIZED</name></cpp:ifdef>
      <comment type="block">/* This line is unnecessary when GENPOLY[NROOTS] is unity, as it must
       * always be for the polynomials constructed by init_rs()
       */</comment>
      <expr_stmt><expr><name>feedback</name> <operator>=</operator> <call><name>MODNN</name><argument_list>(<argument><expr><name>NN</name> <operator>-</operator> <name><name>GENPOLY</name><index>[<expr><name>NROOTS</name></expr>]</index></name> <operator>+</operator> <name>feedback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>NROOTS</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>parity</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^=</operator> <name><name>ALPHA_TO</name><index>[<expr><call><name>MODNN</name><argument_list>(<argument><expr><name>feedback</name> <operator>+</operator> <name><name>GENPOLY</name><index>[<expr><name>NROOTS</name><operator>-</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Shift */</comment>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parity</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>parity</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>NROOTS</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>feedback</name> <operator>!=</operator> <name>A0</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>parity</name><index>[<expr><name>NROOTS</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ALPHA_TO</name><index>[<expr><call><name>MODNN</name><argument_list>(<argument><expr><name>feedback</name> <operator>+</operator> <name><name>GENPOLY</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>parity</name><index>[<expr><name>NROOTS</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
</unit>
