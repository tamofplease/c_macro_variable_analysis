<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/Ditto/QRCode/qrinput.c"><comment type="block">/*
 * qrencode - QR Code encoder
 *
 * Input data chunk class
 * Copyright (C) 2006-2014 Kentaro Fukuchi &lt;kentaro@fukuchi.org&gt;
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qrencode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qrspec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mqrspec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bitstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qrinput.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************************
 * Utilities
 *****************************************************************************/</comment>
<function><type><name>int</name></type> <name>QRinput_isSplittableMode</name><parameter_list>(<parameter><decl><type><name>QRencodeMode</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>mode</name> <operator>&gt;=</operator> <name>QR_MODE_NUM</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>&lt;=</operator> <name>QR_MODE_KANJI</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * Entry of input data
 *****************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>QRinput_List</name> <modifier>*</modifier></type><name>QRinput_List_newEntry</name><parameter_list>(<parameter><decl><type><name>QRencodeMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>QRinput_check</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>QRinput_List</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QRinput_List</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>bstream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>QRinput_List_freeEntry</name><parameter_list>(<parameter><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BitStream_free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>bstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>QRinput_List</name> <modifier>*</modifier></type><name>QRinput_List_dup</name><parameter_list>(<parameter><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>QRinput_List</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QRinput_List</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>bstream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * Input Data
 *****************************************************************************/</comment>

<function><type><name>QRinput</name> <modifier>*</modifier></type><name>QRinput_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>QRinput_new2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>QR_ECLEVEL_L</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRinput</name> <modifier>*</modifier></type><name>QRinput_new2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>version</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>version</name></expr></argument> &gt;</argument_list></name> <name>QRSPEC_VERSION_MAX</name> <operator>||</operator> <name>level</name> <operator>&gt;</operator> <name>QR_ECLEVEL_H</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>input</name> <operator>=</operator> <operator>(</operator><name>QRinput</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QRinput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>fnc1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>input</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRinput</name> <modifier>*</modifier></type><name>QRinput_newMQR</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>version</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>version</name> <operator>&gt;</operator> <name>MQRSPEC_VERSION_MAX</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>INVALID</name>;</goto></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>MQRspec_getECCLength</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>INVALID</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>QRinput_new2</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<return>return <expr><name>input</name></expr>;</return>

<label><name>INVALID</name>:</label>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QRinput_getVersion</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QRinput_setVersion</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name> <operator>||</operator> <name><name>version</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>version</name></expr></argument> &gt;</argument_list></name> <name>QRSPEC_VERSION_MAX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRecLevel</name></type> <name>QRinput_getErrorCorrectionLevel</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QRinput_setErrorCorrectionLevel</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name> <operator>||</operator> <name>level</name> <operator>&gt;</operator> <name>QR_ECLEVEL_H</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QRinput_setVersionAndErrorCorrectionLevel</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>version</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>version</name> <operator>&gt;</operator> <name>MQRSPEC_VERSION_MAX</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>INVALID</name>;</goto></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>MQRspec_getECCLength</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>INVALID</name>;</goto></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>version</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>version</name></expr></argument> &gt;</argument_list></name> <name>QRSPEC_VERSION_MAX</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>INVALID</name>;</goto></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>level</name> <operator>&gt;</operator> <name>QR_ECLEVEL_H</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>INVALID</name>;</goto></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>INVALID</name>:</label>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>QRinput_appendEntry</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QRinput_append</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>QRinput_List_newEntry</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>QRinput_appendEntry</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Insert a structured-append header to the head of the input data.
 * @param input input data.
 * @param size number of structured symbols.
 * @param number index number of the symbol. (1 &lt;= number &lt;= size)
 * @param parity parity among input data. (NOTE: each symbol of a set of structured symbols has the same parity data)
 * @retval 0 success.
 * @retval -1 error occurred and errno is set to indeicate the error. See Execptions for the details.
 * @throw EINVAL invalid parameter.
 * @throw ENOMEM unable to allocate memory.
 */</comment>
<function><type><name>__STATIC</name> <name>int</name></type> <name>QRinput_insertStructuredAppendHeader</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>parity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&gt;</operator> <name>MAX_STRUCTURED_SYMBOLS</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>number</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>number</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>parity</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>QRinput_List_newEntry</name><argument_list>(<argument><expr><name>QR_MODE_STRUCTURE</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QRinput_appendECIheader</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ecinum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>ecinum</name> <operator>&gt;</operator> <literal type="number">999999</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* We manually create byte array of ecinum because
	 (unsigned char *)&amp;ecinum may cause bus error on some architectures, */</comment>
	<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ecinum</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ecinum</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ecinum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ecinum</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
	<return>return <expr><call><name>QRinput_append</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>QR_MODE_ECI</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QRinput_free</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>input</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<while>while<condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>QRinput_List_freeEntry</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>list</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>QRinput_calcParity</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>parity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>QR_MODE_STRUCTURE</name></expr>)</condition> <block>{<block_content>
			<for>for<control>(<init><expr><name>i</name><operator>=</operator><name><name>list</name><operator>-&gt;</operator><name>size</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>parity</name> <operator>^=</operator> <name><name>list</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>parity</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRinput</name> <modifier>*</modifier></type><name>QRinput_dup</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>QRinput_newMQR</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>QRinput_new2</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>QRinput_List_dup</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>QRinput_free</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>QRinput_appendEntry</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * Numeric data
 *****************************************************************************/</comment>

<comment type="block" format="doxygen">/**
 * Check the input data.
 * @param size
 * @param data
 * @return result
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_checkModeNum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Estimate the length of the encoded bit stream of numeric data.
 * @param size
 * @return number of bits
 */</comment>
<function><type><name>int</name></type> <name>QRinput_estimateBitsModeNum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>w</name> <operator>=</operator> <name>size</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>w</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<switch>switch<condition>(<expr><name>size</name> <operator>-</operator> <name>w</name> <operator>*</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">2</literal></expr>:</case>
			<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>bits</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Convert the number data and append to a bit stream.
 * @param entry
 * @param mqr
 * @retval 0 success
 * @retval -1 an error occurred and errno is set to indeicate the error.
 *            See Execptions for the details.
 * @throw ENOMEM unable to allocate memory.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_encodeModeNum</name><parameter_list>(<parameter><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mqr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>words</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>mqr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>version</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>version</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MQRSPEC_MODEID_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><call><name>MQRspec_lengthIndicator</name><argument_list>(<argument><expr><name>QR_MODE_NUM</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>QRSPEC_MODEID_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><call><name>QRspec_lengthIndicator</name><argument_list>(<argument><expr><name>QR_MODE_NUM</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>words</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>words</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>val</name>  <operator>=</operator> <operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal></expr>  ]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>words</name> <operator>*</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>words</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>words</name> <operator>*</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>val</name>  <operator>=</operator> <operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>words</name><operator>*</operator><literal type="number">3</literal></expr>  ]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>words</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * Alphabet-numeric data
 *****************************************************************************/</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>QRinput_anTable</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
	<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
	<expr><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>,
	 <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
	<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>,
	<expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
	<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
	<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Check the input data.
 * @param size
 * @param data
 * @return result
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_checkModeAn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>QRinput_lookAnTable</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Estimate the length of the encoded bit stream of alphabet-numeric data.
 * @param size
 * @return number of bits
 */</comment>
<function><type><name>int</name></type> <name>QRinput_estimateBitsModeAn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>w</name> <operator>=</operator> <name>size</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>w</name> <operator>*</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>bits</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Convert the alphabet-numeric data and append to a bit stream.
 * @param entry
 * @param mqr
 * @retval 0 success
 * @retval -1 an error occurred and errno is set to indeicate the error.
 *            See Execptions for the details.
 * @throw ENOMEM unable to allocate memory.
 * @throw EINVAL invalid version.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_encodeModeAn</name><parameter_list>(<parameter><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mqr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>words</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>mqr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>version</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>version</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MQRSPEC_MODEID_AN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><call><name>MQRspec_lengthIndicator</name><argument_list>(<argument><expr><name>QR_MODE_AN</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>QRSPEC_MODEID_AN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><call><name>QRspec_lengthIndicator</name><argument_list>(<argument><expr><name>QR_MODE_AN</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>words</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>words</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>val</name>  <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>QRinput_lookAnTable</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>  ]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">45</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>QRinput_lookAnTable</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>QRinput_lookAnTable</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>words</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * 8 bit data
 *****************************************************************************/</comment>

<comment type="block" format="doxygen">/**
 * Estimate the length of the encoded bit stream of 8 bit data.
 * @param size
 * @return number of bits
 */</comment>
<function><type><name>int</name></type> <name>QRinput_estimateBitsMode8</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>size</name> <operator>*</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Convert the 8bits data and append to a bit stream.
 * @param entry
 * @param mqr
 * @retval 0 success
 * @retval -1 an error occurred and errno is set to indeicate the error.
 *            See Execptions for the details.
 * @throw ENOMEM unable to allocate memory.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_encodeMode8</name><parameter_list>(<parameter><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mqr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>mqr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>version</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>version</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MQRSPEC_MODEID_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><call><name>MQRspec_lengthIndicator</name><argument_list>(<argument><expr><name>QR_MODE_8</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>QRSPEC_MODEID_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><call><name>QRspec_lengthIndicator</name><argument_list>(<argument><expr><name>QR_MODE_8</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendBytes</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/******************************************************************************
 * Kanji data
 *****************************************************************************/</comment>

<comment type="block" format="doxygen">/**
 * Estimate the length of the encoded bit stream of kanji data.
 * @param size
 * @return number of bits
 */</comment>
<function><type><name>int</name></type> <name>QRinput_estimateBitsModeKanji</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>size</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">13</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Check the input data.
 * @param size
 * @param data
 * @return result
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_checkModeKanji</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>val</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0x8140</literal> <operator>||</operator> <operator>(</operator><name>val</name> <operator>&gt;</operator> <literal type="number">0x9ffc</literal> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;</operator> <literal type="number">0xe040</literal><operator>)</operator> <operator>||</operator> <name>val</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xebbf</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Convert the kanji data and append to a bit stream.
 * @param entry
 * @param mqr
 * @retval 0 success
 * @retval -1 an error occurred and errno is set to indeicate the error.
 *            See Execptions for the details.
 * @throw ENOMEM unable to allocate memory.
 * @throw EINVAL invalid version.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_encodeModeKanji</name><parameter_list>(<parameter><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mqr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>mqr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>version</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>version</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MQRSPEC_MODEID_KANJI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><call><name>MQRspec_lengthIndicator</name><argument_list>(<argument><expr><name>QR_MODE_KANJI</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>QRSPEC_MODEID_KANJI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><call><name>QRspec_lengthIndicator</name><argument_list>(<argument><expr><name>QR_MODE_KANJI</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0x9ffc</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>val</name> <operator>-=</operator> <literal type="number">0x8140</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>val</name> <operator>-=</operator> <literal type="number">0xc140</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>+</operator> <name>h</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * Structured Symbol
 *****************************************************************************/</comment>

<comment type="block" format="doxygen">/**
 * Convert a structure symbol code and append to a bit stream.
 * @param entry
 * @param mqr
 * @retval 0 success
 * @retval -1 an error occurred and errno is set to indeicate the error.
 *            See Execptions for the details.
 * @throw ENOMEM unable to allocate memory.
 * @throw EINVAL invalid entry.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_encodeModeStructure</name><parameter_list>(<parameter><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mqr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>mqr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>QRSPEC_MODEID_STRUCTURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * FNC1
 *****************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_checkModeFNC1Second</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* No data check required. */</comment>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_encodeModeFNC1Second</name><parameter_list>(<parameter><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>QRSPEC_MODEID_FNC1SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendBytes</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * ECI header
 *****************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>QRinput_decodeECIfromByteArray</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ecinum</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ecinum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ecinum</name> <operator>=</operator> <name>ecinum</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ecinum</name> <operator>|=</operator> <name><name>data</name><index>[<expr><literal type="number">3</literal><operator>-</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>ecinum</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QRinput_estimateBitsModeECI</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ecinum</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ecinum</name> <operator>=</operator> <call><name>QRinput_decodeECIfromByteArray</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>

	<comment type="block">/* See Table 4 of JISX 0510:2004 pp.17. */</comment>
	<if_stmt><if>if<condition>(<expr><name>ecinum</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>MODE_INDICATOR_SIZE</name> <operator>+</operator> <literal type="number">8</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>ecinum</name> <operator>&lt;</operator> <literal type="number">16384</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>MODE_INDICATOR_SIZE</name> <operator>+</operator> <literal type="number">16</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>MODE_INDICATOR_SIZE</name> <operator>+</operator> <literal type="number">24</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_encodeModeECI</name><parameter_list>(<parameter><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>words</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ecinum</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ecinum</name> <operator>=</operator> <call><name>QRinput_decodeECIfromByteArray</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>

	<comment type="block">/* See Table 4 of JISX 0510:2004 pp.17. */</comment>
	<if_stmt><if>if<condition>(<expr><name>ecinum</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>words</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>code</name> <operator>=</operator> <name>ecinum</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>ecinum</name> <operator>&lt;</operator> <literal type="number">16384</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>words</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0x8000</literal> <operator>+</operator> <name>ecinum</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>words</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0xc0000</literal> <operator>+</operator> <name>ecinum</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>QRSPEC_MODEID_ECI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>words</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * Validation
 *****************************************************************************/</comment>

<function><type><name>int</name></type> <name>QRinput_check</name><parameter_list>(<parameter><decl><type><name>QRencodeMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>mode</name> <operator>==</operator> <name>QR_MODE_FNC1FIRST</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch<condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>QR_MODE_NUM</name></expr>:</case>
			<return>return <expr><call><name>QRinput_checkModeNum</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>QR_MODE_AN</name></expr>:</case>
			<return>return <expr><call><name>QRinput_checkModeAn</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>QR_MODE_KANJI</name></expr>:</case>
			<return>return <expr><call><name>QRinput_checkModeKanji</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>QR_MODE_8</name></expr>:</case>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		<case>case <expr><name>QR_MODE_STRUCTURE</name></expr>:</case>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		<case>case <expr><name>QR_MODE_ECI</name></expr>:</case>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		<case>case <expr><name>QR_MODE_FNC1FIRST</name></expr>:</case>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		<case>case <expr><name>QR_MODE_FNC1SECOND</name></expr>:</case>
			<return>return <expr><call><name>QRinput_checkModeFNC1Second</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>QR_MODE_NUL</name></expr>:</case>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * Estimation of the bit length
 *****************************************************************************/</comment>

<comment type="block" format="doxygen">/**
 * Estimate the length of the encoded bit stream on the current version.
 * @param entry
 * @param version version of the symbol
 * @param mqr
 * @return number of bits
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_estimateBitStreamSizeOfEntry</name><parameter_list>(<parameter><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mqr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch<condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>QR_MODE_NUM</name></expr>:</case>
			<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>QRinput_estimateBitsModeNum</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>QR_MODE_AN</name></expr>:</case>
			<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>QRinput_estimateBitsModeAn</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>QR_MODE_8</name></expr>:</case>
			<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>QRinput_estimateBitsMode8</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>QR_MODE_KANJI</name></expr>:</case>
			<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>QRinput_estimateBitsModeKanji</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>QR_MODE_STRUCTURE</name></expr>:</case>
			<return>return <expr><name>STRUCTURE_HEADER_SIZE</name></expr>;</return>
		<case>case <expr><name>QR_MODE_ECI</name></expr>:</case>
			<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>QRinput_estimateBitsModeECI</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>QR_MODE_FNC1FIRST</name></expr>:</case>
			<return>return <expr><name>MODE_INDICATOR_SIZE</name></expr>;</return>
		<case>case <expr><name>QR_MODE_FNC1SECOND</name></expr>:</case>
			<return>return <expr><name>MODE_INDICATOR_SIZE</name> <operator>+</operator> <literal type="number">8</literal></expr>;</return>
		<default>default:</default>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>

	<if_stmt><if>if<condition>(<expr><name>mqr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>QRspec_lengthIndicator</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>m</name> <operator>=</operator> <name>version</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>l</name> <operator>+</operator> <name>m</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>QRspec_lengthIndicator</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>l</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>m</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>num</name> <operator>*</operator> <operator>(</operator><name>MODE_INDICATOR_SIZE</name> <operator>+</operator> <name>l</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>bits</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Estimate the length of the encoded bit stream of the data.
 * @param input input data
 * @param version version of the symbol
 * @return number of bits
 */</comment>
<function><type><name>__STATIC</name> <name>int</name></type> <name>QRinput_estimateBitStreamSize</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>bits</name> <operator>+=</operator> <call><name>QRinput_estimateBitStreamSizeOfEntry</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>bits</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Estimate the required version number of the symbol.
 * @param input input data
 * @return required version number
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_estimateVersion</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<do>do <block>{<block_content>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>QRinput_estimateBitStreamSize</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>QRspec_getMinimumVersion</name><argument_list>(<argument><expr><operator>(</operator><name>bits</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>version</name> <operator>&gt;</operator> <name>prev</name></expr>)</condition>;</do>

	<return>return <expr><name>version</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Return required length in bytes for specified mode, version and bits.
 * @param mode
 * @param version
 * @param bits
 * @return required length of code words in bytes.
 */</comment>
<function><type><name>__STATIC</name> <name>int</name></type> <name>QRinput_lengthOfCode</name><parameter_list>(<parameter><decl><type><name>QRencodeMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>payload</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>chunks</name></decl>, <decl><type ref="prev"/><name>remain</name></decl>, <decl><type ref="prev"/><name>maxsize</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>payload</name> <operator>=</operator> <name>bits</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <call><name>QRspec_lengthIndicator</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch<condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>QR_MODE_NUM</name></expr>:</case>
			<expr_stmt><expr><name>chunks</name> <operator>=</operator> <name>payload</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>remain</name> <operator>=</operator> <name>payload</name> <operator>-</operator> <name>chunks</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <name>chunks</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>remain</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>remain</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>QR_MODE_AN</name></expr>:</case>
			<expr_stmt><expr><name>chunks</name> <operator>=</operator> <name>payload</name> <operator>/</operator> <literal type="number">11</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>remain</name> <operator>=</operator> <name>payload</name> <operator>-</operator> <name>chunks</name> <operator>*</operator> <literal type="number">11</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <name>chunks</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>remain</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>QR_MODE_8</name></expr>:</case>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <name>payload</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>QR_MODE_KANJI</name></expr>:</case>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>payload</name> <operator>/</operator> <literal type="number">13</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>QR_MODE_STRUCTURE</name></expr>:</case>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <name>payload</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><name>maxsize</name> <operator>=</operator> <call><name>QRspec_maximumWords</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>maxsize</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <name>maxsize</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <name>maxsize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * Data conversion
 *****************************************************************************/</comment>

<comment type="block" format="doxygen">/**
 * Convert the input data in the data chunk and append to a bit stream.
 * @param entry
 * @param bstream
 * @return number of bits (&gt;0) or -1 for failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_encodeBitStream</name><parameter_list>(<parameter><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mqr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>words</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>st1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>st2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>prevsize</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>prevsize</name> <operator>=</operator> <call><name>BitStream_size</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>words</name> <operator>=</operator> <call><name>QRspec_maximumWords</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>words</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>words</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>st1</name> <operator>=</operator> <call><name>QRinput_List_newEntry</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>words</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>st1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ABORT</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>st2</name> <operator>=</operator> <call><name>QRinput_List_newEntry</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>words</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>words</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>st2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ABORT</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_encodeBitStream</name><argument_list>(<argument><expr><name>st1</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>mqr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ABORT</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_encodeBitStream</name><argument_list>(<argument><expr><name>st2</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>mqr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ABORT</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>QRinput_List_freeEntry</name><argument_list>(<argument><expr><name>st1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>QRinput_List_freeEntry</name><argument_list>(<argument><expr><name>st2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<switch>switch<condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>QR_MODE_NUM</name></expr>:</case>
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_encodeModeNum</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>mqr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>QR_MODE_AN</name></expr>:</case>
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_encodeModeAn</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>mqr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>QR_MODE_8</name></expr>:</case>
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_encodeMode8</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>mqr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>QR_MODE_KANJI</name></expr>:</case>
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_encodeModeKanji</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>mqr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>QR_MODE_STRUCTURE</name></expr>:</case>
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_encodeModeStructure</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>mqr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>QR_MODE_ECI</name></expr>:</case>
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_encodeModeECI</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>QR_MODE_FNC1SECOND</name></expr>:</case>
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_encodeModeFNC1Second</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<break>break;</break>
		</block_content>}</block></switch>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><call><name>BitStream_size</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>prevsize</name></expr>;</return>
<label><name>ABORT</name>:</label>
	<expr_stmt><expr><call><name>QRinput_List_freeEntry</name><argument_list>(<argument><expr><name>st1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QRinput_List_freeEntry</name><argument_list>(<argument><expr><name>st2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Convert the input data to a bit stream.
 * @param input input data.
 * @retval 0 success
 * @retval -1 an error occurred and errno is set to indeicate the error.
 *            See Execptions for the details.
 * @throw ENOMEM unable to allocate memory.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_createBitStream</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>, <decl><type ref="prev"/><name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>QRinput_encodeBitStream</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>bits</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>bits</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Convert the input data to a bit stream.
 * When the version number is given and that is not sufficient, it is increased
 * automatically.
 * @param input input data.
 * @param bstream where the converted data is stored.
 * @retval 0 success
 * @retval -1 an error occurred and errno is set to indeicate the error.
 *            See Execptions for the details.
 * @throw ENOMEM unable to allocate memory.
 * @throw ERANGE input data is too large.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_convertData</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ver</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ver</name> <operator>=</operator> <call><name>QRinput_estimateVersion</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ver</name> <operator>&gt;</operator> <call><name>QRinput_getVersion</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>QRinput_setVersion</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>BitStream_reset</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>QRinput_createBitStream</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>bits</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ver</name> <operator>=</operator> <call><name>QRspec_getMinimumVersion</name><argument_list>(<argument><expr><operator>(</operator><name>bits</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ver</name> <operator>&gt;</operator> <call><name>QRinput_getVersion</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>QRinput_setVersion</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Append padding bits for the input data.
 * @param bstream Bitstream to be appended.
 * @param input input data.
 * @retval 0 success
 * @retval -1 an error occurred and errno is set to indeicate the error.
 *            See Execptions for the details.
 * @throw ERANGE input data is too large.
 * @throw ENOMEM unable to allocate memory.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_appendPaddingBit</name><parameter_list>(<parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>, <parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>, <decl><type ref="prev"/><name>maxbits</name></decl>, <decl><type ref="prev"/><name>words</name></decl>, <decl><type ref="prev"/><name>maxwords</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>padlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>BitStream_size</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>maxwords</name> <operator>=</operator> <call><name>QRspec_getDataLength</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>maxbits</name> <operator>=</operator> <name>maxwords</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>maxbits</name> <operator>&lt;</operator> <name>bits</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>maxbits</name> <operator>==</operator> <name>bits</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>maxbits</name> <operator>-</operator> <name>bits</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>maxbits</name> <operator>-</operator> <name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>words</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>words</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>padlen</name> <operator>=</operator> <name>maxwords</name> <operator>-</operator> <name>words</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>padlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>padlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">0x11</literal></expr></then><else>:<expr><literal type="number">0xec</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>ret</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Append padding bits for the input data - Micro QR Code version.
 * @param bstream Bitstream to be appended.
 * @param input input data.
 * @retval 0 success
 * @retval -1 an error occurred and errno is set to indeicate the error.
 *            See Execptions for the details.
 * @throw ERANGE input data is too large.
 * @throw ENOMEM unable to allocate memory.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_appendPaddingBitMQR</name><parameter_list>(<parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>, <parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>, <decl><type ref="prev"/><name>maxbits</name></decl>, <decl><type ref="prev"/><name>words</name></decl>, <decl><type ref="prev"/><name>maxwords</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>termbits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>padlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>BitStream_size</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>maxbits</name> <operator>=</operator> <call><name>MQRspec_getDataLengthBit</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>maxwords</name> <operator>=</operator> <name>maxbits</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>maxbits</name> <operator>&lt;</operator> <name>bits</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>maxbits</name> <operator>==</operator> <name>bits</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>termbits</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>version</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>maxbits</name> <operator>-</operator> <name>bits</name> <operator>&lt;=</operator> <name>termbits</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>maxbits</name> <operator>-</operator> <name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>termbits</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>words</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>maxbits</name> <operator>-</operator> <name>words</name> <operator>*</operator> <literal type="number">8</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>termbits</name> <operator>+=</operator> <name>words</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>bits</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>words</name> <operator>==</operator> <name>maxwords</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>termbits</name> <operator>+=</operator> <name>maxbits</name> <operator>-</operator> <name>words</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>termbits</name> <operator>+=</operator> <name>words</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>bits</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>termbits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>padlen</name> <operator>=</operator> <name>maxwords</name> <operator>-</operator> <name>words</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>padlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>padlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">0x11</literal></expr></then><else>:<expr><literal type="number">0xec</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>termbits</name> <operator>=</operator> <name>maxbits</name> <operator>-</operator> <name>maxwords</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>termbits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_appendNum</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>termbits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_insertFNC1Header</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>fnc1</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>QRinput_List_newEntry</name><argument_list>(<argument><expr><name>QR_MODE_FNC1FIRST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>fnc1</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>QRinput_List_newEntry</name><argument_list>(<argument><expr><name>QR_MODE_FNC1SECOND</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>appid</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>QR_MODE_STRUCTURE</name> <operator>&amp;&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>QR_MODE_ECI</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Merge all bit streams in the input data.
 * @param input input data.
 * @return merged bit stream
 */</comment>

<function><type><name>__STATIC</name> <name>int</name></type> <name>QRinput_mergeBitStream</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>QRinput_createBitStream</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>fnc1</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>QRinput_insertFNC1Header</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>QRinput_convertData</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Merge all bit streams in the input data and append padding bits
 * @param input input data.
 * @return padded merged bit stream
 */</comment>

<function><type><name>__STATIC</name> <name>int</name></type> <name>QRinput_getBitStream</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_mergeBitStream</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_appendPaddingBitMQR</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_appendPaddingBit</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Pack all bit streams padding bits into a byte array.
 * @param input input data.
 * @return padded merged byte stream
 */</comment>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>QRinput_getByteStream</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bstream</name> <operator>=</operator> <call><name>BitStream_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>bstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_getBitStream</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>BitStream_free</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>BitStream_toByte</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BitStream_free</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>array</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * Structured input data
 *****************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>QRinput_InputList</name> <modifier>*</modifier></type><name>QRinput_InputList_newEntry</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_InputList</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>QRinput_InputList</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QRinput_InputList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>QRinput_InputList_freeEntry</name><parameter_list>(<parameter><decl><type><name>QRinput_InputList</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>QRinput_free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>QRinput_Struct</name> <modifier>*</modifier></type><name>QRinput_Struct_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_Struct</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>QRinput_Struct</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QRinput_Struct</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parity</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QRinput_Struct_setParity</name><parameter_list>(<parameter><decl><type><name>QRinput_Struct</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>parity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parity</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>parity</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QRinput_Struct_appendInput</name><parameter_list>(<parameter><decl><type><name>QRinput_Struct</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_InputList</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>QRinput_InputList_newEntry</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QRinput_Struct_free</name><parameter_list>(<parameter><decl><type><name>QRinput_Struct</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_InputList</name> <modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	
	<if_stmt><if>if<condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<while>while<condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>QRinput_InputList_freeEntry</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>list</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>QRinput_Struct_calcParity</name><parameter_list>(<parameter><decl><type><name>QRinput_Struct</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_InputList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>parity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>parity</name> <operator>^=</operator> <call><name>QRinput_calcParity</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>QRinput_Struct_setParity</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>parity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>parity</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>QRinput_List_shrinkEntry</name><parameter_list>(<parameter><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>__STATIC</name> <name>int</name></type> <name>QRinput_splitEntry</name><parameter_list>(<parameter><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>QRinput_List_newEntry</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>bytes</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_List_shrinkEntry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>QRinput_List_freeEntry</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRinput_Struct</name> <modifier>*</modifier></type><name>QRinput_splitQRinputToStruct</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRinput_Struct</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>, <decl><type ref="prev"/><name>maxbits</name></decl>, <decl><type ref="prev"/><name>nextbits</name></decl>, <decl><type ref="prev"/><name>bytes</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRinput_List</name> <modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>QRinput_Struct_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>QRinput_dup</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>QRinput_Struct_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>QRinput_Struct_setParity</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>QRinput_calcParity</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>maxbits</name> <operator>=</operator> <call><name>QRspec_getDataLength</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>STRUCTURE_HEADER_SIZE</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>maxbits</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ABORT</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>bstream</name> <operator>=</operator> <call><name>BitStream_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>bstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ABORT</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>nextbits</name> <operator>=</operator> <call><name>QRinput_estimateBitStreamSizeOfEntry</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>bits</name> <operator>+</operator> <name>nextbits</name> <operator>&lt;=</operator> <name>maxbits</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>BitStream_reset</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_encodeBitStream</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>bstream</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ABORT</name>;</goto></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>QRinput_lengthOfCode</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name>maxbits</name> <operator>-</operator> <name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>QRinput_new2</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ABORT</name>;</goto></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/* Splits this entry into 2 entries. */</comment>
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_splitEntry</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>QRinput_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<goto>goto <name>ABORT</name>;</goto>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* First half is the tail of the current input. */</comment>
				<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<comment type="block">/* Second half is the head of the next input, p.*/</comment>
				<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
				<comment type="block">/* Renew QRinput.tail. */</comment>
				<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
				<comment type="block">/* Point to the next entry. */</comment>
				<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>list</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="block">/* Current entry will go to the next input. */</comment>
				<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_Struct_appendInput</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>QRinput_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>ABORT</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>input</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_Struct_appendInput</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ABORT</name>;</goto></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>MAX_STRUCTURED_SYMBOLS</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>QRinput_Struct_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BitStream_free</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_Struct_insertStructuredAppendHeaders</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>QRinput_Struct_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BitStream_free</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>BitStream_free</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>s</name></expr>;</return>

<label><name>ABORT</name>:</label>
	<expr_stmt><expr><call><name>BitStream_free</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QRinput_free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QRinput_Struct_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QRinput_Struct_insertStructuredAppendHeaders</name><parameter_list>(<parameter><decl><type><name>QRinput_Struct</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRinput_InputList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>parity</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>QRinput_Struct_calcParity</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>QRinput_insertStructuredAppendHeader</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>parity</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * Extended encoding mode (FNC1 and ECI)
 *****************************************************************************/</comment>

<function><type><name>int</name></type> <name>QRinput_setFNC1First</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>fnc1</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QRinput_setFNC1Second</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>appid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>fnc1</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>appid</name></name> <operator>=</operator> <name>appid</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
