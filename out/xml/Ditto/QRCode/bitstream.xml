<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/Ditto/QRCode/bitstream.c"><comment type="block">/*
 * qrencode - QR Code encoder
 *
 * Binary sequence class.
 * Copyright (C) 2006-2014 Kentaro Fukuchi &lt;kentaro@fukuchi.org&gt;
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bitstream.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_BUFSIZE</name></cpp:macro> <cpp:value>(128)</cpp:value></cpp:define>

<function><type><name>BitStream</name> <modifier>*</modifier></type><name>BitStream_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bstream</name> <operator>=</operator> <operator>(</operator><name>BitStream</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BitStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>bstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>bstream</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bstream</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>DEFAULT_BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>bstream</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>bstream</name><operator>-&gt;</operator><name>datasize</name></name> <operator>=</operator> <name>DEFAULT_BUFSIZE</name></expr>;</expr_stmt>

	<return>return <expr><name>bstream</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>BitStream_expand</name><parameter_list>(<parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><name><name>bstream</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>bstream</name><operator>-&gt;</operator><name>datasize</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>bstream</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bstream</name><operator>-&gt;</operator><name>datasize</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BitStream_writeNum</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>bits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>mask</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BitStream_writeBytes</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>mask</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>BitStream_append</name><parameter_list>(<parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>, <parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while<condition>(<expr><name><name>bstream</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name><name>arg</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <name><name>bstream</name><operator>-&gt;</operator><name>datasize</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_expand</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>bstream</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>bstream</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bstream</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name><name>arg</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>BitStream_appendNum</name><parameter_list>(<parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<while>while<condition>(<expr><name><name>bstream</name><operator>-&gt;</operator><name>datasize</name></name> <operator>-</operator> <name><name>bstream</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <name>bits</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_expand</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>BitStream_writeNum</name><argument_list>(<argument><expr><name><name>bstream</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>bstream</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bstream</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name>bits</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>BitStream_appendBytes</name><parameter_list>(<parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<while>while<condition>(<expr><name><name>bstream</name><operator>-&gt;</operator><name>datasize</name></name> <operator>-</operator> <name><name>bstream</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <name>size</name> <operator>*</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BitStream_expand</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>BitStream_writeBytes</name><argument_list>(<argument><expr><name><name>bstream</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>bstream</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bstream</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name>size</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>BitStream_toByte</name><parameter_list>(<parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>BitStream_size</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>size</name>  <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>bstream</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>bytes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>v</name> <operator>|=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><operator>(</operator><name>size</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>v</name> <operator>|=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>bytes</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>BitStream_free</name><parameter_list>(<parameter><decl><type><name>BitStream</name> <modifier>*</modifier></type><name>bstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>bstream</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bstream</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
