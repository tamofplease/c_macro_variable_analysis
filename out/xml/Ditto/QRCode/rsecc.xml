<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/Ditto/QRCode/rsecc.c"><comment type="block">/*
 * qrencode - QR Code encoder
 *
 * Reed solomon error correction code encoder specialized for QR code.
 * This code is based on Phil Karn's libfec and rewriten by Kentaro Fukuchi.
 *
 * Copyright (C) 2002, 2003, 2004, 2006 Phil Karn, KA9Q
 * Copyright (C) 2014 Kentaro Fukuchi &lt;kentaro@fukuchi.org&gt;
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBPTHREAD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rsecc.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBPTHREAD</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>RSECC_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMBOL_SIZE</name></cpp:macro> <cpp:value>(8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>symbols</name></cpp:macro> <cpp:value>((1 &lt;&lt; SYMBOL_SIZE) - 1)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>proot</name> <init>= <expr><literal type="number">0x11d</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* stands for x^8+x^4+x^3+x^2+1 (see pp.37 of JIS X0510:2004) */</comment>

<comment type="block">/* min/max codeword length of ECC, calculated from the specification. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min_length</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max_length</name></cpp:macro> <cpp:value>(30)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max_generatorSize</name></cpp:macro> <cpp:value>(max_length)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>alpha</name><index>[<expr><name>symbols</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aindex</name><index>[<expr><name>symbols</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>generator</name><index>[<expr><name>max_length</name> <operator>-</operator> <name>min_length</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>max_generatorSize</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>generatorInitialized</name><index>[<expr><name>max_length</name> <operator>-</operator> <name>min_length</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RSECC_initLookupTable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>alpha</name><index>[<expr><name>symbols</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aindex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>symbols</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>symbols</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>alpha</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>aindex</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>b</name> <operator>&amp;</operator> <operator>(</operator><name>symbols</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>b</name> <operator>^=</operator> <name>proot</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>b</name> <operator>&amp;=</operator> <name>symbols</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RSECC_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>RSECC_initLookupTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>generatorInitialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>max_length</name> <operator>-</operator> <name>min_length</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generator_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>g</name><index>[<expr><name>max_generatorSize</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<comment type="block">/* Because g[0] never be zero, skipped some conditional checks. */</comment>
		<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>g</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>g</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>^</operator>  <name><name>alpha</name><index>[<expr><operator>(</operator><name><name>aindex</name><index>[<expr><name><name>g</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>symbols</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>alpha</name><index>[<expr><operator>(</operator><name><name>aindex</name><index>[<expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>symbols</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>generator</name><index>[<expr><name>length</name> <operator>-</operator> <name>min_length</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>aindex</name><index>[<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>generatorInitialized</name><index>[<expr><name>length</name> <operator>-</operator> <name>min_length</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>RSECC_encode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>data_length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ecc_length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ecc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>feedback</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>gen</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBPTHREAD</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RSECC_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RSECC_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBPTHREAD</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RSECC_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if<condition>(<expr><name>ecc_length</name> <operator>&gt;</operator> <name>max_length</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ecc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ecc_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBPTHREAD</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RSECC_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>generatorInitialized</name><index>[<expr><name>ecc_length</name> <operator>-</operator> <name>min_length</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>generator_init</name><argument_list>(<argument><expr><name>ecc_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBPTHREAD</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RSECC_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>gen</name> <operator>=</operator> <name><name>generator</name><index>[<expr><name>ecc_length</name> <operator>-</operator> <name>min_length</name></expr>]</index></name></expr>;</expr_stmt>

	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>data_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>feedback</name> <operator>=</operator> <name><name>aindex</name><index>[<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>ecc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>feedback</name> <operator>!=</operator> <name>symbols</name></expr>)</condition> <block>{<block_content>
			<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ecc_length</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>ecc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^=</operator> <name><name>alpha</name><index>[<expr><operator>(</operator><name>feedback</name> <operator>+</operator> <name><name>gen</name><index>[<expr><name>ecc_length</name> <operator>-</operator> <name>j</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>symbols</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ecc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ecc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ecc_length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>feedback</name> <operator>!=</operator> <name>symbols</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ecc</name><index>[<expr><name>ecc_length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>alpha</name><index>[<expr><operator>(</operator><name>feedback</name> <operator>+</operator> <name><name>gen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>symbols</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>ecc</name><index>[<expr><name>ecc_length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
