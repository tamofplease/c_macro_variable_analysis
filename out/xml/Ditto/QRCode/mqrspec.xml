<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/Ditto/QRCode/mqrspec.c"><comment type="block">/*
 * qrencode - QR Code encoder
 *
 * Micor QR Code specification in convenient format. 
 * Copyright (C) 2006-2011 Kentaro Fukuchi &lt;kentaro@fukuchi.org&gt;
 *
 * The following data / specifications are taken from
 * "Two dimensional symbol -- QR-code -- Basic Specification" (JIS X0510:2004)
 *  or
 * "Automatic identification and data capture techniques -- 
 *  QR Code 2005 bar code symbology specification" (ISO/IEC 18004:2006)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mqrspec.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************************
 * Version and capacity
 *****************************************************************************/</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> <comment type="line">//&lt; Edge length of the symbol</comment>
	<decl_stmt><decl><type><name>int</name></type> <name><name>ec</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">//&lt; Number of ECC code (bytes)</comment>
}</block></struct></type> <name>MQRspec_Capacity</name>;</typedef>

<comment type="block" format="doxygen">/**
 * Table of the capacity of symbols
 * See Table 1 (pp.106) and Table 8 (pp.113) of Appendix 1, JIS X0510:2004.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>MQRspec_Capacity</name></type> <name><name>mqrspecCapacity</name><index>[<expr><name>MQRSPEC_VERSION_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><block>{  <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><block>{<expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>MQRspec_getDataLengthBit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ecc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>mqrspecCapacity</name><index>[<expr><name>version</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ecc</name> <operator>=</operator> <name><name>mqrspecCapacity</name><index>[<expr><name>version</name></expr>]</index></name><operator>.</operator><name><name>ec</name><index>[<expr><name>level</name></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ecc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>w</name> <operator>*</operator> <name>w</name> <operator>-</operator> <literal type="number">64</literal> <operator>-</operator> <name>ecc</name> <operator>*</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>MQRspec_getDataLength</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>MQRspec_getDataLengthBit</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>MQRspec_getECCLength</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>mqrspecCapacity</name><index>[<expr><name>version</name></expr>]</index></name><operator>.</operator><name><name>ec</name><index>[<expr><name>level</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>MQRspec_getWidth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>mqrspecCapacity</name><index>[<expr><name>version</name></expr>]</index></name><operator>.</operator><name>width</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * Length indicator
 *****************************************************************************/</comment>

<comment type="block" format="doxygen">/**
 * See Table 3 (pp.107) of Appendix 1, JIS X0510:2004.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>lengthTableBits</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>MQRspec_lengthIndicator</name><parameter_list>(<parameter><decl><type><name>QRencodeMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>lengthTableBits</name><index>[<expr><name>mode</name></expr>]</index><index>[<expr><name>version</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>MQRspec_maximumWords</name><parameter_list>(<parameter><decl><type><name>QRencodeMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>words</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>lengthTableBits</name><index>[<expr><name>mode</name></expr>]</index><index>[<expr><name>version</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>words</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>QR_MODE_KANJI</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>words</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="line">// the number of bytes is required</comment>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>words</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * Format information
 *****************************************************************************/</comment>

<comment type="block">/* See calcFormatInfo in tests/test_mqrspec.c */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>formatInfo</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="number">0x4445</literal></expr>, <expr><literal type="number">0x55ae</literal></expr>, <expr><literal type="number">0x6793</literal></expr>, <expr><literal type="number">0x7678</literal></expr>, <expr><literal type="number">0x06de</literal></expr>, <expr><literal type="number">0x1735</literal></expr>, <expr><literal type="number">0x2508</literal></expr>, <expr><literal type="number">0x34e3</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">0x4172</literal></expr>, <expr><literal type="number">0x5099</literal></expr>, <expr><literal type="number">0x62a4</literal></expr>, <expr><literal type="number">0x734f</literal></expr>, <expr><literal type="number">0x03e9</literal></expr>, <expr><literal type="number">0x1202</literal></expr>, <expr><literal type="number">0x203f</literal></expr>, <expr><literal type="number">0x31d4</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">0x4e2b</literal></expr>, <expr><literal type="number">0x5fc0</literal></expr>, <expr><literal type="number">0x6dfd</literal></expr>, <expr><literal type="number">0x7c16</literal></expr>, <expr><literal type="number">0x0cb0</literal></expr>, <expr><literal type="number">0x1d5b</literal></expr>, <expr><literal type="number">0x2f66</literal></expr>, <expr><literal type="number">0x3e8d</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">0x4b1c</literal></expr>, <expr><literal type="number">0x5af7</literal></expr>, <expr><literal type="number">0x68ca</literal></expr>, <expr><literal type="number">0x7921</literal></expr>, <expr><literal type="number">0x0987</literal></expr>, <expr><literal type="number">0x186c</literal></expr>, <expr><literal type="number">0x2a51</literal></expr>, <expr><literal type="number">0x3bba</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* See Table 10 of Appendix 1. (pp.115) */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>typeTable</name><index>[<expr><name>MQRSPEC_VERSION_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>unsigned</name> <name>int</name></type> <name>MQRspec_getFormatInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>mask</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>mask</name></expr></argument> &gt;</argument_list></name> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>version</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>version</name> <operator>&gt;</operator> <name>MQRSPEC_VERSION_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>level</name> <operator>==</operator> <name>QR_ECLEVEL_H</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>typeTable</name><index>[<expr><name>version</name></expr>]</index><index>[<expr><name>level</name></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>formatInfo</name><index>[<expr><name>mask</name></expr>]</index><index>[<expr><name>type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * Frame
 *****************************************************************************/</comment>

<comment type="block" format="doxygen">/**
 * Put a finder pattern.
 * @param frame
 * @param width
 * @param ox,oy upper-left coordinate of the pattern
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>putFinderPattern</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>finder</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>,
		<expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc1</literal></expr>,
		<expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc1</literal></expr>,
		<expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc1</literal></expr>,
		<expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc1</literal></expr>,
		<expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc1</literal></expr>,
		<expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>frame</name> <operator>+=</operator> <name>oy</name> <operator>*</operator> <name>width</name> <operator>+</operator> <name>ox</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <name>finder</name></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>frame</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>frame</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>MQRspec_createFrame</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>mqrspecCapacity</name><index>[<expr><name>version</name></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>width</name> <operator>*</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>frame</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Finder pattern */</comment>
	<expr_stmt><expr><call><name>putFinderPattern</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Separator */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>frame</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0xc0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Mask format information area */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>frame</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x84</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>frame</name> <operator>+</operator> <name>width</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0x84</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Timing pattern */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>frame</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <name>frame</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>width</name><operator>-</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator>  <literal type="number">0x90</literal> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator>  <literal type="number">0x90</literal> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>q</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>frame</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>MQRspec_newFrame</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>version</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>version</name></expr></argument> &gt;</argument_list></name> <name>MQRSPEC_VERSION_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>MQRspec_createFrame</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
