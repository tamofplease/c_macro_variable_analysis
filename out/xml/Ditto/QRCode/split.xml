<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/Ditto/QRCode/split.c"><comment type="block">/*
 * qrencode - QR Code encoder
 *
 * Input data splitter.
 * Copyright (C) 2006-2013 Kentaro Fukuchi &lt;kentaro@fukuchi.org&gt;
 *
 * The following data / specifications are taken from
 * "Two dimensional symbol -- QR-code -- Basic Specification" (JIS X0510:2004)
 *  or
 * "Automatic identification and data capture techniques --
 *  QR Code 2005 bar code symbology specification" (ISO/IEC 18004:2006)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qrencode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qrinput.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qrspec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"split.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isdigit</name><parameter_list>(<parameter><type><name>__c__</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char)((signed char)(__c__) - '0') &lt; 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isalnum</name><parameter_list>(<parameter><type><name>__c__</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(QRinput_lookAnTable(__c__) &gt;= 0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_STRDUP</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strdup</name></cpp:undef>
<function><type><name>char</name> <modifier>*</modifier></type><name>strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>new</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>QRencodeMode</name></type> <name>Split_identifyMode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>word</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>QR_MODE_NUL</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>QR_MODE_NUM</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>QR_MODE_AN</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>hint</name> <operator>==</operator> <name>QR_MODE_KANJI</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>d</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>word</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>d</name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><operator>(</operator><name>word</name> <operator>&gt;=</operator> <literal type="number">0x8140</literal> <operator>&amp;&amp;</operator> <name>word</name> <operator>&lt;=</operator> <literal type="number">0x9ffc</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>word</name> <operator>&gt;=</operator> <literal type="number">0xe040</literal> <operator>&amp;&amp;</operator> <name>word</name> <operator>&lt;=</operator> <literal type="number">0xebbf</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>QR_MODE_KANJI</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>QR_MODE_8</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Split_eatNum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Split_eatAn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Split_eat8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Split_eatKanji</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Split_eatNum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,<parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dif</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ln</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRencodeMode</name></type> <name>mode</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>QRspec_lengthIndicator</name><argument_list>(<argument><expr><name>QR_MODE_NUM</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>run</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>string</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>Split_identifyMode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>QR_MODE_8</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dif</name> <operator>=</operator> <call><name>QRinput_estimateBitsModeNum</name><argument_list>(<argument><expr><name>run</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>ln</name>
			<operator>+</operator> <call><name>QRinput_estimateBitsMode8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <comment type="block">/* + 4 + l8 */</comment>
			<operator>-</operator> <call><name>QRinput_estimateBitsMode8</name><argument_list>(<argument><expr><name>run</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* - 4 - l8 */</comment>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>dif</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name>Split_eat8</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>QR_MODE_AN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dif</name> <operator>=</operator> <call><name>QRinput_estimateBitsModeNum</name><argument_list>(<argument><expr><name>run</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>ln</name>
			<operator>+</operator> <call><name>QRinput_estimateBitsModeAn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <comment type="block">/* + 4 + la */</comment>
			<operator>-</operator> <call><name>QRinput_estimateBitsModeAn</name><argument_list>(<argument><expr><name>run</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* - 4 - la */</comment>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>dif</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name>Split_eatAn</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_append</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>QR_MODE_NUM</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>run</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Split_eatAn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dif</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>la</name></decl>, <decl><type ref="prev"/><name>ln</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>la</name> <operator>=</operator> <call><name>QRspec_lengthIndicator</name><argument_list>(<argument><expr><name>QR_MODE_AN</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>QRspec_lengthIndicator</name><argument_list>(<argument><expr><name>QR_MODE_NUM</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><call><name>isalnum</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><name>dif</name> <operator>=</operator> <call><name>QRinput_estimateBitsModeAn</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>string</name></expr></argument>)</argument_list></call> <comment type="block">/* + 4 + la */</comment>
				<operator>+</operator> <call><name>QRinput_estimateBitsModeNum</name><argument_list>(<argument><expr><name>q</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>ln</name>
				<operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name>isalnum</name><argument_list>(<argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>ln</name><operator>)</operator></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
				<operator>-</operator> <call><name>QRinput_estimateBitsModeAn</name><argument_list>(<argument><expr><name>q</name> <operator>-</operator> <name>string</name></expr></argument>)</argument_list></call></expr> <comment type="block">/* - 4 - la */</comment>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>dif</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>run</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>string</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dif</name> <operator>=</operator> <call><name>QRinput_estimateBitsModeAn</name><argument_list>(<argument><expr><name>run</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>la</name>
			<operator>+</operator> <call><name>QRinput_estimateBitsMode8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <comment type="block">/* + 4 + l8 */</comment>
			<operator>-</operator> <call><name>QRinput_estimateBitsMode8</name><argument_list>(<argument><expr><name>run</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* - 4 - l8 */</comment>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>dif</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name>Split_eat8</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_append</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>QR_MODE_AN</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>run</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Split_eatKanji</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><call><name>Split_identifyMode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QR_MODE_KANJI</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>run</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>string</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_append</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>QR_MODE_KANJI</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>run</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Split_eat8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRencodeMode</name></type> <name>mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dif</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>la</name></decl>, <decl><type ref="prev"/><name>ln</name></decl>, <decl><type ref="prev"/><name>l8</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>swcost</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>la</name> <operator>=</operator> <call><name>QRspec_lengthIndicator</name><argument_list>(<argument><expr><name>QR_MODE_AN</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>QRspec_lengthIndicator</name><argument_list>(<argument><expr><name>QR_MODE_NUM</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>l8</name> <operator>=</operator> <call><name>QRspec_lengthIndicator</name><argument_list>(<argument><expr><name>QR_MODE_8</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>string</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>Split_identifyMode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>QR_MODE_KANJI</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>QR_MODE_NUM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<if_stmt><if>if<condition>(<expr><call><name>Split_identifyMode</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QR_MODE_8</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>swcost</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <name>l8</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>swcost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>dif</name> <operator>=</operator> <call><name>QRinput_estimateBitsMode8</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>string</name></expr></argument>)</argument_list></call> <comment type="block">/* + 4 + l8 */</comment>
				<operator>+</operator> <call><name>QRinput_estimateBitsModeNum</name><argument_list>(<argument><expr><name>q</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>ln</name>
				<operator>+</operator> <name>swcost</name>
				<operator>-</operator> <call><name>QRinput_estimateBitsMode8</name><argument_list>(<argument><expr><name>q</name> <operator>-</operator> <name>string</name></expr></argument>)</argument_list></call></expr> <comment type="block">/* - 4 - l8 */</comment>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>dif</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>QR_MODE_AN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			<while>while<condition>(<expr><call><name>isalnum</name><argument_list>(<argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<if_stmt><if>if<condition>(<expr><call><name>Split_identifyMode</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QR_MODE_8</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>swcost</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <name>l8</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>swcost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>dif</name> <operator>=</operator> <call><name>QRinput_estimateBitsMode8</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>string</name></expr></argument>)</argument_list></call> <comment type="block">/* + 4 + l8 */</comment>
				<operator>+</operator> <call><name>QRinput_estimateBitsModeAn</name><argument_list>(<argument><expr><name>q</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>la</name>
				<operator>+</operator> <name>swcost</name>
				<operator>-</operator> <call><name>QRinput_estimateBitsMode8</name><argument_list>(<argument><expr><name>q</name> <operator>-</operator> <name>string</name></expr></argument>)</argument_list></call></expr> <comment type="block">/* - 4 - l8 */</comment>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>dif</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>run</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>string</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_append</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>QR_MODE_8</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>run</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Split_splitString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
		<parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRencodeMode</name></type> <name>mode</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>string</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>Split_identifyMode</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>QR_MODE_NUM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>Split_eatNum</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>QR_MODE_AN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>Split_eatAn</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name> <operator>==</operator> <name>QR_MODE_KANJI</name> <operator>&amp;&amp;</operator> <name>hint</name> <operator>==</operator> <name>QR_MODE_KANJI</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>Split_eatKanji</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>Split_eat8</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>Split_splitString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>string</name><index>[<expr><name>length</name></expr>]</index></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dupAndToUpper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRencodeMode</name></type> <name>mode</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>newstr</name> <operator>=</operator> <call><name>_strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>newstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>newstr</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>Split_identifyMode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>QR_MODE_KANJI</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>newstr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Split_splitStringToQRinput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
		<parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>casesensitive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>string</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>casesensitive</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>newstr</name> <operator>=</operator> <call><name>dupAndToUpper</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>newstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Split_splitString</name><argument_list>(<argument><expr><name>newstr</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>newstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Split_splitString</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
