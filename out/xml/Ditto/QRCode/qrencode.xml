<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/Ditto/QRCode/qrencode.c"><comment type="block">/*
 * qrencode - QR Code encoder
 *
 * Copyright (C) 2006-2014 Kentaro Fukuchi &lt;kentaro@fukuchi.org&gt;
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qrencode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qrspec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mqrspec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bitstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qrinput.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rsecc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"split.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mask.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmask.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************************
 * Raw code
 *****************************************************************************/</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>dataLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>eccLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ecc</name></decl>;</decl_stmt>
}</block></struct></type> <name>RSblock</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dataLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>eccLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>datacode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ecccode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>b1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>blocks</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RSblock</name> <modifier>*</modifier></type><name>rsblock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
}</block></struct></type> <name>QRRawCode</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RSblock_initBlock</name><parameter_list>(<parameter><decl><type><name>RSblock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>el</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ecc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>dataLength</name></name> <operator>=</operator> <name>dl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>eccLength</name></name> <operator>=</operator> <name>el</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>ecc</name></name> <operator>=</operator> <name>ecc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RSECC_encode</name><argument_list>(<argument><expr><name>dl</name></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ecc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>RSblock_init</name><parameter_list>(<parameter><decl><type><name>RSblock</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>spec</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ecc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RSblock</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>el</name></decl>, <decl><type ref="prev"/><name>dl</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dl</name> <operator>=</operator> <call><name>QRspec_rsDataCodes1</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>el</name> <operator>=</operator> <call><name>QRspec_rsEccCodes1</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>block</name> <operator>=</operator> <name>blocks</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>dp</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ep</name> <operator>=</operator> <name>ecc</name></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>QRspec_rsBlockNum1</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RSblock_initBlock</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dl</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dp</name> <operator>+=</operator> <name>dl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ep</name> <operator>+=</operator> <name>el</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>block</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><call><name>QRspec_rsBlockNum2</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>dl</name> <operator>=</operator> <call><name>QRspec_rsDataCodes2</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>el</name> <operator>=</operator> <call><name>QRspec_rsEccCodes2</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>QRspec_rsBlockNum2</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RSblock_initBlock</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dl</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dp</name> <operator>+=</operator> <name>dl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ep</name> <operator>+=</operator> <name>el</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>block</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>__STATIC</name> <name>void</name></type> <name>QRraw_free</name><parameter_list>(<parameter><decl><type><name>QRRawCode</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>__STATIC</name> <name>QRRawCode</name> <modifier>*</modifier></type><name>QRraw_new</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRRawCode</name> <modifier>*</modifier></type><name>raw</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>spec</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>raw</name> <operator>=</operator> <operator>(</operator><name>QRRawCode</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QRRawCode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>raw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>datacode</name></name> <operator>=</operator> <call><name>QRinput_getByteStream</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>raw</name><operator>-&gt;</operator><name>datacode</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>QRspec_getEccSpec</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <call><name>QRspec_rsBlockNum1</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>dataLength</name></name> <operator>=</operator> <call><name>QRspec_rsDataLength</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>eccLength</name></name> <operator>=</operator> <call><name>QRspec_rsEccLength</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>ecccode</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>eccLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>raw</name><operator>-&gt;</operator><name>ecccode</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>datacode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <call><name>QRspec_rsBlockNum</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>rsblock</name></name> <operator>=</operator> <operator>(</operator><name>RSblock</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RSblock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>raw</name><operator>-&gt;</operator><name>rsblock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>QRraw_free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>RSblock_init</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>rsblock</name></name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name><name>raw</name><operator>-&gt;</operator><name>datacode</name></name></expr></argument>, <argument><expr><name><name>raw</name><operator>-&gt;</operator><name>ecccode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>QRraw_free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>raw</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Return a code (byte).
 * This function can be called iteratively.
 * @param raw raw code.
 * @return code
 */</comment>
<function><type><name>__STATIC</name> <name>unsigned</name> <name>char</name></type> <name>QRraw_getCode</name><parameter_list>(<parameter><decl><type><name>QRRawCode</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>, <decl><type ref="prev"/><name>row</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>raw</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name><name>raw</name><operator>-&gt;</operator><name>dataLength</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>raw</name><operator>-&gt;</operator><name>count</name></name> <operator>%</operator> <name><name>raw</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>raw</name><operator>-&gt;</operator><name>count</name></name> <operator>/</operator> <name><name>raw</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>col</name> <operator>&gt;=</operator> <name><name>raw</name><operator>-&gt;</operator><name>rsblock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dataLength</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>row</name> <operator>+=</operator> <name><name>raw</name><operator>-&gt;</operator><name>b1</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>raw</name><operator>-&gt;</operator><name>rsblock</name><index>[<expr><name>row</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>raw</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name><name>raw</name><operator>-&gt;</operator><name>dataLength</name></name> <operator>+</operator> <name><name>raw</name><operator>-&gt;</operator><name>eccLength</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>row</name> <operator>=</operator> <operator>(</operator><name><name>raw</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name><name>raw</name><operator>-&gt;</operator><name>dataLength</name></name><operator>)</operator> <operator>%</operator> <name><name>raw</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name><name>raw</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name><name>raw</name><operator>-&gt;</operator><name>dataLength</name></name><operator>)</operator> <operator>/</operator> <name><name>raw</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>raw</name><operator>-&gt;</operator><name>rsblock</name><index>[<expr><name>row</name></expr>]</index></name><operator>.</operator><name><name>ecc</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__STATIC</name> <name>void</name></type> <name>QRraw_free</name><parameter_list>(<parameter><decl><type><name>QRRawCode</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>raw</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>datacode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>ecccode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>rsblock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * Raw code for Micro QR Code
 *****************************************************************************/</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dataLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>eccLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>datacode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ecccode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RSblock</name> <modifier>*</modifier></type><name>rsblock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>oddbits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
}</block></struct></type> <name>MQRRawCode</name>;</typedef>

<function_decl><type><name>__STATIC</name> <name>void</name></type> <name>MQRraw_free</name><parameter_list>(<parameter><decl><type><name>MQRRawCode</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>__STATIC</name> <name>MQRRawCode</name> <modifier>*</modifier></type><name>MQRraw_new</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MQRRawCode</name> <modifier>*</modifier></type><name>raw</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>raw</name> <operator>=</operator> <operator>(</operator><name>MQRRawCode</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MQRRawCode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>raw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>dataLength</name></name> <operator>=</operator> <call><name>MQRspec_getDataLength</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>eccLength</name></name> <operator>=</operator> <call><name>MQRspec_getECCLength</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>oddbits</name></name> <operator>=</operator> <name><name>raw</name><operator>-&gt;</operator><name>dataLength</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <call><name>MQRspec_getDataLengthBit</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>datacode</name></name> <operator>=</operator> <call><name>QRinput_getByteStream</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>raw</name><operator>-&gt;</operator><name>datacode</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>ecccode</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>eccLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>raw</name><operator>-&gt;</operator><name>ecccode</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>datacode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>rsblock</name></name> <operator>=</operator> <operator>(</operator><name>RSblock</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RSblock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>raw</name><operator>-&gt;</operator><name>rsblock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>MQRraw_free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RSblock_initBlock</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>rsblock</name></name></expr></argument>, <argument><expr><name><name>raw</name><operator>-&gt;</operator><name>dataLength</name></name></expr></argument>, <argument><expr><name><name>raw</name><operator>-&gt;</operator><name>datacode</name></name></expr></argument>, <argument><expr><name><name>raw</name><operator>-&gt;</operator><name>eccLength</name></name></expr></argument>, <argument><expr><name><name>raw</name><operator>-&gt;</operator><name>ecccode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>raw</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Return a code (byte).
 * This function can be called iteratively.
 * @param raw raw code.
 * @return code
 */</comment>
<function><type><name>__STATIC</name> <name>unsigned</name> <name>char</name></type> <name>MQRraw_getCode</name><parameter_list>(<parameter><decl><type><name>MQRRawCode</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>raw</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name><name>raw</name><operator>-&gt;</operator><name>dataLength</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>raw</name><operator>-&gt;</operator><name>datacode</name><index>[<expr><name><name>raw</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>raw</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name><name>raw</name><operator>-&gt;</operator><name>dataLength</name></name> <operator>+</operator> <name><name>raw</name><operator>-&gt;</operator><name>eccLength</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>raw</name><operator>-&gt;</operator><name>ecccode</name><index>[<expr><name><name>raw</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name><name>raw</name><operator>-&gt;</operator><name>dataLength</name></name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__STATIC</name> <name>void</name></type> <name>MQRraw_free</name><parameter_list>(<parameter><decl><type><name>MQRRawCode</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>raw</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>datacode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>ecccode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>rsblock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/******************************************************************************
 * Frame filling
 *****************************************************************************/</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mqr</name></decl>;</decl_stmt>
}</block></struct></type> <name>FrameFiller</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FrameFiller_set</name><parameter_list>(<parameter><decl><type><name>FrameFiller</name> <modifier>*</modifier></type><name>filler</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mqr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>filler</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>filler</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>filler</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>filler</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>filler</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>filler</name><operator>-&gt;</operator><name>bit</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>filler</name><operator>-&gt;</operator><name>mqr</name></name> <operator>=</operator> <name>mqr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>FrameFiller_next</name><parameter_list>(<parameter><decl><type><name>FrameFiller</name> <modifier>*</modifier></type><name>filler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>filler</name><operator>-&gt;</operator><name>bit</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>filler</name><operator>-&gt;</operator><name>bit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><name><name>filler</name><operator>-&gt;</operator><name>frame</name></name> <operator>+</operator> <name><name>filler</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <name><name>filler</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>filler</name><operator>-&gt;</operator><name>x</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>filler</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>filler</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>filler</name><operator>-&gt;</operator><name>frame</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>filler</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>filler</name><operator>-&gt;</operator><name>bit</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>filler</name><operator>-&gt;</operator><name>bit</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>filler</name><operator>-&gt;</operator><name>dir</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>filler</name><operator>-&gt;</operator><name>bit</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>filler</name><operator>-&gt;</operator><name>dir</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>filler</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>filler</name><operator>-&gt;</operator><name>mqr</name></name> <operator>&amp;&amp;</operator> <name>x</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>y</name> <operator>==</operator> <name>w</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>filler</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>filler</name><operator>-&gt;</operator><name>mqr</name></name> <operator>&amp;&amp;</operator> <name>x</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>y</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>filler</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>filler</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>p</name><index>[<expr><name>y</name> <operator>*</operator> <name>w</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// This tail recursion could be optimized.</comment>
		<return>return <expr><call><name>FrameFiller_next</name><argument_list>(<argument><expr><name>filler</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>y</name> <operator>*</operator> <name>w</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_TESTS</name></cpp:ifdef>
<function><type><specifier>extern</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>FrameFiller_test</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FrameFiller</name></type> <name>filler</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>QRspec_getWidth</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>QRspec_newFrame</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>frame</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>FrameFiller_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filler</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>QRspec_getDataLength</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>QR_ECLEVEL_L</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal>
	       <operator>+</operator> <call><name>QRspec_getECCLength</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>QR_ECLEVEL_L</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal>
		   <operator>+</operator> <call><name>QRspec_getRemainder</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>FrameFiller_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>frame</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>FrameFiller_testMQR</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FrameFiller</name></type> <name>filler</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>MQRspec_getWidth</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>MQRspec_newFrame</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>frame</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>FrameFiller_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filler</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>MQRspec_getDataLengthBit</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>QR_ECLEVEL_L</name></expr></argument>)</argument_list></call>
	       <operator>+</operator> <call><name>MQRspec_getECCLength</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>QR_ECLEVEL_L</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>FrameFiller_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Frame filler run over the frame!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>frame</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>frame</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block" format="doxygen">/******************************************************************************
 * QR-code encoding
 *****************************************************************************/</comment>

<function><type><name>__STATIC</name> <name>QRcode</name> <modifier>*</modifier></type><name>QRcode_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRcode</name> <modifier>*</modifier></type><name>qrcode</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>qrcode</name> <operator>=</operator> <operator>(</operator><name>QRcode</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QRcode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>qrcode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>qrcode</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qrcode</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qrcode</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

	<return>return <expr><name>qrcode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QRcode_free</name><parameter_list>(<parameter><decl><type><name>QRcode</name> <modifier>*</modifier></type><name>qrcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>qrcode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>qrcode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>__STATIC</name> <name>QRcode</name> <modifier>*</modifier></type><name>QRcode_encodeMask</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRRawCode</name> <modifier>*</modifier></type><name>raw</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>masked</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRcode</name> <modifier>*</modifier></type><name>qrcode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FrameFiller</name></type> <name>filler</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>input</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <name>QRSPEC_VERSION_MAX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <name>QR_ECLEVEL_H</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>raw</name> <operator>=</operator> <call><name>QRraw_new</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>raw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>version</name> <operator>=</operator> <name><name>raw</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>QRspec_getWidth</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>QRspec_newFrame</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>frame</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>QRraw_free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>FrameFiller_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filler</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* inteleaved data and ecc codes */</comment>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>raw</name><operator>-&gt;</operator><name>dataLength</name></name> <operator>+</operator> <name><name>raw</name><operator>-&gt;</operator><name>eccLength</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>QRraw_getCode</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>bit</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>FrameFiller_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <goto>goto <name>EXIT</name>;</goto></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0x02</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>code</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>bit</name> <operator>=</operator> <name>bit</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>QRraw_free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>raw</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<comment type="block">/* remainder bits */</comment>
	<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>QRspec_getRemainder</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>FrameFiller_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <goto>goto <name>EXIT</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* masking */</comment>
	<if_stmt><if>if<condition>(<expr><name>mask</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content> <comment type="line">// just for debug purpose</comment>
		<expr_stmt><expr><name>masked</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>width</name> <operator>*</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>masked</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mask</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>masked</name> <operator>=</operator> <call><name>Mask_mask</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>masked</name> <operator>=</operator> <call><name>Mask_makeMask</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>masked</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>EXIT</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>qrcode</name> <operator>=</operator> <call><name>QRcode_new</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>masked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>qrcode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>masked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<label><name>EXIT</name>:</label>
	<expr_stmt><expr><call><name>QRraw_free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>qrcode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__STATIC</name> <name>QRcode</name> <modifier>*</modifier></type><name>QRcode_encodeMaskMQR</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MQRRawCode</name> <modifier>*</modifier></type><name>raw</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>masked</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRcode</name> <modifier>*</modifier></type><name>qrcode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FrameFiller</name></type> <name>filler</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>input</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <name>MQRSPEC_VERSION_MAX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <name>QR_ECLEVEL_Q</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>raw</name> <operator>=</operator> <call><name>MQRraw_new</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>raw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>version</name> <operator>=</operator> <name><name>raw</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>MQRspec_getWidth</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>MQRspec_newFrame</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>frame</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>MQRraw_free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>FrameFiller_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filler</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* inteleaved data and ecc codes */</comment>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>raw</name><operator>-&gt;</operator><name>dataLength</name></name> <operator>+</operator> <name><name>raw</name><operator>-&gt;</operator><name>eccLength</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>MQRraw_getCode</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>raw</name><operator>-&gt;</operator><name>oddbits</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name><name>raw</name><operator>-&gt;</operator><name>dataLength</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>bit</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>raw</name><operator>-&gt;</operator><name>oddbits</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>raw</name><operator>-&gt;</operator><name>oddbits</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>FrameFiller_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>EXIT</name>;</goto></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0x02</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>code</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>bit</name> <operator>=</operator> <name>bit</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>bit</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
			<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>FrameFiller_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>EXIT</name>;</goto></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0x02</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bit</name> <operator>&amp;</operator> <name>code</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>bit</name> <operator>=</operator> <name>bit</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>MQRraw_free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>raw</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* masking */</comment>
	<if_stmt><if>if<condition>(<expr><name>mask</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>masked</name> <operator>=</operator> <call><name>MMask_mask</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>masked</name> <operator>=</operator> <call><name>MMask_makeMask</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>masked</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>EXIT</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>qrcode</name> <operator>=</operator> <call><name>QRcode_new</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>masked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>EXIT</name>:</label>
	<expr_stmt><expr><call><name>MQRraw_free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>qrcode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRcode</name> <modifier>*</modifier></type><name>QRcode_encodeInput</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>mqr</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>QRcode_encodeMaskMQR</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><call><name>QRcode_encodeMask</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>QRcode</name> <modifier>*</modifier></type><name>QRcode_encodeStringReal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mqr</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>casesensitive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRcode</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>hint</name> <operator>!=</operator> <name>QR_MODE_8</name> <operator>&amp;&amp;</operator> <name>hint</name> <operator>!=</operator> <name>QR_MODE_KANJI</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>mqr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>QRinput_newMQR</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>QRinput_new2</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Split_splitStringToQRinput</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>casesensitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>QRinput_free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>QRcode_encodeInput</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QRinput_free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRcode</name> <modifier>*</modifier></type><name>QRcode_encodeString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>casesensitive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>QRcode_encodeStringReal</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>casesensitive</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRcode</name> <modifier>*</modifier></type><name>QRcode_encodeStringMQR</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>casesensitive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>QRcode_encodeStringReal</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>casesensitive</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>QRcode</name> <modifier>*</modifier></type><name>QRcode_encodeDataReal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mqr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRcode</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>mqr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>QRinput_newMQR</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>QRinput_new2</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_append</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>QR_MODE_8</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>QRinput_free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>QRcode_encodeInput</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QRinput_free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRcode</name> <modifier>*</modifier></type><name>QRcode_encodeData</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>QRcode_encodeDataReal</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRcode</name> <modifier>*</modifier></type><name>QRcode_encodeString8bit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>QRcode_encodeDataReal</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRcode</name> <modifier>*</modifier></type><name>QRcode_encodeDataMQR</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>QRcode_encodeDataReal</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRcode</name> <modifier>*</modifier></type><name>QRcode_encodeString8bitMQR</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>QRcode_encodeDataReal</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/******************************************************************************
 * Structured QR-code encoding
 *****************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>QRcode_List</name> <modifier>*</modifier></type><name>QRcode_List_newEntry</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRcode_List</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>QRcode_List</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QRcode_List</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>QRcode_List_freeEntry</name><parameter_list>(<parameter><decl><type><name>QRcode_List</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>QRcode_free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QRcode_List_free</name><parameter_list>(<parameter><decl><type><name>QRcode_List</name> <modifier>*</modifier></type><name>qrlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRcode_List</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>qrlist</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<while>while<condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>QRcode_List_freeEntry</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QRcode_List_size</name><parameter_list>(<parameter><decl><type><name>QRcode_List</name> <modifier>*</modifier></type><name>qrlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRcode_List</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>qrlist</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static unsigned char QRcode_parity(const char *str, int size)
{
	unsigned char parity = 0;
	int i;

	for(i=0; i&lt;size; i++) {
		parity ^= str[i];
	}

	return parity;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>QRcode_List</name> <modifier>*</modifier></type><name>QRcode_encodeInputStructured</name><parameter_list>(<parameter><decl><type><name>QRinput_Struct</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRcode_List</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRcode_List</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRcode_List</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRinput_InputList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>QRcode_List_newEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ABORT</name>;</goto></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>head</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>QRcode_List_newEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ABORT</name>;</goto></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>tail</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>QRcode_encodeInput</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>tail</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>ABORT</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>head</name></expr>;</return>
<label><name>ABORT</name>:</label>
	<expr_stmt><expr><call><name>QRcode_List_free</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>QRcode_List</name> <modifier>*</modifier></type><name>QRcode_encodeInputToStructured</name><parameter_list>(<parameter><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput_Struct</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRcode_List</name> <modifier>*</modifier></type><name>codes</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>QRinput_splitQRinputToStruct</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>codes</name> <operator>=</operator> <call><name>QRcode_encodeInputStructured</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QRinput_Struct_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>codes</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>QRcode_List</name> <modifier>*</modifier></type><name>QRcode_encodeDataStructuredReal</name><parameter_list>(
	<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>eightbit</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>casesensitive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QRinput</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QRcode_List</name> <modifier>*</modifier></type><name>codes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>version</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>eightbit</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>hint</name> <operator>!=</operator> <name>QR_MODE_8</name> <operator>&amp;&amp;</operator> <name>hint</name> <operator>!=</operator> <name>QR_MODE_KANJI</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>QRinput_new2</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>eightbit</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>QRinput_append</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>QR_MODE_8</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Split_splitStringToQRinput</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>casesensitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>QRinput_free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>codes</name> <operator>=</operator> <call><name>QRcode_encodeInputToStructured</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QRinput_free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>codes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRcode_List</name> <modifier>*</modifier></type><name>QRcode_encodeDataStructured</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>QRcode_encodeDataStructuredReal</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>QR_MODE_NUL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRcode_List</name> <modifier>*</modifier></type><name>QRcode_encodeString8bitStructured</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>QRcode_encodeDataStructured</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QRcode_List</name> <modifier>*</modifier></type><name>QRcode_encodeStringStructured</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>QRecLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>QRencodeMode</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>casesensitive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>QRcode_encodeDataStructuredReal</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>casesensitive</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * System utilities
 *****************************************************************************/</comment>

<function><type><name>void</name></type> <name>QRcode_APIVersion</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>major_version</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>minor_version</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>micro_version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>major_version</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>major_version</name> <operator>=</operator> <name>MAJOR_VERSION</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>minor_version</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>minor_version</name> <operator>=</operator> <name>MINOR_VERSION</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>micro_version</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>micro_version</name> <operator>=</operator> <name>MICRO_VERSION</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>QRcode_APIVersionString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>VERSION</name></expr>;</return>
</block_content>}</block></function>
</unit>
