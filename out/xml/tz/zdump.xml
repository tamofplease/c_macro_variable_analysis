<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/tz/zdump.c"><comment type="block">/* Dump time zone data in a textual format.  */</comment>

<comment type="block">/*
** This file is in the public domain, so clarified as of
** 2009-05-17 by Arthur David Olson.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETBSD_INSPIRED</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>NETBSD_INSPIRED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_SNPRINTF</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SNPRINTF</name></cpp:macro> <cpp:value>(!PORT_TO_C89 || 199901 &lt;= __STDC_VERSION__)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_LOCALTIME_R</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LOCALTIME_R</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_LOCALTIME_RZ</name></cpp:ifndef>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>TM_ZONE</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LOCALTIME_RZ</name></cpp:macro> <cpp:value>(NETBSD_INSPIRED &amp;&amp; USE_LTZ)</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LOCALTIME_RZ</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_TZSET</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TZSET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ZDUMP_LO_YEAR</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ZDUMP_LO_YEAR</name></cpp:macro> <cpp:value>(-500)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined ZDUMP_LO_YEAR */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ZDUMP_HI_YEAR</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ZDUMP_HI_YEAR</name></cpp:macro> <cpp:value>2500</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined ZDUMP_HI_YEAR */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECSPERNYEAR</name></cpp:macro>	<cpp:value>(SECSPERDAY * DAYSPERNYEAR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECSPERLYEAR</name></cpp:macro>	<cpp:value>(SECSPERNYEAR + SECSPERDAY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECSPER400YEARS</name></cpp:macro>	<cpp:value>(SECSPERNYEAR * (intmax_t) (300 + 3)	\
			 + SECSPERLYEAR * (intmax_t) (100 - 3))</cpp:value></cpp:define>

<comment type="block">/*
** True if SECSPER400YEARS is known to be representable as an
** intmax_t.  It's OK that SECSPER400YEARS_FITS can in theory be false
** even if SECSPER400YEARS is representable, because when that happens
** the code merely runs a bit more slowly, and this slowness doesn't
** occur on any practical platform.
*/</comment>
<enum>enum <block>{ <decl><name>SECSPER400YEARS_FITS</name> <init>= <expr><name>SECSPERLYEAR</name> <operator>&lt;=</operator> <name>INTMAX_MAX</name> <operator>/</operator> <literal type="number">400</literal></expr></init></decl> }</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GETTEXT</name></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include> <comment type="block">/* for setlocale */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_GETTEXT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>HAVE_LOCALTIME_RZ</name></expr></cpp:if>
<cpp:undef># <cpp:directive>undef</cpp:directive>  <name>timezone_t</name></cpp:undef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>timezone_t</name></cpp:macro> <cpp:value>char **</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_POSIX_DECLS</name></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type>	<name>getopt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>,
			<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type>	<name>optarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>	<name>optind</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* The minimum and maximum finite time values.  */</comment>
<enum>enum <block>{ <decl><name>atime_shift</name> <init>= <expr><name>CHAR_BIT</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr></init></decl> }</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name> <specifier>const</specifier></type> <name>absolute_min_time</name> <init>=
  <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>time_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">0</literal></expr>
   ?</condition><then> <expr><operator>(</operator><operator>-</operator> <operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator> <operator>~</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">0</literal> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator>
      <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>atime_shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>atime_shift</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>
   </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name> <specifier>const</specifier></type> <name>absolute_max_time</name> <init>=
  <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>time_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">0</literal></expr>
   ?</condition><then> <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>atime_shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>atime_shift</name><operator>)</operator><operator>)</operator></expr>
   </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>longest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>progname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>	<name>warned</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>	<name>errout</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>abbr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ATTRIBUTE_REPRODUCIBLE</name> <specifier>static</specifier> <name>intmax_t</name></type> <name>delta</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dumptime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>time_t</name></type> <name>hunt</name><parameter_list>(<parameter><decl><type><name>timezone_t</name></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><name>timezone_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>showextrema</name><parameter_list>(<parameter><decl><type><name>timezone_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>showtrans</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,
		      <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tformat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ATTRIBUTE_REPRODUCIBLE</name> <specifier>static</specifier> <name>time_t</name></type> <name>yeartot</name><parameter_list>(<parameter><decl><type><name>intmax_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Is C an ASCII digit?  */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_digit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Is A an alphabetic character in the C locale?  */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_alpha</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
	  <default>default:</default>
		<return>return <expr><name>false</name></expr>;</return>
	  <case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="char">'B'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case> <case>case <expr><literal type="char">'D'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case> <case>case <expr><literal type="char">'F'</literal></expr>:</case> <case>case <expr><literal type="char">'G'</literal></expr>:</case>
	  <case>case <expr><literal type="char">'H'</literal></expr>:</case> <case>case <expr><literal type="char">'I'</literal></expr>:</case> <case>case <expr><literal type="char">'J'</literal></expr>:</case> <case>case <expr><literal type="char">'K'</literal></expr>:</case> <case>case <expr><literal type="char">'L'</literal></expr>:</case> <case>case <expr><literal type="char">'M'</literal></expr>:</case> <case>case <expr><literal type="char">'N'</literal></expr>:</case>
	  <case>case <expr><literal type="char">'O'</literal></expr>:</case> <case>case <expr><literal type="char">'P'</literal></expr>:</case> <case>case <expr><literal type="char">'Q'</literal></expr>:</case> <case>case <expr><literal type="char">'R'</literal></expr>:</case> <case>case <expr><literal type="char">'S'</literal></expr>:</case> <case>case <expr><literal type="char">'T'</literal></expr>:</case> <case>case <expr><literal type="char">'U'</literal></expr>:</case>
	  <case>case <expr><literal type="char">'V'</literal></expr>:</case> <case>case <expr><literal type="char">'W'</literal></expr>:</case> <case>case <expr><literal type="char">'X'</literal></expr>:</case> <case>case <expr><literal type="char">'Y'</literal></expr>:</case> <case>case <expr><literal type="char">'Z'</literal></expr>:</case>
	  <case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case> <case>case <expr><literal type="char">'g'</literal></expr>:</case>
	  <case>case <expr><literal type="char">'h'</literal></expr>:</case> <case>case <expr><literal type="char">'i'</literal></expr>:</case> <case>case <expr><literal type="char">'j'</literal></expr>:</case> <case>case <expr><literal type="char">'k'</literal></expr>:</case> <case>case <expr><literal type="char">'l'</literal></expr>:</case> <case>case <expr><literal type="char">'m'</literal></expr>:</case> <case>case <expr><literal type="char">'n'</literal></expr>:</case>
	  <case>case <expr><literal type="char">'o'</literal></expr>:</case> <case>case <expr><literal type="char">'p'</literal></expr>:</case> <case>case <expr><literal type="char">'q'</literal></expr>:</case> <case>case <expr><literal type="char">'r'</literal></expr>:</case> <case>case <expr><literal type="char">'s'</literal></expr>:</case> <case>case <expr><literal type="char">'t'</literal></expr>:</case> <case>case <expr><literal type="char">'u'</literal></expr>:</case>
	  <case>case <expr><literal type="char">'v'</literal></expr>:</case> <case>case <expr><literal type="char">'w'</literal></expr>:</case> <case>case <expr><literal type="char">'x'</literal></expr>:</case> <case>case <expr><literal type="char">'y'</literal></expr>:</case> <case>case <expr><literal type="char">'z'</literal></expr>:</case>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>ATTRIBUTE_NORETURN</name> <specifier>static</specifier> <name>void</name></type>
<name>size_overflow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: size overflow\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Return A + B, exiting if the result would overflow either ptrdiff_t
   or size_t.  */</comment>
<function><type><name>ATTRIBUTE_REPRODUCIBLE</name> <specifier>static</specifier> <name>ptrdiff_t</name></type>
<name>sumsize</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ckd_add</name></cpp:ifdef>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>sum</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ckd_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>sum</name> <operator>&lt;=</operator> <name>SIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>sum</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>sum_max</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>, <argument><expr><name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>sum_max</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;=</operator> <name>sum_max</name> <operator>-</operator> <name>a</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>a</name> <operator>+</operator> <name>b</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>size_overflow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Return a pointer to a newly allocated buffer of size SIZE, exiting
   on failure.  SIZE should be nonzero.  */</comment>
<function><type><name>ATTRIBUTE_MALLOC</name> <specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>xmalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: Memory exhausted\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>HAVE_TZSET</name></expr></cpp:if>
<cpp:undef># <cpp:directive>undef</cpp:directive> <name>tzset</name></cpp:undef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>tzset</name></cpp:macro> <cpp:value>zdump_tzset</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tzset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Assume gmtime_r works if localtime_r does.
   A replacement localtime_r is defined below if needed.  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>HAVE_LOCALTIME_R</name></expr></cpp:if>

<cpp:undef># <cpp:directive>undef</cpp:directive> <name>gmtime_r</name></cpp:undef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>gmtime_r</name></cpp:macro> <cpp:value>zdump_gmtime_r</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type>
<name>gmtime_r</name><parameter_list>(<parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>gmtime</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <operator>*</operator><name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Platforms with TM_ZONE don't need tzname, so they can use the
   faster localtime_rz or localtime_r if available.  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>TM_ZONE</name> <operator>&amp;&amp;</operator> <name>HAVE_LOCALTIME_RZ</name></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>USE_LOCALTIME_RZ</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>USE_LOCALTIME_RZ</name></cpp:macro> <cpp:value>false</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>USE_LOCALTIME_RZ</name></expr></cpp:if>

<cpp:if># <cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>TM_ZONE</name> <operator>||</operator> <operator>!</operator> <name>HAVE_LOCALTIME_R</name> <operator>||</operator> <operator>!</operator> <name>HAVE_TZSET</name></expr></cpp:if>
<cpp:undef>#  <cpp:directive>undef</cpp:directive> <name>localtime_r</name></cpp:undef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>localtime_r</name></cpp:macro> <cpp:value>zdump_localtime_r</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type>
<name>localtime_r</name><parameter_list>(<parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>localtime</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <operator>*</operator><name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef># <cpp:directive>undef</cpp:directive> <name>localtime_rz</name></cpp:undef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>localtime_rz</name></cpp:macro> <cpp:value>zdump_localtime_rz</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type>
<name>localtime_rz</name><parameter_list>(<parameter><decl><type><name>timezone_t</name></type> <name>rz</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>localtime_r</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>TYPECHECK</name></cpp:ifdef>
<cpp:undef>#  <cpp:directive>undef</cpp:directive> <name>mktime_z</name></cpp:undef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>mktime_z</name></cpp:macro> <cpp:value>zdump_mktime_z</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>mktime_z</name><parameter_list>(<parameter><decl><type><name>timezone_t</name></type> <name>tz</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>mktime</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef># <cpp:directive>undef</cpp:directive> <name>tzalloc</name></cpp:undef>
<cpp:undef># <cpp:directive>undef</cpp:directive> <name>tzfree</name></cpp:undef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>tzalloc</name></cpp:macro> <cpp:value>zdump_tzalloc</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>tzfree</name></cpp:macro> <cpp:value>zdump_tzfree</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>timezone_t</name></type>
<name>tzalloc</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>HAVE_SETENV</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"TZ"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"setenv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>&amp;</operator><name>optarg</name></expr>;</return>  <comment type="block">/* Any valid non-null char ** will do.  */</comment>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
  <enum>enum <block>{ <decl><name>TZeqlen</name> <init>= <expr><literal type="number">3</literal></expr></init></decl> }</block>;</enum>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>TZeq</name><index>[<expr><name>TZeqlen</name></expr>]</index></name> <init>= <expr><literal type="string">"TZ="</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fakeenv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>ptrdiff_t</name></type> <name>fakeenv0size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>freeable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>env</name> <init>= <expr><name>fakeenv</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>initial_environ</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>valsize</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fakeenv0size</name> <operator>&lt;</operator> <name>valsize</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>e</name> <init>= <expr><name>environ</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>initial_nenvptrs</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* Counting the trailing NULL pointer.  */</comment>

    <while>while <condition>(<expr><operator>*</operator><name>e</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>ckd_add</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><call><name>ckd_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>initial_nenvptrs</name></expr></argument>, <argument><expr><name>initial_envptrs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
	  <operator>||</operator> <name>SIZE_MAX</name> <operator>&lt;</operator> <name>initial_envptrs</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>size_overflow</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
      <if_stmt><if>if <condition>(<expr><name>initial_nenvptrs</name> <operator>==</operator> <call><name>min</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>, <argument><expr><name>SIZE_MAX</name></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof <name/></sizeof>*<name>environ</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>size_overflow</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>initial_nenvptrs</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></while>
    <expr_stmt><expr><name>fakeenv0size</name> <operator>=</operator> <call><name>sumsize</name><argument_list>(<argument><expr><name>valsize</name></expr></argument>, <argument><expr><name>valsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fakeenv0size</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>fakeenv0size</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>freeable</name> <operator>=</operator> <name>env</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fakeenv</name> <operator>=</operator> <name>env</name> <operator>=</operator>
      <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>sumsize</name><argument_list>(<argument><expr><call><name>sumsize</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>environ</name></expr></argument>,
			      <argument><expr><name>initial_nenvptrs</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>environ</name></expr></argument>)</argument_list></call></expr></argument>,
		      <argument><expr><call><name>sumsize</name><argument_list>(<argument><expr><name>TZeqlen</name></expr></argument>, <argument><expr><name>fakeenv0size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>to</name> <operator>=</operator> <name>env</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name>environ</name></expr>;</init> <condition><expr><operator>(</operator><operator>*</operator><name>to</name> <operator>=</operator> <operator>*</operator><name>e</name><operator>)</operator></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>to</name> <operator>+=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><name>TZeq</name></expr></argument>, <argument><expr><name>TZeqlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name><name>env</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name>to</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>TZeq</name></expr></argument>, <argument><expr><name>TZeqlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>env</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>TZeqlen</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>valsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>initial_environ</name> <operator>=</operator> <name>environ</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>environ</name> <operator>=</operator> <name>env</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>freeable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>initial_environ</name></expr>;</return>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tzfree</name><parameter_list>(<parameter><decl><type><name>timezone_t</name></type> <name>initial_environ</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_SETENV</name></expr></cpp:if>
  <expr_stmt><expr><name>environ</name> <operator>=</operator> <name>initial_environ</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ! USE_LOCALTIME_RZ */</comment>

<comment type="block">/* A UT time zone, and its initializer.  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>timezone_t</name></type> <name>gmtz</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>gmtzinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>USE_LOCALTIME_RZ</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Try "GMT" first to find out whether this is one of the rare
       platforms where time_t counts leap seconds; this works due to
       the "Zone GMT 0 - GMT" line in the "etcetera" file.  If "GMT"
       fails, fall back on "GMT0" which might be similar due to the
       "Link GMT GMT0" line in the "backward" file, and which
       should work on all POSIX platforms.  The rest of zdump does not
       use the "GMT" abbreviation that comes from this setting, so it
       is OK to use "GMT" here rather than the more-modern "UTC" which
       would not work on platforms that omit the "backward" file.  */</comment>
    <expr_stmt><expr><name>gmtz</name> <operator>=</operator> <call><name>tzalloc</name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gmtz</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>gmt0</name><index>[]</index></name> <init>= <expr><literal type="string">"GMT0"</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>gmtz</name> <operator>=</operator> <call><name>tzalloc</name><argument_list>(<argument><expr><name>gmt0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gmtz</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>gmt0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Convert *TP to UT, storing the broken-down time into *TMP.
   Return TMP if successful, NULL otherwise.  This is like gmtime_r(TP, TMP),
   except typically faster if USE_LOCALTIME_RZ.  */</comment>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type>
<name>my_gmtime_r</name><parameter_list>(<parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><ternary><condition><expr><name>USE_LOCALTIME_RZ</name></expr> ?</condition><then> <expr><call><name>localtime_rz</name><argument_list>(<argument><expr><name>gmtz</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>gmtime_r</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TYPECHECK</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>my_localtime_rz</name></cpp:macro> <cpp:value>localtime_rz</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !defined TYPECHECK */</comment>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type>
<name>my_localtime_rz</name><parameter_list>(<parameter><decl><type><name>timezone_t</name></type> <name>tz</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>localtime_rz</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>	<name>tm</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>register</specifier> <name>time_t</name></type>	<name>t</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>tm</name> <operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>mktime_z</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <operator>*</operator><name>tp</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n%s: "</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>tformat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" year=%d"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" mon=%d"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" mday=%d"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" hour=%d"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" min=%d"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" sec=%d"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" isdst=%d"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>tformat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>errout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined TYPECHECK */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>abbrok</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>abbrp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>zone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>	<name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>	<name>wp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>warned</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>abbrp</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>is_alpha</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_digit</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>++</operator><name>cp</name></expr>;</expr_stmt></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"has characters other than ASCII alphanumerics, '-' or '+'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>cp</name> <operator>-</operator> <name>abbrp</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"has fewer than 3 characters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>cp</name> <operator>-</operator> <name>abbrp</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"has more than 6 characters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	  <return>return;</return></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
		<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: warning: zone \"%s\" abbreviation \"%s\" %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>progname</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>, <argument><expr><name>abbrp</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>warned</name> <operator>=</operator> <name>errout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Return a time zone abbreviation.  If the abbreviation needs to be
   saved, use *BUF (of size *BUFALLOC) to save it, and return the
   abbreviation in the possibly-reallocated *BUF.  Otherwise, just
   return the abbreviation.  Get the abbreviation from TMP.
   Exit on memory allocation failure.  */</comment>
<function><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type>
<name>saveabbr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name> <modifier>*</modifier></type><name>bufalloc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ab</name> <init>= <expr><call><name>abbr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>HAVE_LOCALTIME_RZ</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ab</name></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>ablen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>bufalloc</name> <operator>&lt;=</operator> <name>ablen</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Make the new buffer at least twice as long as the old,
	 to avoid O(N**2) behavior on repeated calls.  */</comment>
      <expr_stmt><expr><operator>*</operator><name>bufalloc</name> <operator>=</operator> <call><name>sumsize</name><argument_list>(<argument><expr><operator>*</operator><name>bufalloc</name></expr></argument>, <argument><expr><name>ablen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>*</operator><name>bufalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>close_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><ternary><condition><expr><call><name>ferror</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"I/O error"</literal></expr></argument>)</argument_list></call></expr>
		   </then><else>: <expr><ternary><condition><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: usage: %s OPTIONS TIMEZONE ...\n"</literal>
  <literal type="string">"Options include:\n"</literal>
  <literal type="string">"  -c [L,]U   Start at year L (default -500), end before year U (default 2500)\n"</literal>
  <literal type="string">"  -t [L,]U   Start at time L, end before time U (in seconds since 1970)\n"</literal>
  <literal type="string">"  -i         List transitions briefly (format is experimental)\n"</literal> \
  <literal type="string">"  -v         List transitions verbosely\n"</literal>
  <literal type="string">"  -V         List transitions a bit less verbosely\n"</literal>
  <literal type="string">"  --help     Output this help\n"</literal>
  <literal type="string">"  --version  Output version info\n"</literal>
  <literal type="string">"\n"</literal>
  <literal type="string">"Report bugs to %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>progname</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>REPORT_BUGS_TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>EXIT_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>close_file</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* These are static so that they're initially zero.  */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>		<name>abbrev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>ptrdiff_t</name></type>	<name>abbrevsize</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>bool</name></type>		<name>vflag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>bool</name></type>		<name>Vflag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type>		<name>cutarg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type>		<name>cuttimes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>time_t</name></type>		<name>cutlotime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>time_t</name></type>		<name>cuthitime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type>			<name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>iflag</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>cutlotime</name> <operator>=</operator> <name>absolute_min_time</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cuthitime</name> <operator>=</operator> <name>absolute_max_time</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GETTEXT</name></expr></cpp:if>
	<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>TZ_DOMAINDIR</name></cpp:ifdef>
	<expr_stmt><expr><call><name>bindtextdomain</name><argument_list>(<argument><expr><name>TZ_DOMAIN</name></expr></argument>, <argument><expr><name>TZ_DOMAINDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined TEXTDOMAINDIR */</comment>
	<expr_stmt><expr><call><name>textdomain</name><argument_list>(<argument><expr><name>TZ_DOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_GETTEXT */</comment>
	<expr_stmt><expr><name>progname</name> <operator>=</operator> <ternary><condition><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"zdump"</literal></expr></else></ternary></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--version"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"zdump %s%s\n"</literal></expr></argument>, <argument><expr><name>PKGVERSION</name></expr></argument>, <argument><expr><name>TZVERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt></block_content></block></for>
	<expr_stmt><expr><name>vflag</name> <operator>=</operator> <name>Vflag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cutarg</name> <operator>=</operator> <name>cuttimes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control><block type="pseudo"><block_content>
	  <switch>switch <condition>(<expr><call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"c:it:vV"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	  <case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>cutarg</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt> <break>break;</break>
	  <case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>cuttimes</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt> <break>break;</break>
	  <case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><name>iflag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
	  <case>case <expr><literal type="char">'v'</literal></expr>:</case> <expr_stmt><expr><name>vflag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
	  <case>case <expr><literal type="char">'V'</literal></expr>:</case> <expr_stmt><expr><name>Vflag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
	  <case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>optind</name> <operator>==</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <goto>goto <name>arg_processing_done</name>;</goto></block_content></block></if></if_stmt>
	    <expr_stmt><expr><name>ATTRIBUTE_FALLTHROUGH</name></expr>;</expr_stmt>
	  <default>default:</default>
	    <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></switch></block_content></block></for>
 <label><name>arg_processing_done</name>:</label><empty_stmt>;</empty_stmt>

	<if_stmt><if>if <condition>(<expr><name>iflag</name> <operator>|</operator> <name>vflag</name> <operator>|</operator> <name>Vflag</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>intmax_t</name></type>	<name>lo</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>intmax_t</name></type>	<name>hi</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>loend</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hiend</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>register</specifier> <name>intmax_t</name></type> <name>cutloyear</name> <init>= <expr><name>ZDUMP_LO_YEAR</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>register</specifier> <name>intmax_t</name></type> <name>cuthiyear</name> <init>= <expr><name>ZDUMP_HI_YEAR</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>cutarg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>lo</name> <operator>=</operator> <call><name>strtoimax</name><argument_list>(<argument><expr><name>cutarg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loend</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>cutarg</name> <operator>!=</operator> <name>loend</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>loend</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cuthiyear</name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cutarg</name> <operator>!=</operator> <name>loend</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>loend</name> <operator>==</operator> <literal type="char">','</literal>
				   <operator>&amp;&amp;</operator> <operator>(</operator><name>hi</name> <operator>=</operator> <call><name>strtoimax</name><argument_list>(<argument><expr><name>loend</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hiend</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>,</operator>
				       <name>loend</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>hiend</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>hiend</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>cutloyear</name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cuthiyear</name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: wild -c argument %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>progname</name></expr></argument>, <argument><expr><name>cutarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>cutarg</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>cuttimes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>cutlotime</name> <operator>=</operator> <call><name>yeartot</name><argument_list>(<argument><expr><name>cutloyear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cuthitime</name> <operator>=</operator> <call><name>yeartot</name><argument_list>(<argument><expr><name>cuthiyear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>cuttimes</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>lo</name> <operator>=</operator> <call><name>strtoimax</name><argument_list>(<argument><expr><name>cuttimes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loend</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>cuttimes</name> <operator>!=</operator> <name>loend</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>loend</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>&lt;</operator> <name>cuthitime</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>&lt;</operator> <name>absolute_min_time</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					  <expr_stmt><expr><name>hi</name> <operator>=</operator> <name>absolute_min_time</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>cuthitime</name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cuttimes</name> <operator>!=</operator> <name>loend</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>loend</name> <operator>==</operator> <literal type="char">','</literal>
				   <operator>&amp;&amp;</operator> <operator>(</operator><name>hi</name> <operator>=</operator> <call><name>strtoimax</name><argument_list>(<argument><expr><name>loend</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hiend</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>,</operator>
				       <name>loend</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>hiend</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>hiend</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>cutlotime</name> <operator>&lt;</operator> <name>lo</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>absolute_max_time</name> <operator>&lt;</operator> <name>lo</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>absolute_max_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>cutlotime</name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>&lt;</operator> <name>cuthitime</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>&lt;</operator> <name>absolute_min_time</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					  <expr_stmt><expr><name>hi</name> <operator>=</operator> <name>absolute_min_time</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>cuthitime</name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: wild -t argument %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>progname</name></expr></argument>, <argument><expr><name>cuttimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>gmtzinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>iflag</name> <operator>|</operator> <name>vflag</name> <operator>|</operator> <name>Vflag</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>now</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
	  <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>now</name> <operator>|=</operator> <operator>!</operator><name>now</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>longest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>optind</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	  <decl_stmt><decl><type><name>size_t</name></type> <name>arglen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>longest</name> <operator>&lt;</operator> <name>arglen</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>longest</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>arglen</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>optind</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>timezone_t</name></type> <name>tz</name> <init>= <expr><call><name>tzalloc</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ab</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>, <decl><type ref="prev"/><name>newtm</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>tm_ok</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tz</name></expr>)</condition> <block>{<block_content>
		  <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>now</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>show</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>tzfree</name><argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>warned</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> <operator>=</operator> <name>absolute_min_time</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>iflag</name> <operator>|</operator> <name>Vflag</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>show</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>my_localtime_rz</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
			    <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;</operator> <name>cutlotime</name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>time_t</name></type> <name>newt</name> <init>= <expr><name>cutlotime</name></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>my_localtime_rz</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newtm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				  <expr_stmt><expr><call><name>showextrema</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>newt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>t</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>cutlotime</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>t</name> <operator>=</operator> <name>cutlotime</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>tm_ok</name> <operator>=</operator> <call><name>my_localtime_rz</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tm_ok</name></expr>)</condition> <block>{<block_content>
		  <expr_stmt><expr><name>ab</name> <operator>=</operator> <call><name>saveabbr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>abbrev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abbrevsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>iflag</name></expr>)</condition> <block>{<block_content>
		    <expr_stmt><expr><call><name>showtrans</name><argument_list>(<argument><expr><literal type="string">"\nTZ=%f"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>ab</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>showtrans</name><argument_list>(<argument><expr><literal type="string">"-\t-\t%Q"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>ab</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		  <expr_stmt><expr><name>ab</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<while>while <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>cuthitime</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		  <decl_stmt><decl><type><name>time_t</name></type> <name>newt</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>t</name> <operator>&lt;</operator> <name>absolute_max_time</name> <operator>-</operator> <name>SECSPERDAY</name> <operator>/</operator> <literal type="number">2</literal>
				  <operator>&amp;&amp;</operator> <name>t</name> <operator>+</operator> <name>SECSPERDAY</name> <operator>/</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>cuthitime</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>
				 ?</condition><then> <expr><name>t</name> <operator>+</operator> <name>SECSPERDAY</name> <operator>/</operator> <literal type="number">2</literal></expr>
				 </then><else>: <expr><name>cuthitime</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
		  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>newtmp</name> <init>= <expr><call><name>localtime_rz</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newtm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <decl_stmt><decl><type><name>bool</name></type> <name>newtm_ok</name> <init>= <expr><name>newtmp</name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
		  <if_stmt><if>if <condition>(<expr><name>tm_ok</name> <operator>!=</operator> <name>newtm_ok</name>
		      <operator>||</operator> <operator>(</operator><name>ab</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>delta</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newtm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>newt</name> <operator>-</operator> <name>t</name>
				 <operator>||</operator> <name><name>newtm</name><operator>.</operator><name>tm_isdst</name></name> <operator>!=</operator> <name><name>tm</name><operator>.</operator><name>tm_isdst</name></name>
				 <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>abbr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newtm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ab</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
		    <expr_stmt><expr><name>newt</name> <operator>=</operator> <call><name>hunt</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>newt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>newtmp</name> <operator>=</operator> <call><name>localtime_rz</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>newtm_ok</name> <operator>=</operator> <name>newtmp</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><name>iflag</name></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><call><name>showtrans</name><argument_list>(<argument><expr><literal type="string">"%Y-%m-%d\t%L\t%Q"</literal></expr></argument>, <argument><expr><name>newtmp</name></expr></argument>, <argument><expr><name>newt</name></expr></argument>,
				<argument><expr><ternary><condition><expr><name>newtm_ok</name></expr> ?</condition><then> <expr><call><name>abbr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newtm</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		    <else>else <block>{<block_content>
		      <expr_stmt><expr><call><name>show</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>newt</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>show</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>newt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></else></if_stmt>
		  </block_content>}</block></if></if_stmt>
		  <expr_stmt><expr><name>t</name> <operator>=</operator> <name>newt</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>tm_ok</name> <operator>=</operator> <name>newtm_ok</name></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>newtm_ok</name></expr>)</condition> <block>{<block_content>
		    <expr_stmt><expr><name>ab</name> <operator>=</operator> <call><name>saveabbr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>abbrev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abbrevsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>tm</name> <operator>=</operator> <name>newtm</name></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>iflag</name> <operator>|</operator> <name>Vflag</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>time_t</name></type> <name>newt</name> <init>= <expr><name>absolute_max_time</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>t</name> <operator>=</operator> <name>cuthitime</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>newt</name></expr>)</condition> <block>{<block_content>
			  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>my_localtime_rz</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			  <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name>
			      <operator>&amp;&amp;</operator> <call><name>my_localtime_rz</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newtm</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><call><name>showextrema</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>newt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>show</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>absolute_max_time</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>tzfree</name><argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>close_file</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>errout</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ferror</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><name>EXIT_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>yeartot</name><parameter_list>(<parameter><decl><type><name>intmax_t</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>register</specifier> <name>intmax_t</name></type>	<name>myy</name></decl>, <decl><type ref="prev"/><name>seconds</name></decl>, <decl><type ref="prev"/><name>years</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>time_t</name></type>		<name>t</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>myy</name> <operator>=</operator> <name>EPOCH_YEAR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>myy</name> <operator>&lt;</operator> <name>y</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>SECSPER400YEARS_FITS</name> <operator>&amp;&amp;</operator> <literal type="number">400</literal> <operator>&lt;=</operator> <name>y</name> <operator>-</operator> <name>myy</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>intmax_t</name></type> <name>diff400</name> <init>= <expr><operator>(</operator><name>y</name> <operator>-</operator> <name>myy</name><operator>)</operator> <operator>/</operator> <literal type="number">400</literal></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>INTMAX_MAX</name> <operator>/</operator> <name>SECSPER400YEARS</name> <operator>&lt;</operator> <name>diff400</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>absolute_max_time</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>seconds</name> <operator>=</operator> <name>diff400</name> <operator>*</operator> <name>SECSPER400YEARS</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>years</name> <operator>=</operator> <name>diff400</name> <operator>*</operator> <literal type="number">400</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>seconds</name> <operator>=</operator> <ternary><condition><expr><call><name>isleap</name><argument_list>(<argument><expr><name>myy</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SECSPERLYEAR</name></expr> </then><else>: <expr><name>SECSPERNYEAR</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name>years</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>myy</name> <operator>+=</operator> <name>years</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <name>absolute_max_time</name> <operator>-</operator> <name>seconds</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>absolute_max_time</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>seconds</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<while>while <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>myy</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>SECSPER400YEARS_FITS</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>+</operator> <literal type="number">400</literal> <operator>&lt;=</operator> <name>myy</name> <operator>&amp;&amp;</operator> <name>myy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>intmax_t</name></type> <name>diff400</name> <init>= <expr><operator>(</operator><name>myy</name> <operator>-</operator> <name>y</name><operator>)</operator> <operator>/</operator> <literal type="number">400</literal></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>INTMAX_MAX</name> <operator>/</operator> <name>SECSPER400YEARS</name> <operator>&lt;</operator> <name>diff400</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>absolute_min_time</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>seconds</name> <operator>=</operator> <name>diff400</name> <operator>*</operator> <name>SECSPER400YEARS</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>years</name> <operator>=</operator> <name>diff400</name> <operator>*</operator> <literal type="number">400</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>seconds</name> <operator>=</operator> <ternary><condition><expr><call><name>isleap</name><argument_list>(<argument><expr><name>myy</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SECSPERLYEAR</name></expr> </then><else>: <expr><name>SECSPERNYEAR</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name>years</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>myy</name> <operator>-=</operator> <name>years</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>absolute_min_time</name> <operator>+</operator> <name>seconds</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>absolute_min_time</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>t</name> <operator>-=</operator> <name>seconds</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Search for a discontinuity in timezone TZ, in the
   timestamps ranging from LOT through HIT.  LOT and HIT disagree
   about some aspect of timezone.  If ONLY_OK, search only for
   definedness changes, i.e., localtime succeeds on one side of the
   transition but fails on the other side.  Return the timestamp just
   before the transition from LOT's settings.  */</comment>

<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>hunt</name><parameter_list>(<parameter><decl><type><name>timezone_t</name></type> <name>tz</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>lot</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>hit</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>only_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>		<name>loab</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>ptrdiff_t</name></type>	<name>loabsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>		<name>lotm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>		<name>tm</name></decl>;</decl_stmt>

	<comment type="block">/* Convert LOT into a broken-down time here, even though our
	   caller already did that.  On platforms without TM_ZONE,
	   tzname may have been altered since our caller broke down
	   LOT, and tzname needs to be changed back.  */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>lotm_ok</name> <init>= <expr><call><name>my_localtime_rz</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lotm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>tm_ok</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ab</name> <init>= <expr><ternary><condition><expr><name>lotm_ok</name></expr> ?</condition><then> <expr><call><name>saveabbr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loabsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lotm</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<for>for <control>( <init>;</init> <condition>;</condition> <incr/>)</control> <block>{<block_content>
		<comment type="block">/* T = average of LOT and HIT, rounding down.
		   Avoid overflow.  */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>rem_sum</name> <init>= <expr><name>lot</name> <operator>%</operator> <literal type="number">2</literal> <operator>+</operator> <name>hit</name> <operator>%</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>rem_sum</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>rem_sum</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>+</operator> <name>lot</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>hit</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>lot</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>tm_ok</name> <operator>=</operator> <call><name>my_localtime_rz</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>lotm_ok</name> <operator>==</operator> <name>tm_ok</name>
		    <operator>&amp;&amp;</operator> <operator>(</operator><name>only_ok</name>
			<operator>||</operator> <operator>(</operator><name>ab</name> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>.</operator><name>tm_isdst</name></name> <operator>==</operator> <name><name>lotm</name><operator>.</operator><name>tm_isdst</name></name>
			    <operator>&amp;&amp;</operator> <call><name>delta</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lotm</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>t</name> <operator>-</operator> <name>lot</name>
			    <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>abbr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ab</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
		  <expr_stmt><expr><name>lot</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>tm_ok</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>lotm</name> <operator>=</operator> <name>tm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>	<expr_stmt><expr><name>hit</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>hit</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Thanks to Paul Eggert for logic used in delta_nonneg.
*/</comment>

<function><type><specifier>static</specifier> <name>intmax_t</name></type>
<name>delta_nonneg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>oldp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>intmax_t</name></type> <name>oldy</name> <init>= <expr><name><name>oldp</name><operator>-&gt;</operator><name>tm_year</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cycles</name> <init>= <expr><operator>(</operator><name><name>newp</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <name>oldy</name><operator>)</operator> <operator>/</operator> <name>YEARSPERREPEAT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intmax_t</name></type> <name>sec</name> <init>= <expr><name>SECSPERREPEAT</name></expr></init></decl>, <decl><type ref="prev"/><name>result</name> <init>= <expr><name>cycles</name> <operator>*</operator> <name>sec</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tmy</name> <init>= <expr><name><name>oldp</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <name>cycles</name> <operator>*</operator> <name>YEARSPERREPEAT</name></expr></init></decl>;</decl_stmt>
	<for>for <control>( <init>;</init> <condition><expr><name>tmy</name> <operator>&lt;</operator> <name><name>newp</name><operator>-&gt;</operator><name>tm_year</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>tmy</name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>+=</operator> <name>DAYSPERNYEAR</name> <operator>+</operator> <call><name>isleap_sum</name><argument_list>(<argument><expr><name>tmy</name></expr></argument>, <argument><expr><name>TM_YEAR_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>newp</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>-</operator> <name><name>oldp</name><operator>-&gt;</operator><name>tm_yday</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>*=</operator> <name>HOURSPERDAY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>newp</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>-</operator> <name><name>oldp</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>*=</operator> <name>MINSPERHOUR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>newp</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>-</operator> <name><name>oldp</name><operator>-&gt;</operator><name>tm_min</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>*=</operator> <name>SECSPERMIN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>newp</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>-</operator> <name><name>oldp</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>intmax_t</name></type>
<name>delta</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>oldp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name><name>newp</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;</operator> <name><name>oldp</name><operator>-&gt;</operator><name>tm_year</name></name></expr>
	  ?</condition><then> <expr><operator>-</operator><call><name>delta_nonneg</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr>
	  </then><else>: <expr><call><name>delta_nonneg</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TM_GMTOFF</name></cpp:ifndef>
<comment type="block">/* Return A-&gt;tm_yday, adjusted to compare it fairly to B-&gt;tm_yday.
   Assume A and B differ by at most one year.  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>adjusted_yday</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>yday</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>tm_yday</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>tm_year</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>yday</name> <operator>+=</operator> <literal type="number">365</literal> <operator>+</operator> <call><name>isleap_sum</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name>TM_YEAR_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>yday</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* If A is the broken-down local time and B the broken-down UT for
   the same instant, return A's UT offset in seconds, where positive
   offsets are east of Greenwich.  On failure, return LONG_MIN.

   If T is nonnull, *T is the timestamp that corresponds to A; call
   my_gmtime_r and use its result instead of B.  Otherwise, B is the
   possibly nonnull result of an earlier call to my_gmtime_r.  */</comment>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>gmtoff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ATTRIBUTE_MAYBE_UNUSED</name> <name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
       <parameter><decl><type><name>ATTRIBUTE_MAYBE_UNUSED</name> <name><name>struct</name> <name>tm</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TM_GMTOFF</name></cpp:ifdef>
  <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>TM_GMTOFF</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>my_gmtime_r</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>LONG_MIN</name></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ayday</name> <init>= <expr><call><name>adjusted_yday</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>byday</name> <init>= <expr><call><name>adjusted_yday</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>days</name> <init>= <expr><name>ayday</name> <operator>-</operator> <name>byday</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>hours</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>+</operator> <literal type="number">24</literal> <operator>*</operator> <name>days</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>minutes</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>+</operator> <literal type="number">60</literal> <operator>*</operator> <name>hours</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>seconds</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>+</operator> <literal type="number">60</literal> <operator>*</operator> <name>minutes</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>seconds</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show</name><parameter_list>(<parameter><decl><type><name>timezone_t</name></type> <name>tz</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type>	<name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type>	<name>gmtmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>, <decl><type ref="prev"/><name>gmtm</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-*s  "</literal></expr></argument>, <argument><expr><name>longest</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>gmtmp</name> <operator>=</operator> <call><name>my_gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gmtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>gmtmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>tformat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (gmtime failed)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>dumptime</name><argument_list>(<argument><expr><name>gmtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" UT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>my_localtime_rz</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>tformat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (localtime failed)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>dumptime</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>abbr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>abbr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>long</name></type> <name>off</name> <init>= <expr><call><name>gmtoff</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>gmtmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" isdst=%d"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>off</name> <operator>!=</operator> <name>LONG_MIN</name></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" gmtoff=%ld"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>abbr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>abbrok</name><argument_list>(<argument><expr><call><name>abbr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Show timestamps just before and just after a transition between
   defined and undefined (or vice versa) in either localtime or
   gmtime.  These transitions are for timezone TZ with name ZONE, in
   the range from LO (with broken-down time LOTMP if that is nonnull)
   through HI.  LO and HI disagree on definedness.  */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>showextrema</name><parameter_list>(<parameter><decl><type><name>timezone_t</name></type> <name>tz</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>lotmp</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>hi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name><name>localtm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>gmtm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>boundary</name> <init>= <expr><call><name>hunt</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>old</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>hi</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>SECSPERDAY</name> <operator>&lt;</operator> <name>hi</name> <operator>-</operator> <name>boundary</name></expr>
	?</condition><then> <expr><name>boundary</name> <operator>+</operator> <name>SECSPERDAY</name></expr>
	</then><else>: <expr><name>hi</name> <operator>+</operator> <operator>(</operator><name>hi</name> <operator>&lt;</operator> <name>TIME_T_MAX</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>SECSPERDAY</name> <operator>&lt;</operator> <name>boundary</name> <operator>-</operator> <name>lo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>lo</name> <operator>=</operator> <name>boundary</name> <operator>-</operator> <name>SECSPERDAY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>lotmp</name> <operator>=</operator> <call><name>my_localtime_rz</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>localtm</name><index>[<expr><name>old</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>lotmp</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>localtm</name><index>[<expr><name>old</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>lotmp</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>localtm</name><index>[<expr><name>old</name></expr>]</index></name><operator>.</operator><name>tm_sec</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>my_gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gmtm</name><index>[<expr><name>old</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>gmtm</name><index>[<expr><name>old</name></expr>]</index></name><operator>.</operator><name>tm_sec</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Search sequentially for definedness transitions.  Although this
     could be sped up by refining 'hunt' to search for either
     localtime or gmtime definedness transitions, it hardly seems
     worth the trouble.  */</comment>
  <for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>lo</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>hi</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>new</name> <init>= <expr><operator>!</operator><name>old</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>my_localtime_rz</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>localtm</name><index>[<expr><name>new</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>localtm</name><index>[<expr><name>new</name></expr>]</index></name><operator>.</operator><name>tm_sec</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>my_gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gmtm</name><index>[<expr><name>new</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>gmtm</name><index>[<expr><name>new</name></expr>]</index></name><operator>.</operator><name>tm_sec</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>localtm</name><index>[<expr><name>old</name></expr>]</index></name><operator>.</operator><name>tm_sec</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>localtm</name><index>[<expr><name>new</name></expr>]</index></name><operator>.</operator><name>tm_sec</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator>
	<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>gmtm</name><index>[<expr><name>old</name></expr>]</index></name><operator>.</operator><name>tm_sec</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>gmtm</name><index>[<expr><name>new</name></expr>]</index></name><operator>.</operator><name>tm_sec</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>show</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>, <argument><expr><name>t</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>show</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SNPRINTF</name></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>my_snprintf</name></cpp:macro> <cpp:value>snprintf</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<comment type="block">/* A substitute for snprintf that is good enough for zdump.  */</comment>
<macro><name>ATTRIBUTE_FORMAT</name><argument_list>(<argument>(printf, <literal type="number">3</literal>, <literal type="number">4</literal>)</argument>)</argument_list></macro> <function><type><specifier>static</specifier> <name>int</name></type>
<name>my_snprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>arglen</name></decl>, <decl><type ref="prev"/><name>slen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name> <specifier>const</specifier> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>arglen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>vsprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>n</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>arglen</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>slen</name> <operator>=</operator> <ternary><condition><expr><name>arglen</name> <operator>&lt;</operator> <name>size</name></expr> ?</condition><then> <expr><name>arglen</name></expr> </then><else>: <expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><index>[<expr><name>slen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>arglen</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr> ?</condition><then> <expr><name>arglen</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Store into BUF, of size SIZE, a formatted local time taken from *TM.
   Use ISO 8601 format +HH:MM:SS.  Omit :SS if SS is zero, and omit
   :MM too if MM is also zero.

   Return the length of the resulting string.  If the string does not
   fit, return the length that the string would have been if it had
   fit; do not overrun the output buffer.  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>format_local_time</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ss</name> <init>= <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></init></decl>, <decl><type ref="prev"/><name>mm</name> <init>= <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></init></decl>, <decl><type ref="prev"/><name>hh</name> <init>= <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>ss</name></expr>
	  ?</condition><then> <expr><call><name>my_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%02d:%02d:%02d"</literal></expr></argument>, <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>
	  </then><else>: <expr><ternary><condition><expr><name>mm</name></expr>
	  ?</condition><then> <expr><call><name>my_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%02d:%02d"</literal></expr></argument>, <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>
	  </then><else>: <expr><call><name>my_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Store into BUF, of size SIZE, a formatted UT offset for the
   localtime *TM corresponding to time T.  Use ISO 8601 format
   +HHMMSS, or -HHMMSS for timestamps west of Greenwich; use the
   format -00 for unknown UT offsets.  If the hour needs more than
   two digits to represent, extend the length of HH as needed.
   Otherwise, omit SS if SS is zero, and omit MM too if MM is also
   zero.

   Return the length of the resulting string, or -1 if the result is
   not representable as a string.  If the string does not fit, return
   the length that the string would have been if it had fit; do not
   overrun the output buffer.  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>format_utc_offset</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>long</name></type> <name>off</name> <init>= <expr><call><name>gmtoff</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>sign</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal>
		<operator>||</operator> <operator>(</operator><name>off</name> <operator>==</operator> <literal type="number">0</literal>
		    <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><call><name>abbr</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>abbr</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"zzz"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>
	       ?</condition><then> <expr><literal type="char">'-'</literal></expr> </then><else>: <expr><literal type="char">'+'</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>hh</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>mm</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>off</name> <operator>==</operator> <name>LONG_MIN</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>off</name> <operator>=</operator> <operator>-</operator><name>off</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ss</name> <operator>=</operator> <name>off</name> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>mm</name> <operator>=</operator> <name>off</name> <operator>/</operator> <literal type="number">60</literal> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>hh</name> <operator>=</operator> <name>off</name> <operator>/</operator> <literal type="number">60</literal> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>ss</name> <operator>||</operator> <literal type="number">100</literal> <operator>&lt;=</operator> <name>hh</name></expr>
	  ?</condition><then> <expr><call><name>my_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%c%02ld%02d%02d"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>
	  </then><else>: <expr><ternary><condition><expr><name>mm</name></expr>
	  ?</condition><then> <expr><call><name>my_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%c%02ld%02d"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>
	  </then><else>: <expr><call><name>my_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%c%02ld"</literal></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Store into BUF (of size SIZE) a quoted string representation of P.
   If the representation's length is less than SIZE, return the
   length; the representation is not null terminated.  Otherwise
   return SIZE, to indicate that BUF is too small.  */</comment>
<function><type><specifier>static</specifier> <name>ptrdiff_t</name></type>
<name>format_quoted_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>s</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'"'</literal></expr><operator>,</operator> <expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>p</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>
    <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
    <default>default:</default> <expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <name>c</name></expr><operator>,</operator> <expr><name>s</name><operator>--</operator></expr>;</expr_stmt> <continue>continue;</continue>
    <case>case <expr><literal type="char">'\0'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'"'</literal></expr><operator>,</operator> <expr><name>s</name><operator>--</operator></expr>;</expr_stmt> <return>return <expr><name>size</name> <operator>-</operator> <name>s</name></expr>;</return>
    <case>case <expr><literal type="char">'"'</literal></expr>:</case> <case>case <expr><literal type="char">'\\'</literal></expr>:</case> <break>break;</break>
    <case>case <expr><literal type="char">' '</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'\f'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'\t'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'\v'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt> <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr><operator>,</operator> <expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <name>c</name></expr><operator>,</operator> <expr><name>s</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Store into BUF (of size SIZE) a timestamp formatted by TIME_FMT.
   TM is the broken-down time, T the seconds count, AB the time zone
   abbreviation, and ZONE_NAME the zone name.  Return true if
   successful, false if the output would require more than SIZE bytes.
   TIME_FMT uses the same format that strftime uses, with these
   additions:

   %f zone name
   %L local time as per format_local_time
   %Q like "U\t%Z\tD" where U is the UT offset as for format_utc_offset
      and D is the isdst flag; except omit D if it is zero, omit %Z if
      it equals U, quote and escape %Z if it contains nonalphabetics,
      and omit any trailing tabs.  */</comment>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>istrftime</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>time_fmt</name></decl></parameter>,
	  <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ab</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>zone_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>s</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>time_fmt</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>f</name></expr>;</init> <condition>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name>
	     <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'%'</literal>
		 <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Q'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>formatted_len</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>f_prefix_len</name> <init>= <expr><name>p</name> <operator>-</operator> <name>f</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>f_prefix_copy_size</name> <init>= <expr><call><name>sumsize</name><argument_list>(<argument><expr><name>f_prefix_len</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>fbuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>oversized</name> <init>= <expr><sizeof>sizeof <name>fbuf</name></sizeof> <operator>&lt;=</operator> <name>f_prefix_copy_size</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>f_prefix_copy</name> <init>= <expr><ternary><condition><expr><name>oversized</name></expr> ?</condition><then> <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>f_prefix_copy_size</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>fbuf</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>f_prefix_copy</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>f_prefix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>f_prefix_copy</name> <operator>+</operator> <name>f_prefix_len</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>formatted_len</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>f_prefix_copy</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>oversized</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f_prefix_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>formatted_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>formatted_len</name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>b</name> <operator>+=</operator> <name>formatted_len</name></expr><operator>,</operator> <expr><name>s</name> <operator>-=</operator> <name>formatted_len</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>
      <switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'f'</literal></expr>:</case>
	<expr_stmt><expr><name>formatted_len</name> <operator>=</operator> <call><name>format_quoted_string</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
      <case>case <expr><literal type="char">'L'</literal></expr>:</case>
	<expr_stmt><expr><name>formatted_len</name> <operator>=</operator> <call><name>format_local_time</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
      <case>case <expr><literal type="char">'Q'</literal></expr>:</case>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>bool</name></type> <name>show_abbr</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>offlen</name> <init>= <expr><call><name>format_utc_offset</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name>offlen</name> <operator>&amp;&amp;</operator> <name>offlen</name> <operator>&lt;</operator> <name>s</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>show_abbr</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ab</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>b</name> <operator>+=</operator> <name>offlen</name></expr><operator>,</operator> <expr><name>s</name> <operator>-=</operator> <name>offlen</name></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>show_abbr</name></expr>)</condition> <block>{<block_content>
	    <decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>abp</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl>;</decl_stmt>
	    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	    <expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr><operator>,</operator> <expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
	    <for>for <control>(<init><expr><name>abp</name> <operator>=</operator> <name>ab</name></expr>;</init> <condition><expr><call><name>is_alpha</name><argument_list>(<argument><expr><operator>*</operator><name>abp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>abp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	      <continue>continue;</continue></block_content></block></for>
	    <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>!</operator><operator>*</operator><name>abp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ab</name></expr>
		   ?</condition><then> <expr><call><name>my_snprintf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr>
		   </then><else>: <expr><call><name>format_quoted_string</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
	      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	    <expr_stmt><expr><name>b</name> <operator>+=</operator> <name>len</name></expr><operator>,</operator> <expr><name>s</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><name>formatted_len</name>
	    <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr>
	       ?</condition><then> <expr><call><name>my_snprintf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><literal type="string">"\t\t%d"</literal><index>[<expr><name>show_abbr</name></expr>]</index></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr></argument>)</argument_list></call></expr>
	       </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block>
	<break>break;</break>
      </block_content>}</block></switch>
      <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <name>formatted_len</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>b</name> <operator>+=</operator> <name>formatted_len</name></expr><operator>,</operator> <expr><name>s</name> <operator>-=</operator> <name>formatted_len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt></block_content></block></for>
  <expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Show a time transition.  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>showtrans</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>time_fmt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ab</name></decl></parameter>,
	  <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>zone_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>tformat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>stackbuf</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof <name>stackbuf</name></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>stackbuf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufalloc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator> <call><name>istrftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>time_fmt</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>ab</name></expr></argument>, <argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>sumsize</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bufalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>bufalloc</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bufalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type>
<name>abbr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TM_ZONE</name></cpp:ifdef>
	<return>return <expr><name><name>tmp</name><operator>-&gt;</operator><name>TM_ZONE</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>HAVE_TZNAME</name></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>&amp;&amp;</operator> <name><name>tzname</name><index>[<expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><name><name>tzname</name><index>[<expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><literal type="string">""</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
** The code below can fail on certain theoretical systems;
** it works on all known real-world systems as of 2022-01-25.
*/</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>tformat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE__GENERIC</name></expr></cpp:if>
	<comment type="block">/* C11-style _Generic is more likely to return the correct
	   format when distinct types have the same size.  */</comment>
	<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>fmt</name> <init>=
	  <expr><generic_selection>_Generic(<selector><expr><operator>+</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">0</literal></expr></selector>,
		   <association_list><association><type><name>int</name></type>: <expr><literal type="string">"%d"</literal></expr></association>, <association><type><name>long</name></type>: <expr><literal type="string">"%ld"</literal></expr></association>, <association><type><name>long</name> <name>long</name></type>: <expr><literal type="string">"%lld"</literal></expr></association>,
		   <association><type><name>unsigned</name></type>: <expr><literal type="string">"%u"</literal></expr></association>, <association><type><name>unsigned</name> <name>long</name></type>: <expr><literal type="string">"%lu"</literal></expr></association>,
		   <association><type><name>unsigned</name> <name>long</name> <name>long</name></type>: <expr><literal type="string">"%llu"</literal></expr></association>,
		   <association><type><specifier>default</specifier></type>: <expr><name>NULL</name></expr></association></association_list>)</generic_selection></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><name>fmt</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <generic_selection>_Generic(<selector><expr><operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">0</literal></expr></selector>,
		       <association_list><association><type><name>intmax_t</name></type>: <expr><literal type="string">"%"</literal><name>PRIdMAX</name></expr></association>, <association><type><name>uintmax_t</name></type>: <expr><literal type="string">"%"</literal><name>PRIuMAX</name></expr></association>,
		       <association><type><specifier>default</specifier></type>: <expr><name>NULL</name></expr></association></association_list>)</generic_selection></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><name>fmt</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>		<comment type="block">/* signed */</comment>
		<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>intmax_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="string">"%"</literal><name>PRIdMAX</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="string">"%lld"</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="string">"%ld"</literal></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><literal type="string">"%d"</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PRIuMAX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uintmax_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="string">"%"</literal><name>PRIuMAX</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="string">"%llu"</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="string">"%lu"</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="string">"%u"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dumptime</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>timeptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type>	<name><name>wday_name</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"Sun"</literal></expr>, <expr><literal type="string">"Mon"</literal></expr>, <expr><literal type="string">"Tue"</literal></expr>, <expr><literal type="string">"Wed"</literal></expr>, <expr><literal type="string">"Thu"</literal></expr>, <expr><literal type="string">"Fri"</literal></expr>, <expr><literal type="string">"Sat"</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type>	<name><name>mon_name</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"Jan"</literal></expr>, <expr><literal type="string">"Feb"</literal></expr>, <expr><literal type="string">"Mar"</literal></expr>, <expr><literal type="string">"Apr"</literal></expr>, <expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"Jun"</literal></expr>,
		<expr><literal type="string">"Jul"</literal></expr>, <expr><literal type="string">"Aug"</literal></expr>, <expr><literal type="string">"Sep"</literal></expr>, <expr><literal type="string">"Oct"</literal></expr>, <expr><literal type="string">"Nov"</literal></expr>, <expr><literal type="string">"Dec"</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type>		<name>lead</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type>		<name>trail</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>DIVISOR</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	** The packaged localtime_rz and gmtime_r never put out-of-range
	** values in tm_wday or tm_mon, but since this code might be compiled
	** with other (perhaps experimental) versions, paranoia is in order.
	*/</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s%3d %.2d:%.2d:%.2d "</literal></expr></argument>,
		<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name><name>timeptr</name><operator>-&gt;</operator><name>tm_wday</name></name>
		  <operator>&amp;&amp;</operator> <name><name>timeptr</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>&lt;</operator> <sizeof>sizeof <name>wday_name</name></sizeof> <operator>/</operator> <sizeof>sizeof <name><name>wday_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof><operator>)</operator></expr>
		 ?</condition><then> <expr><name><name>wday_name</name><index>[<expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_wday</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"???"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
		<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name><name>timeptr</name><operator>-&gt;</operator><name>tm_mon</name></name>
		  <operator>&amp;&amp;</operator> <name><name>timeptr</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&lt;</operator> <sizeof>sizeof <name>mon_name</name></sizeof> <operator>/</operator> <sizeof>sizeof <name><name>mon_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof><operator>)</operator></expr>
		 ?</condition><then> <expr><name><name>mon_name</name><index>[<expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"???"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
		<argument><expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>,
		<argument><expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>trail</name> <operator>=</operator> <name><name>timeptr</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>%</operator> <name>DIVISOR</name> <operator>+</operator> <name>TM_YEAR_BASE</name> <operator>%</operator> <name>DIVISOR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lead</name> <operator>=</operator> <name><name>timeptr</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>/</operator> <name>DIVISOR</name> <operator>+</operator> <name>TM_YEAR_BASE</name> <operator>/</operator> <name>DIVISOR</name> <operator>+</operator>
		<name>trail</name> <operator>/</operator> <name>DIVISOR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>trail</name> <operator>%=</operator> <name>DIVISOR</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>trail</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>lead</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>trail</name> <operator>+=</operator> <name>DIVISOR</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>--</operator><name>lead</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lead</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>trail</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>trail</name> <operator>-=</operator> <name>DIVISOR</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name>lead</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>lead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>trail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><name>lead</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>trail</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>trail</name></expr> </then><else>: <expr><name>trail</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
