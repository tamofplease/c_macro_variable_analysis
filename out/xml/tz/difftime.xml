<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/tz/difftime.c"><comment type="block">/* Return the difference between two timestamps.  */</comment>

<comment type="block">/*
** This file is in the public domain, so clarified as of
** 1996-06-05 by Arthur David Olson.
*/</comment>

<comment type="block">/*LINTLIBRARY*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private.h"</cpp:file></cpp:include>	<comment type="block">/* for time_t and TYPE_SIGNED */</comment>

<comment type="block">/* Return -X as a double.  Using this avoids casting to 'double'.  */</comment>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>dminus</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>-</operator><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type>
<name>difftime</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>time1</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>time0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	** If double is large enough, simply convert and subtract
	** (assuming that the larger type has more precision).
	*/</comment>
	<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
	  <decl_stmt><decl><type><name>double</name></type> <name>t1</name> <init>= <expr><name>time1</name></expr></init></decl>, <decl><type ref="prev"/><name>t0</name> <init>= <expr><name>time0</name></expr></init></decl>;</decl_stmt>
	  <return>return <expr><name>t1</name> <operator>-</operator> <name>t0</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	** The difference of two unsigned values can't overflow
	** if the minuend is greater than or equal to the subtrahend.
	*/</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TYPE_SIGNED</name><argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><ternary><condition><expr><name>time0</name> <operator>&lt;=</operator> <name>time1</name></expr> ?</condition><then> <expr><name>time1</name> <operator>-</operator> <name>time0</name></expr> </then><else>: <expr><call><name>dminus</name><argument_list>(<argument><expr><name>time0</name> <operator>-</operator> <name>time1</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Use uintmax_t if wide enough.  */</comment>
	<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_t</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uintmax_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
	  <decl_stmt><decl><type><name>uintmax_t</name></type> <name>t1</name> <init>= <expr><name>time1</name></expr></init></decl>, <decl><type ref="prev"/><name>t0</name> <init>= <expr><name>time0</name></expr></init></decl>;</decl_stmt>
	  <return>return <expr><ternary><condition><expr><name>time0</name> <operator>&lt;=</operator> <name>time1</name></expr> ?</condition><then> <expr><name>t1</name> <operator>-</operator> <name>t0</name></expr> </then><else>: <expr><call><name>dminus</name><argument_list>(<argument><expr><name>t0</name> <operator>-</operator> <name>t1</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	** Handle cases where both time1 and time0 have the same sign
	** (meaning that their difference cannot overflow).
	*/</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>time1</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>time0</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><name>time1</name> <operator>-</operator> <name>time0</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	** The values have opposite signs and uintmax_t is too narrow.
	** This suffers from double rounding; attempt to lessen that
	** by using long double temporaries.
	*/</comment>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>t1</name> <init>= <expr><name>time1</name></expr></init></decl>, <decl><type ref="prev"/><name>t0</name> <init>= <expr><name>time0</name></expr></init></decl>;</decl_stmt>
	  <return>return <expr><name>t1</name> <operator>-</operator> <name>t0</name></expr>;</return>
	</block_content>}</block>
</block_content>}</block></function>
</unit>
