<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/tz/asctime.c"><comment type="block">/* asctime and asctime_r a la POSIX and ISO C, except pad years before 1000.  */</comment>

<comment type="block">/*
** This file is in the public domain, so clarified as of
** 1996-06-05 by Arthur David Olson.
*/</comment>

<comment type="block">/*
** Avoid the temptation to punt entirely to strftime;
** the output of strftime is supposed to be locale specific
** whereas the output of asctime is supposed to be constant.
*/</comment>

<comment type="block">/*LINTLIBRARY*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** All years associated with 32-bit time_t values are exactly four digits long;
** some years associated with 64-bit time_t values are not.
** Vintage programs are coded for years that are always four digits long
** and may assume that the newline always lands in the same place.
** For years that are less than four digits, we pad the output with
** leading zeroes to get the newline in the traditional place.
** The -4 ensures that we get four characters of output even if
** we call a strftime variant that produces fewer characters for some years.
** The ISO C and POSIX standards prohibit padding the year,
** but many implementations pad anyway; most likely the standards are buggy.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>ASCTIME_FMT</name><index>[]</index></name> <init>= <expr><literal type="string">"%s %s%3d %.2d:%.2d:%.2d %-4s\n"</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/*
** For years that are more than four digits we put extra spaces before the year
** so that code trying to overwrite the newline won't end up overwriting
** a digit within a year and truncating the year (operating on the assumption
** that no output is better than wrong output).
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>ASCTIME_FMT_B</name><index>[]</index></name> <init>= <expr><literal type="string">"%s %s%3d %.2d:%.2d:%.2d     %s\n"</literal></expr></init></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>STD_ASCTIME_BUF_SIZE</name> <init>= <expr><literal type="number">26</literal></expr></init></decl> }</block>;</enum>
<comment type="block">/*
** Big enough for something such as
** ??? ???-2147483648 -2147483648:-2147483648:-2147483648     -2147483648\n
** (two three-character abbreviations, five strings denoting integers,
** seven explicit spaces, two explicit colons, a newline,
** and a trailing NUL byte).
** The values above are for systems where an int is 32 bits and are provided
** as an example; the size expression below is a bound for the system at
** hand.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf_asctime</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><call><name>INT_STRLEN_MAXIMUM</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/* A similar buffer for ctime.
   C89 requires that they be the same buffer.
   This requirement was removed in C99, so support it only if requested,
   as support is more likely to lead to bugs in badly-written programs.  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SUPPORT_C89</name></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>buf_ctime</name></cpp:macro> <cpp:value>buf_asctime</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf_ctime</name><index>[<expr><sizeof>sizeof <name>buf_asctime</name></sizeof></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>asctime_r</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>timeptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type>	<name><name>wday_name</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"Sun"</literal></expr>, <expr><literal type="string">"Mon"</literal></expr>, <expr><literal type="string">"Tue"</literal></expr>, <expr><literal type="string">"Wed"</literal></expr>, <expr><literal type="string">"Thu"</literal></expr>, <expr><literal type="string">"Fri"</literal></expr>, <expr><literal type="string">"Sat"</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type>	<name><name>mon_name</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"Jan"</literal></expr>, <expr><literal type="string">"Feb"</literal></expr>, <expr><literal type="string">"Mar"</literal></expr>, <expr><literal type="string">"Apr"</literal></expr>, <expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"Jun"</literal></expr>,
		<expr><literal type="string">"Jul"</literal></expr>, <expr><literal type="string">"Aug"</literal></expr>, <expr><literal type="string">"Sep"</literal></expr>, <expr><literal type="string">"Oct"</literal></expr>, <expr><literal type="string">"Nov"</literal></expr>, <expr><literal type="string">"Dec"</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>	<name>wn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>	<name>mn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>			<name><name>year</name><index>[<expr><call><name>INT_STRLEN_MAXIMUM</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>result</name><index>[<expr><sizeof>sizeof <name>buf_asctime</name></sizeof></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"??? ??? ?? ??:??:?? ????\n"</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>timeptr</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>&gt;=</operator> <name>DAYSPERWEEK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>wn</name> <operator>=</operator> <literal type="string">"???"</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>	<expr_stmt><expr><name>wn</name> <operator>=</operator> <name><name>wday_name</name><index>[<expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_wday</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>timeptr</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&gt;=</operator> <name>MONSPERYEAR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mn</name> <operator>=</operator> <literal type="string">"???"</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>	<expr_stmt><expr><name>mn</name> <operator>=</operator> <name><name>mon_name</name><index>[<expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<comment type="block">/*
	** Use strftime's %Y to generate the year, to avoid overflow problems
	** when computing timeptr-&gt;tm_year + TM_YEAR_BASE.
	** Assume that strftime is unaffected by other out-of-range members
	** (e.g., timeptr-&gt;tm_mday) when processing "%Y".
	*/</comment>
	<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><sizeof>sizeof <name>year</name></sizeof></expr></argument>, <argument><expr><literal type="string">"%Y"</literal></expr></argument>, <argument><expr><name>timeptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	** We avoid using snprintf since it's not available on all systems.
	*/</comment>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>result</name></expr></argument>,
		<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ASCTIME_FMT</name></expr> </then><else>: <expr><name>ASCTIME_FMT_B</name></expr></else></ternary><operator>)</operator></expr></argument>,
		<argument><expr><name>wn</name></expr></argument>, <argument><expr><name>mn</name></expr></argument>,
		<argument><expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>,
		<argument><expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>,
		<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>STD_ASCTIME_BUF_SIZE</name>
	    <operator>||</operator> <name>buf</name> <operator>==</operator> <name>buf_ctime</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>buf_asctime</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EOVERFLOW</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>asctime</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>timeptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>asctime_r</name><argument_list>(<argument><expr><name>timeptr</name></expr></argument>, <argument><expr><name>buf_asctime</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ctime_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>timep</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>mytm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>localtime_r</name><argument_list>(<argument><expr><name>timep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mytm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>tmp</name></expr> ?</condition><then> <expr><call><name>asctime_r</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ctime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>timep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>ctime_r</name><argument_list>(<argument><expr><name>timep</name></expr></argument>, <argument><expr><name>buf_ctime</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
