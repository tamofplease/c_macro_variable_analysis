<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgxc_clean/txninfo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"txninfo.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_xid_is_implicit</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>xid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>txn_info</name> <modifier>*</modifier></type><name>find_txn</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>txn_info</name> <modifier>*</modifier></type><name>make_txn_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>xid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>find_txn_participant_nodes</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIDPREFIX</name></cpp:macro> <cpp:value>"_$XC$"</cpp:value></cpp:define>

<function><type><name>database_info</name> <modifier>*</modifier></type><name>find_database_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>cur_database_info</name> <init>= <expr><name>head_database_info</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init>;</init><condition><expr><name>cur_database_info</name></expr>;</condition> <incr><expr><name>cur_database_info</name> <operator>=</operator> <name><name>cur_database_info</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cur_database_info</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>, <argument><expr><name>database_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator><name>cur_database_info</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>database_info</name> <modifier>*</modifier></type><name>add_database_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>rv</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>find_database_info</name><argument_list>(<argument><expr><name>database_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>rv</name></expr>;</return></block_content></block></if></if_stmt>        <comment type="block">/* Already in the list */</comment>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>database_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>database_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>database_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>rv</name><operator>-&gt;</operator><name>database_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>head_txn_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>last_txn_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>head_database_info</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>head_database_info</name> <operator>=</operator> <name>last_database_info</name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>last_database_info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>last_database_info</name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>set_node_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>NODE_TYPE</name></type> <name>type</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>nodeid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>node_info</name> <modifier>*</modifier></type><name>cur_node_info</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name>pgxc_clean_node_count</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cur_node_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>pgxc_clean_node_info</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cur_node_info</name><operator>-&gt;</operator><name>node_name</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cur_node_info</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cur_node_info</name><operator>-&gt;</operator><name>host</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cur_node_info</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>cur_node_info</name><operator>-&gt;</operator><name>node_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cur_node_info</name><operator>-&gt;</operator><name>node_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>cur_node_info</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cur_node_info</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cur_node_info</name><operator>-&gt;</operator><name>host</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>cur_node_info</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cur_node_info</name><operator>-&gt;</operator><name>nodeid</name></name> <operator>=</operator> <name>nodeid</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>node_info</name> <modifier>*</modifier></type><name>find_node_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pgxc_clean_node_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>node_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>node_name</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>&amp;</operator><name><name>pgxc_clean_node_info</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>node_info</name> <modifier>*</modifier></type><name>find_node_info_by_nodeid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nodeid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pgxc_clean_node_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodeid</name> <operator>==</operator> <name>nodeid</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>&amp;</operator><name><name>pgxc_clean_node_info</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>find_node_index</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pgxc_clean_node_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>node_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>node_name</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return  <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>find_node_index_by_nodeid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nodeid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pgxc_clean_node_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodeid</name> <operator>==</operator> <name>nodeid</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return  <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>add_txn_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>xid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>, <parameter><decl><type><name>TXN_STATUS</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>nodeidx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>txn</name> <operator>=</operator> <call><name>find_txn</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>make_txn_info</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"No more memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nodeidx</name> <operator>=</operator> <call><name>find_node_index</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>nodeidx</name></expr>]</index></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>txn_info</name> <modifier>*</modifier></type>
<name>make_txn_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>xid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>dbinfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>dbinfo</name> <operator>=</operator> <call><name>find_database_info</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>dbinfo</name> <operator>=</operator> <call><name>add_database_info</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <operator>(</operator><name>txn_info</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>gxid</name></name> <operator>=</operator> <name>gxid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>dbinfo</name><operator>-&gt;</operator><name>head_txn_info</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>dbinfo</name><operator>-&gt;</operator><name>head_txn_info</name></name> <operator>=</operator> <name><name>dbinfo</name><operator>-&gt;</operator><name>last_txn_info</name></name> <operator>=</operator> <name>txn</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>dbinfo</name><operator>-&gt;</operator><name>last_txn_info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>txn</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dbinfo</name><operator>-&gt;</operator><name>last_txn_info</name></name> <operator>=</operator> <name>txn</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name></name> <operator>=</operator> <operator>(</operator><name>TXN_STATUS</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TXN_STATUS</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>pgxc_clean_node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TXN_STATUS</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>pgxc_clean_node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>txn</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Ugly ---&gt; Remove this */</comment>
<function><type><name>txn_info</name> <modifier>*</modifier></type><name>init_txn_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database_name</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>database</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>cur_txn_info</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>database</name> <operator>=</operator> <call><name>find_database_info</name><argument_list>(<argument><expr><name>database_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>database</name><operator>-&gt;</operator><name>head_txn_info</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>database</name><operator>-&gt;</operator><name>head_txn_info</name></name> <operator>=</operator> <name><name>database</name><operator>-&gt;</operator><name>last_txn_info</name></name> <operator>=</operator> <operator>(</operator><name>txn_info</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>database</name><operator>-&gt;</operator><name>head_txn_info</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>database</name><operator>-&gt;</operator><name>head_txn_info</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>database</name><operator>-&gt;</operator><name>head_txn_info</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for>for<control>(<init><expr><name>cur_txn_info</name> <operator>=</operator> <name><name>database</name><operator>-&gt;</operator><name>head_txn_info</name></name></expr>;</init> <condition><expr><name>cur_txn_info</name></expr>;</condition> <incr><expr><name>cur_txn_info</name> <operator>=</operator> <name><name>cur_txn_info</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>cur_txn_info</name><operator>-&gt;</operator><name>gxid</name></name> <operator>==</operator> <name>gxid</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator><name>cur_txn_info</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>(<expr><name>cur_txn_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>cur_txn_info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>database</name><operator>-&gt;</operator><name>last_txn_info</name></name> <operator>=</operator> <operator>(</operator><name>txn_info</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>cur_txn_info</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cur_txn_info</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cur_txn_info</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>txn_stat</name></name> <operator>=</operator> <operator>(</operator><name>TXN_STATUS</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TXN_STATUS</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>pgxc_clean_node_count</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cur_txn_info</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>txn_stat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TXN_STATUS</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>pgxc_clean_node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>cur_txn_info</name><operator>-&gt;</operator><name>next</name></name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>txn_info</name> <modifier>*</modifier></type><name>find_txn</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>cur_db</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>cur_txn</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>cur_db</name> <operator>=</operator> <name>head_database_info</name></expr>;</init> <condition><expr><name>cur_db</name></expr>;</condition> <incr><expr><name>cur_db</name> <operator>=</operator> <name><name>cur_db</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>cur_txn</name> <operator>=</operator> <name><name>cur_db</name><operator>-&gt;</operator><name>head_txn_info</name></name></expr>;</init> <condition><expr><name>cur_txn</name></expr>;</condition> <incr><expr><name>cur_txn</name> <operator>=</operator> <name><name>cur_txn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>cur_txn</name><operator>-&gt;</operator><name>gxid</name></name> <operator>==</operator> <name>gxid</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>cur_txn</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>set_txn_status</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>, <parameter><decl><type><name>TXN_STATUS</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>node_idx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>find_txn</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>node_idx</name> <operator>=</operator> <call><name>find_node_index</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>node_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>node_idx</name></expr>]</index></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This function should be called "after" all the 2PC info
 * has been collected.
 *
 * To determine if a prepared transaction is implicit or explicit,
 * we use gxid.   If gxid ~ '__XC[0-9]+', it is implicit 2PC.
 */</comment>

<function><type><name>TXN_STATUS</name></type> <name>check_txn_global_status_gxid</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator><call><name>check_txn_global_status</name><argument_list>(<argument><expr><call><name>find_txn</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_txn_participant_nodes</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>xid</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEP</name></cpp:macro>    <cpp:value>":"</cpp:value></cpp:define>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>XIDPREFIX</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>XIDPREFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid format for implicit XID (%s).\n"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Get originating coordinator name */</comment>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid format for implicit XID (%s).\n"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get if the originating coordinator was involved in the txn */</comment>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid format for implicit XID (%s).\n"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>isorigcoord_part</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get participating datanode count */</comment>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid format for implicit XID (%s).\n"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>num_dnparts</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get participating coordinator count */</comment>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid format for implicit XID (%s).\n"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>num_coordparts</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>dnparts</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>txn</name><operator>-&gt;</operator><name>num_dnparts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>coordparts</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>txn</name><operator>-&gt;</operator><name>num_coordparts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>txn</name><operator>-&gt;</operator><name>num_dnparts</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid format for implicit XID (%s).\n"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>dnparts</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>txn</name><operator>-&gt;</operator><name>num_coordparts</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid format for implicit XID (%s).\n"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>coordparts</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>

<function><type><name>TXN_STATUS</name></type> <name>check_txn_global_status</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TXN_PREPARED</name></cpp:macro>     <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TXN_COMMITTED</name></cpp:macro>     <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TXN_ABORTED</name></cpp:macro>        <cpp:value>0x0004</cpp:value></cpp:define>

    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>check_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nodeindx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TXN_STATUS_INITIAL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>find_txn_participant_nodes</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>txn</name><operator>-&gt;</operator><name>num_dnparts</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>nodeindx</name> <operator>=</operator> <call><name>find_node_index_by_nodeid</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>dnparts</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nodeindx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Participant datanode %d not reachable. Can't "</literal>
                    <literal type="string">"resolve the transaction %s"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>dnparts</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>TXN_STATUS_FAILED</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>nodeindx</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_INITIAL</name> <operator>||</operator>
                <name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>nodeindx</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_ABORTED</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>nodeindx</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_PREPARED</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_PREPARED</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>nodeindx</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_COMMITTED</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_COMMITTED</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>nodeindx</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_ABORTED</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_ABORTED</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><name>TXN_STATUS_FAILED</name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>txn</name><operator>-&gt;</operator><name>num_coordparts</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>nodeindx</name> <operator>=</operator> <call><name>find_node_index_by_nodeid</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>coordparts</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nodeindx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Participant datanode %d not reachable. Can't "</literal>
                    <literal type="string">"resolve the transaction %s"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>coordparts</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>TXN_STATUS_FAILED</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>nodeindx</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_INITIAL</name> <operator>||</operator>
                <name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>nodeindx</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_ABORTED</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>nodeindx</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_PREPARED</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_PREPARED</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>nodeindx</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_COMMITTED</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_COMMITTED</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>nodeindx</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_ABORTED</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_ABORTED</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><name>TXN_STATUS_FAILED</name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>check_flag</name> <operator>&amp;</operator> <name>TXN_PREPARED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <comment type="block">/* Should be at least one "prepared statement" in nodes */</comment>
        <return>return <expr><name>TXN_STATUS_FAILED</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>check_flag</name> <operator>&amp;</operator> <name>TXN_COMMITTED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>check_flag</name> <operator>&amp;</operator> <name>TXN_ABORTED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <comment type="block">/* Mix of committed and aborted. This should not happen. */</comment>
        <return>return <expr><name>TXN_STATUS_FAILED</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>check_flag</name> <operator>&amp;</operator> <name>TXN_COMMITTED</name></expr>)</condition><block type="pseudo"><block_content>
        <comment type="block">/* Some 2PC transactions are committed.  Need to commit others. */</comment>
        <return>return <expr><name>TXN_STATUS_COMMITTED</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>check_flag</name> <operator>&amp;</operator> <name>TXN_ABORTED</name></expr>)</condition><block type="pseudo"><block_content>
        <comment type="block">/* Some 2PC transactions are aborted.  Need to abort others. */</comment>
        <return>return <expr><name>TXN_STATUS_ABORTED</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* All the transactions remain prepared.   No need to recover. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>check_xid_is_implicit</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TXN_STATUS_COMMITTED</name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>TXN_STATUS_PREPARED</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Returns 1 if implicit, 0 otherwise.
 *
 * Should this be replaced with regexp calls?
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_xid_is_implicit</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>XIDPREFIX</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>XIDPREFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>check2PCExists</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>cur_db</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>cur_db</name> <operator>=</operator> <name>head_database_info</name></expr>;</init> <condition><expr><name>cur_db</name></expr>;</condition> <incr><expr><name>cur_db</name> <operator>=</operator> <name><name>cur_db</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>cur_txn</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>cur_txn</name> <operator>=</operator> <name><name>cur_db</name><operator>-&gt;</operator><name>head_txn_info</name></name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>cur_txn</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>str_txn_stat</name><parameter_list>(<parameter><decl><type><name>TXN_STATUS</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch<condition>(<expr><name>status</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>TXN_STATUS_INITIAL</name></expr>:</case>
            <return>return<expr><operator>(</operator><literal type="string">"initial"</literal><operator>)</operator></expr>;</return>
        <case>case <expr><name>TXN_STATUS_UNKNOWN</name></expr>:</case>
            <return>return<expr><operator>(</operator><literal type="string">"unknown"</literal><operator>)</operator></expr>;</return>
        <case>case <expr><name>TXN_STATUS_PREPARED</name></expr>:</case>
            <return>return<expr><operator>(</operator><literal type="string">"prepared"</literal><operator>)</operator></expr>;</return>
        <case>case <expr><name>TXN_STATUS_COMMITTED</name></expr>:</case>
            <return>return<expr><operator>(</operator><literal type="string">"committed"</literal><operator>)</operator></expr>;</return>
        <case>case <expr><name>TXN_STATUS_ABORTED</name></expr>:</case>
            <return>return<expr><operator>(</operator><literal type="string">"aborted"</literal><operator>)</operator></expr>;</return>
        <case>case <expr><name>TXN_STATUS_FAILED</name></expr>:</case>
            <return>return<expr><operator>(</operator><literal type="string">"failed"</literal><operator>)</operator></expr>;</return>
        <default>default:</default>
            <return>return<expr><operator>(</operator><literal type="string">"undefined status"</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>
</unit>
