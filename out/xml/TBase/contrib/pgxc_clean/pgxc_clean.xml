<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgxc_clean/pgxc_clean.c"><comment type="block">/*
 * ------------------------------------------------------------------------
 *
 * pgxc_clean utility
 *
 *    Recovers outstanding 2PC when after crashed nodes or entire cluster
 *  is recovered.
 *
 *  Depending upon how nodes/XC cluster fail, there could be outstanding
 *  2PC transactions which are partly prepared and partly commited/borted.
 *  Such transactions must be commited/aborted to remove them from the
 *  snapshot.
 *
 *  This utility checks if there's such outstanding transactions and
 *  cleans them up.
 *
 * Command syntax
 *
 * pgxc_clean [option ... ] [database] [user]
 *
 * Options are:
 *
 *  -a, --all                cleanup all the database avilable
 *  -d, --dbname=DBNAME        database name to clean up.   Multiple -d option
 *                          can be specified.
 *  -h, --host=HOSTNAME        Coordinator hostname to connect to.
 *  -N, --no-clean            only test.  no cleanup actually.
 *  -o, --output=FILENAME    output file name.
 *  -p, --port=PORT            Coordinator port number.
 *  -q, --quiet                do not print messages except for error, default.
 *  -s, --status            prints out 2PC status.
 *  -U, --username=USERNAME    database user name
 *  -v, --verbose            same as -s, plus prints result of each cleanup.
 *  -V, --version            prints out the version,
 *  -w, --no-password        never prompt for the password.
 *  -W, --password            prompt for the password,
 *  -?, --help                prints help message
 *
 * ------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getopt_long.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_clean.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"txninfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port.h"</cpp:file></cpp:include>

<comment type="block">/* Who I am */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>my_nodename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>my_nodeidx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>        <comment type="block">/* Index in pgxc_clean_node_info */</comment>

<comment type="block">/* Databases to clean */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>clean_all_databases</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>        <comment type="block">/* "--all" overrides specific database specification */</comment>

<decl_stmt><decl><type><name>database_names</name> <modifier>*</modifier></type><name>head_database_names</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>database_names</name> <modifier>*</modifier></type><name>last_database_names</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Coordinator to connect to */</comment>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>coordinator_host</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coordinator_port</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <name>passwd_opt</name>
<block>{
    <decl><name>TRI_DEFAULT</name></decl>,
    <decl><name>TRI_YES</name></decl>,
    <decl><name>TRI_NO</name></decl>
}</block></enum></type> <name>passwd_opt</name>;</typedef>

<comment type="block">/* Miscellaneous */</comment>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>output_filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>version_opt</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>passwd_opt</name></type> <name>try_password_opt</name> <init>= <expr><name>TRI_DEFAULT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>status_opt</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>no_clean_opt</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>verbose_opt</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>outf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>errf</name></decl>;</decl_stmt>

<comment type="block">/* Global variables */</comment>
<decl_stmt><decl><type><name>node_info</name>    <modifier>*</modifier></type><name>pgxc_clean_node_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>            <name>pgxc_clean_node_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>head_database_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>last_database_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>have_password</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>password</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>password_prompt</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/* Funcs */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_to_database_list</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>parse_pgxc_clean_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>GetUserName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>showVersion</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PGconn</name> <modifier>*</modifier></type><name>loginDatabase</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>,
                            <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>encoding</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>password_prompt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getMyNodename</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>recover2PCForDatabase</name><parameter_list>(<parameter><decl><type><name>database_info</name> <modifier>*</modifier></type><name>db_info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>recover2PC</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getDatabaseList</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getNodeList</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>showVersion</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_to_database_list</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>parse_pgxc_clean_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getPreparedTxnList</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getTxnInfoOnOtherNodesAll</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_commit</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_abort</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_commit_abort</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_commit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>setMaintenanceMode</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Connection to the Coordinator
 */</comment>
<decl_stmt><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>coord_conn</name></decl>;</decl_stmt>

<comment type="block">/*
 *
 * Main
 *
 */</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <comment type="block">/* Should setup pglocale when it is supported by XC core */</comment>

    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--version"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-V"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>showVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>parse_pgxc_clean_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check missing arguments
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>clean_all_databases</name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>head_database_names</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: you must specify -a or -d option.\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Arrange my environment
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>output_filename</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Prepare output filename */</comment>
        <expr_stmt><expr><name>outf</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>output_filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>outf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: Cannot ope output file %s (%s)\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>output_filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>errf</name> <operator>=</operator> <name>outf</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>outf</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>errf</name> <operator>=</operator> <name>stderr</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>coordinator_host</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Default Coordinator host */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>coordinator_host</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGHOST"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>coordinator_host</name> <operator>=</operator> <literal type="string">"localhost"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>coordinator_port</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Default Coordinator port */</comment>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pgport</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pgport</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGPORT"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>coordinator_port</name> <operator>=</operator> <name>DEF_PGPORT</name></expr>;</expr_stmt></block_content></block></if>        <comment type="block">/* pg_config.h */</comment>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>coordinator_port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>pgport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>username</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>password_prompt</name></expr></argument>, <argument><expr><literal type="string">"Password: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>password_prompt</name></expr></argument>, <argument><expr><literal type="string">"Password for user %s: "</literal></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>try_password_opt</name> <operator>==</operator> <name>TRI_YES</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>simple_prompt</name><argument_list>(<argument><expr><name>password_prompt</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>have_password</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Print environments */</comment>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"%s (%s): Cleanup outstanding 2PCs.\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>PG_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Target databaess */</comment>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"Target databases:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>clean_all_databases</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"(ALL)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>database_names</name> <modifier>*</modifier></type><name>cur_name</name></decl>;</decl_stmt>

            <for>for<control>(<init><expr><name>cur_name</name> <operator>=</operator> <name>head_database_names</name></expr>;</init> <condition><expr><name>cur_name</name></expr>;</condition> <incr><expr><name>cur_name</name> <operator>=</operator> <name><name>cur_name</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>cur_name</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <comment type="block">/* Username to use */</comment>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"Username: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><name>username</name></expr> </then><else>: <expr><literal type="string">"default"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Status opt */</comment>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"Status opt: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>status_opt</name></expr> ?</condition><then> <expr><literal type="string">"on"</literal></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* No-dlean opt */</comment>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"no-clean: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>no_clean_opt</name></expr> ?</condition><then> <expr><literal type="string">"on"</literal></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Tweak options --&gt; should be improved in the next releases */</comment>
    <if_stmt><if>if <condition>(<expr><name>status_opt</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>verbose_opt</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Connect to XC server */</comment>
    <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"%s: connecting to database \"%s\", host: \"%s\", port: %d\n"</literal></expr></argument>,
                <argument><expr><name>progname</name></expr></argument>,
                <argument><expr><ternary><condition><expr><name>clean_all_databases</name></expr> ?</condition><then> <expr><literal type="string">"postgres"</literal></expr> </then><else>: <expr><name><name>head_database_names</name><operator>-&gt;</operator><name>database_name</name></name></expr></else></ternary></expr></argument>,
                <argument><expr><name>coordinator_host</name></expr></argument>, <argument><expr><name>coordinator_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>coord_conn</name> <operator>=</operator> <call><name>loginDatabase</name><argument_list>(<argument><expr><name>coordinator_host</name></expr></argument>, <argument><expr><name>coordinator_port</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>password</name></expr></argument>,
                               <argument><expr><ternary><condition><expr><name>clean_all_databases</name></expr> ?</condition><then> <expr><literal type="string">"postgres"</literal></expr> </then><else>: <expr><name><name>head_database_names</name><operator>-&gt;</operator><name>database_name</name></name></expr></else></ternary></expr></argument>,
                               <argument><expr><name>progname</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>, <argument><expr><name>password_prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"%s: connected successfully\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Get my nodename (connected Coordinator)
     */</comment>
    <expr_stmt><expr><call><name>getMyNodename</name><argument_list>(<argument><expr><name>coord_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"%s: Connected to the node \"%s\"\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>my_nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Get available databases
     *
     * pgxc_clean assumes that all the database are available from the connecting Coordinator.
     * Some (expert) DBA can create a database local to subset of the node by EXECUTE DIRECT.
     * In this case, DBA may have to clean outstanding 2PC transactions manually or clean
     * 2PC transactions by connecting pgxc_clean to different Coordinators.
     *
     * If such node-subset database is found to be used widely, pgxc_clean may need
     * an extension to deal with this case.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>clean_all_databases</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>getDatabaseList</name><argument_list>(<argument><expr><name>coord_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>cur_database</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"%s: Databases visible from the node \"%s\": "</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>my_nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>head_database_info</name></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><expr><name>cur_database</name> <operator>=</operator> <name>head_database_info</name></expr>;</init> <condition><expr><name>cur_database</name></expr>;</condition> <incr><expr><name>cur_database</name> <operator>=</operator> <name><name>cur_database</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">" \"%s\""</literal></expr></argument>, <argument><expr><name><name>cur_database</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Get list of Coordinators
     *
     * As in the case of database, we clean transactions in visible nodes from the
     * connecting Coordinator. DBA can also setup different node configuration
     * at different Coordinators. In this case, DBA should be careful to choose
     * appropriate Coordinator to clean up transactions.
     */</comment>
    <expr_stmt><expr><call><name>getNodeList</name><argument_list>(<argument><expr><name>coord_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"%s: Node list visible from the node \"%s\"\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>my_nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>pgxc_clean_node_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"Name: %s, host: %s, port: %d, type: %s\n"</literal></expr></argument>,
                    <argument><expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>node_name</name></expr></argument>,
                    <argument><expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>host</name></expr></argument>,
                    <argument><expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>,
                    <argument><expr><ternary><condition><expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>NODE_TYPE_COORD</name></expr> ?</condition><then> <expr><literal type="string">"coordinator"</literal></expr> </then><else>: <expr><literal type="string">"datanode"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Get list of prepared statement
     */</comment>
    <expr_stmt><expr><call><name>getPreparedTxnList</name><argument_list>(<argument><expr><name>coord_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check if there're any 2PC candidate to recover
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check2PCExists</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>errf</name></expr></argument>, <argument><expr><literal type="string">"%s: There's no prepared 2PC in this cluster.  Exiting.\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>


    <comment type="block">/*
     * Check status of each prepared transaction.  To do this, look into
     * nodes where the transaction is not recorded as "prepared".
     * Possible status are unknown (prepare has not been issued), committed or
     * aborted.
     */</comment>
    <expr_stmt><expr><call><name>getTxnInfoOnOtherNodesAll</name><argument_list>(<argument><expr><name>coord_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Print all the prepared transaction list */</comment>
        <decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>cur_db</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"%s: 2PC transaction list.\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>cur_db</name> <operator>=</operator> <name>head_database_info</name></expr>;</init> <condition><expr><name>cur_db</name></expr>;</condition> <incr><expr><name>cur_db</name> <operator>=</operator> <name><name>cur_db</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"Database: \"%s\":\n"</literal></expr></argument>, <argument><expr><name><name>cur_db</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><expr><name>txn</name> <operator>=</operator> <name><name>cur_db</name><operator>-&gt;</operator><name>head_txn_info</name></name></expr>;</init> <condition><expr><name>txn</name></expr>;</condition> <incr><expr><name>txn</name> <operator>=</operator> <name><name>txn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"    gxid: %d, xid: \"%s\", owner: %s\n"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gxid</name></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>pgxc_clean_node_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"        node: %s, status: %s\n"</literal></expr></argument>,
                            <argument><expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>node_name</name></expr></argument>,
                            <argument><expr><call><name>str_txn_stat</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Then disconnect from the database.
     * I need to login to specified databases which 2PC is issued for.  Again, we assume
     * that all the prepare is issued against the same database in each node, which
     * current Coordinator does and there seems to be no way to violate this assumption.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"%s: disconnecting\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>coord_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If --no-clean option is specified, we exit here.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>no_clean_opt</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"--no-clean opt is specified. Exiting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Recover 2PC for specified databases
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>clean_all_databases</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>cur_database_info</name></decl>;</decl_stmt>

        <for>for<control>(<init><expr><name>cur_database_info</name> <operator>=</operator> <name>head_database_info</name></expr>;</init> <condition><expr><name>cur_database_info</name></expr>;</condition> <incr><expr><name>cur_database_info</name> <operator>=</operator> <name><name>cur_database_info</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>recover2PCForDatabase</name><argument_list>(<argument><expr><name>cur_database_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>cur_database_info</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>database_names</name> <modifier>*</modifier></type><name>cur_database_name</name></decl>;</decl_stmt>

        <for>for<control>(<init><expr><name>cur_database_name</name> <operator>=</operator> <name>head_database_names</name></expr>;</init> <condition><expr><name>cur_database_name</name></expr>;</condition> <incr><expr><name>cur_database_name</name> <operator>=</operator> <name><name>cur_database_name</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>cur_database_info</name> <operator>=</operator> <call><name>find_database_info</name><argument_list>(<argument><expr><name><name>cur_database_name</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>cur_database_info</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>recover2PCForDatabase</name><argument_list>(<argument><expr><name>cur_database_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getMyNodename</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><literal type="string">"SELECT pgxc_node_str()"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Error handling here */</comment>
    <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>my_nodename</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>my_nodename</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>recover2PCForDatabase</name><parameter_list>(<parameter><decl><type><name>database_info</name> <modifier>*</modifier></type><name>db_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGconn</name>         <modifier>*</modifier></type><name>coord_conn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txn_info</name>       <modifier>*</modifier></type><name>cur_txn</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"%s: recovering 2PC for database \"%s\"\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name><name>db_info</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>coord_conn</name> <operator>=</operator> <call><name>loginDatabase</name><argument_list>(<argument><expr><name>coordinator_host</name></expr></argument>, <argument><expr><name>coordinator_port</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name><name>db_info</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>,
                               <argument><expr><name>progname</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>, <argument><expr><name>password_prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>coord_conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>errf</name></expr></argument>, <argument><expr><literal type="string">"Could not connect to the database %s.\n"</literal></expr></argument>, <argument><expr><name><name>db_info</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>setMaintenanceMode</name><argument_list>(<argument><expr><name>coord_conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Cannot recover */</comment>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>errf</name></expr></argument>, <argument><expr><literal type="string">"Skipping database %s.\n"</literal></expr></argument>, <argument><expr><name><name>db_info</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>coord_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"%s: connected to the database \"%s\"\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name><name>db_info</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for>for<control>(<init><expr><name>cur_txn</name> <operator>=</operator> <name><name>db_info</name><operator>-&gt;</operator><name>head_txn_info</name></name></expr>;</init> <condition><expr><name>cur_txn</name></expr>;</condition> <incr><expr><name>cur_txn</name> <operator>=</operator> <name><name>cur_txn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>recover2PC</name><argument_list>(<argument><expr><name>coord_conn</name></expr></argument>, <argument><expr><name>cur_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>coord_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>recover2PC</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TXN_STATUS</name></type> <name>txn_stat</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>txn_stat</name> <operator>=</operator> <call><name>check_txn_global_status</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"    Recovering TXN: gxid: %d, xid: \"%s\", owner: \"%s\", global status: %s\n"</literal></expr></argument>,
                <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gxid</name></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><call><name>str_txn_stat</name><argument_list>(<argument><expr><name>txn_stat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <switch>switch <condition>(<expr><name>txn_stat</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>TXN_STATUS_FAILED</name></expr>:</case>
        <case>case <expr><name>TXN_STATUS_UNKNOWN</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"        Recovery not needed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return;</return>
        <case>case <expr><name>TXN_STATUS_PREPARED</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"        Recovery not needed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return;</return>
        <case>case <expr><name>TXN_STATUS_COMMITTED</name></expr>:</case>
            <expr_stmt><expr><call><name>do_commit</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        <case>case <expr><name>TXN_STATUS_ABORTED</name></expr>:</case>
            <expr_stmt><expr><call><name>do_abort</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        <case>case <expr><name>TXN_STATUS_INPROGRESS</name></expr>:</case>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"        Can't recover a running transaction.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <default>default:</default>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"        Unknown TXN status, pgxc_clean error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_commit</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>do_commit_abort</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_abort</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>do_commit_abort</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_commit_abort</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>EXEC_DIRECT_STMT_FMT</name> <init>= <expr><literal type="string">"EXECUTE DIRECT ON (%s) '%s PREPARED ''%s'';';"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GLOBAL_STMT_FMT</name> <init>= <expr><literal type="string">"%s PREPARED '%s';"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">64</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ExecStatusType</name></type> <name>res_status</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"    %s... "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>is_commit</name></expr> ?</condition><then> <expr><literal type="string">"committing"</literal></expr> </then><else>: <expr><literal type="string">"aborting"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>pgxc_clean_node_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_PREPARED</name> <operator>&amp;&amp;</operator> <name>ii</name> <operator>!=</operator> <name>my_nodeidx</name></expr>)</condition>
        <block>{<block_content>

            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>EXEC_DIRECT_STMT_FMT</name></expr></argument>,
                    <argument><expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>node_name</name></expr></argument>,
                    <argument><expr><ternary><condition><expr><name>is_commit</name></expr> ?</condition><then> <expr><literal type="string">"COMMIT"</literal></expr> </then><else>: <expr><literal type="string">"ROLLBACK"</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>res_status</name> <operator>=</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>res_status</name> <operator>==</operator> <name>PGRES_COMMAND_OK</name> <operator>||</operator> <name>res_status</name> <operator>==</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"succeeded (%s), "</literal></expr></argument>, <argument><expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"failed (%s: %s), "</literal></expr></argument>,
                            <argument><expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>node_name</name></expr></argument>,
                            <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>res_status</name> <operator>!=</operator> <name>PGRES_COMMAND_OK</name> <operator>&amp;&amp;</operator> <name>res_status</name> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>errf</name></expr></argument>, <argument><expr><literal type="string">"Failed to recover TXN, gxid: %d, xid: \"%s\", owner: \"%s\", node: \"%s\" (%s)\n"</literal></expr></argument>,
                            <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gxid</name></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>node_name</name></expr></argument>,
                            <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Issue global statment */</comment>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>GLOBAL_STMT_FMT</name></expr></argument>,
            <argument><expr><ternary><condition><expr><name>is_commit</name></expr> ?</condition><then> <expr><literal type="string">"COMMIT"</literal></expr> </then><else>: <expr><literal type="string">"ROLLBACK"</literal></expr></else></ternary></expr></argument>,
            <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res_status</name> <operator>=</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>verbose_opt</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>res_status</name> <operator>==</operator> <name>PGRES_COMMAND_OK</name> <operator>||</operator> <name>res_status</name> <operator>==</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"succeeded (%s)\n"</literal></expr></argument>, <argument><expr><name>my_nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"failed (%s: %s)\n"</literal></expr></argument>,
                    <argument><expr><name>my_nodename</name></expr></argument>,
                    <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>res_status</name> <operator>!=</operator> <name>PGRES_COMMAND_OK</name> <operator>&amp;&amp;</operator> <name>res_status</name> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>errf</name></expr></argument>, <argument><expr><literal type="string">"Failed to recover TXN, gxid: %d, xid: \"%s\", owner: \"%s\", node: \"%s\" (%s)\n"</literal></expr></argument>,
                <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gxid</name></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>my_nodename</name></expr></argument>, <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static database_info *
find_database_info(char *dbname)
{
    database_info *cur_database_info;

    for(cur_database_info = head_database_info; cur_database_info; cur_database_info = cur_database_info-&gt;next)
    {
        if (strcmp(cur_database_info-&gt;database_name, dbname) == 0)
            return(cur_database_info);
    }
    return(NULL);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>PGconn</name> <modifier>*</modifier></type>
<name>loginDatabase</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>encoding</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>password_prompt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>new_pass</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>coord_conn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>port_s</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAMS_ARRAY_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>keywords</name><index>[<expr><name>PARAMS_ARRAY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>values</name><index>[<expr><name>PARAMS_ARRAY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>port_s</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"host"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"port"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>port_s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"user"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"password"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"dbname"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>dbname</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"fallback_application_name"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>progname</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"client_encoding"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>encoding</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>keywords</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Loop until we have a password if requested by backend */</comment>
    <do>do
    <block>{<block_content>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>password</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>new_pass</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>coord_conn</name> <operator>=</operator> <call><name>PQconnectdbParams</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name>coord_conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_BAD</name> <operator>&amp;&amp;</operator>
            <call><name>PQconnectionNeedsPassword</name><argument_list>(<argument><expr><name>coord_conn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <operator>!</operator><name>have_password</name> <operator>&amp;&amp;</operator>
            <name>try_password_opt</name> <operator>!=</operator> <name>TRI_NO</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>coord_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>simple_prompt</name><argument_list>(<argument><expr><name>password_prompt</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>have_password</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>new_pass</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><name>new_pass</name></expr>)</condition>;</do>

    <return>return<expr><operator>(</operator><name>coord_conn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>TXN_STATUS</name></type>
<name>getTxnStatus</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>stmt</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res_s</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>STMT_FORM</name> <init>= <expr><literal type="string">"EXECUTE DIRECT ON (%s) 'SELECT pgxc_is_committed(''%d''::xid);'"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>STMT_FORM_RUNNING</name> <init>= <expr><literal type="string">"EXECUTE DIRECT ON (%s) 'SELECT pgxc_is_inprogress(''%d''::xid);'"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>node_name</name> <operator>=</operator> <name><name>pgxc_clean_node_info</name><index>[<expr><name>node_idx</name></expr>]</index></name><operator>.</operator><name>node_name</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>STMT_FORM</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name> <operator>||</operator>
            <call><name>PQgetisnull</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>STMT_FORM_RUNNING</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>TXN_STATUS_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>PQgetisnull</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>TXN_STATUS_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>res_s</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res_s</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>TXN_STATUS_INPROGRESS</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>TXN_STATUS_UNKNOWN</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>res_s</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res_s</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TXN_STATUS_COMMITTED</name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>TXN_STATUS_ABORTED</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getTxnInfoOnOtherNodes</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>pgxc_clean_node_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_INITIAL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>getTxnStatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gxid</name></name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>getTxnInfoOnOtherNodesForDatabase</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>database_info</name> <modifier>*</modifier></type><name>database</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>cur_txn</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>cur_txn</name> <operator>=</operator> <name><name>database</name><operator>-&gt;</operator><name>head_txn_info</name></name></expr>;</init> <condition><expr><name>cur_txn</name></expr>;</condition> <incr><expr><name>cur_txn</name> <operator>=</operator> <name><name>cur_txn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>getTxnInfoOnOtherNodes</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>cur_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>getTxnInfoOnOtherNodesAll</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>cur_database</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>cur_database</name> <operator>=</operator> <name>head_database_info</name></expr>;</init> <condition><expr><name>cur_database</name></expr>;</condition> <incr><expr><name>cur_database</name> <operator>=</operator> <name><name>cur_database</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>getTxnInfoOnOtherNodesForDatabase</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>cur_database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>getPreparedTxnListOfNode</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>prep_txn_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ExecStatusType</name></type> <name>pq_status</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STMT_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

    <comment type="block">/* SQL Statement */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>STMT_GET_PREP_TXN_ON_NODE</name>
        <init>= <expr><literal type="string">"EXECUTE DIRECT ON (%s) 'SELECT TRANSACTION, GID, OWNER, DATABASE FROM PG_PREPARED_XACTS;'"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>stmt</name><index>[<expr><name>MAX_STMT_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>STMT_GET_PREP_TXN_ON_NODE</name></expr></argument>,
            <argument><expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>pq_status</name> <operator>=</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not obtain prepared transaction list for node %s.(%s)\n"</literal></expr></argument>,
                <argument><expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>node_name</name></expr></argument>, <argument><expr><ternary><condition><expr><name>res</name></expr> ?</condition><then> <expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>prep_txn_count</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>prep_txn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xid</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>database_name</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>gxid</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>xid</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>owner</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>database_name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>add_txn_info</name><argument_list>(<argument><expr><name>database_name</name></expr></argument>, <argument><expr><name><name>pgxc_clean_node_info</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>node_name</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>,
                     <argument><expr><name>TXN_STATUS_PREPARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>xid</name></expr>)</condition><block type="pseudo"><block_content>
             <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>owner</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>database_name</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>database_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getPreparedTxnList</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>pgxc_clean_node_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>getPreparedTxnListOfNode</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getDatabaseList</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>database_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl>;</decl_stmt>

    <comment type="block">/* SQL Statement */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>STMT_GET_DATABASE_LIST</name> <init>= <expr><literal type="string">"SELECT DATNAME FROM PG_DATABASE;"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Get database list
     */</comment>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>STMT_GET_DATABASE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not obtain database list.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>database_count</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>database_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>dbname</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><literal type="string">"template0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <comment type="block">/* Skip template0 database */</comment>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>add_database_info</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getNodeList</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

    <comment type="block">/* SQL Statement */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>STMT_GET_NODE_INFO</name> <init>= <expr><literal type="string">"SELECT NODE_NAME, NODE_TYPE, "</literal>
                 <literal type="string">"NODE_PORT, NODE_HOST, NODE_ID FROM PGXC_NODE;"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>STMT_GET_NODE_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not obtain node list.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pgxc_clean_node_count</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgxc_clean_node_info</name> <operator>=</operator> <operator>(</operator><name>node_info</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>pgxc_clean_node_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>node_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pgxc_clean_node_info</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"No more memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>pgxc_clean_node_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>node_type_c</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NODE_TYPE</name></type> <name>node_type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>  <name>port</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>     <name>nodeid</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>node_name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>node_type_c</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name><name>node_type_c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="char">'C'</literal></expr>:</case>
                <comment type="block">/* pgxc_clean has to connect to the Coordinator */</comment>
                <expr_stmt><expr><name>node_type</name> <operator>=</operator> <name>NODE_TYPE_COORD</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>my_nodename</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>my_nodeidx</name> <operator>=</operator> <name>ii</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'D'</literal></expr>:</case>
                <expr_stmt><expr><name>node_type</name> <operator>=</operator> <name>NODE_TYPE_DATANODE</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid catalog data (node_type), node_name: %s, node_type: %s\n"</literal></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>node_type_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nodeid</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>set_node_info</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>node_type</name></expr></argument>, <argument><expr><name>nodeid</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>node_name</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>node_type_c</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>node_type_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>host</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Check if local Coordinator has been found */</comment>
    <if_stmt><if>if <condition>(<expr><name>my_nodeidx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to identify the coordinator which %s is connecting to.  "</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Connecting to a wrong node.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>showVersion</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"pgxc_clean (Postgres-XC) "</literal> <name>PGXC_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_to_database_list</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>head_database_names</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>head_database_names</name> <operator>=</operator> <name>last_database_names</name> <operator>=</operator> <operator>(</operator><name>database_names</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>database_names</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>head_database_names</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"No more memory, FILE:%s, LINE:%d.\n"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>last_database_names</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator><name>database_names</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>database_names</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>last_database_names</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"No more memory, FILE:%s, LINE:%d.\n"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>last_database_names</name> <operator>=</operator> <name><name>last_database_names</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>last_database_names</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>last_database_names</name><operator>-&gt;</operator><name>database_name</name></name> <operator>=</operator> <name>dbname</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_pgxc_clean_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>=
    <expr><block>{
        <expr><block>{<expr><literal type="string">"all"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'a'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"dbname"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"host"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'h'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"no-clean"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'N'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"output"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'o'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"port"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'p'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"quiet"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'q'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"username"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'U'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"verbose"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'v'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"version"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'V'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"no-password"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'w'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"password"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'W'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"help"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'?'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"status"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'s'</literal></expr>}</block></expr>,
        <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>optindex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>optarg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>optind</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>progname</name> <operator>=</operator> <call><name>get_progname</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* Should be more fancy */</comment>

    <while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"ad:h:No:p:qU:vVwWs?"</literal></expr></argument>, <argument><expr><name>long_options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optindex</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <switch>switch<condition>(<expr><name>c</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="char">'a'</literal></expr>:</case>
                <expr_stmt><expr><name>clean_all_databases</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'d'</literal></expr>:</case>
                <expr_stmt><expr><call><name>add_to_database_list</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'h'</literal></expr>:</case>
                <expr_stmt><expr><name>coordinator_host</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'N'</literal></expr>:</case>
                <expr_stmt><expr><name>no_clean_opt</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'o'</literal></expr>:</case>
                <expr_stmt><expr><name>output_filename</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'p'</literal></expr>:</case>
                <expr_stmt><expr><name>coordinator_port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'q'</literal></expr>:</case>
                <expr_stmt><expr><name>verbose_opt</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'U'</literal></expr>:</case>
                <expr_stmt><expr><name>username</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'V'</literal></expr>:</case>
                <expr_stmt><expr><name>version_opt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'v'</literal></expr>:</case>
                <expr_stmt><expr><name>verbose_opt</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'w'</literal></expr>:</case>
                <expr_stmt><expr><name>try_password_opt</name> <operator>=</operator> <name>TRI_NO</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'W'</literal></expr>:</case>
                <expr_stmt><expr><name>try_password_opt</name> <operator>=</operator> <name>TRI_YES</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'s'</literal></expr>:</case>
                <expr_stmt><expr><name>status_opt</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'?'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></while>

    <while>while <condition>(<expr><name>argc</name> <operator>-</operator> <name>optind</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>head_database_names</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"template0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: You should not clean template0 database.\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>add_to_database_list</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>username</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>username</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: warning: extra command-line argument \"%s\" ignored\n"</literal></expr></argument>,
                    <argument><expr><name>progname</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>optind</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clean_all_databases</name> <operator>&amp;&amp;</operator> <name>head_database_names</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Please specify at least one database or -a for all\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>setMaintenanceMode</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SetMaintenanceModeCommand</name> <init>= <expr><literal type="string">"SET xc_maintenance_mode = on;"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ExecStatusType</name></type> <name>res_status</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SetMaintenanceModeCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res_status</name> <operator>=</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>res_status</name> <operator>==</operator> <name>PGRES_COMMAND_OK</name> <operator>||</operator> <name>res_status</name> <operator>==</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>true</name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>errf</name></expr></argument>, <argument><expr><literal type="string">"Failed to set xc_maintenance_mode. (%s)\n"</literal></expr></argument>,
                <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>GetUserName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>passwd</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>passwd</name> <operator>=</operator> <call><name>getpwuid</name><argument_list>(<argument><expr><call><name>getuid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>passwd</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><call><name>strdup</name><argument_list>(<argument><expr><name><name>passwd</name><operator>-&gt;</operator><name>pw_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: could not get current user name: %s\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGUSER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>user</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>GetUserName</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"pgxc_clean cleans up outstanding 2PCs after failed node is recovered.\n"</literal>
           <literal type="string">"Usage:\n"</literal>
           <literal type="string">"pgxc_clean [OPTION ...] [DBNAME [USERNAME]]\n\n"</literal>
           <literal type="string">"Options:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGDATABASE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>env</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>env</name> <operator>=</operator> <name>user</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  -a, --all                cleanup all the databases available.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  -d, --dbname=DBNAME      database name to clean up (default: \"%s\")\n"</literal></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGHOST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  -h, --host=HOSTNAME      target coordinator host address, (default: \"%s\")\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>env</name></expr> ?</condition><then> <expr><name>env</name></expr> </then><else>: <expr><literal type="string">"local socket"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  -N, no-clean             only collect 2PC information.  Do not recover them\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  -o, --output=FILENAME    output file name.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGPORT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  -p, --port=PORT          port number of the coordinator (default: \"%s\")\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>env</name></expr> ?</condition><then> <expr><name>env</name></expr> </then><else>: <expr><name>DEF_PGPORT_STR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  -q, --quiet              quiet mode.  do not print anything but error information.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  -s, --status             prints out 2PC status\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGUSER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>env</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>env</name> <operator>=</operator> <name>user</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  -U, --username=USERNAME  database user name (default: \"%s\")\n"</literal></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  -v, --verbose            print recovery information.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  -V, --version            prints out the version.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  -w, --no-password        never prompt for the password.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  -W, --password           prompt for the password.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  -?, --help               print this message.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>env</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
