<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/intarray/_int_tool.c"><comment type="block">/*
 * contrib/intarray/_int_tool.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_int.h"</cpp:file></cpp:include>


<comment type="block">/* arguments are assumed sorted &amp; unique-ified */</comment>
<function><type><name>bool</name></type>
<name>inner_int_contains</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>na</name></decl>,
                <decl><type ref="prev"/><name>nb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>,
                <decl><type ref="prev"/><name>j</name></decl>,
                <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name>           <modifier>*</modifier></type><name>da</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>na</name> <operator>=</operator> <call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>da</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>na</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>nb</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>da</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>db</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>da</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>db</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <break>break;</break></block_content></block></else></if_stmt>                <comment type="block">/* db[j] is not in da */</comment>
    </block_content>}</block></while>

    <return>return <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>==</operator> <name>nb</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* arguments are assumed sorted */</comment>
<function><type><name>bool</name></type>
<name>inner_int_overlap</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>na</name></decl>,
                <decl><type ref="prev"/><name>nb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>,
                <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name>           <modifier>*</modifier></type><name>da</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>na</name> <operator>=</operator> <call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>da</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>na</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>nb</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>da</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>db</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>da</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>db</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ArrayType</name> <modifier>*</modifier></type>
<name>inner_int_union</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECKARRVALID</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECKARRVALID</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ARRISEMPTY</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ARRISEMPTY</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>new_intArrayType</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ARRISEMPTY</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>copy_intArrayType</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ARRISEMPTY</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>copy_intArrayType</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>            <name>na</name> <init>= <expr><call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>,
                    <decl><type ref="prev"/><name>nb</name> <init>= <expr><call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name>           <modifier>*</modifier></type><name>da</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>,
                   <decl><type ref="prev"><modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>,
                    <decl><type ref="prev"/><name>j</name></decl>,
                   <decl><type ref="prev"><modifier>*</modifier></type><name>dr</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>new_intArrayType</name><argument_list>(<argument><expr><name>na</name> <operator>+</operator> <name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dr</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* union */</comment>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>na</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>nb</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>da</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>db</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>dr</name><operator>++</operator> <operator>=</operator> <name><name>da</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name><name>da</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>db</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>dr</name><operator>++</operator> <operator>=</operator> <name><name>da</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>dr</name><operator>++</operator> <operator>=</operator> <name><name>db</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></while>

        <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>na</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>dr</name><operator>++</operator> <operator>=</operator> <name><name>da</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
        <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>nb</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>dr</name><operator>++</operator> <operator>=</operator> <name><name>db</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>resize_intArrayType</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dr</name> <operator>-</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_int_unique</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ArrayType</name> <modifier>*</modifier></type>
<name>inner_int_inter</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>na</name></decl>,
                <decl><type ref="prev"/><name>nb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name>           <modifier>*</modifier></type><name>da</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>db</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>dr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>,
                <decl><type ref="prev"/><name>j</name></decl>,
                <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ARRISEMPTY</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ARRISEMPTY</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>new_intArrayType</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>na</name> <operator>=</operator> <call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>da</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>new_intArrayType</name><argument_list>(<argument><expr><call><name>Min</name><argument_list>(<argument><expr><name>na</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dr</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>na</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>nb</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>da</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>db</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>da</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>db</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>dr</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>db</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>dr</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>db</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>new_intArrayType</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><call><name>resize_intArrayType</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rt__int_size</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* qsort_arg comparison function for isort() */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>isort_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>        <name>aval</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int32</name> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>bval</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int32</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>aval</name> <operator>&lt;</operator> <name>bval</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>aval</name> <operator>&gt;</operator> <name>bval</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Report if we have any duplicates.  If there are equal keys, qsort must
     * compare them at some point, else it wouldn't know whether one should go
     * before or after the other.
     */</comment>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <name>arg</name><operator>)</operator> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Sort the given data (len &gt;= 2).  Return true if any duplicates found */</comment>
<function><type><name>bool</name></type>
<name>isort</name><parameter_list>(<parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>        <name>r</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>qsort_arg</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>isort_cmp</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Create a new int array with room for "num" elements */</comment>
<function><type><name>ArrayType</name> <modifier>*</modifier></type>
<name>new_intArrayType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>nbytes</name> <init>= <expr><call><name>ARR_OVERHEAD_NONULLS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>ArrayType</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>dataoffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>            <comment type="block">/* marker for no null bitmap */</comment>
    <expr_stmt><expr><call><name>ARR_ELEMTYPE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>INT4OID</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ARR_LBOUND</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ArrayType</name> <modifier>*</modifier></type>
<name>resize_intArrayType</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>nbytes</name> <init>= <expr><call><name>ARR_DATA_OFFSET</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* if no elements, return a zero-dimensional array */</comment>
    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>ArrayType</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* usually the array should be 1-D already, but just in case ... */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ArrayType</name> <modifier>*</modifier></type>
<name>copy_intArrayType</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>n</name> <init>= <expr><call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>new_intArrayType</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* num for compressed key */</comment>
<function><type><name>int</name></type>
<name>internal_size</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>,
                <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name> <operator>||</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* do not count repeated range */</comment>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* unique-ify elements of r in-place ... r must be sorted already */</comment>
<function><type><name>ArrayType</name> <modifier>*</modifier></type>
<name>_int_unique</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name>           <modifier>*</modifier></type><name>tmp</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>dr</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>num</name> <init>= <expr><call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>data</name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <name>dr</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>tmp</name> <operator>-</operator> <name>data</name> <operator>&lt;</operator> <name>num</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>tmp</name> <operator>!=</operator> <operator>*</operator><name>dr</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>++</operator><name>dr</name><operator>)</operator> <operator>=</operator> <operator>*</operator><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><call><name>resize_intArrayType</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dr</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gensign</name><parameter_list>(<parameter><decl><type><name>BITVEC</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* we assume that the sign vector is previously zeroed */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>HASH</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32</name></type>
<name>intarray_match_first</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name>       <modifier>*</modifier></type><name>aa</name></decl>,
                <decl><type ref="prev"/><name>c</name></decl>,
                <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECKARRVALID</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>aa</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>c</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>aa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>elem</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ArrayType</name> <modifier>*</modifier></type>
<name>intarray_add_elem</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name>       <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECKARRVALID</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>new_intArrayType</name><argument_list>(<argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ArrayType</name> <modifier>*</modifier></type>
<name>intarray_concat_arrays</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>ac</name> <init>= <expr><call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>bc</name> <init>= <expr><call><name>ARRNELEMS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECKARRVALID</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECKARRVALID</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>new_intArrayType</name><argument_list>(<argument><expr><name>ac</name> <operator>+</operator> <name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ac</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ac</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>bc</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>ac</name></expr></argument>, <argument><expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ArrayType</name> <modifier>*</modifier></type>
<name>int_to_intset</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name>       <modifier>*</modifier></type><name>aa</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>new_intArrayType</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>aa</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aa</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>compASC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int32</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>==</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int32</name> <operator>*</operator><operator>)</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int32</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>&gt;</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int32</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>compDESC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int32</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>==</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int32</name> <operator>*</operator><operator>)</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int32</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>&lt;</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int32</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
