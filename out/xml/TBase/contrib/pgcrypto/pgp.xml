<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgcrypto/pgp.c"><comment type="block">/*
 * pgp.c
 *      Various utility stuff.
 *
 * Copyright (c) 2005 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/pgp.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgp.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Defaults.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>def_cipher_algo</name> <init>= <expr><name>PGP_SYM_AES_128</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>def_s2k_cipher_algo</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>def_s2k_mode</name> <init>= <expr><name>PGP_S2K_ISALTED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>def_s2k_count</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>def_s2k_digest_algo</name> <init>= <expr><name>PGP_DIGEST_SHA1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>def_compress_algo</name> <init>= <expr><name>PGP_COMPR_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>def_compress_level</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>def_disable_mdc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>def_use_sess_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>def_text_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>def_unicode_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>def_convert_crlf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>digest_info</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>int_name</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>cipher_info</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>int_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>key_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>block_len</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>digest_info</name></name></type> <name><name>digest_list</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"md5"</literal></expr>, <expr><name>PGP_DIGEST_MD5</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sha1"</literal></expr>, <expr><name>PGP_DIGEST_SHA1</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sha-1"</literal></expr>, <expr><name>PGP_DIGEST_SHA1</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ripemd160"</literal></expr>, <expr><name>PGP_DIGEST_RIPEMD160</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sha256"</literal></expr>, <expr><name>PGP_DIGEST_SHA256</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sha384"</literal></expr>, <expr><name>PGP_DIGEST_SHA384</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sha512"</literal></expr>, <expr><name>PGP_DIGEST_SHA512</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>cipher_info</name></name></type> <name><name>cipher_list</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"3des"</literal></expr>, <expr><name>PGP_SYM_DES3</name></expr>, <expr><literal type="string">"3des-ecb"</literal></expr>, <expr><literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"cast5"</literal></expr>, <expr><name>PGP_SYM_CAST5</name></expr>, <expr><literal type="string">"cast5-ecb"</literal></expr>, <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"bf"</literal></expr>, <expr><name>PGP_SYM_BLOWFISH</name></expr>, <expr><literal type="string">"bf-ecb"</literal></expr>, <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"blowfish"</literal></expr>, <expr><name>PGP_SYM_BLOWFISH</name></expr>, <expr><literal type="string">"bf-ecb"</literal></expr>, <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"aes"</literal></expr>, <expr><name>PGP_SYM_AES_128</name></expr>, <expr><literal type="string">"aes-ecb"</literal></expr>, <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"aes128"</literal></expr>, <expr><name>PGP_SYM_AES_128</name></expr>, <expr><literal type="string">"aes-ecb"</literal></expr>, <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"aes192"</literal></expr>, <expr><name>PGP_SYM_AES_192</name></expr>, <expr><literal type="string">"aes-ecb"</literal></expr>, <expr><literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"aes256"</literal></expr>, <expr><name>PGP_SYM_AES_256</name></expr>, <expr><literal type="string">"aes-ecb"</literal></expr>, <expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"twofish"</literal></expr>, <expr><name>PGP_SYM_TWOFISH</name></expr>, <expr><literal type="string">"twofish-ecb"</literal></expr>, <expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>cipher_info</name></name> <modifier>*</modifier></type>
<name>get_cipher_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cipher_info</name></name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>cipher_list</name></expr>;</init> <condition><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>code</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_get_digest_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>digest_info</name></name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>digest_list</name></expr>;</init> <condition><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>i</name><operator>-&gt;</operator><name>code</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <return>return <expr><name>PXE_PGP_UNSUPPORTED_HASH</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_get_cipher_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cipher_info</name></name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>cipher_list</name></expr>;</init> <condition><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>i</name><operator>-&gt;</operator><name>code</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <return>return <expr><name>PXE_PGP_UNSUPPORTED_CIPHER</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pgp_get_digest_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>digest_info</name></name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>digest_list</name></expr>;</init> <condition><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>code</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pgp_get_cipher_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cipher_info</name></name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>get_cipher_info</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_get_cipher_key_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cipher_info</name></name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>get_cipher_info</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>i</name><operator>-&gt;</operator><name>key_len</name></name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_get_cipher_block_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cipher_info</name></name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>get_cipher_info</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>i</name><operator>-&gt;</operator><name>block_len</name></name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_load_cipher</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cipher_info</name></name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>get_cipher_info</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>px_find_cipher</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>int_name</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>PXE_PGP_UNSUPPORTED_CIPHER</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_load_digest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>PX_MD</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>pgp_get_digest_name</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>px_find_digest</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>PXE_PGP_UNSUPPORTED_HASH</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_init</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_algo</name></name> <operator>=</operator> <name>def_cipher_algo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_cipher_algo</name></name> <operator>=</operator> <name>def_s2k_cipher_algo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_mode</name></name> <operator>=</operator> <name>def_s2k_mode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_count</name></name> <operator>=</operator> <name>def_s2k_count</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_digest_algo</name></name> <operator>=</operator> <name>def_s2k_digest_algo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>compress_algo</name></name> <operator>=</operator> <name>def_compress_algo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>compress_level</name></name> <operator>=</operator> <name>def_compress_level</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>disable_mdc</name></name> <operator>=</operator> <name>def_disable_mdc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>use_sess_key</name></name> <operator>=</operator> <name>def_use_sess_key</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>unicode_mode</name></name> <operator>=</operator> <name>def_unicode_mode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>convert_crlf</name></name> <operator>=</operator> <name>def_convert_crlf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>text_mode</name></name> <operator>=</operator> <name>def_text_mode</name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>ctx_p</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_free</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pub_key</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pgp_key_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_disable_mdc</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>disable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>disable_mdc</name></name> <operator>=</operator> <ternary><condition><expr><name>disable</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_set_sess_key</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>use_sess_key</name></name> <operator>=</operator> <ternary><condition><expr><name>use</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_set_convert_crlf</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>convert_crlf</name></name> <operator>=</operator> <ternary><condition><expr><name>doit</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_set_s2k_mode</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>err</name> <init>= <expr><name>PXE_OK</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>mode</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>PGP_S2K_SIMPLE</name></expr>:</case>
        <case>case <expr><name>PGP_S2K_SALTED</name></expr>:</case>
        <case>case <expr><name>PGP_S2K_ISALTED</name></expr>:</case>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>PXE_ARGUMENT_ERROR</name></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_set_s2k_count</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_mode</name></name> <operator>==</operator> <name>PGP_S2K_ISALTED</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;=</operator> <literal type="number">1024</literal> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;=</operator> <literal type="number">65011712</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
        <return>return <expr><name>PXE_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>PXE_ARGUMENT_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_set_compress_algo</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>algo</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>PGP_COMPR_NONE</name></expr>:</case>
        <case>case <expr><name>PGP_COMPR_ZIP</name></expr>:</case>
        <case>case <expr><name>PGP_COMPR_ZLIB</name></expr>:</case>
        <case>case <expr><name>PGP_COMPR_BZIP2</name></expr>:</case>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>compress_algo</name></name> <operator>=</operator> <name>algo</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><name>PXE_ARGUMENT_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_set_compress_level</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>level</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>compress_level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>PXE_ARGUMENT_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_set_text_mode</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>text_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_set_cipher_algo</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>code</name> <init>= <expr><call><name>pgp_get_cipher_code</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_algo</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_set_s2k_cipher_algo</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>code</name> <init>= <expr><call><name>pgp_get_cipher_code</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_cipher_algo</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_set_s2k_digest_algo</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>code</name> <init>= <expr><call><name>pgp_get_digest_code</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_digest_algo</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_get_unicode_mode</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>unicode_mode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_set_unicode_mode</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>unicode_mode</name></name> <operator>=</operator> <ternary><condition><expr><name>mode</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_set_symkey</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>PXE_ARGUMENT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sym_key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sym_key_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
