<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgcrypto/px-hmac.c"><comment type="block">/*
 * px-hmac.c
 *        HMAC implementation.
 *
 * Copyright (c) 2001 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/px-hmac.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_IPAD</name></cpp:macro> <cpp:value>0x36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_OPAD</name></cpp:macro> <cpp:value>0x5C</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>hmac_result_size</name><parameter_list>(<parameter><decl><type><name>PX_HMAC</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>px_md_result_size</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>md</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>hmac_block_size</name><parameter_list>(<parameter><decl><type><name>PX_HMAC</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>px_md_block_size</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>md</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hmac_init</name><parameter_list>(<parameter><decl><type><name>PX_HMAC</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name></decl>,
                <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name>       <modifier>*</modifier></type><name>keybuf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PX_MD</name>       <modifier>*</modifier></type><name>md</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>md</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>px_md_block_size</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>klen</name> <operator>&gt;</operator> <name>bs</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>px_md_finish</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>keybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>px_md_reset</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ipad</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>keybuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name>HMAC_IPAD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>opad</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>keybuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name>HMAC_OPAD</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ipad</name></name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hmac_reset</name><parameter_list>(<parameter><decl><type><name>PX_HMAC</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PX_MD</name>       <modifier>*</modifier></type><name>md</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>md</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name> <init>= <expr><call><name>px_md_block_size</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>px_md_reset</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ipad</name></name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hmac_update</name><parameter_list>(<parameter><decl><type><name>PX_HMAC</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>md</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hmac_finish</name><parameter_list>(<parameter><decl><type><name>PX_HMAC</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PX_MD</name>       <modifier>*</modifier></type><name>md</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>md</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name></decl>,
                <decl><type ref="prev"/><name>hlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name>       <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>px_md_block_size</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hlen</name> <operator>=</operator> <call><name>px_md_result_size</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>px_md_finish</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>px_md_reset</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>opad</name></name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>px_md_finish</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hmac_free</name><parameter_list>(<parameter><decl><type><name>PX_HMAC</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>px_md_block_size</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>md</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>px_md_free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>md</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ipad</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>opad</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ipad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>opad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* PUBLIC FUNCTIONS */</comment>

<function><type><name>int</name></type>
<name>px_find_hmac</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PX_HMAC</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PX_MD</name>       <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PX_HMAC</name>    <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>px_find_digest</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>px_md_block_size</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bs</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>px_md_free</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PXE_HASH_UNUSABLE_FOR_HMAC</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ipad</name></name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>opad</name></name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>md</name></name> <operator>=</operator> <name>md</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>result_size</name></name> <operator>=</operator> <name>hmac_result_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>hmac_block_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>hmac_reset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>hmac_update</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <name>hmac_finish</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>hmac_free</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>hmac_init</name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
