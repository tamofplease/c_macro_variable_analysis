<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/passwordcheck/passwordcheck.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * passwordcheck.c
 *
 *
 * Copyright (c) 2009-2017, PostgreSQL Global Development Group
 *
 * Author: Laurenz Albe &lt;laurenz.albe@wien.gv.at&gt;
 *
 * IDENTIFICATION
 *      contrib/passwordcheck/passwordcheck.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_CRACKLIB</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crack.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/user.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/crypt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<comment type="block">/* passwords shorter than this will be rejected */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_PWD_LENGTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * check_password
 *
 * performs checks on an encrypted or unencrypted password
 * ereport's if not acceptable
 *
 * username: name of role being created or changed
 * password: new password (possibly already encrypted)
 * password_type: PASSWORD_TYPE_* code, to indicate if the password is
 *            in plaintext or encrypted form.
 * validuntil_time: password expiration time, as a timestamptz Datum
 * validuntil_null: true if password expiration time is NULL
 *
 * This sample implementation doesn't pay any attention to the password
 * expiration time, but you might wish to insist that it be non-null and
 * not too far in the future.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_password</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>,
               <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shadow_pass</name></decl></parameter>,
               <parameter><decl><type><name>PasswordType</name></type> <name>password_type</name></decl></parameter>,
               <parameter><decl><type><name>Datum</name></type> <name>validuntil_time</name></decl></parameter>,
               <parameter><decl><type><name>bool</name></type> <name>validuntil_null</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>password_type</name> <operator>!=</operator> <name>PASSWORD_TYPE_PLAINTEXT</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Unfortunately we cannot perform exhaustive checks on encrypted
         * passwords - we are restricted to guessing. (Alternatively, we could
         * insist on the password being presented non-encrypted, but that has
         * its own security disadvantages.)
         *
         * We only check for username = password.
         */</comment>
        <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>logdetail</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>plain_crypt_verify</name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><name>shadow_pass</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>logdetail</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"password must not contain user name"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/*
         * For unencrypted passwords we can perform better checks
         */</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name> <init>= <expr><name>shadow_pass</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>pwdlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name>pwd_has_letter</name></decl>,
                    <decl><type ref="prev"/><name>pwd_has_nonletter</name></decl>;</decl_stmt>

        <comment type="block">/* enforce minimum length */</comment>
        <if_stmt><if>if <condition>(<expr><name>pwdlen</name> <operator>&lt;</operator> <name>MIN_PWD_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"password is too short"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* check if the password contains the username */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"password must not contain user name"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* check if the password contains both letters and non-letters */</comment>
        <expr_stmt><expr><name>pwd_has_letter</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pwd_has_nonletter</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pwdlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="block">/*
             * isalpha() does not work for multibyte encodings but let's
             * consider non-ASCII characters non-letters
             */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>password</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>pwd_has_letter</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>pwd_has_nonletter</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pwd_has_letter</name> <operator>||</operator> <operator>!</operator><name>pwd_has_nonletter</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"password must contain both letters and nonletters"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_CRACKLIB</name></cpp:ifdef>
        <comment type="block">/* call cracklib to check password */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>FascistCheck</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>CRACKLIB_DICTPATH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"password is easily cracked"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* all checks passed, password is ok */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Module initialization function
 */</comment>
<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* activate password checks when the module is loaded */</comment>
    <expr_stmt><expr><name>check_password_hook</name> <operator>=</operator> <name>check_password</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
