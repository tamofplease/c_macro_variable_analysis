<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/xml2/xslt_proc.c"><comment type="block">/*
 * contrib/xml2/xslt_proc.c
 *
 * XSLT processing functions (requiring libxslt)
 *
 * John Gray, for Torchbox 2003-04-01
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/spi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/xml.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_LIBXSLT</name></cpp:ifdef>

<comment type="block">/* libxml includes */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/xpath.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/tree.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/xmlmemory.h&gt;</cpp:file></cpp:include>

<comment type="block">/* libxslt includes */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxslt/xslt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxslt/xsltInternals.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxslt/security.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxslt/transform.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxslt/xsltutils.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* USE_LIBXSLT */</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_LIBXSLT</name></cpp:ifdef>

<comment type="block">/* declarations to come from xpath.c */</comment>
<function_decl><type><specifier>extern</specifier> <name>PgXmlErrorContext</name> <modifier>*</modifier></type><name>pgxml_parser_init</name><parameter_list>(<parameter><decl><type><name>PgXmlStrictness</name></type> <name>strictness</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* local defs */</comment>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>parse_params</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>paramstr</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* USE_LIBXSLT */</comment>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>xslt_process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>xslt_process</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_LIBXSLT</name></cpp:ifdef>

    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>doct</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>ssheet</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>paramstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>params</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PgXmlErrorContext</name> <modifier>*</modifier></type><name>xmlerrcxt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>xsltStylesheetPtr</name></type> <name>stylesheet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>xmlDocPtr</name></type> <name>doctree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>xmlDocPtr</name></type> <name>restree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>xsltSecurityPrefsPtr</name></type> <name>xslt_sec_prefs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>xsltTransformContextPtr</name></type> <name>xslt_ctxt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>resstat</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>xmlChar</name>    <modifier>*</modifier></type><name>resstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>reslen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>fcinfo</name><operator>-&gt;</operator><name>nargs</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>paramstr</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>params</name> <operator>=</operator> <call><name>parse_params</name><argument_list>(<argument><expr><name>paramstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* No parameters */</comment>
        <expr_stmt><expr><name>params</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Setup parser */</comment>
    <expr_stmt><expr><name>xmlerrcxt</name> <operator>=</operator> <call><name>pgxml_parser_init</name><argument_list>(<argument><expr><name>PG_XML_STRICTNESS_LEGACY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>xmlDocPtr</name></type>    <name>ssdoc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name>xslt_sec_prefs_error</name></decl>;</decl_stmt>

        <comment type="block">/* Parse document */</comment>
        <expr_stmt><expr><name>doctree</name> <operator>=</operator> <call><name>xmlParseMemory</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>doct</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>doct</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>doctree</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>xml_ereport</name><argument_list>(<argument><expr><name>xmlerrcxt</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>ERRCODE_EXTERNAL_ROUTINE_EXCEPTION</name></expr></argument>,
                        <argument><expr><literal type="string">"error parsing XML document"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Same for stylesheet */</comment>
        <expr_stmt><expr><name>ssdoc</name> <operator>=</operator> <call><name>xmlParseMemory</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>ssheet</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>ssheet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ssdoc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>xml_ereport</name><argument_list>(<argument><expr><name>xmlerrcxt</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>ERRCODE_EXTERNAL_ROUTINE_EXCEPTION</name></expr></argument>,
                        <argument><expr><literal type="string">"error parsing stylesheet as XML document"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* After this call we need not free ssdoc separately */</comment>
        <expr_stmt><expr><name>stylesheet</name> <operator>=</operator> <call><name>xsltParseStylesheetDoc</name><argument_list>(<argument><expr><name>ssdoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>stylesheet</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>xml_ereport</name><argument_list>(<argument><expr><name>xmlerrcxt</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>ERRCODE_EXTERNAL_ROUTINE_EXCEPTION</name></expr></argument>,
                        <argument><expr><literal type="string">"failed to parse stylesheet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>xslt_ctxt</name> <operator>=</operator> <call><name>xsltNewTransformContext</name><argument_list>(<argument><expr><name>stylesheet</name></expr></argument>, <argument><expr><name>doctree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>xslt_sec_prefs_error</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>xslt_sec_prefs</name> <operator>=</operator> <call><name>xsltNewSecurityPrefs</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>xslt_sec_prefs_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>xsltSetSecurityPrefs</name><argument_list>(<argument><expr><name>xslt_sec_prefs</name></expr></argument>, <argument><expr><name>XSLT_SECPREF_READ_FILE</name></expr></argument>,
                                 <argument><expr><name>xsltSecurityForbid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>xslt_sec_prefs_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>xsltSetSecurityPrefs</name><argument_list>(<argument><expr><name>xslt_sec_prefs</name></expr></argument>, <argument><expr><name>XSLT_SECPREF_WRITE_FILE</name></expr></argument>,
                                 <argument><expr><name>xsltSecurityForbid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>xslt_sec_prefs_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>xsltSetSecurityPrefs</name><argument_list>(<argument><expr><name>xslt_sec_prefs</name></expr></argument>, <argument><expr><name>XSLT_SECPREF_CREATE_DIRECTORY</name></expr></argument>,
                                 <argument><expr><name>xsltSecurityForbid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>xslt_sec_prefs_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>xsltSetSecurityPrefs</name><argument_list>(<argument><expr><name>xslt_sec_prefs</name></expr></argument>, <argument><expr><name>XSLT_SECPREF_READ_NETWORK</name></expr></argument>,
                                 <argument><expr><name>xsltSecurityForbid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>xslt_sec_prefs_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>xsltSetSecurityPrefs</name><argument_list>(<argument><expr><name>xslt_sec_prefs</name></expr></argument>, <argument><expr><name>XSLT_SECPREF_WRITE_NETWORK</name></expr></argument>,
                                 <argument><expr><name>xsltSecurityForbid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>xslt_sec_prefs_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>xsltSetCtxtSecurityPrefs</name><argument_list>(<argument><expr><name>xslt_sec_prefs</name></expr></argument>, <argument><expr><name>xslt_ctxt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>xslt_sec_prefs_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>xslt_sec_prefs_error</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not set libxslt security preferences"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>restree</name> <operator>=</operator> <call><name>xsltApplyStylesheetUser</name><argument_list>(<argument><expr><name>stylesheet</name></expr></argument>, <argument><expr><name>doctree</name></expr></argument>, <argument><expr><name>params</name></expr></argument>,
                                          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>xslt_ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>restree</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>xml_ereport</name><argument_list>(<argument><expr><name>xmlerrcxt</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>ERRCODE_EXTERNAL_ROUTINE_EXCEPTION</name></expr></argument>,
                        <argument><expr><literal type="string">"failed to apply stylesheet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>resstat</name> <operator>=</operator> <call><name>xsltSaveResultToString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reslen</name></expr></argument>, <argument><expr><name>restree</name></expr></argument>, <argument><expr><name>stylesheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>restree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>xmlFreeDoc</name><argument_list>(<argument><expr><name>restree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>xslt_ctxt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>xsltFreeTransformContext</name><argument_list>(<argument><expr><name>xslt_ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>xslt_sec_prefs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>xsltFreeSecurityPrefs</name><argument_list>(<argument><expr><name>xslt_sec_prefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>stylesheet</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>xsltFreeStylesheet</name><argument_list>(<argument><expr><name>stylesheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>doctree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>xmlFreeDoc</name><argument_list>(<argument><expr><name>doctree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>xsltCleanupGlobals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pg_xml_done</name><argument_list>(<argument><expr><name>xmlerrcxt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>xmlFreeDoc</name><argument_list>(<argument><expr><name>restree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>xsltFreeTransformContext</name><argument_list>(<argument><expr><name>xslt_ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>xsltFreeSecurityPrefs</name><argument_list>(<argument><expr><name>xslt_sec_prefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>xsltFreeStylesheet</name><argument_list>(<argument><expr><name>stylesheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>xmlFreeDoc</name><argument_list>(<argument><expr><name>doctree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>xsltCleanupGlobals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pg_xml_done</name><argument_list>(<argument><expr><name>xmlerrcxt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* XXX this is pretty dubious, really ought to throw error instead */</comment>
    <if_stmt><if>if <condition>(<expr><name>resstat</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>resstr</name></expr></argument>, <argument><expr><name>reslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>resstr</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>resstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>                            <comment type="block">/* !USE_LIBXSLT */</comment>

    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"xslt_process() is not available without libxslt"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* USE_LIBXSLT */</comment>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_LIBXSLT</name></cpp:ifdef>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>parse_params</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>paramstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>pstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>nvsep</name> <init>= <expr><literal type="string">"="</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>itsep</name> <init>= <expr><literal type="string">","</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>params</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>max_params</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>nparams</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>paramstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>max_params</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>            <comment type="block">/* must be even! */</comment>
    <expr_stmt><expr><name>params</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>max_params</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nparams</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>pos</name> <operator>=</operator> <name>pstr</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>*</operator><name>pos</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nparams</name> <operator>&gt;=</operator> <name>max_params</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>max_params</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>params</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>params</name></expr></argument>,
                                              <argument><expr><operator>(</operator><name>max_params</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>params</name><index>[<expr><name>nparams</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>nvsep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/* No equal sign, so ignore this "parameter" */</comment>
            <expr_stmt><expr><name>nparams</name><operator>--</operator></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* since max_params is even, we still have nparams &lt; max_params */</comment>
        <expr_stmt><expr><name><name>params</name><index>[<expr><name>nparams</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>itsep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <break>break;</break></block_content></block></else></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Add the terminator marker; we left room for it in the palloc's */</comment>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>nparams</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>params</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* USE_LIBXSLT */</comment>
</unit>
