<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgxc_monitor/mcxt.c"><comment type="block">/*----------------------------------------------------------------------------------
 *
 * mxct.c
 *        Postgres-XC memory context management code for applications.
 *
 * This module is for Postgres-XC application/utility programs.  Sometimes,
 * applications/utilities may need Postgres-XC internal functions which
 * depends upon mcxt.c of gtm or Postgres.
 *
 * This module "virtualize" such module-dependent memory management.
 *
 * This code is for general use, which depends only upon confentional
 * memory management functions.
 *
 * Copyright (c) 2012, Postgres-XC Development Group
 *
 *-------------------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gen_alloc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>current_cxt</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memCxtAlloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memCxtRealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memCxtAlloc0</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>memCxtFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memCxtAllocTop</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memCxtCurrentContext</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memCxtAlloc</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>current</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>needed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator><call><name>malloc</name><argument_list>(<argument><expr><name>needed</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memCxtRealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>needed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator><call><name>realloc</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>needed</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memCxtAlloc0</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>needed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>allocated</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>allocated</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>allocated</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>allocated</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>allocated</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>memCxtFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memCxtCurrentContext</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>current_cxt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memCxtAllocTop</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>needed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator><call><name>malloc</name><argument_list>(<argument><expr><name>needed</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>Gen_Alloc</name></type> <name>genAlloc_class</name> <init>= <expr><block>{<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>memCxtAlloc</name></expr>,
                            <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>memCxtAlloc0</name></expr>,
                            <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>memCxtRealloc</name></expr>,
                            <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>memCxtFree</name></expr>,
                            <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>memCxtCurrentContext</name></expr>,
                            <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>memCxtAllocTop</name></expr>}</block></expr></init></decl>;</decl_stmt>
</unit>
