<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/sepgsql/dml.c"><comment type="block">/* -------------------------------------------------------------------------
 *
 * contrib/sepgsql/dml.c
 *
 * Routines to handle DML permission checks
 *
 * Copyright (c) 2010-2017, PostgreSQL Global Development Group
 *
 * -------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/sysattr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tupdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/dependency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_attribute.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_inherits_fn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/seclabel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablecmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/bitmapset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sepgsql.h"</cpp:file></cpp:include>

<comment type="block">/*
 * fixup_whole_row_references
 *
 * When user reference a whole of row, it is equivalent to reference to
 * all the user columns (not system columns). So, we need to fix up the
 * given bitmapset, if it contains a whole of the row reference.
 */</comment>
<function><type><specifier>static</specifier> <name>Bitmapset</name> <modifier>*</modifier></type>
<name>fixup_whole_row_references</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relOid</name></decl></parameter>, <parameter><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>columns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tuple</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AttrNumber</name></type>    <name>natts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AttrNumber</name></type>    <name>attno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>index</name></decl>;</decl_stmt>

    <comment type="block">/* if no whole of row references, do not anything */</comment>
    <expr_stmt><expr><name>index</name> <operator>=</operator> <name>InvalidAttrNumber</name> <operator>-</operator> <name>FirstLowInvalidHeapAttributeNumber</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bms_is_member</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>columns</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* obtain number of attributes */</comment>
    <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for relation %u"</literal></expr></argument>, <argument><expr><name>relOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>natts</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>relnatts</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* fix up the given columns */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bms_copy</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bms_del_member</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>attno</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>attno</name> <operator>&lt;=</operator> <name>natts</name></expr>;</condition> <incr><expr><name>attno</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache2</name><argument_list>(<argument><expr><name>ATTNUM</name></expr></argument>,
                                <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>attno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>Form_pg_attribute</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>attisdropped</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>index</name> <operator>=</operator> <name>attno</name> <operator>-</operator> <name>FirstLowInvalidHeapAttributeNumber</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * fixup_inherited_columns
 *
 * When user is querying on a table with children, it implicitly accesses
 * child tables also. So, we also need to check security label of child
 * tables and columns, but here is no guarantee attribute numbers are
 * same between the parent ans children.
 * It returns a bitmapset which contains attribute number of the child
 * table based on the given bitmapset of the parent.
 */</comment>
<function><type><specifier>static</specifier> <name>Bitmapset</name> <modifier>*</modifier></type>
<name>fixup_inherited_columns</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>parentId</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>childId</name></decl></parameter>, <parameter><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>columns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>index</name></decl>;</decl_stmt>

    <comment type="block">/*
     * obviously, no need to do anything here
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>parentId</name> <operator>==</operator> <name>childId</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>columns</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>index</name> <operator>=</operator> <call><name>bms_next_member</name><argument_list>(<argument><expr><name>columns</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* bit numbers are offset by FirstLowInvalidHeapAttributeNumber */</comment>
        <decl_stmt><decl><type><name>AttrNumber</name></type>    <name>attno</name> <init>= <expr><name>index</name> <operator>+</operator> <name>FirstLowInvalidHeapAttributeNumber</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>attname</name></decl>;</decl_stmt>

        <comment type="block">/*
         * whole-row-reference shall be fixed-up later
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>attno</name> <operator>==</operator> <name>InvalidAttrNumber</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>attname</name> <operator>=</operator> <call><name>get_attname</name><argument_list>(<argument><expr><name>parentId</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>attname</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for attribute %d of relation %u"</literal></expr></argument>,
                 <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>parentId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>attno</name> <operator>=</operator> <call><name>get_attnum</name><argument_list>(<argument><expr><name>childId</name></expr></argument>, <argument><expr><name>attname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>attno</name> <operator>==</operator> <name>InvalidAttrNumber</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for attribute %s of relation %u"</literal></expr></argument>,
                 <argument><expr><name>attname</name></expr></argument>, <argument><expr><name>childId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name>result</name></expr></argument>,
                                <argument><expr><name>attno</name> <operator>-</operator> <name>FirstLowInvalidHeapAttributeNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>attname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * check_relation_privileges
 *
 * It actually checks required permissions on a certain relation
 * and its columns.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_relation_privileges</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relOid</name></decl></parameter>,
                          <parameter><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>selected</name></decl></parameter>,
                          <parameter><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>inserted</name></decl></parameter>,
                          <parameter><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>updated</name></decl></parameter>,
                          <parameter><decl><type><name>uint32</name></type> <name>required</name></decl></parameter>,
                          <parameter><decl><type><name>bool</name></type> <name>abort_on_violation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>object</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>audit_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>columns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name>relkind</name> <init>= <expr><call><name>get_rel_relkind</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Hardwired Policies: SE-PostgreSQL enforces - clients cannot modify
     * system catalogs using DMLs - clients cannot reference/modify toast
     * relations using DMLs
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>sepgsql_getenforce</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Oid</name></type>            <name>relnamespace</name> <init>= <expr><call><name>get_rel_namespace</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>IsSystemNamespace</name><argument_list>(<argument><expr><name>relnamespace</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <operator>(</operator><name>required</name> <operator>&amp;</operator> <operator>(</operator><name>SEPG_DB_TABLE__UPDATE</name> <operator>|</operator>
                         <name>SEPG_DB_TABLE__INSERT</name> <operator>|</operator>
                         <name>SEPG_DB_TABLE__DELETE</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SELinux: hardwired security policy violation"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>relkind</name> <operator>==</operator> <name>RELKIND_TOASTVALUE</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SELinux: hardwired security policy violation"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Check permissions on the relation
     */</comment>
    <expr_stmt><expr><name><name>object</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>object</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>relOid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>object</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>audit_name</name> <operator>=</operator> <call><name>getObjectIdentity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>relkind</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>RELKIND_RELATION</name></expr>:</case>
        <case>case <expr><name>RELKIND_PARTITIONED_TABLE</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sepgsql_avc_check_perms</name><argument_list>(<argument><expr><operator>&amp;</operator><name>object</name></expr></argument>,
                                             <argument><expr><name>SEPG_CLASS_DB_TABLE</name></expr></argument>,
                                             <argument><expr><name>required</name></expr></argument>,
                                             <argument><expr><name>audit_name</name></expr></argument>,
                                             <argument><expr><name>abort_on_violation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>RELKIND_SEQUENCE</name></expr>:</case>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>required</name> <operator>&amp;</operator> <operator>~</operator><name>SEPG_DB_TABLE__SELECT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>required</name> <operator>&amp;</operator> <name>SEPG_DB_TABLE__SELECT</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sepgsql_avc_check_perms</name><argument_list>(<argument><expr><operator>&amp;</operator><name>object</name></expr></argument>,
                                                 <argument><expr><name>SEPG_CLASS_DB_SEQUENCE</name></expr></argument>,
                                                 <argument><expr><name>SEPG_DB_SEQUENCE__GET_VALUE</name></expr></argument>,
                                                 <argument><expr><name>audit_name</name></expr></argument>,
                                                 <argument><expr><name>abort_on_violation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>RELKIND_VIEW</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sepgsql_avc_check_perms</name><argument_list>(<argument><expr><operator>&amp;</operator><name>object</name></expr></argument>,
                                             <argument><expr><name>SEPG_CLASS_DB_VIEW</name></expr></argument>,
                                             <argument><expr><name>SEPG_DB_VIEW__EXPAND</name></expr></argument>,
                                             <argument><expr><name>audit_name</name></expr></argument>,
                                             <argument><expr><name>abort_on_violation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <default>default:</default>
            <comment type="block">/* nothing to be checked */</comment>
            <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>audit_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Only columns owned by relations shall be checked
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>relkind</name> <operator>!=</operator> <name>RELKIND_RELATION</name> <operator>&amp;&amp;</operator> <name>relkind</name> <operator>!=</operator> <name>RELKIND_PARTITIONED_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Check permissions on the columns
     */</comment>
    <expr_stmt><expr><name>selected</name> <operator>=</operator> <call><name>fixup_whole_row_references</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>inserted</name> <operator>=</operator> <call><name>fixup_whole_row_references</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>inserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>updated</name> <operator>=</operator> <call><name>fixup_whole_row_references</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>columns</name> <operator>=</operator> <call><name>bms_union</name><argument_list>(<argument><expr><name>selected</name></expr></argument>, <argument><expr><call><name>bms_union</name><argument_list>(<argument><expr><name>inserted</name></expr></argument>, <argument><expr><name>updated</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>index</name> <operator>=</operator> <call><name>bms_first_member</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AttrNumber</name></type>    <name>attnum</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32</name></type>        <name>column_perms</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>bms_is_member</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>column_perms</name> <operator>|=</operator> <name>SEPG_DB_COLUMN__SELECT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>bms_is_member</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>inserted</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>required</name> <operator>&amp;</operator> <name>SEPG_DB_TABLE__INSERT</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>column_perms</name> <operator>|=</operator> <name>SEPG_DB_COLUMN__INSERT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>bms_is_member</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>updated</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>required</name> <operator>&amp;</operator> <name>SEPG_DB_TABLE__UPDATE</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>column_perms</name> <operator>|=</operator> <name>SEPG_DB_COLUMN__UPDATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>column_perms</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* obtain column's permission */</comment>
        <expr_stmt><expr><name>attnum</name> <operator>=</operator> <name>index</name> <operator>+</operator> <name>FirstLowInvalidHeapAttributeNumber</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>object</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>object</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>relOid</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>object</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>attnum</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>audit_name</name> <operator>=</operator> <call><name>getObjectDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sepgsql_avc_check_perms</name><argument_list>(<argument><expr><operator>&amp;</operator><name>object</name></expr></argument>,
                                         <argument><expr><name>SEPG_CLASS_DB_COLUMN</name></expr></argument>,
                                         <argument><expr><name>column_perms</name></expr></argument>,
                                         <argument><expr><name>audit_name</name></expr></argument>,
                                         <argument><expr><name>abort_on_violation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>audit_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * sepgsql_dml_privileges
 *
 * Entrypoint of the DML permission checks
 */</comment>
<function><type><name>bool</name></type>
<name>sepgsql_dml_privileges</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>rangeTabls</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>abort_on_violation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>

    <macro><name>foreach</name><argument_list>(<argument>lr</argument>, <argument>rangeTabls</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32</name></type>        <name>required</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name>       <modifier>*</modifier></type><name>tableIds</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

        <comment type="block">/*
         * Only regular relations shall be checked
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>!=</operator> <name>RTE_RELATION</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/*
         * Find out required permissions
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>requiredPerms</name></name> <operator>&amp;</operator> <name>ACL_SELECT</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>required</name> <operator>|=</operator> <name>SEPG_DB_TABLE__SELECT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>requiredPerms</name></name> <operator>&amp;</operator> <name>ACL_INSERT</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>required</name> <operator>|=</operator> <name>SEPG_DB_TABLE__INSERT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>requiredPerms</name></name> <operator>&amp;</operator> <name>ACL_UPDATE</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bms_is_empty</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>updatedCols</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>required</name> <operator>|=</operator> <name>SEPG_DB_TABLE__UPDATE</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>required</name> <operator>|=</operator> <name>SEPG_DB_TABLE__LOCK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>requiredPerms</name></name> <operator>&amp;</operator> <name>ACL_DELETE</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>required</name> <operator>|=</operator> <name>SEPG_DB_TABLE__DELETE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/*
         * Skip, if nothing to be checked
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>required</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/*
         * If this RangeTblEntry is also supposed to reference inherited
         * tables, we need to check security label of the child tables. So, we
         * expand rte-&gt;relid into list of OIDs of inheritance hierarchy, then
         * checker routine will be invoked for each relations.
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rte</name><operator>-&gt;</operator><name>inh</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>tableIds</name> <operator>=</operator> <call><name>list_make1_oid</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>tableIds</name> <operator>=</operator> <call><name>find_all_inheritors</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <macro><name>foreach</name><argument_list>(<argument>li</argument>, <argument>tableIds</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Oid</name></type>            <name>tableOid</name> <init>= <expr><call><name>lfirst_oid</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>selectedCols</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>insertedCols</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>updatedCols</name></decl>;</decl_stmt>

            <comment type="block">/*
             * child table has different attribute numbers, so we need to fix
             * up them.
             */</comment>
            <expr_stmt><expr><name>selectedCols</name> <operator>=</operator> <call><name>fixup_inherited_columns</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>tableOid</name></expr></argument>,
                                                   <argument><expr><name><name>rte</name><operator>-&gt;</operator><name>selectedCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>insertedCols</name> <operator>=</operator> <call><name>fixup_inherited_columns</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>tableOid</name></expr></argument>,
                                                   <argument><expr><name><name>rte</name><operator>-&gt;</operator><name>insertedCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>updatedCols</name> <operator>=</operator> <call><name>fixup_inherited_columns</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>tableOid</name></expr></argument>,
                                                  <argument><expr><name><name>rte</name><operator>-&gt;</operator><name>updatedCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             * check permissions on individual tables
             */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_relation_privileges</name><argument_list>(<argument><expr><name>tableOid</name></expr></argument>,
                                           <argument><expr><name>selectedCols</name></expr></argument>,
                                           <argument><expr><name>insertedCols</name></expr></argument>,
                                           <argument><expr><name>updatedCols</name></expr></argument>,
                                           <argument><expr><name>required</name></expr></argument>, <argument><expr><name>abort_on_violation</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>tableIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
