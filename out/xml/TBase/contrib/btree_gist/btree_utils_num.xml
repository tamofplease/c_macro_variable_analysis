<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/btree_gist/btree_utils_num.c"><comment type="block">/*
 * contrib/btree_gist/btree_utils_num.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree_gist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree_utils_num.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/cash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>


<function><type><name>GISTENTRY</name> <modifier>*</modifier></type>
<name>gbt_num_compress</name><parameter_list>(<parameter><decl><type><name>GISTENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gbtree_ninfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>leafkey</name></name></expr>)</condition>
    <block>{<block_content>
        <union>union
        <block>{
            <decl_stmt><decl><type><name>int16</name></type>        <name>i2</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int32</name></type>        <name>i4</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int64</name></type>        <name>i8</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float4</name></type>        <name>f4</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float8</name></type>        <name>f8</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DateADT</name></type>        <name>dt</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TimeADT</name></type>        <name>tm</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Timestamp</name></type>    <name>ts</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Cash</name></type>        <name>ch</name></decl>;</decl_stmt>
        }</block>            <decl><name>v</name></decl>;</union>

        <decl_stmt><decl><type><name>GBT_NUMKEY</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>GBT_NUMKEY</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>indexsize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>leaf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name><name>tinfo</name><operator>-&gt;</operator><name>t</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>gbt_t_int2</name></expr>:</case>
                <expr_stmt><expr><name><name>v</name><operator>.</operator><name>i2</name></name> <operator>=</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>leaf</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>i2</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>gbt_t_int4</name></expr>:</case>
                <expr_stmt><expr><name><name>v</name><operator>.</operator><name>i4</name></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>leaf</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>i4</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>gbt_t_int8</name></expr>:</case>
                <expr_stmt><expr><name><name>v</name><operator>.</operator><name>i8</name></name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>leaf</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>i8</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>gbt_t_oid</name></expr>:</case>
            <case>case <expr><name>gbt_t_enum</name></expr>:</case>
                <expr_stmt><expr><name><name>v</name><operator>.</operator><name>i4</name></name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>leaf</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>i4</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>gbt_t_float4</name></expr>:</case>
                <expr_stmt><expr><name><name>v</name><operator>.</operator><name>f4</name></name> <operator>=</operator> <call><name>DatumGetFloat4</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>leaf</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>f4</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>gbt_t_float8</name></expr>:</case>
                <expr_stmt><expr><name><name>v</name><operator>.</operator><name>f8</name></name> <operator>=</operator> <call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>leaf</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>f8</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>gbt_t_date</name></expr>:</case>
                <expr_stmt><expr><name><name>v</name><operator>.</operator><name>dt</name></name> <operator>=</operator> <call><name>DatumGetDateADT</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>leaf</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>dt</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>gbt_t_time</name></expr>:</case>
                <expr_stmt><expr><name><name>v</name><operator>.</operator><name>tm</name></name> <operator>=</operator> <call><name>DatumGetTimeADT</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>leaf</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>tm</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>gbt_t_ts</name></expr>:</case>
                <expr_stmt><expr><name><name>v</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <call><name>DatumGetTimestamp</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>leaf</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>gbt_t_cash</name></expr>:</case>
                <expr_stmt><expr><name><name>v</name><operator>.</operator><name>ch</name></name> <operator>=</operator> <call><name>DatumGetCash</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>leaf</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>ch</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><name>leaf</name> <operator>=</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>

        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>indexsize</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>r</name><index>[<expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GISTENTRY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>gistentryinit</name><argument_list>(<argument><expr><operator>*</operator><name>retval</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>page</name></name></expr></argument>,
                      <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert a compressed leaf item back to the original type, for index-only
 * scans.
 */</comment>
<function><type><name>GISTENTRY</name> <modifier>*</modifier></type>
<name>gbt_num_fetch</name><parameter_list>(<parameter><decl><type><name>GISTENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gbtree_ninfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>datum</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>indexsize</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Get the original Datum from the stored datum. On leaf entries, the
     * lower and upper bound are the same. We just grab the lower bound and
     * return it.
     */</comment>
    <switch>switch <condition>(<expr><name><name>tinfo</name><operator>-&gt;</operator><name>t</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>gbt_t_int2</name></expr>:</case>
            <expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int16</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>gbt_t_int4</name></expr>:</case>
            <expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>gbt_t_int8</name></expr>:</case>
            <expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>gbt_t_oid</name></expr>:</case>
        <case>case <expr><name>gbt_t_enum</name></expr>:</case>
            <expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>gbt_t_float4</name></expr>:</case>
            <expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>Float4GetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>float4</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>gbt_t_float8</name></expr>:</case>
            <expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>float8</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>gbt_t_date</name></expr>:</case>
            <expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>DateADTGetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>DateADT</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>gbt_t_time</name></expr>:</case>
            <expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>TimeADTGetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>TimeADT</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>gbt_t_ts</name></expr>:</case>
            <expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>TimestampGetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>Timestamp</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>gbt_t_cash</name></expr>:</case>
            <expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>CashGetDatum</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>Cash</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GISTENTRY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>gistentryinit</name><argument_list>(<argument><expr><operator>*</operator><name>retval</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>page</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
                  <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
** The GiST union method for numerical values
*/</comment>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>gbt_num_union</name><parameter_list>(<parameter><decl><type><name>GBT_NUMKEY</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GistEntryVector</name> <modifier>*</modifier></type><name>entryvec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gbtree_ninfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>, <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>flinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>,
                <decl><type ref="prev"/><name>numranges</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GBT_NUMKEY</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GBT_NUMKEY_R</name></type> <name>o</name></decl>,
                <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>numranges</name> <operator>=</operator> <name><name>entryvec</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>GBT_NUMKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><operator>(</operator><name><name>entryvec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>key</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><name><name>o</name><operator>.</operator><name>lower</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>GBT_NUMKEY</name> <operator>*</operator><operator>)</operator> <name>out</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>o</name><operator>.</operator><name>upper</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>GBT_NUMKEY</name> <operator>*</operator><operator>)</operator> <name>out</name><operator>)</operator><index>[<expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>cur</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numranges</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>GBT_NUMKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><operator>(</operator><name><name>entryvec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>.</operator><name>lower</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>.</operator><name>upper</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><index>[<expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr>;</expr_stmt>
        <comment type="block">/* if out-&gt;lower &gt; cur-&gt;lower, adopt cur as lower */</comment>
        <if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_gt</name></name>) <argument_list>(<argument><expr><name><name>o</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>o</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* if out-&gt;upper &lt; cur-&gt;upper, adopt cur as upper */</comment>
        <if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_lt</name></name>) <argument_list>(<argument><expr><name><name>o</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>o</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
** The GiST same method for numerical values
*/</comment>

<function><type><name>bool</name></type>
<name>gbt_num_same</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GBT_NUMKEY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GBT_NUMKEY</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gbtree_ninfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>, <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>flinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GBT_NUMKEY_R</name></type> <name>b1</name></decl>,
                <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>b1</name><operator>.</operator><name>lower</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>GBT_NUMKEY</name> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b1</name><operator>.</operator><name>upper</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>GBT_NUMKEY</name> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator><index>[<expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr>]</index><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b2</name><operator>.</operator><name>lower</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>GBT_NUMKEY</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b2</name><operator>.</operator><name>upper</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>GBT_NUMKEY</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator><index>[<expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_eq</name></name>) <argument_list>(<argument><expr><name><name>b1</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>b2</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_eq</name></name>) <argument_list>(<argument><expr><name><name>b1</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>b2</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>gbt_num_bin_union</name><parameter_list>(<parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>GBT_NUMKEY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gbtree_ninfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>, <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>flinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GBT_NUMKEY_R</name></type> <name>rd</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>rd</name><operator>.</operator><name>lower</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rd</name><operator>.</operator><name>upper</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>e</name><index>[<expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumGetPointer</name><argument_list>(<argument><expr><operator>*</operator><name>u</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>u</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>palloc0</name><argument_list>(<argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>indexsize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>GBT_NUMKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><operator>*</operator><name>u</name></expr></argument>)</argument_list></call><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>rd</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>GBT_NUMKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><operator>*</operator><name>u</name></expr></argument>)</argument_list></call><operator>)</operator><index>[<expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>rd</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>GBT_NUMKEY_R</name></type> <name>ur</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>ur</name><operator>.</operator><name>lower</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>GBT_NUMKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><operator>*</operator><name>u</name></expr></argument>)</argument_list></call><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ur</name><operator>.</operator><name>upper</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>GBT_NUMKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><operator>*</operator><name>u</name></expr></argument>)</argument_list></call><operator>)</operator><index>[<expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr>]</index><operator>)</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_gt</name></name>) <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>ur</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>rd</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>ur</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>rd</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_lt</name></name>) <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>ur</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>rd</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>ur</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>rd</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<comment type="block">/*
 * The GiST consistent method
 *
 * Note: we currently assume that no datatypes that use this routine are
 * collation-aware; so we don't bother passing collation through.
 */</comment>
<function><type><name>bool</name></type>
<name>gbt_num_consistent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GBT_NUMKEY_R</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>StrategyNumber</name> <modifier>*</modifier></type><name>strategy</name></decl></parameter>,
                   <parameter><decl><type><name>bool</name></type> <name>is_leaf</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>gbtree_ninfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>,
                   <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>flinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>        <name>retval</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><operator>*</operator><name>strategy</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>BTLessEqualStrategyNumber</name></expr>:</case>
            <expr_stmt><expr><name>retval</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_ge</name></name>) <argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>BTLessStrategyNumber</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>is_leaf</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>retval</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_gt</name></name>) <argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>retval</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_ge</name></name>) <argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>BTEqualStrategyNumber</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>is_leaf</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>retval</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_eq</name></name>) <argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_le</name></name>) <argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                          <call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_le</name></name>) <argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>BTGreaterStrategyNumber</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>is_leaf</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>retval</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_lt</name></name>) <argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>retval</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_le</name></name>) <argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>BTGreaterEqualStrategyNumber</name></expr>:</case>
            <expr_stmt><expr><name>retval</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_le</name></name>) <argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>BtreeGistNotEqualStrategyNumber</name></expr>:</case>
            <expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_eq</name></name>) <argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                        <call>(<modifier>*</modifier><name><name>tinfo</name><operator>-&gt;</operator><name>f_eq</name></name>) <argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>retval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <return>return <expr><operator>(</operator><name>retval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** The GiST distance method (for KNN-Gist)
*/</comment>

<function><type><name>float8</name></type>
<name>gbt_num_distance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GBT_NUMKEY_R</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                 <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,
                 <parameter><decl><type><name>bool</name></type> <name>is_leaf</name></decl></parameter>,
                 <parameter><decl><type><specifier>const</specifier> <name>gbtree_ninfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>,
                 <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>flinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>float8</name></type>        <name>retval</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>tinfo</name><operator>-&gt;</operator><name>f_dist</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"KNN search is not supported for btree_gist type %d"</literal></expr></argument>,
             <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>tinfo</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>tinfo</name><operator>-&gt;</operator><name>f_le</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>tinfo</name><operator>-&gt;</operator><name>f_dist</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name><name>tinfo</name><operator>-&gt;</operator><name>f_ge</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>tinfo</name><operator>-&gt;</operator><name>f_dist</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>GIST_SPLITVEC</name> <modifier>*</modifier></type>
<name>gbt_num_picksplit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GistEntryVector</name> <modifier>*</modifier></type><name>entryvec</name></decl></parameter>, <parameter><decl><type><name>GIST_SPLITVEC</name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>gbtree_ninfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>, <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>flinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>OffsetNumber</name></type> <name>i</name></decl>,
                <decl><type ref="prev"/><name>maxoff</name> <init>= <expr><name><name>entryvec</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Nsrt</name>       <modifier>*</modifier></type><name>arr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>nbytes</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>arr</name> <operator>=</operator> <operator>(</operator><name>Nsrt</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>maxoff</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Nsrt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nbytes</name> <operator>=</operator> <operator>(</operator><name>maxoff</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OffsetNumber</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_left</name></name> <operator>=</operator> <operator>(</operator><name>OffsetNumber</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_right</name></name> <operator>=</operator> <operator>(</operator><name>OffsetNumber</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_ldatum</name></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_rdatum</name></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Sort entries */</comment>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>FirstOffsetNumber</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxoff</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <call><name>OffsetNumberNext</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name> <operator>=</operator> <operator>(</operator><name>GBT_NUMKEY</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><operator>(</operator><name><name>entryvec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>qsort_arg</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>arr</name><index>[<expr><name>FirstOffsetNumber</name></expr>]</index></name></expr></argument>, <argument><expr><name>maxoff</name> <operator>-</operator> <name>FirstOffsetNumber</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Nsrt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>qsort_arg_comparator</name><operator>)</operator> <name><name>tinfo</name><operator>-&gt;</operator><name>f_cmp</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We do simply create two parts */</comment>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>FirstOffsetNumber</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxoff</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <call><name>OffsetNumberNext</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>maxoff</name> <operator>-</operator> <name>FirstOffsetNumber</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>gbt_num_bin_union</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>spl_ldatum</name></name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_left</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name></expr>]</index></name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>gbt_num_bin_union</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>spl_rdatum</name></name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_right</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name></expr>]</index></name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>
</unit>
