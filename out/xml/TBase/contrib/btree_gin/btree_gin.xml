<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/btree_gin/btree_gin.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*
 * contrib/btree_gin/btree_gin.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/stratnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/bytea.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/cash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/varbit.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <name>QueryInfo</name>
<block>{
    <decl_stmt><decl><type><name>StrategyNumber</name></type> <name>strategy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>datum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>is_varlena</name></decl>;</decl_stmt>
    <function_decl><type><name>Datum</name></type>        (<modifier>*</modifier><name>typecmp</name>) <parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>QueryInfo</name>;</typedef>

<comment type="block" format="doxygen">/*** GIN support functions shared by all datatypes ***/</comment>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>gin_btree_extract_value</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_varlena</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>datum</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name>       <modifier>*</modifier></type><name>nentries</name> <init>= <expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name>       <modifier>*</modifier></type><name>entries</name> <init>= <expr><operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>is_varlena</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>datum</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>nentries</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * For BTGreaterEqualStrategyNumber, BTGreaterStrategyNumber, and
 * BTEqualStrategyNumber we want to start the index scan at the
 * supplied query datum, and work forward. For BTLessStrategyNumber
 * and BTLessEqualStrategyNumber, we need to start at the leftmost
 * key, and work forward until the supplied query datum (which must be
 * sent along inside the QueryInfo structure).
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>gin_btree_extract_query</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>,
                        <parameter><decl><type><name>bool</name></type> <name>is_varlena</name></decl></parameter>,
                        <parameter><function_decl><type><name>Datum</name></type> (<modifier>*</modifier><name>leftmostvalue</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                        <parameter><function_decl><type><name>Datum</name></type> (<modifier>*</modifier><name>typecmp</name>) <parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>datum</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name>       <modifier>*</modifier></type><name>nentries</name> <init>= <expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StrategyNumber</name></type> <name>strategy</name> <init>= <expr><call><name>PG_GETARG_UINT16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name>      <modifier>*</modifier><modifier>*</modifier></type><name>partialmatch</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pointer</name>   <modifier>*</modifier><modifier>*</modifier></type><name>extra_data</name> <init>= <expr><operator>(</operator><name>Pointer</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name>       <modifier>*</modifier></type><name>entries</name> <init>= <expr><operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QueryInfo</name>  <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>QueryInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name>       <modifier>*</modifier></type><name>ptr_partialmatch</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>nentries</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ptr_partialmatch</name> <operator>=</operator> <operator>*</operator><name>partialmatch</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ptr_partialmatch</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>is_varlena</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>strategy</name></name> <operator>=</operator> <name>strategy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>datum</name></name> <operator>=</operator> <name>datum</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>is_varlena</name></name> <operator>=</operator> <name>is_varlena</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>typecmp</name></name> <operator>=</operator> <name>typecmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>extra_data</name> <operator>=</operator> <operator>(</operator><name>Pointer</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pointer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>*</operator><name>extra_data</name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>strategy</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>BTLessStrategyNumber</name></expr>:</case>
        <case>case <expr><name>BTLessEqualStrategyNumber</name></expr>:</case>
            <expr_stmt><expr><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>leftmostvalue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>ptr_partialmatch</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>BTGreaterEqualStrategyNumber</name></expr>:</case>
        <case>case <expr><name>BTGreaterStrategyNumber</name></expr>:</case>
            <expr_stmt><expr><operator>*</operator><name>ptr_partialmatch</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <case>case <expr><name>BTEqualStrategyNumber</name></expr>:</case>
            <expr_stmt><expr><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>datum</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized strategy number: %d"</literal></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Datum a is a value from extract_query method and for BTLess*
 * strategy it is a left-most value.  So, use original datum from QueryInfo
 * to decide to stop scanning or not.  Datum b is always from index.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>gin_btree_compare_prefix</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>a</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>b</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QueryInfo</name>  <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>QueryInfo</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>res</name></decl>,
                <decl><type ref="prev"/><name>cmp</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>CallerFInfoFunctionCall2</name><argument_list>(
                                                 <argument><expr><name><name>data</name><operator>-&gt;</operator><name>typecmp</name></name></expr></argument>,
                                                 <argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>,
                                                 <argument><expr><call><name>PG_GET_COLLATION</name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>strategy</name></name> <operator>==</operator> <name>BTLessStrategyNumber</name> <operator>||</operator>
                                                  <name><name>data</name><operator>-&gt;</operator><name>strategy</name></name> <operator>==</operator> <name>BTLessEqualStrategyNumber</name><operator>)</operator></expr>
                                                 ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>datum</name></name></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr></argument>,
                                                 <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>strategy</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>BTLessStrategyNumber</name></expr>:</case>
            <comment type="block">/* If original datum &gt; indexed one then return match */</comment>
            <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>BTLessEqualStrategyNumber</name></expr>:</case>
            <comment type="block">/* The same except equality */</comment>
            <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>BTEqualStrategyNumber</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>BTGreaterEqualStrategyNumber</name></expr>:</case>
            <comment type="block">/* If original datum &lt;= indexed one then return match */</comment>
            <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>BTGreaterStrategyNumber</name></expr>:</case>
            <comment type="block">/* If original datum &lt;= indexed one then return match */</comment>
            <comment type="block">/* If original datum == indexed one then continue scan */</comment>
            <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized strategy number: %d"</literal></expr></argument>,
                 <argument><expr><name><name>data</name><operator>-&gt;</operator><name>strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gin_btree_consistent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>gin_btree_consistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name>       <modifier>*</modifier></type><name>recheck</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>recheck</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*** GIN_SUPPORT macro defines the datatype specific functions ***/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIN_SUPPORT</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>is_varlena</name></type></parameter>, <parameter><type><name>leftmostvalue</name></type></parameter>, <parameter><type><name>typecmp</name></type></parameter>)</parameter_list></cpp:macro>                \
<cpp:value>PG_FUNCTION_INFO_V1(gin_extract_value_##type);                                \
Datum                                                                        \
gin_extract_value_##type(PG_FUNCTION_ARGS)                                    \
{                                                                            \
    return gin_btree_extract_value(fcinfo, is_varlena);                        \
}    \
PG_FUNCTION_INFO_V1(gin_extract_query_##type);                                \
Datum                                                                        \
gin_extract_query_##type(PG_FUNCTION_ARGS)                                    \
{                                                                            \
    return gin_btree_extract_query(fcinfo,                                    \
                                   is_varlena, leftmostvalue, typecmp);        \
}    \
PG_FUNCTION_INFO_V1(gin_compare_prefix_##type);                                \
Datum                                                                        \
gin_compare_prefix_##type(PG_FUNCTION_ARGS)                                    \
{                                                                            \
    return gin_btree_compare_prefix(fcinfo);                                \
}</cpp:value></cpp:define>


<comment type="block" format="doxygen">/*** Datatype specifications ***/</comment>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_int2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>SHRT_MIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>int2</argument>, <argument>false</argument>, <argument>leftmostvalue_int2</argument>, <argument>btint2cmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_int4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>INT_MIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>int4</argument>, <argument>false</argument>, <argument>leftmostvalue_int4</argument>, <argument>btint4cmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_int8</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>PG_INT64_MIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>int8</argument>, <argument>false</argument>, <argument>leftmostvalue_int8</argument>, <argument>btint8cmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_float4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>Float4GetDatum</name><argument_list>(<argument><expr><operator>-</operator><call><name>get_float4_infinity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>float4</argument>, <argument>false</argument>, <argument>leftmostvalue_float4</argument>, <argument>btfloat4cmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_float8</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>Float8GetDatum</name><argument_list>(<argument><expr><operator>-</operator><call><name>get_float8_infinity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>float8</argument>, <argument>false</argument>, <argument>leftmostvalue_float8</argument>, <argument>btfloat8cmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_money</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>PG_INT64_MIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>money</argument>, <argument>false</argument>, <argument>leftmostvalue_money</argument>, <argument>cash_cmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_oid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>oid</argument>, <argument>false</argument>, <argument>leftmostvalue_oid</argument>, <argument>btoidcmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_timestamp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>TimestampGetDatum</name><argument_list>(<argument><expr><name>DT_NOBEGIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>timestamp</argument>, <argument>false</argument>, <argument>leftmostvalue_timestamp</argument>, <argument>timestamp_cmp</argument>)</argument_list></macro>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>timestamptz</argument>, <argument>false</argument>, <argument>leftmostvalue_timestamp</argument>, <argument>timestamp_cmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>TimeADTGetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>time</argument>, <argument>false</argument>, <argument>leftmostvalue_time</argument>, <argument>time_cmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_timetz</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TimeTzADT</name>  <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TimeTzADT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>zone</name></name> <operator>=</operator> <operator>-</operator><literal type="number">24</literal> <operator>*</operator> <literal type="number">3600</literal></expr>;</expr_stmt>        <comment type="block">/* XXX is that true? */</comment>

    <return>return <expr><call><name>TimeTzADTPGetDatum</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>timetz</argument>, <argument>false</argument>, <argument>leftmostvalue_timetz</argument>, <argument>timetz_cmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_date</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>DateADTGetDatum</name><argument_list>(<argument><expr><name>DATEVAL_NOBEGIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>date</argument>, <argument>false</argument>, <argument>leftmostvalue_date</argument>, <argument>date_cmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_interval</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Interval</name>   <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Interval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name>DT_NOBEGIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>day</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>month</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>IntervalPGetDatum</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>interval</argument>, <argument>false</argument>, <argument>leftmostvalue_interval</argument>, <argument>interval_cmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_macaddr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>macaddr</name>    <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>macaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>MacaddrPGetDatum</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>macaddr</argument>, <argument>false</argument>, <argument>leftmostvalue_macaddr</argument>, <argument>macaddr_cmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_macaddr8</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>macaddr8</name>   <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>macaddr8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>Macaddr8PGetDatum</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>macaddr8</argument>, <argument>false</argument>, <argument>leftmostvalue_macaddr8</argument>, <argument>macaddr8_cmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_inet</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>inet_in</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><literal type="string">"0.0.0.0/0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>inet</argument>, <argument>true</argument>, <argument>leftmostvalue_inet</argument>, <argument>network_cmp</argument>)</argument_list></macro>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>cidr</argument>, <argument>true</argument>, <argument>leftmostvalue_inet</argument>, <argument>network_cmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_text</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>text</argument>, <argument>true</argument>, <argument>leftmostvalue_text</argument>, <argument>bttextcmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_char</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>CharGetDatum</name><argument_list>(<argument><expr><name>SCHAR_MIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>char</argument>, <argument>false</argument>, <argument>leftmostvalue_char</argument>, <argument>btcharcmp</argument>)</argument_list></macro>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>bytea</argument>, <argument>true</argument>, <argument>leftmostvalue_text</argument>, <argument>byteacmp</argument>)</argument_list></macro>

<comment type="block">/* gin index add to support char(n) and varchar2 */</comment>
<macro><name>GIN_SUPPORT</name><argument_list>(<argument>bpchar</argument>, <argument>true</argument>, <argument>leftmostvalue_text</argument>, <argument>bpcharcmp</argument>)</argument_list></macro>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>varchar2</argument>, <argument>true</argument>, <argument>leftmostvalue_text</argument>, <argument>byteacmp</argument>)</argument_list></macro>


<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_bit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>bit_in</name></expr></argument>,
                               <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>bit</argument>, <argument>true</argument>, <argument>leftmostvalue_bit</argument>, <argument>bitcmp</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_varbit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>varbit_in</name></expr></argument>,
                               <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>varbit</argument>, <argument>true</argument>, <argument>leftmostvalue_varbit</argument>, <argument>bitcmp</argument>)</argument_list></macro>

<comment type="block">/*
 * Numeric type hasn't a real left-most value, so we use PointerGetDatum(NULL)
 * (*not* a SQL NULL) to represent that.  We can get away with that because
 * the value returned by our leftmostvalue function will never be stored in
 * the index nor passed to anything except our compare and prefix-comparison
 * functions.  The same trick could be used for other pass-by-reference types.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMERIC_IS_LEFTMOST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>((x) == NULL)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gin_numeric_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>gin_numeric_cmp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Numeric</name></type>        <name>a</name> <init>= <expr><operator>(</operator><name>Numeric</name><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Numeric</name></type>        <name>b</name> <init>= <expr><operator>(</operator><name>Numeric</name><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>NUMERIC_IS_LEFTMOST</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>NUMERIC_IS_LEFTMOST</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>NUMERIC_IS_LEFTMOST</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_cmp</name></expr></argument>,
                                                <argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>,
                                                <argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_numeric</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>numeric</argument>, <argument>true</argument>, <argument>leftmostvalue_numeric</argument>, <argument>gin_numeric_cmp</argument>)</argument_list></macro>

<comment type="block">/*
 * Use a similar trick to that used for numeric for enums, since we don't
 * actually know the leftmost value of any enum without knowing the concrete
 * type, so we use a dummy leftmost value of InvalidOid.
 *
 * Note that we use CallerFInfoFunctionCall2 here so that enum_cmp
 * gets a valid fn_extra to work with. Unlike most other type comparison
 * routines it needs it, so we can't use DirectFunctionCall2.
 */</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENUM_IS_LEFTMOST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) == InvalidOid)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gin_enum_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>gin_enum_cmp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>a</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>b</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ENUM_IS_LEFTMOST</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>ENUM_IS_LEFTMOST</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>ENUM_IS_LEFTMOST</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>CallerFInfoFunctionCall2</name><argument_list>(
                                                     <argument><expr><name>enum_cmp</name></expr></argument>,
                                                     <argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>,
                                                     <argument><expr><call><name>PG_GET_COLLATION</name><argument_list>()</argument_list></call></expr></argument>,
                                                     <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>,
                                                     <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leftmostvalue_enum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>GIN_SUPPORT</name><argument_list>(<argument>anyenum</argument>, <argument>false</argument>, <argument>leftmostvalue_enum</argument>, <argument>gin_enum_cmp</argument>)</argument_list></macro>
</unit>
