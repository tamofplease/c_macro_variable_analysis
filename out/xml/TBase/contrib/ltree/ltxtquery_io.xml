<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/ltree/ltxtquery_io.c"><comment type="block">/*
 * txtquery io
 * Teodor Sigaev &lt;teodor@stack.net&gt;
 * contrib/ltree/ltxtquery_io.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crc32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltxtq_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltxtq_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/* parser's states */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAITOPERAND</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INOPERAND</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAITOPERATOR</name></cpp:macro>    <cpp:value>3</cpp:value></cpp:define>

<comment type="block">/*
 * node of query tree, also used
 * for storing polish notation in parser
 */</comment>
<typedef>typedef <type><struct>struct <name>NODE</name>
<block>{
    <decl_stmt><decl><type><name>int32</name></type>        <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16</name></type>        <name>distance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16</name></type>        <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16</name></type>        <name>flag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>NODE</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>NODE</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>count</name></decl>;</decl_stmt>
    <comment type="block">/* reverse polish notation in list (for temporary usage) */</comment>
    <decl_stmt><decl><type><name>NODE</name>       <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
    <comment type="block">/* number in str */</comment>
    <decl_stmt><decl><type><name>int32</name></type>        <name>num</name></decl>;</decl_stmt>

    <comment type="block">/* user-friendly operand */</comment>
    <decl_stmt><decl><type><name>int32</name></type>        <name>lenop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>sumlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>curop</name></decl>;</decl_stmt>
}</block></struct></type> <name>QPRS_STATE</name>;</typedef>

<comment type="block">/*
 * get token from query string
 */</comment>
<function><type><specifier>static</specifier> <name>int32</name></type>
<name>gettoken_query</name><parameter_list>(<parameter><decl><type><name>QPRS_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>lenval</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strval</name></decl></parameter>, <parameter><decl><type><name>uint16</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>charlen</name></decl>;</decl_stmt>

    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>charlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch>switch <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>WAITOPERAND</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>
                    <return>return <expr><name>OPR</name></expr>;</return>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
                    <return>return <expr><name>OPEN</name></expr>;</return>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><call><name>ISALNUM</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>INOPERAND</name></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>*</operator><name>strval</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>*</operator><name>lenval</name> <operator>=</operator> <name>charlen</name></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>*</operator><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>t_isspace</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operand syntax error"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>INOPERAND</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>ISALNUM</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"modifiers syntax error"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><operator>*</operator><name>lenval</name> <operator>+=</operator> <name>charlen</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>LVAR_SUBLEXEME</name></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>LVAR_INCASE</name></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><operator>*</operator><name>flag</name> <operator>|=</operator> <name>LVAR_ANYEND</name></expr>;</expr_stmt></block_content></block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>WAITOPERATOR</name></expr>;</expr_stmt>
                    <return>return <expr><name>VAL</name></expr>;</return>
                </block_content>}</block></else></if_stmt>
                <break>break;</break>
            <case>case <expr><name>WAITOPERATOR</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>WAITOPERAND</name></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
                    <return>return <expr><name>OPR</name></expr>;</return>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
                    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ERR</name></expr> </then><else>: <expr><name>CLOSE</name></expr></else></ternary></expr>;</return>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>ERR</name></expr> </then><else>: <expr><name>END</name></expr></else></ternary></expr>;</return></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>t_iseq</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
            <default>default:</default>
                <return>return <expr><name>ERR</name></expr>;</return>
                <break>break;</break>
        </block_content>}</block></switch>

        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name> <operator>+=</operator> <name>charlen</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * push new one in polish notation reverse view
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pushquery</name><parameter_list>(<parameter><decl><type><name>QPRS_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>distance</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>lenval</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>NODE</name>       <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>NODE</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value is too big"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>lenval</name> <operator>&gt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operand is too long"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>distance</name></name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>lenval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This function is used for query_txt parsing
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pushval_asis</name><parameter_list>(<parameter><decl><type><name>QPRS_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>strval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenval</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>lenval</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"word is too long"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pushquery</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>ltree_crc32_sz</name><argument_list>(<argument><expr><name>strval</name></expr></argument>, <argument><expr><name>lenval</name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><name><name>state</name><operator>-&gt;</operator><name>curop</name></name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><name>lenval</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>curop</name></name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>op</name></name> <operator>+</operator> <name>lenval</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>lenop</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32</name></type>        <name>tmp</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>curop</name></name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lenop</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>state</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>lenop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>curop</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>op</name></name> <operator>+</operator> <name>tmp</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>state</name><operator>-&gt;</operator><name>curop</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>strval</name></expr></argument>, <argument><expr><name>lenval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>curop</name></name> <operator>+=</operator> <name>lenval</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>curop</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>curop</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sumlen</name></name> <operator>+=</operator> <name>lenval</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACKDEPTH</name></cpp:macro>        <cpp:value>32</cpp:value></cpp:define>
<comment type="block">/*
 * make polish notation of query
 */</comment>
<function><type><specifier>static</specifier> <name>int32</name></type>
<name>makepol</name><parameter_list>(<parameter><decl><type><name>QPRS_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>        <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
                <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>lenval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>strval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name><name>stack</name><index>[<expr><name>STACKDEPTH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>lenstack</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16</name></type>        <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* since this function recurses, it could be driven to stack overflow */</comment>
    <expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>gettoken_query</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lenval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>END</name></expr>)</condition>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>VAL</name></expr>:</case>
                <expr_stmt><expr><call><name>pushval_asis</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VAL</name></expr></argument>, <argument><expr><name>strval</name></expr></argument>, <argument><expr><name>lenval</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <while>while <condition>(<expr><name>lenstack</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>stack</name><index>[<expr><name>lenstack</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'&amp;'</literal> <operator>||</operator>
                                    <name><name>stack</name><index>[<expr><name>lenstack</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'!'</literal><operator>)</operator></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>lenstack</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>pushquery</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>OPR</name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>lenstack</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
                <break>break;</break>
            <case>case <expr><name>OPR</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>lenstack</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'|'</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>pushquery</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>OPR</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>lenstack</name> <operator>==</operator> <name>STACKDEPTH</name></expr>)</condition><block type="pseudo"><block_content>
                        <comment type="block">/* internal error */</comment>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"stack too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>stack</name><index>[<expr><name>lenstack</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lenstack</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <break>break;</break>
            <case>case <expr><name>OPEN</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>makepol</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERR</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
                <while>while <condition>(<expr><name>lenstack</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>stack</name><index>[<expr><name>lenstack</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'&amp;'</literal> <operator>||</operator>
                                    <name><name>stack</name><index>[<expr><name>lenstack</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'!'</literal><operator>)</operator></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>lenstack</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>pushquery</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>OPR</name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>lenstack</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
                <break>break;</break>
            <case>case <expr><name>CLOSE</name></expr>:</case>
                <while>while <condition>(<expr><name>lenstack</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>lenstack</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>pushquery</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>OPR</name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>lenstack</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while><empty_stmt>;</empty_stmt>
                <return>return <expr><name>END</name></expr>;</return>
                <break>break;</break>
            <case>case <expr><name>ERR</name></expr>:</case>
            <default>default:</default>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><name>ERR</name></expr>;</return>

        </block_content>}</block></switch>
    </block_content>}</block></while>
    <while>while <condition>(<expr><name>lenstack</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>lenstack</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pushquery</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>OPR</name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>lenstack</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while><empty_stmt>;</empty_stmt>
    <return>return <expr><name>END</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>findoprnd</name><parameter_list>(<parameter><decl><type><name>ITEM</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* since this function recurses, it could be driven to stack overflow. */</comment>
    <expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>VAL</name> <operator>||</operator> <name><name>ptr</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>VALTRUE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ptr</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>ptr</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'!'</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ptr</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>findoprnd</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>ITEM</name>       <modifier>*</modifier></type><name>curitem</name> <init>= <expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type>        <name>tmp</name> <init>= <expr><operator>*</operator><name>pos</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>findoprnd</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>curitem</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>-</operator> <name>tmp</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>findoprnd</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * input
 */</comment>
<function><type><specifier>static</specifier> <name>ltxtquery</name> <modifier>*</modifier></type>
<name>queryin</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QPRS_STATE</name></type>    <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ltxtquery</name>  <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>commonlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ITEM</name>       <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NODE</name>       <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BS_DEBUG</name></cpp:ifdef>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>pbuf</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* init state */</comment>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>WAITOPERAND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* init list of operand */</comment>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>sumlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>lenop</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>curop</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>op</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>lenop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>state</name><operator>.</operator><name>curop</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <comment type="block">/* parse query &amp; make polish notation (postfix, but in reverse order) */</comment>
    <expr_stmt><expr><call><name>makepol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Empty query."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>LTXTQUERY_TOO_BIG</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>sumlen</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ltxtquery is too large"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>commonlen</name> <operator>=</operator> <call><name>COMPUTESIZE</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>sumlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>query</name> <operator>=</operator> <operator>(</operator><name>ltxtquery</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>commonlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>commonlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* set item in polish notation */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>str</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>str</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>distance</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>str</name><operator>-&gt;</operator><name>distance</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>str</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>str</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>str</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* set user friendly-operand view */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>GETOPERAND</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>state</name><operator>.</operator><name>op</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>sumlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* set left operand's position for every operator */</comment>
    <expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>findoprnd</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>query</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * in without morphology
 */</comment>
<function><type><name>Datum</name></type>
<name>ltxtq_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><call><name>queryin</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * out function
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>ITEM</name>       <modifier>*</modifier></type><name>curpol</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>buflen</name></decl>;</decl_stmt>
}</block></struct></type> <name>INFIX</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESIZEBUF</name><parameter_list>(<parameter><type><name>inf</name></type></parameter>,<parameter><type><name>addsize</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>while( ( (inf)-&gt;cur - (inf)-&gt;buf ) + (addsize) + 1 &gt;= (inf)-&gt;buflen ) \
{ \
    int32 len = (inf)-&gt;cur - (inf)-&gt;buf; \
    (inf)-&gt;buflen *= 2; \
    (inf)-&gt;buf = (char*) repalloc( (void*)(inf)-&gt;buf, (inf)-&gt;buflen ); \
    (inf)-&gt;cur = (inf)-&gt;buf + len; \
}</cpp:value></cpp:define>

<comment type="block">/*
 * recursive walk on tree and print it in
 * infix (human-readable) view
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>infix</name><parameter_list>(<parameter><decl><type><name>INFIX</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* since this function recurses, it could be driven to stack overflow. */</comment>
    <expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VAL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>op</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>op</name></name> <operator>+</operator> <name><name>in</name><operator>-&gt;</operator><name>curpol</name><operator>-&gt;</operator><name>distance</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>RESIZEBUF</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name><operator>-&gt;</operator><name>length</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>*</operator><name>op</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>=</operator> <operator>*</operator><name>op</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>op</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_SUBLEXEME</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_INCASE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'@'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_ANYEND</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'!'</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type>        <name>isopr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>RESIZEBUF</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPR</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>isopr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RESIZEBUF</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="string">"( "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>infix</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>isopr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>isopr</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>RESIZEBUF</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="string">" )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32</name></type>        <name>op</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>INFIX</name></type>        <name>nrm</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'|'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>first</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>RESIZEBUF</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="string">"( "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>nrm</name><operator>.</operator><name>curpol</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>curpol</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nrm</name><operator>.</operator><name>op</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>op</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nrm</name><operator>.</operator><name>buflen</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nrm</name><operator>.</operator><name>cur</name></name> <operator>=</operator> <name><name>nrm</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>nrm</name><operator>.</operator><name>buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* get right operand */</comment>
        <expr_stmt><expr><call><name>infix</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nrm</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* get &amp; print left operand */</comment>
        <expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>curpol</name></name> <operator>=</operator> <name><name>nrm</name><operator>.</operator><name>curpol</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infix</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* print operator &amp; right operand */</comment>
        <expr_stmt><expr><call><name>RESIZEBUF</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name><name>nrm</name><operator>.</operator><name>cur</name></name> <operator>-</operator> <name><name>nrm</name><operator>.</operator><name>buf</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="string">" %c %s"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>nrm</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>nrm</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'|'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>first</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>RESIZEBUF</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="string">" )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ltxtq_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ltxtquery</name>  <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>PG_GETARG_LTXTQUERY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>INFIX</name></type>        <name>nrm</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Empty query."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>nrm</name><operator>.</operator><name>curpol</name></name> <operator>=</operator> <call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nrm</name><operator>.</operator><name>buflen</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nrm</name><operator>.</operator><name>cur</name></name> <operator>=</operator> <name><name>nrm</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>nrm</name><operator>.</operator><name>buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>nrm</name><operator>.</operator><name>cur</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nrm</name><operator>.</operator><name>op</name></name> <operator>=</operator> <call><name>GETOPERAND</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>infix</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nrm</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name><name>nrm</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
